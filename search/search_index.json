{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stemmer","trimmer","stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":""},{"location":"index.html#student-personal-wiki","title":"Student Personal Wiki","text":"Info <p>This is where I put my random Tech Notes that I find useful and that I share with my students!</p>"},{"location":"index.html#references","title":"References","text":"<p>GitHub Pages shows how to turn your mkdocs output directory into a freely hosted GitHub Site</p>"},{"location":"MacOS_Overview.html","title":"MacOS Overview","text":""},{"location":"MacOS_Overview.html#macos-overview","title":"MacOS Overview","text":""},{"location":"MacOS_Overview.html#mission-control","title":"Mission Control","text":"<ul> <li>Shows all Open Winodows + Allows for Multiple Desktops<ul> <li>Drag Items Onto new Desktop to Add</li> <li>Arrow between them with Control + Left or Right Arrows</li> </ul> </li> <li>4 Finger Gesture UP / DOWN to close</li> <li>Arrow &gt; 3 Window Button</li> </ul>"},{"location":"MacOS_Overview.html#launchpad","title":"Launchpad","text":"<ul> <li>Easy access to installed apps</li> <li>5 Finter Gesture IN / OUT to close</li> <li>Arrow &gt; 6 Window Button</li> </ul>"},{"location":"MacOS_Overview.html#mac-desktop","title":"Mac Desktop","text":""},{"location":"MacOS_Overview.html#finder","title":"Finder","text":"<ul> <li>Finder menu bar\u2019s Go feature can access shares</li> <li>Access to files and folders<ul> <li>Applications are the mac binary programs we can run</li> <li>Utilities support a Mac with things like terminal or disk access.</li> <li>Locations are storage locations including remote/shared locations</li> <li>Tags can be used to tag important files</li> </ul> </li> </ul>"},{"location":"MacOS_Overview.html#apple-menu","title":"Apple Menu","text":"<ul> <li>Access to System Information, Preferences, App Store, recent items, Force Quit options<ul> <li>Preferences: System wide settings and features<ul> <li>Track Pad</li> <li>iCloud </li> <li>Time Machine</li> <li>Users &amp; Groups</li> <li>Sharing like Screen Sharing or Remote Login</li> <li>Network Settings</li> <li>Spotlight (Search Utility)</li> </ul> </li> </ul> </li> </ul>"},{"location":"MacOS_Overview.html#spotlight","title":"Spotlight","text":"<ul> <li>Command + SpaceBar</li> </ul>"},{"location":"MacOS_Overview.html#keychain","title":"KeyChain","text":"<ul> <li>MacOS Password Manager found under Utilities</li> </ul>"},{"location":"MacOS_Overview.html#screen-sharing","title":"Screen Sharing","text":"<ul> <li>System Preferences &gt; Sharing</li> </ul>"},{"location":"MacOS_Overview.html#remote-disc","title":"Remote Disc","text":"<ul> <li>Allows access to Optical drive via the network.</li> </ul>"},{"location":"MacOS_Overview.html#terminal","title":"Terminal","text":"<ul> <li>Super User Command Line Control</li> </ul>"},{"location":"archive.html","title":"Index","text":""},{"location":"archive.html#class-notes","title":"Class Notes","text":""},{"location":"archive.html#cis-50","title":"CIS-50","text":""},{"location":"archive.html#week-1","title":"Week 1","text":"<ul> <li>Database Systems</li> </ul>"},{"location":"archive.html#week-2","title":"Week 2","text":"<ul> <li>Data Models</li> </ul>"},{"location":"archive.html#week-3","title":"Week 3","text":"<ul> <li>The Relational Database Model</li> <li>Joins</li> </ul>"},{"location":"archive.html#week-4","title":"Week 4","text":"<ul> <li>Entity Relationship Modeling</li> </ul>"},{"location":"archive.html#cis-18","title":"CIS-18","text":""},{"location":"archive.html#week-1_1","title":"Week 1","text":"<ul> <li>Review</li> <li>Sprint Planning</li> <li>User Story Intro</li> <li>User Story Lesson</li> </ul>"},{"location":"archive.html#week-2_1","title":"Week 2","text":"<ul> <li>Encapsulation, Inheritance, Abstraction, and Polymorphism</li> </ul>"},{"location":"archive.html#week-3_1","title":"Week 3","text":"<ul> <li>Key OO Principles</li> <li>Observer Design Pattern</li> </ul>"},{"location":"archive.html#week-4_1","title":"Week 4","text":"<ul> <li>Decorator Design Pattern</li> </ul>"},{"location":"archive.html#cis-12","title":"CIS-12","text":""},{"location":"aug22_lesson.html","title":"Introduction to Java","text":""},{"location":"aug22_lesson.html#introduction-to-java","title":"Introduction to Java","text":""},{"location":"aug22_lesson.html#what-is-programming","title":"What is Programming","text":"<ul> <li>Set of instructions organized into an steps to solve a problem (Algorithm)<ul> <li>Computation, text manipulation, searching, graphics</li> </ul> </li> <li>Every language<ul> <li>Input, output, math, decisions (conditional), repetition (while, for, do\u2026while loops)</li> </ul> </li> </ul>"},{"location":"aug22_lesson.html#what-is-computer-science","title":"What is Computer Science","text":"<ul> <li>Study of and discovery of algorithms (or creating the steps to solve a problem)<ul> <li>Reduce computational expense</li> <li>Novel ways to solve a problem</li> </ul> </li> <li>Program (Algorithm) errors are called Bugs</li> </ul>"},{"location":"aug22_lesson.html#programming-languages","title":"Programming Languages","text":"<ul> <li>Low Level Language: machine code like the RISC vs CISC assembly language battle<ul> <li>RISC = 1 instruction / cycle VERSUS CISC = Many Instructions / several cycles</li> <li>Complex Instruction Set Computer<ul> <li>CISC 80x86 is what Intel uses</li> </ul> </li> <li>Reduced Instruction Set Computer<ul> <li>RISC is what many ARM processors use</li> </ul> </li> </ul> </li> <li>High Level Languages<ul> <li>Easier to understand, formatting human readable <pre><code>; ----------------------------------------------------------------------------------------\n; Writes \"Hello, World\" to the console using only system calls. Runs on 64-bit Linux only.\n; To assemble and run:\n;\n;     nasm -felf64 hello.asm &amp;&amp; ld hello.o &amp;&amp; ./a.out\n; ----------------------------------------------------------------------------------------\n\n          global    _start\n\n          section   .text\n_start:   mov       rax, 1                  ; system call for write\n          mov       rdi, 1                  ; file handle 1 is stdout\n          mov       rsi, message            ; address of string to output\n          mov       rdx, 13                 ; number of bytes\n          syscall                           ; invoke operating system to do the write\n          mov       rax, 60                 ; system call for exit\n          xor       rdi, rdi                ; exit code 0\n          syscall                           ; invoke operating system to exit\n\n          section   .data\nmessage:  db        \"Hello, World\", 10      ; note the newline at the end\n</code></pre> VERSUS <pre><code>/**\nWrites \"Hello, World\" to the console.\n\njavac HelloWorld.java  # compiled to byte-code.\njava HelloWorld        # Looks for and executes main.\n*/\n\nclass HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\"); \n    }\n}\n</code></pre></li> <li>Less cumbersome to debug</li> <li>Portable</li> </ul> </li> <li>Types of High Level Languages</li> <li>Note on Compiling - In layman\u2019s speak, a program that converts a program in one programming language into another program in another programming language.</li> <li>Compiled to machine code AOT (Ahead of Time): C, C++<ul> <li>Must be compiled to the target architecture (80x86, ARMv8, etc.)</li> </ul> </li> <li>Compile to byte-code, then Interpreted JIT (Just in Time): Java<ul> <li>Portable to any system with bytcode interpreter (JVM)</li> </ul> </li> <li>Interpreted: Scripting Languages<ul> <li>Extremely Portable</li> <li>Slower due to fewer runtime optimizations and fully just in time compiling</li> </ul> </li> </ul>"},{"location":"aug22_lesson.html#description-of-helloworld","title":"Description of HelloWorld","text":"<ul> <li>class: template used to create objects<ul> <li>Defines object data types.</li> <li>Contains methods to get/set/modify the object.</li> </ul> </li> <li>class == category</li> <li>object == item in that category</li> <li>static: A static method belongs to the class rather than instances. This also goes for static variables.</li> <li>void: It Returns NOTHING - We believe in nothing, Lebowski. Nothing. == VOID</li> <li>public: Modifier that makes the method (variable, etc.) accessible OUTSIDE the class</li> </ul>"},{"location":"aug22_lesson.html#a-bit-about-git","title":"A Bit About Git","text":"<p>Git Flow * Will demo full git turn in process at the end of class.</p>"},{"location":"aug22_lesson.html#learning","title":"Learning!","text":"<ul> <li>Learn by doing - code, code, code, all day long</li> <li>Learn tools that are relevant - IntelliJ, Git</li> <li>Learn Languages where the jobs are - Python, Java, Web-Technologies (React, Next.js, Vue.js, GraphQL)</li> <li>Ask for help! Be agile, Pair Program, run a personal (OR TEAM) scrum.<ul> <li>Questions to ask in Team/Personal scrum every day:<ul> <li>What did you do yesterday?</li> <li>What will you do today?</li> <li>What\u2019s getting in your way?</li> <li>Something fun I learned!</li> </ul> </li> </ul> </li> </ul>"},{"location":"aug23_lesson.html","title":"Today's Lesson","text":""},{"location":"aug23_lesson.html#todays-lesson","title":"Today\u2019s Lesson","text":""},{"location":"aug23_lesson.html#introduction","title":"Introduction","text":""},{"location":"aug23_lesson.html#cable-demonstration","title":"Cable Demonstration","text":"<ul> <li>Cat-6 and RJ45</li> </ul>"},{"location":"aug23_lesson.html#networking-commands","title":"Networking Commands","text":"<ul> <li>Commands on the cmd prompt CLI</li> </ul>"},{"location":"aug30_lesson.html","title":"Lab 1 Review","text":""},{"location":"aug30_lesson.html#lab-1-review","title":"Lab 1 Review","text":""},{"location":"aug30_lesson.html#part-1---ipconfig","title":"Part 1 - Ipconfig","text":"<pre><code>    ipconfig /all\n</code></pre> <ul> <li>IPv4 Address should be something like 192.168.1.15</li> <li>Subnet mask should be something like 255.255.255.0</li> <li>Default Gateway should be something like 192.168.1.1</li> <li>Should see Autoconfiguration Enabled Meaning DHCP</li> <li>Should see Lease Obtained and Expires Allowing to calculate lease time</li> <li>Make and model of Ethernet is listed under Description</li> <li>Mac Address is Physical Address can also be retrieved via getmac<ul> <li>Unique on the network</li> <li>Can be spoofed</li> <li>Allows for Ethernet communication, wraps IP packets and routes on LAN only</li> </ul> </li> <li>DNS Servers should be listed under DNS Servers</li> </ul>"},{"location":"aug30_lesson.html#part-2---ipconfig-release","title":"Part 2 - Ipconfig Release","text":"<pre><code>    ipconfig /release\n    ipconfig /all\n</code></pre> <ul> <li>Releases autoconfiguration IP, DNS, gateway, etc.</li> <li>IP is 169.254.176.94, the APIPA IP - No IP was leased, DHCP failure</li> <li>subnet mask is now 255.255.0.0 </li> <li>Default Gateway no longer configured</li> <li>Physical MAC is unrelated, does not change.</li> <li>Ping Google DNS is a transmit failure</li> <li>There is no browser connectivity, no DNS, No IP means no routing to the Internet</li> </ul>"},{"location":"aug30_lesson.html#part-3---ipconfig-renew","title":"Part 3 - Ipconfig Renew","text":"<pre><code>    ipconfig /renew\n    ipconfig /all\n</code></pre> <ul> <li>IPv4 Address is now VERY likely 192.168.1.15 again, but could be different depending on lease times and network conditions.</li> <li>Lease Obtained and Expires times will have updated, but the configured DHCP overall lease time is dependent on the server config, so it didn\u2019t change.</li> <li>DNS is now back (DHCP Assigned) so ping 8.8.8.8 replies</li> <li>With an IP and DNS, we can now route to and browse the internet again.</li> </ul>"},{"location":"aug30_lesson.html#part-4---static-ip","title":"Part 4 - Static IP","text":"<ul> <li>Windows Config should have showed Obtain an IP address automatically in IPv4 Properties</li> <li>Depending on your Static Settings you COULD achieve connectivity. Still need to be on the same network with same Gateway, OR add routes via route add command</li> </ul>"},{"location":"aug30_lesson.html#part-5---dns","title":"Part 5 - DNS","text":"<pre><code>    ipconfig /displaydns\n    ipconfig /displaydns | find /c /v \"\"\n    # OR\n    ipconfig /displaydns | find /c /i \"search str\"\n    ipconfig /flushdns\n    netstat\n</code></pre> <ul> <li>If you can\u2019t get to a web-site, but other sites work, and other systems can get to the site, it may be local DNS cache.</li> <li>Display DNS shows all the records in your local DNS cache (42 records, could vary though)</li> <li>Flush DNS clears your local cahce forcing your system to query its DNS Server and refresh its local cache</li> <li>NetStat command shows open network connections, and can be used to find the programs the connect to!!!</li> </ul>"},{"location":"aug30_lesson.html#tools-review","title":"TOOLS Review","text":"<ul> <li>ESD Strap, Screwdrivers, tweezers, flashlight, compressed air</li> <li>Loopback plug: tests NIC ports</li> <li>Post Card: Can be used to test PCI, PCIe, USB, post errors</li> <li>Power Supply Tester: Can be used to test function/voltage of power supply</li> <li>Multi-Meter: Continuity of network cables, resistance, power supply voltage</li> <li>Network Toner: Find cables snaked through walls and ceilings</li> </ul>"},{"location":"aug30_lesson.html#chapter-notes","title":"Chapter Notes","text":"<ul> <li>Keep GOOD notes, mkdocs, cell-phone pictures, draw pictures</li> <li>Shutdown system, unplug it, press power to drain, put on ESD strap</li> <li>Internal: MB, CPU, Expansion, Mem, </li> <li>Case form-factors are ATX, MicroATX, MiniITX, NanoITX, PicoITX</li> <li>BIOS/UEFI Mange essential devices K,V,M, Storage</li> <li>Power Supplys today use 24-pin P1 with 4 or 8 pin Aux.</li> </ul>"},{"location":"aug30_lesson.html#references","title":"References","text":"<ul> <li>K</li> </ul>"},{"location":"aug31_lesson.html","title":"Variables and Operators","text":""},{"location":"aug31_lesson.html#variables-and-operators","title":"Variables and Operators","text":""},{"location":"aug31_lesson.html#declaring-variables","title":"Declaring Variables","text":"<ul> <li> <p>Allocate Storage Location of that Data-Type</p> <pre><code>String aString;\nint anInt;\ndouble a64BitFloat;\nfloat a32BitFloat;\nchar aCharacter;\n</code></pre> </li> <li> <p>Note the capital letter in String</p> <ul> <li>A string is Special Object in Java</li> <li>OK, so why don\u2019t we have to create strings like we create other objects i.e. <code>String aString = new String(\"aString\");</code>?<ul> <li>Java founders determined Strings were so common, Strings needed to be treated differently (i.e. reference the same literal string even if assigned to 2 different variables.</li> <li>Consider the following blocks of code: <pre><code>String a = \"Next iteration\";\nString b = \"Next iteration\";\nSystem.out.println(\"What will this be?\" +  ((a == b) ? \"True\" : \"False\") ); // ? are they the same ?\n\nfor (int i = 0; i &lt; 10; i++) {\n  System.out.println(\"Next iteration\"); // If the literal String weren't a reference, this would instantiate the string every single loop.\n}\n</code></pre></li> <li>Thus, Strings are interned to:<ul> <li>Lower memory requirements.</li> <li>Make comparisons faster.</li> </ul> </li> <li>BUT WAIT, if strings are shared/cached references, wouldn\u2019t changing the string for variable a also change it for b?<ul> <li>Yes, but that\u2019s why the designers also made literal strings immutable. String methods that modify a string will return new string, not the original literal.</li> <li>This is also why you should not compare strings with  but a.equals(b) because  compares the reference while the other compares the string.</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Declare variables of the same type on 1 line!</p> <pre><code>int a, b, c = 5; // This is OK!\n</code></pre> </li> <li> <p>Variables names must be unique (within its scope), and not a reserved word like static, private, public, final, class, etc.</p> </li> <li> <p>Variables are case sensitive</p> <pre><code>int firstName = 1;\nint FirstName = 2;\n</code></pre> </li> <li> <p>Camel Case is Java\u2019s preferred naming convention.</p> </li> </ul>"},{"location":"aug31_lesson.html#assignment---initialize-a-variable","title":"Assignment - Initialize a Variable","text":"<ul> <li>Stores/Updates variable value, but you must assign the right data-type.<pre><code>String a = \"123\";\nString a = 123; // Error: wrong type.\n</code></pre> </li> </ul>"},{"location":"aug31_lesson.html#state---forget-diagrams---use-intellij-debug","title":"State - Forget diagrams - Use IntelliJ debug","text":"<ul> <li>Why waste your time, use the state diagrams that already exist in your IDE ;-)</li> </ul>"},{"location":"aug31_lesson.html#arithmetic-operators","title":"Arithmetic Operators","text":"<ul> <li>Symbols for doing Math</li> <li>See Arithmetic Operators </li> <li>Type aware, int division is int only result! (i.e. 59/60 == 0)</li> </ul>"},{"location":"aug31_lesson.html#operations-with-floating-point","title":"Operations with Floating Point","text":"<ul> <li>Fractional numbers, with fractional precision, BUT NOT PERFECT!, which leads to rounding errors.<ul> <li>Irrational numbers can\u2019t be represented.</li> <li>Nor can repeating fractions.</li> </ul> </li> <li>1 or more double numbers will cause operators to use floating point calculations.</li> <li>If you\u2019re equation depends on fractional precision use doubles to avoid 59/60 error, or convert to whole numbers like $$$ libraries do.</li> <li>Java will implicitly convert integer assignment to a double, however.</li> </ul>"},{"location":"aug31_lesson.html#operators-for-strings","title":"Operators for Strings","text":"<ul> <li>+ concatenates, enough said.</li> </ul>"},{"location":"aug31_lesson.html#errors","title":"Errors","text":"<ul> <li>Compile Errors - Syntax errors, Keywords as variable names, etc. causes Parser to barf.</li> <li>Runtime Errors - Errors that cause exceptions only when the program is run i.e. FileNotFoundException</li> <li>Logic Error - Compiles and runs without errors, but the output is invalid. <code>double percent = 59 / 60;</code></li> </ul>"},{"location":"aug31_lesson.html#talk-about-assignment","title":"Talk About Assignment!","text":""},{"location":"markdown-cheat-sheet.html","title":"Markdown","text":""},{"location":"markdown-cheat-sheet.html#markdown-cheat-sheet","title":"Markdown Cheat Sheet","text":"<p>This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can\u2019t cover every edge case, so if you need more information about any of these elements, refer to the reference guides for basic syntax and extended syntax.</p>"},{"location":"markdown-cheat-sheet.html#basic-syntax","title":"Basic Syntax","text":"<p>These are the elements outlined in John Gruber\u2019s original design document. All Markdown applications support these elements.</p>"},{"location":"markdown-cheat-sheet.html#heading","title":"Heading","text":"<pre><code># H1\n## H2\n### H3\n</code></pre>"},{"location":"markdown-cheat-sheet.html#bold","title":"Bold","text":"<pre><code>**bold text**\n</code></pre>"},{"location":"markdown-cheat-sheet.html#italic","title":"Italic","text":"<pre><code>*italicized text*\n</code></pre>"},{"location":"markdown-cheat-sheet.html#blockquote","title":"Blockquote","text":"<pre><code>&gt; blockquote\n</code></pre>"},{"location":"markdown-cheat-sheet.html#ordered-list","title":"Ordered List","text":"<pre><code>1. First item\n1. Second item\n1. Third item\n</code></pre>"},{"location":"markdown-cheat-sheet.html#unordered-list","title":"Unordered List","text":"<pre><code>- First item\n- Second item\n- Third item\n</code></pre>"},{"location":"markdown-cheat-sheet.html#code","title":"Code","text":"<pre><code>`code`\n</code></pre>"},{"location":"markdown-cheat-sheet.html#horizontal-rule","title":"Horizontal Rule","text":"<pre><code>---\n</code></pre>"},{"location":"markdown-cheat-sheet.html#link","title":"Link","text":"<pre><code>[Markdown Guide](https://www.markdownguide.org)\n</code></pre>"},{"location":"markdown-cheat-sheet.html#image","title":"Image","text":"<pre><code>![alt text](https://www.markdownguide.org/assets/images/tux.png)\n</code></pre>"},{"location":"markdown-cheat-sheet.html#extended-syntax","title":"Extended Syntax","text":"<pre><code>These elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements.\n</code></pre>"},{"location":"markdown-cheat-sheet.html#table","title":"Table","text":"<pre><code>| Syntax | Description |\n| ----------- | ----------- |\n| Header | Title |\n| Paragraph | Text |\n</code></pre>"},{"location":"markdown-cheat-sheet.html#fenced-code-block","title":"Fenced Code Block","text":"<pre><code>    ```\n    {\n      \"firstName\": \"John\",\n      \"lastName\": \"Smith\",\n      \"age\": 25\n    }\n    ```\n</code></pre>"},{"location":"markdown-cheat-sheet.html#footnote","title":"Footnote","text":"<pre><code>Here's a sentence with a footnote. [^1]\n\n[^1]: This is the footnote.\n</code></pre>"},{"location":"markdown-cheat-sheet.html#heading-id","title":"Heading ID","text":"<pre><code>### My Great Heading {#custom-id}\n</code></pre>"},{"location":"markdown-cheat-sheet.html#definition-list","title":"Definition List","text":"<pre><code>term\n: definition\n</code></pre>"},{"location":"markdown-cheat-sheet.html#strikethrough","title":"Strikethrough","text":"<pre><code>~~The world is flat.~~\n</code></pre>"},{"location":"markdown-cheat-sheet.html#task-list","title":"Task List","text":"<pre><code>- [x] Write the press release\n- [ ] Update the website\n- [ ] Contact the media\n</code></pre>"},{"location":"markdown-cheat-sheet.html#emoji","title":"Emoji","text":"<pre><code>That is so funny! :joy:\n\n(See also [Copying and Pasting Emoji](https://www.markdownguide.org/extended-syntax/#copying-and-pasting-emoji))\n</code></pre>"},{"location":"markdown-cheat-sheet.html#highlight","title":"Highlight","text":"<pre><code>I need to highlight these ==very important words==.\n</code></pre>"},{"location":"markdown-cheat-sheet.html#subscript","title":"Subscript","text":"<pre><code>H~2~O\n</code></pre>"},{"location":"markdown-cheat-sheet.html#superscript","title":"Superscript","text":"<pre><code>X^2^\n</code></pre>"},{"location":"minesweeper.html","title":"Minesweeper","text":""},{"location":"minesweeper.html#minesweeper","title":"Minesweeper","text":"classDiagram class Location Location : +int x Location : +int y Location : +equal(Location) boolean class Square Square : +boolean isRevealed Square : +boolean isMine Square : +Location location Square : +int hint Square : +reveal() Square : +setMine() Square : +toString() String class Board Board : +int size Board : +List~Square~ squares Board : +boolean isRevealed Board : +createEmptyBoard(int) Board Board : +revealAllSquares() Board : +revealOneSquare(Location) Board : +getSquare(Location) Square Board : +getNeighbors(Square) Iterable~Square~ Board : +hasLocation(Location) boolean Board : +toString() String class IGenerateMines IGenerateMines : +placeMines(int, Board) class RandomMinesGenerator RandomMinesGenerator : +placeMines(int, Board) class Game Game : -IGenerateMines minesGenerator Game : +Board board Game : +int state Game : +CreateBoard() Game : +Play() class Rule Rule : +isWinningCondition(Board) boolean Rule : +isLosingCondition(Board) boolean IGenerateMines &lt;|.. RandomMinesGenerator IGenerateMines *-- Board Game *-- Board Game *-- Rule Game *-- IGenerateMines Board *-- Square Square *-- Location"},{"location":"nov15_lesson.html","title":"Supporting the Power Systems and Troubleshooting Computers","text":""},{"location":"nov15_lesson.html#supporting-the-power-systems-and-troubleshooting-computers","title":"Supporting the Power Systems and Troubleshooting Computers","text":""},{"location":"nov15_lesson.html#cooling-methods-and-devices","title":"Cooling Methods and Devices","text":"<ul> <li>Keep the case closed</li> <li>Keep the computer clean</li> <li>Keep the computer in a proper location<ul> <li>Not on the floor in dusty areas</li> <li>Not enclosed in a non-ventalated cabinet</li> <li>Vents should be exposed and uncovered.</li> </ul> </li> </ul>"},{"location":"nov15_lesson.html#processor-coolers-fans-and-heat-sinks","title":"Processor Coolers, Fans, and Heat Sinks","text":"<ul> <li>Heat sinks<ul> <li>Pick a metal material with great thermal conductive properties (copper is better than aluminum, but much more expensive).</li> <li>thermal conductivity to cost ratio.</li> <li>With heat-sinks material, shape, and size matter.</li> </ul> </li> <li>Fans attached to the heatsink can help dissapate heat more rapidly.<ul> <li>4-pin fans are more appropriate for CPU coolers as they allow for variable fan speeds via PWM pin (or pulse-width-modulation).</li> <li>3-pin fans can plug into 4-pin fan power, but won\u2019t have variable control.</li> <li>Fans are usually between 80 - 150mm and the larger fans generally are quieter because they can move the same amount of air at lower RPMs.</li> <li>You may also find fans and heat-sinks attached to memory chips and especially high-end graphics cards.</li> </ul> </li> <li>Liquid cooling systems<ul> <li>Less common in industry</li> <li>Cost more and are higher maintenence due to liquid pumps</li> <li>Quietest option, but only necessary for high-end gaming systems or high-end computer systems.</li> </ul> </li> </ul>"},{"location":"nov15_lesson.html#selecting-a-power-supply","title":"Selecting a Power Supply","text":"<ul> <li>ATX or micro ATX form factors</li> <li>Rated by Watts (i.e. Power consumption), which is the first thing to be aware of</li> <li>Pick your power supply not just off Wattage, but also off the Watts per rail<ul> <li>In high end gaming systems +12V rail is the most important</li> <li>In large storage systems the +5V rail is often the most important</li> </ul> </li> <li>Add up all the Power needs of all the components in your system and estimate for 30% higher than that. </li> </ul>"},{"location":"nov15_lesson.html#wattage-calc","title":"Wattage Calc","text":"<pre><code>Power = Voltage * Amperage\n</code></pre>"},{"location":"nov15_lesson.html#strategies-to-troubleshoot-any-computer","title":"Strategies to Troubleshoot Any Computer","text":""},{"location":"nov15_lesson.html#tier-1-flowchart","title":"Tier 1 Flowchart","text":"<p> * Also go review page 181-182 and try to memorize as many of the symptom to solution messages as you can! * But remember, don\u2019t ignore BEEP codes</p>"},{"location":"nov15_lesson.html#troubleshooting-the-electrical-system","title":"Troubleshooting the Electrical System","text":"<ul> <li>If you see smoke or smell electrical burn smell, immediately track down the source and turn the system off.</li> <li>Look for discoloration on capacitors on the various circuit boards<ul> <li>Burned capacitors are usually the culprit of smell, and always mean the faulty component should be replaced. </li> </ul> </li> <li>Use a multimeter to test voltage of power-supplies (!!! DC i.e. Direct Current !!!).</li> </ul>"},{"location":"nov15_lesson.html#troubleshooting-the-motherboard-processor-and-ram","title":"Troubleshooting the Motherboard, Processor, and RAM","text":"<ul> <li>Windows Memory Diagnostic Tool</li> <li>MemTest86</li> </ul>"},{"location":"nov8_lesson.html","title":"Networking!","text":""},{"location":"nov8_lesson.html#networking","title":"Networking!","text":"<p>      </p>"},{"location":"nov9_lesson.html","title":"Object Oriented Programming","text":""},{"location":"nov9_lesson.html#object-oriented-programming","title":"Object Oriented Programming","text":"<ul> <li>It\u2019s Just the Beginning, but WHY???</li> </ul>"},{"location":"nov9_lesson.html#we-can-make-models-and-patterns-that-help-us-solve-problems","title":"We Can Make Models, and Patterns, that Help Us Solve Problems","text":""},{"location":"nov9_lesson.html#favor-composition-over-inheritence","title":"Favor Composition over Inheritence","text":"<ul> <li>Wait, what\u2019s Inheritance? </li> <li>OK, that makes sense, but what is Composition? <ul> <li>But how can I favor composition?<ul> <li>One way is Interfaces</li> </ul> </li> </ul> </li> </ul>"},{"location":"nov9_lesson.html#walk-through-lab-code","title":"Walk Through Lab Code","text":"<p>Lab 10</p> classDiagram class WeatherStation WeatherStation : -URL url WeatherStation : -List~Display~ displays WeatherStation : -Gson gson WeatherStation : -float temperature WeatherStation : -float humidity WeatherStation : -float pressure WeatherStation : +WeatherStation() WeatherStation : +registerDisplay(display) WeatherStation : +removeDisplay(display) WeatherStation : +notifyDisplays() WeatherStation : +getTemperature() float WeatherStation : +getHumidity() float WeatherStation : +getPressure() float WeatherStation : +measure() class I_Display I_Display : update() I_Display : display() class CurrentConditions CurrentConditions: -WeatherStation ws CurrentConditions : -float temperature CurrentConditions : -float humidity CurrentConditions : +CurrentConditions(weatherstation) CurrentConditions : update() CurrentConditions : display() class StatisticsDisplay StatisticsDisplay: -WeatherStation ws StatisticsDisplay : -float temperatureMin StatisticsDisplay : -float temperatureMax StatisticsDisplay : -float temperatureTotal StatisticsDisplay : -int numReadings StatisticsDisplay : +StatisticsDisplay(weatherstation) StatisticsDisplay : update() StatisticsDisplay : display() class ForecastDisplay ForecastDisplay: -WeatherStation ws ForecastDisplay : -float currentPressure ForecastDisplay : -float lastPressure ForecastDisplay : +ForecastDisplay(weatherstation) ForecastDisplay : update() ForecastDisplay : display() I_Display &lt;|.. CurrentConditions  I_Display &lt;|.. StatisticsDisplay I_Display &lt;|.. ForecastDisplay WeatherStation --* CurrentConditions WeatherStation --* StatisticsDisplay WeatherStation --* ForecastDisplay I_Display --* WeatherStation"},{"location":"oct11_lesson.html","title":"Windows Installation","text":""},{"location":"oct11_lesson.html#windows-installation","title":"Windows Installation","text":""},{"location":"oct11_lesson.html#plan","title":"Plan","text":""},{"location":"oct11_lesson.html#choose-the-edition-license-and-version","title":"Choose the Edition, License and Version","text":"<ul> <li>OEM License:<ul> <li>Only on a new computer</li> <li>Allows hardware upgrades, but not motherboard</li> <li>Costs Less</li> </ul> </li> <li>Retail License:<ul> <li>Direct Microsoft support</li> <li>Transferable between hardware</li> </ul> </li> </ul>"},{"location":"oct11_lesson.html#pick-architecture","title":"Pick Architecture","text":"<ul> <li>32 bit<ul> <li>RAM limited to 4GB</li> </ul> </li> <li>64 bit<ul> <li>Requires 64 bit device drivers</li> </ul> </li> </ul>"},{"location":"oct11_lesson.html#verifying-that-system-qualifies","title":"Verifying that System Qualifies","text":"<ul> <li>Typically Windows will be backward compatible with processors &lt; 10 years old<ul> <li>Microsoft will typically indicate which processor features are required.</li> </ul> </li> <li>MBR or GPT</li> <li>GPT required for drives larger than 2.2 TB</li> <li>64 bit windows required</li> <li>BIOS/UEFI</li> <li>UEFI is required for drives larger than 2.2 TB</li> <li>64 bit windows required</li> <li>Secure boot only enabled with UEFI</li> <li>CSM mode only recommended to support legacy hard drives</li> <li>Boot priority must be set to allow installation media to boot first</li> <li>Application and Hardware Compatibility</li> <li>Make sure Device Drivers will work for Windows 10 or that older drivers still work</li> <li>Make sure you can upgrade your necessary applications<ul> <li>For legacy applications consider dual or multi-boot</li> </ul> </li> </ul>"},{"location":"oct11_lesson.html#installation-type","title":"Installation Type","text":"<ul> <li>In-Place Upgrade:<ul> <li>Must be a supportable Upgrade path, find these tables online.</li> </ul> </li> <li>Clean Install:<ul> <li>Necessary to migrate from 32bit OS to 64bit, assuming you hardware supports it.</li> <li>If you choose not to format and erase, data will be preserved.</li> <li>Windows.old folder will be created.</li> </ul> </li> <li>Dual/Multi Boot:<ul> <li>Needs a second partition</li> </ul> </li> </ul>"},{"location":"oct11_lesson.html#understanding-the-install-choices","title":"Understanding the Install Choices","text":"<ul> <li>If you choose dual boot, always install older OS first.</li> <li>Consider the applications that will run on system when partitioning<ul> <li>Data Volume for Database</li> <li>What partition sizes are relevant</li> </ul> </li> <li>Network considerations<ul> <li>Will this be part of a domain?</li> <li>What type of network am I installing system on?</li> <li>Download speeds</li> <li>Proxy access</li> <li>DHCP/DNS?</li> </ul> </li> </ul>"},{"location":"oct11_lesson.html#final-checklist","title":"Final Checklist","text":"<ul> <li>Make sure you have a valid product/activation key or a domain to grab one from.</li>  </ul>"},{"location":"oct17_lesson.html","title":"Maintaining Windows","text":""},{"location":"oct17_lesson.html#maintaining-windows","title":"Maintaining Windows","text":""},{"location":"oct17_lesson.html#verifying-critical-windows-settings","title":"Verifying Critical Windows Settings","text":"<ul> <li>Windows Updates</li> <li>Antivrus Software</li> <li>Network Secuirty<ul> <li>Private VS Public</li> <li>Firewall enabled</li> </ul> </li> <li>Proper level of Backups<ul> <li>User Data VS Windows Volume VS System files</li> </ul> </li> <li>Uninstall unnecessary software and features</li> <li>Regularly clean HD<ul> <li>At least 15% free space</li> <li>scheduled defrag on non-SSD</li> </ul> </li> </ul>"},{"location":"oct17_lesson.html#patches--drivers","title":"Patches / Drivers","text":"<ul> <li>x86 VS x64 VS x86_64</li> <li>64 bit updates/drivers on 64bit OS</li> </ul>"},{"location":"oct17_lesson.html#backups","title":"Backups","text":""},{"location":"oct17_lesson.html#disaster-recovery-planning","title":"Disaster Recovery Planning","text":"<ul> <li>Decide the type of backup<ul> <li>file-level-backup<ul> <li>granular control over user data</li> <li>Not great for system or application content</li> </ul> </li> <li>image-level-backup<ul> <li>Restores everything</li> <li>Doesn\u2019t allow partial/selective restore</li> </ul> </li> <li>critical-applications<ul> <li>cloud solutions for backing up these critical applications</li> </ul> </li> </ul> </li> <li>Decide Backup Destination<ul> <li>Cloud<ul> <li>Easiest and most reliable</li> <li>Also most costly</li> </ul> </li> <li>Local<ul> <li>Easy to access at your location</li> <li>Danger of data loss in catastrophic event unless also shipped off-site.</li> </ul> </li> </ul> </li> <li>Decide Backup Software<ul> <li>Consider what it backs up and how full/incremental</li> <li>Is it on separate bootable media for easy restore in case of HD crash</li> <li>Is it schedulable</li> <li>Does it allow for off-site backups</li> </ul> </li> <li>Decide Backup Strategy<ul> <li>What is acceptable data loss, 4-6 hours?</li> <li>Are partial restores necessary</li> <li>Are speed, network, and/or cost factors?</li> <li>Is documentation necessary for audits?</li> <li>Is off-site necessary?</li> </ul> </li> <li>Decide how to ensure business continuity<ul> <li>UPS, generator, etc.</li> <li>Regularily test recovery process/media</li> <li>Regularily rotate and replace backup media if local.</li> <li>Where are backups stored and how is integrity guranteed.</li> </ul> </li> </ul>"},{"location":"oct17_lesson.html#backup-user-data","title":"Backup User Data","text":"<ul> <li>File History<ul> <li>File-Level-Backup: Documents, Music, Pictures, Videos and Desktop folders to External HD, network share, and OneDrive</li> <li>Offered in 11, 10, and 8</li> <li>Access via Control Panel Items &gt;&gt; File History</li> <li>Restore via Control Panel Items &gt;&gt; File History &gt;&gt; Restore personal files or right clicking a file you want to restore.</li> </ul> </li> <li>Backup and Restore<ul> <li>Image-Level-Backup: Initial full backup of select folders and volume, then incremental changes backup up to External HD or network share</li> <li>Offered in 11, 10, and 7</li> <li>Access via Control Panel Items &gt;&gt; Backup and Restore</li> <li>Restore via this</li> <li>Can be used to recover a failed HD</li> <li>Should Backup:<ul> <li>AppData</li> <li>Favorites</li> <li>or all User Profiles C:\\Users</li> </ul> </li> </ul> </li> <li>recimg<ul> <li>Image-Level-Backup</li> <li>Offered in 8</li> </ul> </li> <li>System Protection<ul> <li>Creates snapshots, called restore points, of changed system files</li> <li>Access via Control Panel &gt;&gt; System &gt;&gt; System Protection  or rstrui.exe</li> <li>Restore via Control Panel &gt;&gt; System &gt;&gt; System Protection  or rstrui.exe</li> <li>This can\u2019t restore from a HD failure</li> </ul> </li> </ul>"},{"location":"oct17_lesson.html#files-folder-and-sorage-devices","title":"Files, Folder, and Sorage Devices","text":""},{"location":"oct17_lesson.html#partitions-and-file-systems","title":"Partitions and File Systems","text":"<ul> <li> <p>MBR Partitions</p> <ul> <li>Required for 32bit OS or when using legacy BIOS</li> <li>Max of 4 partitions per drive</li> <li>3 Primary partitions</li> <li>4th extended partition of one or mor logical drives</li> <li>Boots off single active partition, which BIOS/UEFI searches for OS on </li> </ul> </li> <li> <p>GPT Partitions</p> <ul> <li>Requires 64bit OS and UEFI firmware</li> <li>Supports 128 partitions</li> <li>Required for drives over 2.2TB and to use Secure Boot</li> <li>1 sector is Protective MBR: Legacy info</li> <li>GPT Header tracks all partitions and immediately follows Protective MBR</li> <li>Partition Table in header, but also backed up at end of disk</li> <li>Boots from ESP which holds a boot loader which knows how to find and start the OS </li> </ul> </li> <li> <p>Windows FS</p> <ul> <li>Overall structure an OS uses to name, store, and organize files and folders on a HD</li> <li>High-Level-Formatting<ul> <li>Asigns Drive Letter</li> <li>Creates Root Directory</li> <li>Create FS on a volume</li> </ul> </li> <li>NTFS<ul> <li>Replaced Fat32</li> <li>more reliable, efficient, and secure (admin pass required)</li> <li>Supports encryption, disk quotas, and compression</li> </ul> </li> <li>ReFS<ul> <li>Improves upon NTFS with better performance and fault tolerance (protects sectors upon HD failure)</li> <li>Better compatibility with virtualization and RAID</li> </ul> </li> <li>NFS, exFAT, FAT32, CDFS and UDF</li> </ul> </li> </ul>"},{"location":"oct17_lesson.html#disk-mgmt","title":"Disk Mgmt","text":"<ul> <li>We\u2019ve coverd this and will cover it again in the lab, so I\u2019m not going to chat about this except to mention Dynamic Disks</li> </ul>"},{"location":"oct17_lesson.html#dynamic-disks","title":"Dynamic Disks","text":"<ul> <li>Several disks work together to present a single dynamic volume (Linux calls these Volume Groups and Logical Volumes).</li> <li>Extended volume across dynamic disks is called spanning</li> <li>Can improve performance and aid fault tolerance (i.e. to provide software RAID) </li> </ul>"},{"location":"oct17_lesson.html#storage-spaces","title":"Storage Spaces","text":"<ul> <li>Replacement for traditional software RAID</li> <li>Uses storage pools from a mixture of technologies SAS, STA, USB, etc.</li> <li>Options for Storage Spaces<ul> <li>Simple: like RAID 0</li> <li>Two-Way Mirror: like RAID 1+0</li> <li>Three-Way Mirror: like RAID 5</li> <li>Parity: like RAID 6</li> </ul> </li> <li>Access via Control Panel &gt;&gt; Storage Spaces </li> </ul>"},{"location":"oct25_lesson.html","title":"Troubleshooting Windows After Startup","text":""},{"location":"oct25_lesson.html#troubleshooting-windows-after-startup","title":"Troubleshooting Windows After Startup","text":""},{"location":"oct25_lesson.html#solving-problems-with-windows-apps","title":"Solving Problems with Windows Apps","text":""},{"location":"oct25_lesson.html#what-is-the-shell-and-kernel","title":"What is the Shell and Kernel","text":"<ul> <li> <p>Shell: portion of the os that relates to user applications</p> <ul> <li>User Mode: so limited access to system information</li> <li>Win32 security: sign-in, file ACLs, application access</li> </ul> </li> <li> <p>Kernel: portion of the os responsible for interacting with hardware</p> <ul> <li>Kernel Mode: direct access to hardware, and segmented off from user.</li> <li>Components<ul> <li>HAL</li> <li>Executive services: ntoskrnl.exe</li> </ul> </li> <li>Features<ul> <li>Memory management </li> <li>Device management</li> <li>File System</li> <li>Resource management (sharing CPU and hardware between processes)</li> <li>Access to hardware (CPU, I/O, etc.)</li> </ul> </li> </ul> </li> </ul>"},{"location":"oct25_lesson.html#important-directories","title":"Important Directories","text":"<ul> <li> <p>User Profile: Important user data after sign-in</p> <ul> <li>Profile Path: C:\\Users\\</li> <li>NTUSER.DAT: User settings copied to the registry</li> <li>Startup Programs: C:\\User\\\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</li> </ul> </li> <li> <p>Program Files: Where the programs are</p> <ul> <li>Path: C:\\Program Files OR C:\\Program Files (x86)</li> <li>Startup Programs: C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</li> </ul> </li> <li> <p>Windows Data:</p> <ul> <li>Registry Path: C:\\Windows\\System32\\config folder.</li> <li>Backup registry: C:\\Windows\\System32\\config\\RegBack</li> <li>Fonts: C:\\Windows\\Fonts</li> <li>Temporary files: C:\\Windows\\Temp</li> <li>Offline files: C:\\Windows\\CSC</li> </ul> </li> </ul>"},{"location":"oct25_lesson.html#windows-app-mgmt","title":"Windows App Mgmt","text":"<ul> <li>Process: program in shell</li> <li>Process resource request to Win32 subsystem: Thread (single task in kernel)</li> </ul>"},{"location":"oct25_lesson.html#tools","title":"Tools","text":""},{"location":"oct25_lesson.html#solve-windows-problems-using-these-tools","title":"Solve Windows problems using these tools:","text":"<p>tool                     description System File Checker (sfc.exe) use System File Checker (SFC) to verify and replace Windows system files. It keeps a cache of current system files in case it needs to refresh a damaged file.</p> <p>dISm (dism.exe) use dISm (deployment Image Servicing and management) to repair corrupted Windows system files when SFC cannot do the job or Windows update is corrupted.</p> <p>Windows updates use Windows updates to download and apply the latest Windows updates to solve problems with Windows, applications, and hardware. In Windows 10, open Windows updates in the Settings app. For Windows 8/7, use the System window to find Windows updates.</p> <p>Clean boot a clean boot disables all third-party software that has been added to the Windows startup process. to clean boot, use System Configuration and task manager to disable all but microsoft services launched at startup. you learn how to do this later in the chapter.</p> <p>Safe mode, aka Safe boot Safe mode goes beyond a clean boot; it not only eliminates third-party software from Windows startup, it also reduces startup to only the Windows minimum configuration necessary to start the oS. It can create a stable environment when the Windows system or device drivers become corrupted. First try a clean boot. If that doesn\u2019t resolve a problem, try Safe mode. to do so, use System Configuration to restart the computer in Safe boot.</p> <p>System restore (rstrui.exe) use System restore to revert the system back to a previously saved restore point before a problem started.</p>"},{"location":"oct25_lesson.html#solve-application-errors-or-crashes-with-these-tools","title":"Solve application errors or crashes with these tools:","text":"<p>programs and Features (appwiz.cpl) use the programs and Features tool in Control panel to repair and uninstall applications and enable and disable Windows features.</p> <p>tasklist the tasklist command reports the process identifier (pId), which is a number that identifies each running process.</p> <p>taskkill the taskkill command uses the process Id to kill the task or process. use taskkill to end a process when task manager is unable to do so.</p> <p>Component Services use Component Services (also called Com+) in the administrative tools group to register components in the Windows registry so that an application can access the component. this resolves a problem that happens when a component is not correctly registered to the application when it is first installed or the connection between the two gets broken.</p> <p>Secondary logon use a secondary logon to run an application using administrator privileges that refused to run under the authority of a standard user. use the properties dialog box of the application program file to perform a secondary logon.</p> <p>Compatibility mode to solve an incompatibility problem with the oS, try running the application in compatibility mode by using the properties dialog box of the application program file.</p> <p>digital signature a digital signature verifies that the application is not a rogue application and that it is certified as Windows-compatible by microsoft. verify a digital signature using the properties dialog box of the application program file.</p> <p>data Sources use data Sources, also called odBC data Sources (open database Connectivity data Sources), to create a connection between a local application and a remote database so that the application can manage the database. data Sources can be accessed in the administrative tools group.</p> <p>task Scheduler (taskschd.msc) use task Scheduler in the administrative tools group to schedule a program to run at a future time, including at startup.</p>"},{"location":"oct25_lesson.html#manage-and-solve-problems-with-hardware-using-these-tools","title":"Manage and solve problems with hardware using these tools:","text":"<p>device manager (devmgmt.msc) recall device manager in Control panel is the go-to tool to make sure Windows has correctly installed a hardware device and to solve problems with a device.</p> <p>print management (printmanagement.msc) use print management in the administrative tools group to monitor and manage printer queues for all printers on the network.</p> <p>display applet (desk.cpl) use the display applet to manage display settings. In Windows 10, access display settings in the Settings app. For Windows 8/7, use Control panel.</p> <p>dxdiag (dxdiag.exe) use the dxdiag (directX diagnostic tool) command to diagnose problems with directX. directX is microsoft\u2019s interface between video and sound hardware and the applications that use these devices. Some gaming applications or other apps that rely heavily on graphics and sound require the latest version of directX. dxdiag can tell you which version of directX is installed; you can download the latest version from microsoft.com.</p> <p>memory diagnostics (mdsched.exe) use memory diagnostics in administrative tools to test memory before or after Windows is launched.</p> <p>chkdsk the chkdsk command checks the hard drive for a corrupted file system and bad sectors on the drive. use this command to check drive C: and recover data: chkdsk c: /r</p> <p>disk defragmenter (defrag.exe) defrag a magnetic hard drive to improve drive performance. (defrag.exe)</p>"},{"location":"oct26_lesson.html","title":"Arrays","text":""},{"location":"oct26_lesson.html#arrays","title":"Arrays","text":""},{"location":"oct26_lesson.html#review---what-things-do-you-need-more-help-with","title":"Review - What Things do You Need More Help With?","text":"<ul> <li>Input / Output<ul> <li>sout, scanner, input streams</li> </ul> </li> <li>Comments<ul> <li>javadoc</li> <li>single line or multi-line comments</li> </ul> </li> <li>Variables<ul> <li>Declaration and data-type</li> <li>Assignment</li> <li>Naming conventions</li> <li>Access Modifier</li> </ul> </li> <li>Data Types<ul> <li>type casting</li> <li>Basic types: int, double, float, long</li> <li>Special types: Strings</li> <li>Object types</li> </ul> </li> <li>Operators<ul> <li>Arithmetic</li> <li>Assignment</li> <li>Comparison</li> <li>Logical</li> <li>Bitwise</li> </ul> </li> <li>Packages and Imports<ul> <li>Math</li> <li>Scanner</li> <li>Package VS Class VS Object</li> </ul> </li> <li>Conditionals<ul> <li>if/else if/else</li> <li>switch</li> <li>ternary</li> </ul> </li> <li>Loops<ul> <li>While loop</li> <li>For loop</li> <li>do while</li> <li>break / continue</li> </ul> </li> <li>Methods<ul> <li>Static VS Public: Class accessible VS Object accessible</li> <li>Acessing / Calling a Method: dot notation or .</li> <li>Access Modifier: public, protected, private, determines if can be accessed outside class and inherited and overloaded.</li> <li>Method Parameters: Between ( ), preceeded by Data-Type, follows variable naming conventions</li> <li>Return types: After access and  optional static modifier, is a Data-Type</li> <li>Overloading: Same method name, different parameter signature.</li> <li>Constructors: Same name as class it constructs, always public, no return type.</li> <li>Scope: Containment in brackets: { } </li> </ul> </li> <li>Class<ul> <li>Naming, File Naming, and Packaging</li> <li>Declaration</li> <li>Attributes / Instance variables</li> </ul> </li> </ul>"},{"location":"oct26_lesson.html#array-declaration","title":"Array Declaration","text":""},{"location":"oct26_lesson.html#method-1---long-way","title":"Method 1 - Long way","text":"<pre><code>String[] companies = new String[5];\n\ncompanies[0] = \"Apple\";\ncompanies[1] = \"Microsoft\";\ncompanies[2] = \"Oracle\";\ncompanies[3] = \"VMWare\";\ncompanies[4] = \"Raspberry Pi Foundation\";\n</code></pre>"},{"location":"oct26_lesson.html#method-2---short-way","title":"Method 2 - Short way","text":"<pre><code>String[] companies = {\"Apple\", \"Microsoft\", \"Oracle\", \"VMWare\",\"Raspberry Pi Foundation\"};\n</code></pre>"},{"location":"oct26_lesson.html#access-the-elements-of-an-array","title":"Access the Elements of an Array","text":"<pre><code>System.out.println( companies[2] ); // Expected output would be \"Oracle\"\n</code></pre>"},{"location":"oct26_lesson.html#change-elements-of-an-array","title":"Change Elements of an Array","text":"<pre><code>companies[2] = \"College of the Redwoods\";\nSystem.out.println( companies[2] ); // Expected output would be \"Ciollege of the Redwoods\"\n</code></pre>"},{"location":"oct26_lesson.html#array-length-and-accessing-the-last-element","title":"Array Length and Accessing the Last Element","text":"<pre><code>String lastElement = companies[companies.length - 1];  // -1 because remember computer scientist start counting at \"0\"\n</code></pre>"},{"location":"oct26_lesson.html#array-looping","title":"Array Looping","text":""},{"location":"oct26_lesson.html#basic-loop","title":"Basic Loop","text":"<pre><code>for(int i=0; i&lt;companies.length; i++) {\n    System.out.println( companies[i] );\n}\n</code></pre>"},{"location":"oct26_lesson.html#enhanced-or-foreach-loop","title":"Enhanced OR foreach Loop","text":"<pre><code>for(String e : companies) {\n    System.out.println( e );\n}\n</code></pre>"},{"location":"oct26_lesson.html#multidimensional-arrays","title":"Multidimensional Arrays","text":""},{"location":"oct26_lesson.html#declaring","title":"Declaring","text":"<pre><code>String[][] myCompanies = { {\"Apple\", \"Microsoft\"}, {\"Facebook\", \"Twitter\"} };\n</code></pre>"},{"location":"oct26_lesson.html#accessing","title":"Accessing","text":"<pre><code>System.out.println(myCompanies[1][0]); // Expected output \"Facebook\"\n</code></pre>"},{"location":"oct26_lesson.html#looping","title":"Looping!","text":"<pre><code>    for (int i = 0; i &lt; myCompanies.length; ++i) {\n      for(int j = 0; j &lt; myCompanies[i].length; ++j) {\n        System.out.println(myCompanies[i][j]);\n      }\n    }\n</code></pre>"},{"location":"oct5_lesson.html","title":"Methods Take 2","text":""},{"location":"oct5_lesson.html#methods-take-2","title":"Methods Take 2","text":""},{"location":"oct5_lesson.html#why-we-create-methods","title":"Why We Create Methods","text":"<ul> <li>Methods directly related to the ACTIONS performed on our OBJECTS<ul> <li>Object: car</li> <li>Method: turn</li> </ul> </li> <li>Methods allow us to re-use code.<ul> <li>e.g. Scanner let\u2019s us get input of different Data Types (int, double, String), without us having to re-write the data-type conversions or the code to read from stdin</li> </ul> </li> <li>Methods encapsulate complex algorithms so we can ignore the details and just trust the method to do its job.<ul> <li>e.g Math.toRadians, Math.pow, Math.toDegrees: we trust these to do what they say even though we may not know how to implememnt them ourselves.</li> </ul> </li> <li>Methods allow us to break up bigger problems into smaller, more understandable units. functional decomposition<ul> <li>Think about our car action of turn. We could implment it all in 1 method that says:<ul> <li>Driver places hands on wheels</li> <li>Drive turns steering wheel 25 degrees to the left</li> <li>Hydraulic assist system in rack and pinion mechanism takes rotational motion energy and converts it into linear motion energy</li> <li>Linear motion energy is transfered to the wheels</li> <li>wheels turn at an angle proportional to that of the 25 degree turn of the steering wheel</li> </ul> </li> <li>OOORRR, we could acknowledge that each one of these statements is housed within its own Objects (Driver, Steering Wheel, Rack and Pinion, Wheels), and we could divide the actions into methods in each of those classes allowing us to functionally decompose the process of turning.<ul> <li>Driver: movesHands(Position p)           rotatesWheel(SteeringWheel s, Force f, Direction v)</li> <li>SteeringWheel: rotate(Direction rl, Degree d)</li> </ul> </li> </ul> </li> </ul>"},{"location":"oct5_lesson.html#review-method-signature--static-vs-public","title":"Review Method Signature / Static VS Public","text":"<ul> <li>Method Signature</li> <li>Criteria for Static)</li> </ul>"},{"location":"oct5_lesson.html#method-parameters","title":"Method Parameters","text":"<ul> <li>Information passed to methods</li> </ul> <pre><code>public void rotateWheel(Direction rl, Degrees d) {\n    ....\n}\n</code></pre> <ul> <li>Comes between the open and close parenthesis</li> <li>Multiple parameters are separated by commas</li> <li>Can be basic types, objects, or arrays (think list) of these things</li> </ul>"},{"location":"oct5_lesson.html#return-types","title":"Return Types","text":"<ul> <li>How we get data back out of our methods.</li> </ul> <pre><code>public Position rotateWheel(Direction rl, Degrees d) {\n    ....\n    return new Position(x, y, z);\n}\n</code></pre> <ul> <li>Must return the same datatype noted in the return type of the method signature</li> <li>Return type can be basic types, objects, or arrays of these things</li> <li>You can return null</li> </ul>"},{"location":"oct5_lesson.html#scope","title":"Scope","text":"<ul> <li>Class scope<ul> <li>Variables and methods in the class scope will persist as long as the class and or objects of that class persist</li> <li>The can be masked by Method scoped variables.</li> </ul> </li> <li>Method scope<ul> <li>Once you return from a method, any variables locally declared in that method disappear.</li> </ul> </li> </ul>"},{"location":"oct5_lesson.html#overloading-methods","title":"Overloading Methods","text":"<ul> <li>We saw this last week with constructors</li> <li>Overloading by w3schools</li> </ul>"},{"location":"sep13_lesson.html","title":"Week 4 CIS-98 Notes","text":""},{"location":"sep13_lesson.html#week-4-cis-98-notes","title":"Week 4 CIS-98 Notes","text":""},{"location":"sep13_lesson.html#features-of-processors","title":"Features of Processors","text":"<ul> <li>Processor freq: Speed of operation</li> <li>Lithography: Space between transistors</li> <li>Socket &amp; Chipset: Must match the processor</li> <li>Multiprocessing: Multiple Cores/ALUs in use</li> <li>Multithreading: Multiple threads per Core/ALU</li> <li>Multi-Core: Multiple processors on the same housing</li> <li>Dual Processor: 2 Separate chips in separates housings</li> <li>Cache: Memory included in processor package<ul> <li>L1: on the processor die</li> <li>L2: in the same package</li> </ul> </li> <li>GPU: may be integreated in processor</li> </ul>"},{"location":"sep13_lesson.html#major-manufacturers","title":"Major Manufacturers","text":"<ul> <li>Intel</li> <li>AMD</li> <li>Should know how to determine family, generation, and features like unlocked.</li> </ul>"},{"location":"sep13_lesson.html#memory-features","title":"Memory Features","text":"<ul> <li>DIMM: dual inline memory module</li> <li>SO-DIMM: Small Outline, dual inline memory module<ul> <li>Used in laptops and some All-In-One machines</li> </ul> </li> <li>DDR: Double Data Rate, 2x as fast as SIMM</li> <li>DDR2: 4x SIMM</li> <li>DDR3 &amp; DDR4: 8x SIMM</li> <li>CAS or CL: Column Access Strobe, measureing access timing<ul> <li>Lower numbers == faster</li> </ul> </li> <li>ECC: Error Correcting Code, find and fix errors</li> <li>Parity: Older mem error checking</li> <li>Buffered &amp; Registered: Amplify signal before written</li> </ul>"},{"location":"sep14_lesson.html","title":"Methods","text":""},{"location":"sep14_lesson.html#methods","title":"Methods","text":""},{"location":"sep14_lesson.html#signature","title":"Signature","text":"<ul> <li> <p>Access Modifer (public, protected, private),</p> <ul> <li>Optional [static] modifier,<ul> <li>Return Type (void, double, String, Object, etc)<ul> <li>Method Name (Anything you want following nameing convention)<ul> <li>Method Parameters (Comma separated list of DataType parameterName)</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Example of a static or class method (i.e. belongs to the class)</p> <pre><code>public class MyClass {\n    public static void main(String args[]) {\n        // Method block statments go here...\n    }\n}\n</code></pre> </li> <li> <p>Example of a public or object/instance method (i.e. can only be called from an object instance)</p> <pre><code>public class MyClass {\n    public String sayHello(String firstName, String lastName) {\n        return \"Hello %s %s!\".format(firstName, lastName);\n    }\n}\n</code></pre> </li> <li> <p>Example calling the static/class method</p> <pre><code>MyClass.main(new String[]);\n</code></pre> </li> <li> <p>Example calling the public/object/instance method</p> <pre><code>MyClass myClass = new MyClass();\nmyClass.sayHello(\"Trevor\", \"Hartman\");\n</code></pre> </li> </ul>"},{"location":"sep14_lesson.html#why","title":"???WHY???","text":"<ul> <li> <p>Static Methods criteria for use</p> <ul> <li>static methods can\u2019t modify the state of an object.<ul> <li>4 wheels of a car, but all 4 are independent or have independent state.</li> </ul> </li> <li>static methods mostly operate on arguments passed into it, commonly Utility Methods.<ul> <li>java.lang.Math or StringUtils both only really perform action on arguments.</li> <li>StringUtils.isEmpty(String text)</li> </ul> </li> <li>if you need a method to act on the entire class hierarchy<ul> <li>equals() method for Ojbects is a good example</li> </ul> </li> </ul> </li> <li> <p>Other Examples</p> <ul> <li>Factory design pattern (i.e. a method to CREATE other objects)</li> <li>Utility methods like Array (provides methods that only work on array arguments)</li> <li>valueOf functions that convert types</li> </ul> </li> </ul>"},{"location":"sep14_lesson.html#every-other-type-of-method-should-be-a-publicobjectinstance-method","title":"Every other type of method should be a public/object/instance method","text":""},{"location":"sep20_lesson.html","title":"Drives","text":""},{"location":"sep20_lesson.html#drives","title":"Drives","text":""},{"location":"sep20_lesson.html#magnetic-drives","title":"Magnetic Drives","text":"<ul> <li>Stacked, spinning platters with read/write head between each</li> <li>Platters spin at 5400, 7200, 10000, and 15000 RPM</li> <li>Data is organized in tracks (one loop) and sectors (segment of track)</li> <li>Low-Level-Formatting, or sector markings are written before leaving factory</li> <li>3.5\u201d and 2.5\u201d form factor</li> </ul>"},{"location":"sep20_lesson.html#ssd-or-solid-state","title":"SSD or Solid State","text":"<ul> <li>No moving parts</li> <li>NAND, or Not And, pair of transistor gates holds data in rows and columns</li> <li>Lifespan based of writes to drive because of limited transistor re-programming</li> <li>Currently a tiny bit more expensive than magnetic</li> <li>Sata, M.2 sata, M.2 NVME, PCI Express NVME</li> <li>Uses wear leveling to ensure LBA does not always refere to the same block</li> <li>Reserves blocks to use when other blocks approach re-programming limits</li> <li>Usually 2.5\u201d form factor</li> </ul>"},{"location":"sep20_lesson.html#smart-or-self-monitoring-analysis-and-reporting-technology","title":"S.M.A.R.T or Self Monitoring Analysis and Reporting Technology","text":"<ul> <li>Used to predict drive failures and warn you before the failure takes place.</li> <li>Usually turned on/off in BIOS/UEFI</li> <li>SSDs Report # of writes.</li> </ul>"},{"location":"sep20_lesson.html#interfaces","title":"Interfaces","text":"<ul> <li>IDE: Integrated Drive Electronics (No longer used)</li> <li>SCSI: Small Computer System Interface (No longer used)<ul> <li>supported up to 15 drives per cable.</li> </ul> </li> <li>SATA: Serial ATA, 7-pin data with 15 pin power connectors<ul> <li>Sata 1: 1.5 Gb/s</li> <li>Sata 2: 3 Gb/s</li> <li>Sata 3: 6 Gb/s</li> <li>Sata Express: 18 Gb/s</li> </ul> </li> <li>NVMe: Non-Volatile Memory Express, PCIex4, M.2, or U.2<ul> <li>Only SSD</li> <li>PCIex4 required</li> <li>32Gb/s or 5x Sata 3</li> </ul> </li> </ul>"},{"location":"sep20_lesson.html#raid","title":"RAID","text":"<ul> <li>RAID 0: Striping </li> <li>RAID 1: Mirroring </li> <li>RAID 5: Stripes with Parity info<ul> <li>Requires 3 or more drives</li> <li>No data duplication, so better space utilization </li> </ul> </li> <li>RAID 10: Stiping and Mirroring </li> <li>Raid 6 </li> </ul>"},{"location":"sep28_lesson.html","title":"Conditionals","text":""},{"location":"sep28_lesson.html#conditionals","title":"Conditionals","text":""},{"location":"sep28_lesson.html#you-will-understand-why-we-need-conditions","title":"You Will Understand Why We Need Conditions","text":"<ul> <li>To make decisions based off different inputs.</li> <li>Perform different actions in the same program.</li> </ul>"},{"location":"sep28_lesson.html#basics","title":"Basics","text":"<ul> <li>if, switch, else if</li> <li>boolean expression, boolean variable, boolean method call</li> <li>executes or bypasses statements in block<pre><code>if (x &gt; 0) {\n    System.out.println(\"x is positive\");\n} else if(x == 0) {\n    System.out.println(\"x is 0\");\n} else {\n    if( x &gt; -10 ) {\n        System.out.println(\"x is negative, but barely\");\n    }\n    System.out.println(\"x is negative\");\n}\n</code></pre> </li> </ul>"},{"location":"sep28_lesson.html#relational-operators-or-comparison-operators","title":"Relational operators OR Comparison Operators","text":"<pre><code>    x == y // x is equal to y\n    x != y // x is not equal to y\n    x &gt; y  // x is greater than y\n    x &lt; y  // x is less than y\n    x &gt;= y // x is greater than or equal to y\n    x &lt;= y // x is less than or equal to y\n    // Strings are different because they are special/immutable objects\n    aStr.equals(\"abc\");\n</code></pre>"},{"location":"sep28_lesson.html#logical-operators","title":"Logical operators","text":"<pre><code>    &amp;&amp;  Logical and Returns true if both statements are true    x &lt; 5 &amp;&amp;  x &lt; 10    \n    ||  Logical or  Returns true if one of the statements is true   x &lt; 5 || x &lt; 4  \n    !   Logical not Reverse the result, returns false if the result is true !(x &lt; 5 &amp;&amp; x &lt; 10)\n</code></pre>"},{"location":"sep28_lesson.html#short-circuit-evaluation","title":"Short Circuit Evaluation","text":"<ul> <li>The first condition that satisfies the condition stops evaluation</li> </ul>"},{"location":"sep28_lesson.html#demorgans-law","title":"DeMorgan\u2019s Law","text":"<pre><code>    !(A &amp;&amp; B) isthesameas !A || !B\n    !(A || B) isthesameas !A &amp;&amp; !B\n</code></pre>"},{"location":"sep28_lesson.html#recursion-is-important","title":"Recursion is Important","text":"<ul> <li>But we\u2019re not going to cover that much in this class</li> </ul>"},{"location":"sep28_lesson.html#review","title":"Review","text":"<ul> <li>Modulus</li> <li>Variables in methods</li> <li>Why we use methods</li> <li>class/static vs public/object/instance</li> </ul>"},{"location":"sep6_lesson.html","title":"Most Important Part of Motherboard Selection","text":""},{"location":"sep6_lesson.html#most-important-part-of-motherboard-selection","title":"Most Important Part of Motherboard Selection","text":""},{"location":"sep6_lesson.html#chipset","title":"Chipset!","text":"<ul> <li> <p>Prior to 2008 used to be divided into 2 chips</p> <ul> <li>Northbridge: CPU pathway to RAM</li> <li>Southbridge: CPU communication to PCI and Storage</li> <li>Intel moved most of the Northbridge into the CPU, and some of it to the Chipset</li> </ul> </li> <li> <p>9th/10th Gen </p> </li> <li> <p>11th/12th Gen </p> </li> </ul>"},{"location":"CIS-18/decorator_java.html","title":"Example Java Decorator Design Pattern Source Code","text":""},{"location":"CIS-18/decorator_java.html#example-java-decorator-design-pattern-source-code","title":"Example Java Decorator Design Pattern Source Code","text":""},{"location":"CIS-18/decorator_java.html#component-interface","title":"Component Interface","text":"<pre><code>package edu.redwoods.decorator;\n\npublic interface Car {\n\n    public void assemble();\n}\n</code></pre>"},{"location":"CIS-18/decorator_java.html#concrete-component","title":"Concrete Component","text":"<pre><code>package edu.redwoods.decorator;\n\npublic class BasicCar implements Car {\n\n    @Override\n    public void assemble() {\n        System.out.print(\"Basic Car.\");\n    }\n\n}\n</code></pre>"},{"location":"CIS-18/decorator_java.html#component-decorator","title":"Component Decorator","text":"<pre><code>package edu.redwoods.decorator;\n\npublic class CarDecorator implements Car {\n\n    protected Car car;\n\n    public CarDecorator(Car c){\n        this.car=c;\n    }\n\n    @Override\n    public void assemble() {\n        this.car.assemble();\n    }\n\n}\n</code></pre>"},{"location":"CIS-18/decorator_java.html#concrete-decorators","title":"Concrete Decorators","text":"<pre><code>package edu.redwoods.decorator;\n\npublic class SportsCar extends CarDecorator {\n\n    public SportsCar(Car c) {\n        super(c);\n    }\n\n    @Override\n    public void assemble(){\n        super.assemble();\n        System.out.print(\" Adding features of Sports Car.\");\n    }\n}\n</code></pre> <pre><code>package edu.redwoods.decorator;\n\npublic class LuxuryCar extends CarDecorator {\n\n    public LuxuryCar(Car c) {\n        super(c);\n    }\n\n    @Override\n    public void assemble(){\n        super.assemble();\n        System.out.print(\" Adding features of Luxury Car.\");\n    }\n}\n</code></pre>"},{"location":"CIS-18/observer_java.html","title":"Example Java Observer Design Pattern Source Code","text":""},{"location":"CIS-18/observer_java.html#example-java-observer-design-pattern-source-code","title":"Example Java Observer Design Pattern Source Code","text":""},{"location":"CIS-18/observer_java.html#subject-interface","title":"Subject Interface","text":"<pre><code>package edu.redwoods.design.observer;\n\npublic interface Subject {\n\n    //methods to register and unregister observers\n    public void register(Observer obj);\n    public void unregister(Observer obj);\n\n    //method to notify observers of change\n    public void notifyObservers();\n\n    //method to get updates from subject\n    public Object getUpdate(Observer obj);\n\n}\n</code></pre>"},{"location":"CIS-18/observer_java.html#observer-interface","title":"Observer Interface","text":"<pre><code>package edu.redwoods.design.observer;\n\npublic interface Observer {\n\n    //method to update the observer, used by subject\n    public void update();\n\n    //attach with subject to observe\n    public void setSubject(Subject sub);\n}\n</code></pre>"},{"location":"CIS-18/observer_java.html#concrete-subject","title":"Concrete Subject","text":"<pre><code>package edu.redwoods.design.observer;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class MyTopic implements Subject {\n\n    private List&lt;Observer&gt; observers;\n    private String message;\n    private boolean changed;\n    private final Object MUTEX = new Object();\n\n    public MyTopic(){\n        this.observers=new ArrayList&lt;&gt;();\n    }\n    @Override\n    public void register(Observer obj) {\n        if(obj == null) throw new NullPointerException(\"Null Observer\");\n        synchronized (MUTEX) {\n        if(!observers.contains(obj)) observers.add(obj);\n        }\n    }\n\n    @Override\n    public void unregister(Observer obj) {\n        synchronized (MUTEX) {\n        observers.remove(obj);\n        }\n    }\n\n    @Override\n    public void notifyObservers() {\n        List&lt;Observer&gt; observersLocal = null;\n        //synchronization is used to make sure any observer registered after message is received is not notified\n        synchronized (MUTEX) {\n            if (!changed)\n                return;\n            observersLocal = new ArrayList&lt;&gt;(this.observers);\n            this.changed=false;\n        }\n        for (Observer obj : observersLocal) {\n            obj.update();\n        }\n\n    }\n\n    @Override\n    public Object getUpdate(Observer obj) {\n        return this.message;\n    }\n\n    //method to post message to the topic\n    public void postMessage(String msg){\n        System.out.println(\"Message Posted to Topic:\"+msg);\n        this.message=msg;\n        this.changed=true;\n        notifyObservers();\n    }\n\n}\n</code></pre>"},{"location":"CIS-18/observer_java.html#concreate-observer","title":"Concreate Observer","text":"<pre><code>package edu.redwoods.design.observer;\n\npublic class MyTopicSubscriber implements Observer {\n\n    private String name;\n    private Subject topic;\n\n    public MyTopicSubscriber(String nm){\n        this.name=nm;\n    }\n    @Override\n    public void update() {\n        String msg = (String) topic.getUpdate(this);\n        if(msg == null){\n            System.out.println(name+\":: No new message\");\n        }else\n        System.out.println(name+\":: Consuming message::\"+msg);\n    }\n\n    @Override\n    public void setSubject(Subject sub) {\n        this.topic=sub;\n    }\n\n}\n</code></pre>"},{"location":"CIS-18/observer_java.html#client-of-observer-pattern","title":"Client of Observer Pattern","text":"<pre><code>package edu.redwoods.design.observer;\n\npublic class ObserverPatternTest {\n\n    public static void main(String[] args) {\n        //create subject\n        MyTopic topic = new MyTopic();\n\n        //create observers\n        Observer obj1 = new MyTopicSubscriber(\"Obj1\");\n        Observer obj2 = new MyTopicSubscriber(\"Obj2\");\n        Observer obj3 = new MyTopicSubscriber(\"Obj3\");\n\n        //register observers to the subject\n        topic.register(obj1);\n        topic.register(obj2);\n        topic.register(obj3);\n\n        //attach observer to subject\n        obj1.setSubject(topic);\n        obj2.setSubject(topic);\n        obj3.setSubject(topic);\n\n        //check if any update is available\n        obj1.update();\n\n        //now send message to subject\n        topic.postMessage(\"New Message\");\n    }\n\n}\n</code></pre>"},{"location":"CIS-18/oo_principles.html","title":"Key OO Principles","text":""},{"location":"CIS-18/oo_principles.html#key-oo-principles","title":"Key OO Principles","text":""},{"location":"CIS-18/oo_principles.html#encapsulate-what-varies","title":"Encapsulate what varies","text":"<ul> <li>Definition: Identify the aspects of your applications that vary and separate them from what stays the same. If a component or module in your application is bound to change frequently, then it\u2019s a good practice to separate this part of code from the stable ones so that later we can extend or alter the part that varies without affecting those that don\u2019t vary.</li> <li>Example: In the code below, the pet type varies, and the pet sound is a detail/functionality that varies from pet to pet or even owner to owner as is the pet type itself. Hence we encapsulate the varying details into classes or methods, which allows changing code Block 1 into code Block 2, the speak method encapsulates the varying pet types and sounds:</li> </ul> <pre><code>// Block 1\nif (pet.type() == dog) {\n  pet.bark();\n} else if (pet.type() == cat) {\n  pet.meow();\n} else if (pet.type() == duck) {\n  pet.quack()\n}\n</code></pre> <pre><code>// Block 2\npet.speak();\n</code></pre>"},{"location":"CIS-18/oo_principles.html#favor-composition-over-inheritance","title":"Favor composition over inheritance","text":"<ul> <li>Definition: Favor has-a relationships, Composition, over is-a relationships, Inheritance. Inheritance can make code more rigid and less extensible when overused, especially with Java\u2019s single inheritance. Class explosion due to needing to represent composite classes will arise unless composition is used instead (Composite and Builder patterns come to mind).</li> <li>Example: Consider shape classes like Square, Rectangle, Circle inheriting from a Shape class. If we want to mkae a new shape combining rectangle and square we\u2019d need a RectSquare or a SquareRect class using inheritance, but if we use composition instead, we could make a single CompositeShape class which would be composed of a list of other Shape.</li> </ul>"},{"location":"CIS-18/oo_principles.html#program-to-interfaces-not-implementations","title":"Program to interfaces, not implementations","text":"<ul> <li>Definition: Program to a super type like an interface or abstract class, not a concrete class.</li> <li>Example 1: Polymorphism, we rely on an interface to allow us to treat different objects that perform similar actions in the same way.</li> <li>Example 2: Assume a database accessor layer in your application which is used to perform CRUD operations on your DB. Let\u2019s consider that we implement a Service class which calls the DatabaseClient class (However practically we should have a DataAccessor class between Service and DatabaseClient). The DatabaseClient is concrete class programmed to access postgres DB. The DatabaseClient is a heavy duty class with all helper methods required to access the DB. Assume that the client decides to switch to a NoSQL database like MongoDB or add it as a secondary database for some specific purposes. This would lead to rewriting the DatabaseClient which would complicate things.</li> </ul>"},{"location":"CIS-18/oo_principles.html#strive-for-loosely-coupled-designs-between-objects-that-interact","title":"Strive for loosely coupled designs between objects that interact","text":"<ul> <li>Definition: A loosely coupled design is one in which classes are weakly associated with each other, and thus changes in one class least affect existence or function of another class.</li> <li>Example: Observer Design Pattern\u2019s Subject knows nothing about Observer implementations waiting for its notifications, just that they implement the Observer interface.</li> </ul>"},{"location":"CIS-18/oo_principles.html#open-closed-principle","title":"Open Closed Principle","text":"<ul> <li>The goal is to allow classes to be easily extended to incorporate new behavior without modifying existing code. If we are successful in accomplishing this, designs are resilient to change and flexible enough to take on new functionality and meet changing requirements.</li> <li>Open for extension, but the original code is closed for modification</li> </ul>"},{"location":"CIS-18/sprint.html","title":"Sprint Planning","text":""},{"location":"CIS-18/sprint.html#agile-development","title":"Agile Development","text":""},{"location":"CIS-18/sprint.html#scrum-meetings","title":"Scrum Meetings!","text":"<p>   </p>"},{"location":"CIS-18/sprint.html#sprint-planning","title":"Sprint Planning","text":"<ul> <li>Frequency: 2 Week Development Cycle</li> </ul>  Goal of Sprint Planning Meeting <ol> <li>Set expectations.</li> <li>Review the backlog, and cover upcoming tasks for the 2-week sprint.</li> <li>Teams should highlight any potential roadblocks that could delay progress. </li> </ol>   Minimum set of Sprint Planning Questions <ul> <li>What did we learn at sprint review and sprint retrospective that needs to be considered in our planning conversations today?</li> <li>What is at the top of the product backlog?</li> <li>What do we need to know about these backlog items in order to fully commit to getting them done in the upcoming sprint?</li> <li>How much of the product backlog do we think we can complete in the upcoming sprint?</li> <li>Do we need more clarification on this feature?</li> <li>What is our confidence level regarding this (sprint backlog) as a reasonable plan for this sprint?</li> <li>How is this yet-to-build backlog item similar/relative to other known/completed work we have done in the past? How does this comparison help us estimate the relative size of the new work?</li> <li>What outside help will we need to succeed with our plans?</li> <li>What\u2019s the biggest risk that may prevent us from completing this sprint? </li> <li>Who is taking time off during the next sprint? How should we plan differently given the team\u2019s (adjusted) capacity?</li> </ul>"},{"location":"CIS-18/sprint.html#daily-standup","title":"Daily Standup","text":"<ul> <li>Frequency: Daily Development Work</li> </ul>  Goal of Daily Standup Meeting <ol> <li>Each team member shares what they are working on and how it contributes to sprint goals</li> <li>Set the expectaions for what will be worked on and if there is overlap</li> <li>Allows team members to request and get help on blockers</li> </ol>   Minimum set of Daily Standup Questions <ul> <li>Are we on track with the sprint goal?</li> <li>Are we working on the most important items?</li> <li>Do we have any new requests?</li> <li>What do we still need to learn in this sprint?</li> <li>Have we identified any new risks?</li> <li>Who would benefit from another pair of eyes on something?</li> <li>Who could use some help? </li> <li>Who has some time available to help?</li> </ul>"},{"location":"CIS-18/sprint.html#sprint-review","title":"Sprint Review","text":"<ul> <li>Frequency: End of 2 Week Sprint</li> </ul>  Goal of Sprint Review Meeting <ol> <li>Discuss what the team has accomplished</li> <li>Collect actionable feedback to improve next sprints</li> </ol>   Minimum set of Sprint Review Questions <ul> <li>What questions do you have? </li> <li>How would you use this product?</li> <li>What excites you about the product increment we reviewed? Why is that?</li> <li>How do you feel about the product increment we reviewed? Why is that?</li> <li>If you could change one thing about the product we\u2019ve built, what would you change? Why is that?</li> <li>Let\u2019s say one feature should be eliminated. Which feature gets your vote? Why did you choose this one?</li> <li>What\u2019s your favorite feature or characteristic about this product? Why is it your favorite?</li> <li>What do you really hate about this product? Why is that?</li> <li>What other product on the market should we learn from? Why is that?</li> <li>How can we improve future sprint reviews?</li> </ul>"},{"location":"CIS-18/sprint.html#sprint-retrospective","title":"Sprint Retrospective","text":"<ul> <li>Frequency: End of 2 Week Sprint, after Sprint Review</li> </ul>  Goal of Sprint Retrospective Meeting <ol> <li>How the team accomplished sprint items (i.e. what worked, what didn\u2019t)</li> <li>Improve future sprint planning and process using sprint review feedback</li> </ol>   Minimum set of Sprint Retrospective Questions <ul> <li>What did we do well\u2014that if we don\u2019t discuss we might forget?</li> <li>What didn\u2019t go so well?</li> <li>What are we feeling about the upcoming sprint now that we have identified these issues?</li> <li>What have we learned?</li> <li>What still puzzles us?</li> <li>What are the most important things we learned today?</li> <li>Does anyone have an \u201cappreciation\u201d to share with another team member?</li> <li>Where are we confused or unclear on any of the items we discussed today?</li> <li>Are we in agreement on what action item(s) we will take from this sprint retrospective into the upcoming sprint planning?</li> </ul>"},{"location":"CIS-18/sprint.html#example-14-day-sprint-diagram","title":"Example 14 Day Sprint Diagram","text":""},{"location":"CIS-18/user_story_intro.html","title":"User Story Into","text":""},{"location":"CIS-18/user_story_intro.html#agile-development","title":"Agile Development","text":""},{"location":"CIS-18/user_story_intro.html#user-stories","title":"User Stories","text":""},{"location":"CIS-18/user_story_intro.html#qualities-of-a-good-user-story","title":"Qualities of a Good User Story","text":"<ol> <li>Independent<ul> <li>If they are independent, we can work on them without concern for story order.</li> <li>Not always possible</li> </ul> </li> <li>Negotiable<ul> <li>A good story must be able to change or adapt</li> <li>Used as an initial summary that can trigger new discussion, and should capture new information.</li> </ul> </li> <li>Valuable<ul> <li>User should percieve the user story as something important to the application.</li> <li>Helps establish story priority</li> </ul> </li> <li>Estimable<ul> <li>Must be able to estimate Time or Effort</li> <li>Depends on collaboration, skill and knowledge on the team</li> <li>Priority should be based on Value and Effort</li> <li>Effort estimation should be based on past user stories<ul> <li>e.g. If it took 2 weeks and 3 developers to create Login Feature</li> <li>Role Based Security, which is more difficult, can be estimated at 4 weeks<ul> <li>Anything longer than 2 weeks should be split into smaller stories</li> </ul> </li> </ul> </li> </ul> </li> <li>Small<ul> <li>Must fit in a 2 week sprint</li> <li>Easter to estimate time/effort</li> <li>Reduces risk</li> <li>Psychological impact of finishing something</li> </ul> </li> <li>Testable<ul> <li>Makes sure product matches promised deliverable.</li> <li>Adds 2 parts to User Story Template (Acceptance Criteria, Definition of Done)</li> </ul> </li> </ol>"},{"location":"CIS-18/user_story_intro.html#template","title":"Template:","text":"<ol> <li>As a (who wants to accomplish something)</li> <li>I want to (what they want to accomplish)</li> <li>So that (why they want to accomplish that thing)</li> <li>Acceptance Criteria - Metric of Story Progress<ul> <li>List of requirements at user or system level</li> <li>May also include system flow diagrams or sequence diagrams here.</li> <li>Must be specific to the User Story</li> <li>Must be met to ensure store is complete.</li> </ul> </li> <li>Definition of Done - Metric of Sprint Progress<ul> <li>List of criteria for ALL User Stories</li> <li>Sprint work only complete once all criteria are met</li> </ul> </li> </ol>"},{"location":"CIS-18/user_story_intro.html#example","title":"Example:","text":"<ol> <li>As a bank customer</li> <li>I want to withdraw money from an ATM</li> <li>So that I\u2019m not constrained by opening hours or lines at the teller\u2019s</li> <li>Acceptance Criteria<ul> <li>Pre-Condition: the user is a bank customer</li> <li>Pre-Condition: the user has an active ATM card and PIN</li> <li>The user can access the ATM with their ATM card and PIN</li> <li>If the user enters the wrong PIN.</li> <li>Then the user\u2019s card is rejected and returned.</li> <li>The user can enter how much money to withdraw</li> <li>The user takes cash and gets their card back</li> </ul> </li> <li>Definition of Done<ul> <li>ATM code is documehted in UML diagrams</li> <li>ATM withdrawl feature passes regression testing</li> <li>Help documentation is written</li> </ul> </li> </ol>"},{"location":"CIS-18/user_story_lesson.html","title":"User Story Lesson","text":""},{"location":"CIS-18/user_story_lesson.html#writing-effective-user-stories","title":"Writing Effective User Stories","text":""},{"location":"CIS-18/user_story_lesson.html#intro","title":"Intro","text":"Software Design <p>Breaking down what you want to build is incredibly important when it comes to software. Too often, we decide that we\u2019re going to build an application that does something specific without much upfront planning. This is where we can utilize writing stories to help us know what building blocks we\u2019ll need to create in order to accomplish our final end goal.</p>"},{"location":"CIS-18/user_story_lesson.html#learning-objectives","title":"Learning Objectives","text":"<ul> <li>Be able to describe app functionality with user stories</li> <li>Improve current and future project boards</li> <li>Define acceptance criteria for marking a user story complete</li> <li>Start aligning current workflow to professional dev workflows</li> </ul>"},{"location":"CIS-18/user_story_lesson.html#vocabulary","title":"Vocabulary","text":"<ul> <li>Agile workflow - a mode project management that uses short \u201csprints\u201d, flexibility, multidisciplinary teams, and rapid delivery to build a product</li> <li>Project board - organizes user stories, chores, and bugs showing at a glance where in its evolution a project/product is</li> <li>Features - overarching pieces of functionality</li> <li>User story - description of a single user flow in the application</li> <li>Chores - developer tasks that are not user stories (i.e. \u201cUpdate README\u201d, \u201cWrite documentation\u201d, etc) that get added as cards in the project board toward the end of a sprint</li> <li>Bugs - as bugs are found, new project board cards should be created in the project board to track them</li> <li>Sprint - a set and consistent period of time (usually two weeks) of concentrated and focused work with set goals</li> <li>Acceptance criteria - the predefined requirements that must be met in order to mark a user story complete</li> </ul>"},{"location":"CIS-18/user_story_lesson.html#what-is-a-user-story","title":"What is a user story?","text":"Start by telling a story <p>Once upon a time \u2026 With your project partners, choose a project from the list of projects proposed in class</p> <p>As a group, try to describe every possible action a user could take in this app/project!</p> <ul> <li>What is the action? (ex: logging in)</li> <li>What steps go into accomplishing this action? (ex: finding and clicking an input field, typing into it, etc)</li> <li>Why would the user want to do this? (ex: to view their personalized profile)</li> <li>Does this action allow them to take any other actions? (ex: go view their saved favorite items)</li> </ul>  <p>Congrats! You just described several user flows through the application!</p> <p>We\u2019re going to spend the rest of the lesson learning to turn these user flows into an important tool: user stories.</p> <p>A user story describes a single user flow, including not just the steps that need to be taken, but also the motivation a user might have for pursuing that flow, as well as the expected results that tell the developer when the user story has been successfully accomplished.</p>"},{"location":"CIS-18/user_story_lesson.html#anatomy","title":"Anatomy","text":"<p>A good user story: * Is written in a consistent format * Exhibits a tiny chunk of functionality * Can be clearly demonstrated/verified * Represents 1/2 a work day of labor or less</p> <p>Here are two examples of ways to write a user story:</p> <ul> <li> <p>Template 1 (Simple) <pre><code>As a &lt;type of user&gt;, I want to &lt;execute some goal&gt; so that &lt;some reason&gt;\n</code></pre></p> </li> <li> <p>Template 2 (More complete) <pre><code>As a(n) [user type]\nIn order to [extract business value]\nWhen I [take some action]\n  (and [take some other action])\nThen I [observe an outcome]\n  (and I [observe another outcome])\n</code></pre></p> </li> </ul> <p>In a moment, we\u2019ll dive further into this. But let\u2019s take a moment and zoom out: why are we even talking about this?</p>"},{"location":"CIS-18/user_story_lesson.html#whats-the-point","title":"What\u2019s the point?","text":"<p>We\u2019re going over user stories for a few reasons:</p> <ol> <li>Most professional dev teams which use agile practices use project boards filled with user stories to build an application</li> <li>Clear user stories will help you begin to estimate the speed of your own work</li> <li>Reflecting on your user stories can help expose the biases you may have about your imagined users</li> <li>Strong user stories can help clarify and define what you need to test</li> </ol>"},{"location":"CIS-18/user_story_lesson.html#user-stories-in-the-real-world","title":"User stories in the real world","text":"<p>You\u2019ve probably heard about agile workflow. Agile could be an entire lesson unto itself, but for now, know these key points:</p> <ul> <li>Agile is defined by work completed in short sprints</li> <li>Progress and end goals are evaluated at the end of each sprint so work can pivot if necessary</li> <li>Rather than building an entire app and then delivering it, an app is built and delivered feature by feature (ideally most critical to least critical) and is continually under review and improvement</li> <li>Project boards are heavily used, with app features broken down into individual user stories</li> <li>Work for each sprint is divided up amongst a team through various means (assignment by ticket, tickets being given \u201cpoints\u201d according to estimated time for completion, etc)</li> </ul> <p>Out there in the real world, it\u2019s important to be familiar with user stories because they are a key part of how many teams assign work.</p>"},{"location":"CIS-18/user_story_lesson.html#writing-user-stories","title":"Writing user stories","text":""},{"location":"CIS-18/user_story_lesson.html#questions-to-ask-while-writing-user-stories","title":"Questions to ask while writing user stories","text":"<ul> <li>Who is the user you are focusing on? This should be defined</li> <li>What is the goal of the user in this story?</li> <li>What should happen when the user is successful in their goal?</li> <li>What should happen when the user isn\u2019t successful in their goal?</li> <li>What is the acceptance criteria for your user story?</li> </ul>"},{"location":"CIS-18/user_story_lesson.html#user-story-titles","title":"User story titles","text":"<p>Similar to writing a commit message, a user story title is a concise description of the user flow.</p> <p>The titles of your user stories should convey what is being worked on and what the user will be able to do once it has been accomplished. For example:</p> <ul> <li>As a user, I can visit the homepage</li> <li>As a user, I can view a movie\u2019s details</li> <li>As a user, I can update my profile information</li> </ul>"},{"location":"CIS-18/user_story_lesson.html#story-details","title":"Story details","text":"<p>In addition to a title, every single user story should include a description! The description will be detailed and include several items:</p> <ul> <li>The entire workflow of the user when attempting to accomplish the story\u2019s task</li> <li>Any additional resources that would clarify the user story (wireframes, etc)</li> <li>As much context as is needed so a developer could begin working on a random user story without needing to ask additional questions</li> </ul>  Add Details to User Flows <p>Take the user story examples from above:</p> <ul> <li>As a user, I can visit the homepage</li> <li>As a user, I can view a movie\u2019s details</li> <li>As a user, I can update my profile information</li> </ul> <p>and flesh them out with additional information!</p> <ol> <li>What steps need to be taken to accomplish this task</li> <li>When the task is executed, what happens? What does the user see?</li> <li>How will a developer know when the user story has been successfully accomplished?</li> </ol>"},{"location":"CIS-18/user_story_lesson.html#acceptance-criteria","title":"Acceptance criteria","text":"<p>That final piece of information from the previous exercise can be hard to conceptualize! It\u2019s known as the acceptance criteria. It lets a developer know when that particular user story can be considered \u201ccompleted\u201d and finished.</p>  User Story Full Template"},{"location":"CIS-18/user_story_lesson.html#user-story","title":"User Story","text":"<p>As a product manager, I want to score potential ideas, So that I can decide what to include on my product roadmap.</p>"},{"location":"CIS-18/user_story_lesson.html#acceptance-criteria_1","title":"Acceptance criteria","text":"<p>Scenario: The product manager adds potential ideas and ranks the best ideas based on benefit versus cost. Given that I have added two or more ideas and scored them using the Benefit vs Cost scoring model When I click the Rank button Then ideas are sorted with the top-scoring ideas at the top.</p>  <ul> <li>The user story is a goal of the user.</li> <li>The acceptance criteria actually describe the steps the user would take to accomplish their goal.</li> <li>Acceptance criteria should read a lot like our descriptions when we TEST things. Keep this in mind for testing!!!</li> </ul>"},{"location":"CIS-18/week_1.html","title":"Week 1 - Review","text":""},{"location":"CIS-18/week_1.html#cis-12-review","title":"CIS-12 Review","text":""},{"location":"CIS-18/week_1.html#classes-vs-objects","title":"Classes VS Objects","text":"<ul> <li>A Class is a blueprint of an Object</li> <li>One Class can create MANY Objects via its Constructor(s) </li> <li>Constructor is a special method of a class that is (usually) public, has no return type, and named the same as the Class.</li> <li>Each Object has unique values assigned to NON-Static class attributes/fields/data members </li> <li>NON-Static Class methods are Instance or Object methods</li> <li>Static Class methods are class methods and are called by Class name and dot notation </li> <li>this is a keyword that refers to an object of type Class when inside a NON-static instance method of a class.</li> </ul>"},{"location":"CIS-18/week_1.html#packages","title":"Packages","text":"<ul> <li>A Package is just a fancy way of saying, Group of Related Classes</li> <li>Often thought of as a folder hierarchy and used to avoid naming conflicts<ul> <li>i.e. com.domain1.Box can be a different class than com.domain2.Box even though they have the same name because they have different package hierarchies/namespaces com.domain1 and com.domain2</li> </ul> </li> <li>Packages are often packaged as .jar fiels, which are really just zip files with some metadata.</li> <li>Classes in packages can be imported via the Java import statement.</li> <li>You can import a single class or multiple classes at the same time via import.</li> </ul>"},{"location":"CIS-18/week_1.html#diagrams","title":"Diagrams","text":"classDiagram class WeatherStation WeatherStation : -URL url WeatherStation : -List~Display~ displays WeatherStation : -Gson gson WeatherStation : -float temperature WeatherStation : -float humidity WeatherStation : -float pressure WeatherStation : +WeatherStation() WeatherStation : +registerDisplay(display) WeatherStation : +removeDisplay(display) WeatherStation : +notifyDisplays() WeatherStation : +getTemperature() float WeatherStation : +getHumidity() float WeatherStation : +getPressure() float WeatherStation : +measure() class Display Display: -WeatherStation ws Display : update() Display : display() class CurrentConditions CurrentConditions: -WeatherStation ws CurrentConditions : -float temperature CurrentConditions : -float humidity CurrentConditions : +CurrentConditions(weatherstation) CurrentConditions : update() CurrentConditions : display() class StatisticsDisplay StatisticsDisplay: -WeatherStation ws StatisticsDisplay : -float temperatureMin StatisticsDisplay : -float temperatureMax StatisticsDisplay : -float temperatureTotal StatisticsDisplay : -int numReadings StatisticsDisplay : +StatisticsDisplay(weatherstation) StatisticsDisplay : update() StatisticsDisplay : display() class ForecastDisplay ForecastDisplay: -WeatherStation ws ForecastDisplay : -float currentPressure ForecastDisplay : -float lastPressure ForecastDisplay : +ForecastDisplay(weatherstation) ForecastDisplay : update() ForecastDisplay : display() class Client Client: -WeatherStation ws Client: -Display currentConditions Client: -Display statisticsDisplay Client: -Display forecastDisplay Client: +main(args) Display &lt;|.. CurrentConditions Display &lt;|.. StatisticsDisplay Display &lt;|.. ForecastDisplay Display --* WeatherStation Client --&gt; WeatherStation Client --&gt; Display"},{"location":"CIS-18/week_2.html","title":"Week 2 - Fundamental OOP Principles","text":""},{"location":"CIS-18/week_2.html#fundamental-object-oriented-principles","title":"Fundamental Object Oriented Principles","text":"The Beginning <ul> <li>Encapsulation</li> <li>Inheritance</li> <li>Abstraction</li> <li>Polymorphism</li> </ul>"},{"location":"CIS-18/week_2.html#encapsulation","title":"Encapsulation","text":"Definitions <p>Encapsulation: Group single responsibilities and make sure sensitive data is hidden from users.</p>  <p>Below are the important things to remember about encasulation:</p> <ul> <li>Private access modifies should be used to protect instance variables you don\u2019t wish to change outside the class</li> <li>Getters and Setters should be used to protect how objects interact with sensitive data and variables.</li> <li>Encasulation provides access control like R, W, or RW</li> <li>Flexibile: Proper encapsulation means developers won\u2019t inadvertantly change encapsulated code while working on another piece of code that utilizes it.</li> </ul>"},{"location":"CIS-18/week_2.html#inheritance","title":"Inheritance","text":"Definitions <p>Inheritance: Share/inherit instance variables/attributes/fields and methods from superclass (parent) to subclass (child). The child inherits attributes and methods from the parent.</p>  <p>Below are the important things to remember about inheritance:</p> <ul> <li>Every Java class extends the class Object<ul> <li>Which means that every class we create inherits all the methods defined in the Object class (e.g. equals, hashCode, \u2026)</li> </ul> </li> <li>To inherit from a class, you must extend it (i.e. <code>public class Engine extends Part</code>).</li> <li>Java can only inherit/extend a single parent (i.e. no multiple inheritance).</li> <li>Only public and protected methods can be inherited.<ul> <li>So if a method should be private but inheritable, it should be protected</li> </ul> </li> <li>To change inherited methods, they must be overriden by defining a new implementation in the child/subclass</li> <li>Mark a class final (i.e. <code>final class SomeClass { ... }</code>) if you don\u2019t want it to be inherited.</li> <li>Actual type of an object/instance dictates which method is executed (Show display from week 1 again).</li> <li>If the class to be created is a special case of an existing class, inheritance is OK</li> <li>If you notice that inheriting adds more responsibilities to a class, you should form multiple classes of the class. There should only be one reason for each class to change (Single Responsibility Principle).</li> </ul>  <pre><code>// Example parent/super-class\npublic class Superclass {\n\n    private String objectVariable; // Not visible to child/subclass\n    protected String objectName; // Visible to child/subclass, but not visible outside class.\n\n    public Superclass() {\n        this(\"Example\");  // Example of calling its own overloaded contructor\n    }\n\n    public Superclass(String value) {\n        this.objectVariable = value;\n    }\n\n    public String toString() {\n        return this.objectVariable;\n    }\n}\n</code></pre> <pre><code>// Example child/subclass\npublic class Subclass extends Superclass {\n\n    public Subclass() {\n        super(\"Subclass\"); // Example of calling parent/super class constructor\n    }\n\n    @Override\n    public String toString() {\n        return super.toString() + \"\\n  from the child!\";\n    }\n}\n</code></pre>"},{"location":"CIS-18/week_2.html#abstraction","title":"Abstraction","text":"Definitions <p>Abstration: The process of hiding certain details and showing only essential information to the user.</p> <p>We\u2019ve already talked about using methods to encapsulate and abstract algorithms, but abstraction in OOP is more broad, and can be accomplished with two different Java constructs: Abstract classes and Interfaces.</p> <p>Abstraction should be used frequently in APIs and libraries to hide implementation details that would only create complexity for the consumers of the API or library or to achieve class security by hiding instance variables or methods that the API/library designers know changing would change or alter desired functionality.</p>"},{"location":"CIS-18/week_2.html#abstract-class","title":"Abstract Class","text":"Definitions <p>Abstract class: A class that cannot be used to create objects because only some of the instance methods are implemented (i.e. not empty).</p>  <p>Below are the important things to remember about Abstract Classes:</p> <ul> <li>They are defined by public abstract class \u2026</li> <li>Useful when there exists a clear concept, but that concept is not a good candidate for an object in itself.</li> <li>They can contain normal implemented methods (usually methods common to concept).</li> <li>Abstract methods are defined public abstract void methodName();</li> <li>They must be inherited from another class, and the abstract methods (i.e. empty methods / method signatures)  must be implemented to create objects.</li> <li>Inheritance is used to implement Abstract classes.</li> <li>Unlike Interfaces, Abstract Classes can contain Object/Instance variables and Constructors</li> </ul>   <pre><code>// Example Abstract Class\npublic abstract class Operation {\n\n    private String name;\n\n    public Operation(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public abstract void execute(Scanner scanner);\n}\n</code></pre> <pre><code>// Example Inheriting from Abstract Class\npublic class PlusOperation extends Operation {\n\n    public PlusOperation() {\n        super(\"PlusOperation\");\n    }\n\n    @Override\n    public void execute(Scanner scanner) {\n        System.out.print(\"First number: \");\n        int first = Integer.valueOf(scanner.nextLine());\n        System.out.print(\"Second number: \");\n        int second = Integer.valueOf(scanner.nextLine());\n\n        System.out.println(\"The sum of the numbers is \" + (first + second));\n    }\n}\n</code></pre>"},{"location":"CIS-18/week_2.html#interface","title":"Interface","text":"Definitions <p>Interface: A completely abstract class, meaning all method bodies are empty (i.e. not implemented). Interfaces define behavior (i.e. actions, verbs, methods) that are required from a class without implementing those behaviors (i.e. methods). </p>  <p>Below are the important things to remember about Interfaces:</p> <ul> <li>They\u2019re defined the same way that regular Java classes are, but public interface \u2026 is used instead of public class \u2026</li> <li>An Interface Is a Contract of behavior (i.e. methods)<ul> <li>Interfaces define behavior through method names and their return values (AKA method signatures). </li> </ul> </li> <li>Interfaces are always abstract and public, so access modifers are sometimes ommitted. </li> <li>Interface attributes/fields are by default public, static and final</li> <li>An interface cannot contain a constructor because it cannot be used to create objects</li> <li>Interfaces must be implemented (kinda like inherited), but uses implements instead of extends. <ul> <li>On implementation of an interface, you must override all of its methods.</li> <li>You can implement multiple interfaces in one class.</li> </ul> </li> </ul>   <pre><code>// Example Interface Declaration\npublic interface Readable {\n    String read();\n}\n</code></pre> <pre><code>// Example Interface Implementation\npublic class TextMessage implements Readable {\n    private String sender;\n    private String content;\n\n    public TextMessage(String sender, String content) {\n        this.sender = sender;\n        this.content = content;\n    }\n\n    public String getSender() {\n        return this.sender;\n    }\n\n    public String read() {\n        return this.content;\n    }\n}\n</code></pre> <pre><code>// Another Example Interface Implementation\npublic class Ebook implements Readable {\n    private String name;\n    private ArrayList&lt;String&gt; pages;\n    private int pageNumber;\n\n    public Ebook(String name, ArrayList&lt;String&gt; pages) {\n        this.name = name;\n        this.pages = pages;\n        this.pageNumber = 0;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public int pages() {\n        return this.pages.size();\n    }\n\n    public String read() {\n        String page = this.pages.get(this.pageNumber);\n        nextPage();\n        return page;\n    }\n\n    private void nextPage() {\n        this.pageNumber = this.pageNumber + 1;\n        if(this.pageNumber % this.pages.size() == 0) {\n            this.pageNumber = 0;\n        }\n    }\n}\n</code></pre>"},{"location":"CIS-18/week_2.html#polymorphism","title":"Polymorphism","text":"Definitions <p>Polymorphism: The concept that many related classes can perform a single action in many different ways.</p> <p>Regardless of the type of the variable, the method that is executed is always chosen based on the actual type of the object. Objects are polymorphic, which means that they can be used via many different variable types (i.e. Dog -&gt; Animal -&gt; Object). The executed method always relates to the actual type of the object. This phenomenon is called polymorphism.</p>  <p>Below are the important things to remember about Polymorphism:</p> <ul> <li>Polymorphism arises through inheritance when multiple related classes share common actions/methods, but those methods do different things. </li> <li>It is useful for code reuse of existing class methods and attributes.</li> <li>Objects/instances can be represented through all of its actual types.</li> </ul>   <pre><code>class Animal {\n    public void animalSound() {\n        System.out.println(\"The animal makes a sound\");\n    }\n}\n\nclass Pig extends Animal {\n    public void animalSound() {\n        System.out.println(\"The pig says: wee wee\");\n    }\n}\n\nclass Dog extends Animal {\n    public void animalSound() {\n        System.out.println(\"The dog says: bow wow\");\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        // Animal, Dog, and Pig are all treated the same\n        Animal[] animals = {new Animal(), new Pig(), new Dog()};\n        for( Animal animal : animals) {\n            // But animalSound performs a different action\n            animal.animalSound();\n        }\n    }\n}\n</code></pre>"},{"location":"CIS-18/week_2.html#example-of-polymorphism-actual-type-dictates-action","title":"Example of Polymorphism: Actual Type Dictates Action","text":"<pre><code>import java.util.ArrayList;\nclass Main {\n    public static void main(String[] args) {\n        ArrayList&lt;Point&gt; points = new ArrayList&lt;&gt;();\n        points.add(new Point(4, 8));\n        points.add(new ColorPoint(1, 1, \"green\"));\n        points.add(new ColorPoint(2, 5, \"blue\"));\n        points.add(new Point3D(5, 2, 8));\n        points.add(new Point(0, 0));\n\n        for (Point p: points) {\n            System.out.println(p);\n        }\n    }\n}\n</code></pre> <pre><code>// Point type in 2D coordinate system\npublic class Point {\n\n    private int x;\n    private int y;\n\n    public Point(int x, int y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    // Distance between two points if you can only travel in the direction of the coordinate axes.\n    public int manhattanDistanceFromOrigin() {\n        return Math.abs(x) + Math.abs(y);\n    }\n\n    protected String location(){\n        return x + \", \" + y;\n    }\n\n    @Override\n    public String toString() {\n        return \"(\" + this.location() + \") distance \" + this.manhattanDistanceFromOrigin();\n    }\n}\n</code></pre> <pre><code>// ColorPoint is identical to Point, but also has color\npublic class ColorPoint extends Point {\n\n    private String color;\n\n    public ColorPoint(int x, int y, String color) {\n        super(x, y);\n        this.color = color;\n    }\n\n    @Override\n    public String toString() {\n        return super.toString() + \" color: \" + color;\n    }\n}\n</code></pre> <pre><code>// Point3D has no color but can be derived from a 2D Point\npublic class Point3D extends Point {\n\n    private int z;\n\n    public Point3D(int x, int y, int z) {\n        super(x, y);\n        this.z = z;\n    }\n\n    @Override\n    protected String location() {\n        return super.location() + \", \" + z;\n    }\n\n    // Distance between two points if you can only travel in the direction of the coordinate axes.\n    @Override\n    public int manhattanDistanceFromOrigin() {\n        return super.manhattanDistanceFromOrigin() + Math.abs(z);\n    }\n}\n</code></pre>  Walkthrough of Actual object Type Affecting Action (i.e. Polymorphism) <ol> <li>A call of toString in the class Point3D does not exist, so the superclass is next to be examined.</li> <li>A call of toString in the superclass point is found, so the code inside the implementation of that method is executed<ul> <li>So the exact code to be executed is <code>return \"(\"+this.location()+\") distance \"+this.manhattanDistanceFromOrigin();</code></li> <li>The method <code>location</code> is executed first</li> <li>Look for a definition of <code>location</code> in the class Point3D. It can be found, so its code is executed.</li> <li>This <code>location</code> calls the <code>location</code> of the superclass to calculate the result.</li> <li>Next we look for a definition of <code>manhattanDistanceFromOrigin</code> in the Point3D class. It\u2019s found and its code is then executed.</li> <li>Again, the method calls the similarly named method of the superclass during its execution.</li> </ul> </li> </ol>"},{"location":"CIS-18/week_3.html","title":"Week 3 - Observer Design Pattern","text":""},{"location":"CIS-18/week_3.html#the-observer-design-pattern","title":"The Observer Design Pattern","text":""},{"location":"CIS-18/week_3.html#classification","title":"Classification","text":"<ul> <li>Behavioral Design Pattern</li> </ul>"},{"location":"CIS-18/week_3.html#pattern-definition","title":"Pattern Definition","text":"<ul> <li>Define a one-to-many dependency between object so that when one object changes state, all its dependents are notified and updated automatically.</li> <li>In the observer pattern, the objects that watch on the state of another object are called Observers and the object that is being watched is called the Subject.</li> </ul>"},{"location":"CIS-18/week_3.html#representations","title":"Representations","text":""},{"location":"CIS-18/week_3.html#mermaid-graph","title":"Mermaid Graph","text":"<pre><code>classDiagram\n    Subject &lt;|.. ConcreteSubject: implements\n    Observer &lt;|.. ConcreteObserver: implements\n    ConcreteSubject \"0\" --&gt; \"*\" Observer : Association\n    ConcreteObserver \"0\" --&gt; \"*\" Subject : Association\n    class Observer{\n        &lt;&lt;interface&gt;&gt;\n        +update(): void\n        +setSubject(Subject): void\n    }\n    class ConcreteObserver{\n        +update(): void\n        +setSubject(Subject): void\n    }\n    class Subject{\n        &lt;&lt;interface&gt;&gt;\n        +registerObserver(Observer):void\n        +unregisterObserver(Observer):void\n        +notifyObservers():void\n        +getState():Object\n        +setState(Object):void\n    }\n    class ConcreteSubject{\n        +registerObserver(Observer):void\n        +unregisterObserver(Observer):void\n        +notifyObservers():void\n        +getState():Object\n        +setState(Object):void\n    }\n</code></pre>"},{"location":"CIS-18/week_3.html#uml","title":"UML","text":""},{"location":"CIS-18/week_3.html#usage","title":"Usage","text":"<ul> <li>Useful when you are interested in the state of an object and want to get notified whenever there is any change.</li> </ul>"},{"location":"CIS-18/week_3.html#real-world-usages","title":"Real World Usages","text":"<ul> <li>Model-View-Controller (MVC) frameworks use Observer: Model is the Subject and Views are Observers that can register to get notified of any change to the model. </li> <li>Java Message Service (JMS) uses Observer+Mediator: To allow applications to subscribe and publish data to other applications.</li> <li>Javascript Events use Observer: inputs as Subjects with functions as Listeners.</li> <li>Many GUI libraries including Swing and JavaFX use Observer: Components are the Subject allowing add/remove listeners, which are the Observers.</li> </ul>"},{"location":"CIS-18/week_3.html#application-to-my-real-world-application","title":"Application to my Real World Application","text":"<ul> <li>Application: ETL Pipeline</li> <li>Pattern Application: Observe the progress if the Payload through the Stages of a Pipeline</li> <li>Breakdown: Subject is the Pipeline that will notify Progress observers at the begining or ending of each stage. Progress observers will be notified of the input or output at each stage and be able to: Report statistical progress, Trigger other pipelines with observed output at a particular stage, thus allowing for threaded Pipeline runs.</li> </ul>"},{"location":"CIS-18/week_3.html#java-code-example","title":"Java Code Example","text":"<p>Observer Design Pattern</p>"},{"location":"CIS-18/week_3.html#main-take-aways-from-the-textbook","title":"Main Take-Aways from the textbook","text":"<ul> <li>The Observer Pattern defines a one-to-many relationship between objects.</li> <li>Subjects update Observers using a common interface.</li> <li>Observers of any concrete type can participate in the pattern as long as they implement the Observer interface.</li> <li>Observers are loosely coupled in that the Subject knows nothing about them, other than that they implement the Observer interface.</li> <li>You can push or pull data from the Subject when using the pattern (pull is considered more \u201ccorrect\u201d).</li> <li>The Observer Pattern is related to the Publish/Subscribe Pattern, which is for more complex situations with multiple Subjects and/or multiple message types.</li> <li>The Observer Pattern is a commonly used pattern, and we\u2019ll see it again when we learn about Model-View-Controller.</li> </ul>"},{"location":"CIS-18/week_3.html#main-oo-principles-of-observer-pattern","title":"Main OO Principles of Observer Pattern","text":"<ul> <li>Strive for loosely coupled designs<ul> <li>Subject knows very little about observers relying on its data.</li> </ul> </li> <li>Encapsulate what Varies<ul> <li>The state of the Subject and number/type of Observers vary, and both are encapsulated in separate classes.</li> <li>We can add Observers dependent on the Subject without having to change the subject.</li> </ul> </li> <li>Program to an Interface not an Implementation<ul> <li>Both Subject and Observer use interfaces allowing both to keep generic references in our concrete implementations. This lends to loose coupling.</li> </ul> </li> <li>Favor composition over inheritance<ul> <li>The Subject maintains a List, which is composition, and the Observers maintain a reference to the Subject, which is also composition. No inheritance hierarchy exists.</li> </ul> </li> </ul>"},{"location":"CIS-18/week_4.html","title":"Week 4 - Decorator Design Pattern","text":""},{"location":"CIS-18/week_4.html#the-decorator-design-pattern","title":"The Decorator Design Pattern","text":""},{"location":"CIS-18/week_4.html#classification","title":"Classification","text":"<ul> <li>Structural Design Pattern</li> </ul>"},{"location":"CIS-18/week_4.html#pattern-definition","title":"Pattern Definition","text":"<ul> <li>Attach additional responsibilities to an object dynamically.<ul> <li>Think of a decorator WRAPPING around some other object or method.</li> </ul> </li> <li>Decorators provide a flexible alternative to subclassing for extending functionality.</li> <li>Open/Close Principle: Open for extension and closed to modification.<ul> <li>Decorator allows for this seemingly contradictory goals, but be CHOOSY when you use it because it can lead to costly, hard-to-understand code.</li> </ul> </li> <li>The decorator adds its own behavior before and/or after delegating to the object it decorates to do the rest of the job.</li> </ul>"},{"location":"CIS-18/week_4.html#representations","title":"Representations","text":""},{"location":"CIS-18/week_4.html#mermaid-graph","title":"Mermaid Graph","text":"<pre><code>classDiagram\n    ConcreateComponent ..|&gt; Component : implements\n    ComponentDecorator ..|&gt; Component : implements\n    ConcreateDecoratorA --|&gt; ComponentDecorator : extends\n    ConcreateDecoratorB --|&gt; ComponentDecorator : extends\n    ComponentDecorator *-- Component : extends\n    class Component{\n        &lt;&lt;interface&gt;&gt;\n        +methodA()\n        +methodB()\n    }\n    class ConcreateComponent{\n        +ConcreateComponent()\n        +methodA()\n        +methodB()\n    }\n    class ComponentDecorator{\n        Component wrappedComponent\n        ComponentDecorator(Component)\n        +methodA()\n        +methodB()\n    }\n    class ConcreateDecoratorA{\n        +ConcreateDecoratorA(Component)\n        +methodA()\n        +methodB()\n        +newBehavior()\n    }\n    class ConcreateDecoratorB{\n        Object newState\n        +ConcreateDecoratorB(Component)\n        +methodA()\n        +methodB()\n    }\n</code></pre>"},{"location":"CIS-18/week_4.html#uml","title":"UML","text":"<ul> <li>Decorated class can be interface, abstract, or a recular class</li> <li>Inheritance is used, but only for type matching if its an abstract or regular class</li> <li>New behavior is gained through composition, not inheritance.</li> <li>New behavior can be added before, or after in decorated objects methods.</li> </ul>"},{"location":"CIS-18/week_4.html#usage","title":"Usage","text":"<ul> <li>Useful when you need to add functionality to another class or object but you can\u2019t, or don\u2019t want to, modify the code of the existing object.</li> <li>When you need an object where functionality needs to be added or removed whimsically (licensed versus unlicensed features, perhaps!).</li> <li>To avoid subclass explosion if a large number of independent features need to be supported and subclassing to support every combination would lead to class explosion.</li> </ul>"},{"location":"CIS-18/week_4.html#real-world-usages","title":"Real World Usages","text":"<ul> <li>java.io package uses decorators to decorate streams of data. Book example, ZipInputStram(BufferedInputStream(FileInputStream))<ul> <li>FileInputStream, StringBufferInputStream, ByteArrayInputStream are the concrete components of the Inputstream interface.</li> <li>ZipInputStream, BufferedInputStream are the concrete decorators of the FilterInputStream, which is the component decorator.</li> </ul> </li> <li>Adding authentication and authorization to a method or object is a great use for a decorator.</li> <li>Adding encryption and decryption to existing code</li> <li>Adding logging/auditing to existing code</li> <li>Adding a testing framework to existing code for pre and post conditions.</li> <li>Map/Reduce decorators to map and reduce a stream of input for data analytics.</li> </ul>"},{"location":"CIS-18/week_4.html#application-to-my-real-world-application","title":"Application to my Real World Application","text":""},{"location":"CIS-18/week_4.html#java-code-example","title":"Java Code Example","text":"<p>Decorator Design Pattern</p>"},{"location":"CIS-18/week_4.html#main-take-aways-from-the-textbook","title":"Main Take-Aways from the textbook","text":"<ul> <li>Inheritance is usually NOT the best way to extend design.</li> <li>Build code that can be expanded, but without modifying existing code.</li> <li>Composition and delecation is a great way to add new runtime behavior.</li> <li>Avoid subclass explosion with the Decorator Pattern when you have many new features you need to add.</li> <li>Because decorators implement or inherit the base type, you can wrap as many as you want around each-other.</li> <li>Overuse of decorators can make code more cumbersom.</li> </ul>"},{"location":"CIS-18/week_4.html#main-oo-principles-of-observer-pattern","title":"Main OO Principles of Observer Pattern","text":"<ul> <li>Open-Closed Principle<ul> <li>Open for extension and closed for modification.</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_1.html","title":"Database Systems","text":""},{"location":"CIS-50/Chapter_1.html#database-systems","title":"Database Systems","text":""},{"location":"CIS-50/Chapter_1.html#data-vs-information","title":"Data Vs Information","text":"<ul> <li>Data is raw facts, the building blocks of info</li> <li>Information is processing raw data for meaning<ul> <li>Accurate, contextual, and timely information is key to good decision making.</li> </ul> </li> <li>Other Relevant terms:<ul> <li>knowledge: The body of information and facts about a specific subject. Knowledge implies familiarity, awareness, and understanding of information as it applies to an environment. A key characteristic is that new knowledge can be derived from old knowledge.</li> <li>data management: A process that focuses on data collection, storage, and retrieval. Common data management functions include addition, deletion, modification, and listing.</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_1.html#what-is-a-database","title":"What is a Database","text":"<ul> <li>database: A shared, integrated computer structure that houses a collection of related data. A database contains two types of data: end-user data (raw facts) and metadata.</li> <li>metadata: Data about data.<ul> <li>Relationships</li> <li>Data characteristics (names, types, null, etc.)</li> </ul> </li> <li> <p>Database management system (DBMS): The collection of programs that manages the database structure and controls access to the data stored in the database.</p> </li> <li> <p>A database provides:</p> <ul> <li>Improved data sharing</li> <li>Improved data security</li> <li>Better data integration</li> <li>Minimized data inconsistency</li> <li>Improved data access</li> <li>Improved decision making</li> <li>Increased end-user productivity</li> </ul> </li> <li> <p>DB Types and Classifications</p> <ul> <li>User Classification<ul> <li>Single User/Desktop: 1 user on a dekstop</li> <li>Multiuser/Workgroup: 50 or less users supported</li> <li>Enterprise: Supports hundreds of thousands of users</li> </ul> </li> <li>Location Classification <ul> <li>Centralized: single site, multi-user</li> <li>Distributed: 2 or more independent sites with related data, multi-user</li> <li>Cloud Database: Maintained by cloud providers, unknown hardware, but known performance</li> </ul> </li> <li>Data Classification (i.e. type of data stored)<ul> <li>General-Purpose: wide variety of data used by multiple disciplines</li> <li>Discipline-Specific: Focused on specific subjects.</li> </ul> </li> <li>Data Structure Classification<ul> <li>Unstructured data: original raw data</li> <li>structured data: formatted, and stored to aid storage and retrieval</li> <li>Semi-Structured data: Partially structured.<ul> <li>XML Database: an example of a semi-structured DB.</li> </ul> </li> </ul> </li> <li>Usage Classification (Most common today)<ul> <li>Operational: Designed to support day-to-day operations</li> <li>OLTP: Same as Operational</li> <li>Transactional: Same as Operational</li> <li>Production: Same as Operational</li> <li>Analytical: Tactical / Strategic decision usage</li> <li>Data warehouse: historical data optimized for decision support<ul> <li>Warehouse data from Operational DB + Other Sources</li> <li>OLAP: Frontend tools used to model data on warehouse</li> <li>BI: Comprehensive set of tools used to make business decisions on warehouse</li> </ul> </li> </ul> </li> <li>NoSQL (Not Just SQL)<ul> <li>Not a traditional RDBMS</li> <li>built to handle: volume, variety, and velocity of data of new business demands from social medai</li> </ul> </li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_1.html#why-design-a-database","title":"Why Design a Database","text":"<ul> <li>To make data atomic</li> <li>Avoid repetetive data</li> <li>Optimize storage, avoid unnecessary nulls</li> <li>Optimize retrieval via indexing and views</li> </ul>"},{"location":"CIS-50/Chapter_1.html#database-evolution","title":"Database Evolution","text":"<ul> <li>DP Problems: data inconsistency, data anomaly, data dependence, and structural dependence<ul> <li>Lengthy development times</li> <li>Difficulty getting quick answers</li> <li>Complex to manage and administrate - Data Redundancy, islands of info, no data integrity</li> <li>Lacked security and data sharing</li> <li>Difficult to change - Structural dependence</li> <li>Data type change leads to program change - Data dependence</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_1.html#database-components","title":"Database Components","text":"<ul> <li>Hardware: servers, workstations, switches, physical storage devices</li> <li>Software:<ul> <li>Operating System: Linux, MacOS Unix, Windows</li> <li>DBMS Software: MySQL, SQL Server, Oracle, DB2, PostgreSQL</li> <li>Applications: DBBeaver, SQL Studio</li> </ul> </li> <li>People: Sys Admins, DBAs, DB Architects, Developers, End Users</li> <li>Procedures: Audits, monitoring, standards of business.</li> <li>Data: set of facts enetered into DB. </li> </ul>"},{"location":"CIS-50/Chapter_1.html#main-functions-of-rdbms","title":"Main Functions of RDBMS","text":"<ul> <li>Data Dictionary Mgmt: schema, metadata, removes structural and data dependence from DBMS</li> <li>Data Storage Mgmt: Manages complex structures required for storage and retrieval. Important for DB Perf. Tuning. </li> <li>Data Transformation and Presentation: Coerces data into required formats. Relieves you from chore of distinguishing between logical data and physical data format (think date formatting VS how its stored).</li> <li>Security Mgmt: User level security, CRUD ACLs, query and report access</li> <li>Multiuser access control: Multi-CRUD operations without violating DB integrity</li> <li>Backup and recovery Mgmt: Just what it sounds like</li> <li>Data Integrity Mgmt: Integrity rules to reduce redundancy and maximize data consistency. Relationships are used to enforce data integrity</li> <li>Database Acess Languages and APIs: query lang (SQL), APIs to Java, C, C#, Python, etc.</li> <li>Database Comm Interface: Direct connect to websites, email apps, etc.</li> </ul>"},{"location":"CIS-50/Chapter_2.html","title":"Data Models","text":""},{"location":"CIS-50/Chapter_2.html#data-models","title":"Data Models","text":""},{"location":"CIS-50/Chapter_2.html#importance-of-data-modeling","title":"Importance of Data Modeling","text":"<ul> <li>Helps clarify how all the pieces of a business fit together, but can drill down into details. (High Level and Detailed views).</li> <li>A good Data Model (Blueprint) means different end-user views of the data won\u2019t matter.</li> </ul>"},{"location":"CIS-50/Chapter_2.html#data-modeling-foundation","title":"Data Modeling Foundation","text":"<ul> <li>Data Modeling: The process of creating a specific data model for a problem domain.<ul> <li>Starts with simple problem and understanding</li> <li>Increases detail as understanding increases</li> <li>When complete Data Model is a blueprint for:<ul> <li>Instructions to build a database</li> <li>Meets all end-user requirements</li> <li>Will clearly be defined in text and diagrams</li> <li>Should meet at least these 3 criteria<ul> <li>Description of the data structures</li> <li>Enforcable data integrity rules</li> <li>Method for manipulating and transforming data.</li> </ul> </li> </ul> </li> </ul> </li> <li>Data Model: Represents data structures and their characteristics relations, constraints, transformations, and other constructs with the purpose of supporting a specific problem domain.</li>  </ul>"},{"location":"CIS-50/Chapter_2.html#building-blocks","title":"Building Blocks:","text":"<ul> <li>Entities: Nouns</li> <li>Attributes: Characteristic of Entity</li> <li>Relationships: How Entities are associated (usually linking verbs)<ul> <li>1:M, 1..*: One to many</li> <li>M:N or ..: Many to many</li> <li>1:1 or 1..1: One to one</li> </ul> </li> <li>Constraints: Data restrictions<ul> <li>Ensure data integrity</li> <li>Expressed as rules:</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_2.html#business-rules--database-design","title":"Business Rules &amp; Database Design","text":"<ul> <li>Business Rules are policies, procedures, and principles of organizations.</li> <li>They are also the first step in identifying and creating the aforementioned building blocks</li> <li>Rules for Business Rules:<ul> <li>Should be easy to understand</li> <li>Should be widely disseminated</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_2.html#business-rule-discovery","title":"Business Rule Discovery","text":"<ul> <li>Direct Interviews with End-Users (managers, policy makers)<ul> <li>Verify end-user perceptions, however</li> <li>Verify end-user perceptions, however</li> </ul> </li> <li>Documentation</li> </ul>  Note <p>Document identified business rules to:     * Standardize the company\u2019s view of data     * Facilitate communication between users and designers     * Abets understanding scope of data     * Clarifies business process and perceptions     * Allows developing and re-visting correct relationships and constraints.</p>"},{"location":"CIS-50/Chapter_2.html#translating-business-rules-into-a-data-model","title":"Translating Business Rules into a Data Model","text":"<ul> <li>Nouns often translate into an Entities.</li> <li>Verbs often translate into relationships between entities.</li> <li>From business rule, determine cardinality by assuming bi-directional relationships and asking:<ul> <li>How many instances of entity B are related to entity A</li> <li>How many instances of entity A are related to entity B</li> </ul> </li> <li>Attributes can also be nouns or adverbs, but generally are characteristics of the entities.</li> <li>Naming conventions should be followed:<ul> <li>CUS_CREDIT_LIMIT: e.g. field/attribute name: All upper case, proceeded by Entity Abbrev, underscores for spaces.</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_2.html#evolution-of-major-models","title":"Evolution of Major Models","text":"<ul> <li>Hierarchical model: Appendix K<ul> <li>Upside-down tree</li> <li>Parent can have many children, but children only have a single parent.</li> <li>Composed of segments, which are like file-system records</li> </ul> </li> <li>Network model: Appendix L<ul> <li>DB is a collection of records with 1:M relationships, but children can have many parents.</li> <li>Defined:<ul> <li>Schema (Org of DB as seen by DBA, tables, indexes, views, and queries),</li> <li>SubSchema (Org of DB as seen by Applications),</li> <li>DML (Defines how to manipulate DB i.e. SQL),</li> <li>DDL (Allows DBA to define Schema Structure)</li> </ul> </li> <li>Limited Ad-Hoc queryability</li> <li>Heavy demand on application developers</li> <li>Structural changes lead to application massive changes (dats dependence)</li> </ul> </li> <li>Relational model (Solves general Data Problems):<ul> <li>Based on mathematical relation concept (But think of it as a TABLE of ROWS and COLUMNS)</li> <li>COLUMNS are attributes, and ROWS are called tuples</li> <li>TABLES: complete data and structural independence because it is a logical structure.<ul> <li>How a table is stored is of no concern to a user or designer.</li> </ul> </li> <li>RDBMS sophisticated mathematical data manipulation constructs, but they are hidden from the end-user!!!</li> <li>Queries are intuitive and logical (SQL, specifies what must be done without expressing HOW).</li> <li>Tables are releated via a common attribute</li> <li>Easy to diagrame with Relational Diagrams</li> <li>3 Simple Parts<ul> <li>User Interface: DBBeaver, Sql Studio, etc. Helps generate SQL</li> <li>Collection of Tables: Pesents data in an easy to unserstand fashion.</li> <li>SQL Engine: Translate SQL user requests into complex mathematical data manipulations.</li> </ul> </li> <li>Due to robust mathematical foundation RDBMs can easily be extended with new capabilities like XML and Objects.</li> </ul> </li> <li>Entity relationship model:<ul> <li>Graphical way of representing the relational model with ERDs</li> <li>Entities: Rectangles<ul> <li>Name: Noun in center of rectangle.</li> </ul> </li> <li>Attributes: Circles branched from entities in ERD<ul> <li>Characteristics of Entity</li> </ul> </li> <li>Relationships: Diamond, Crows Foot, or UML/Class notation. </li> </ul> </li> <li>OO Model (Solves specific needs): Appendix G<ul> <li>Popular in CAD, GIS markets, which require complex objects.</li> <li>Data and relationships contained in single structure known as an object.</li> <li>Contains all operations that can be performed on an object.</li> <li>Components:<ul> <li>Object: Single instance of a real world entity</li> <li>Attributes: Properties of an object</li> <li>Class: Collection of similar objects with shared structure.</li> <li>Methods: Behaviors you can run on objects.</li> <li>Class Hierarchy: upside-down tree with single parent relationship</li> <li>Inheritance: Can inherit attributes and methods of parent.</li> <li>Depicted with UML</li> </ul> </li> </ul> </li> <li>Object/Relational and XML<ul> <li>ERDM adds OO features into simpler RDM structure.<ul> <li>Encapsulated data and methods</li> <li>Extensible Data Types based on Classes</li> </ul> </li> <li>XML Databases emerged to manage unstructured data like e-mail, web-pages, diagrams, etc.</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_2.html#emerging-data-models","title":"Emerging Data Models","text":"<ul> <li>Exponential data growth</li> <li>Getting actionable BI data from Petabytes of collected data has become paramount.<ul> <li>Browsing patterns, purchasing histories, customer preference, customer behaviors, social connections.</li> <li>Mobile data, GPS, RFID, sensors, IoT, sound, pictures, etc.</li> </ul> </li> <li>Big Data: Find better ways to manage large data, get valuable business insights, but reduce costs.<ul> <li>3Vs:<ul> <li>Volume: Petabytes of data</li> <li>Velocity: Exponential growth, and need to mine it quickly (Response time is expected to be nearly instant).</li> <li>Variety: Many different data formats not suitable to traditional RDBMS.</li> </ul> </li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_2.html#bigdata-technologies","title":"BigData Technologies","text":"<ul> <li>hadoop: java based, distributed, with thousands of nodes.<ul> <li>Componenets are HDFS and MapReduce</li> <li>HDFS: Write once, read-many model<ul> <li>Name Node: Stores all FS metadata</li> <li>Data Node: Stores fixed data-blocks that gets replicated</li> <li>Client Node: User interface to HDFS</li> </ul> </li> <li>MapReduce: API that works with structured and unstructured data<ul> <li>Uses many nodes to perform 2 functions Map and Reduce</li> <li>Map divides a job, Reduce reduces it into a filtered result set.</li> </ul> </li> </ul> </li> <li>NoSQL: Large distributed DB System that stores structured and unstructured data.<ul> <li>They are not based on RDBMS Model</li> <li>They are highly distributed</li> <li>They are highly scalable, fault tolerant, and available</li> <li>Support data with large number of attributes but sparse entity types</li> <li>Built for performance and not data consistency</li> <li>Examples:<ul> <li>Key/Value stores: Memcached, Redis</li> <li>Document DBs: Mongo, ElasticSearch</li> <li>Graph DBs: Neo4J</li> </ul> </li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_2.html#classification-of-data-models","title":"Classification of Data Models","text":"<ul> <li>Classified by ANSI/SPARC defined Levels of Abstraction (External, Conceptual, Internal, Physical)<ul> <li>External: Subset of the Data Model necessary for the application developer or report writers.</li> <li>Conceptual: The global (Bird\u2019s Eye) view of the data model. A Macro picture of the organization\u2019s data.</li> <li>Internal: Map of conceptual model to a specific DBMS<ul> <li>Entities of Conceptual model are mapped to Tables</li> <li>Attributes to columns, data-types, constraints, etc.</li> </ul> </li> <li>Physical: The actual hardware (SSDs, SAN, etc.) the data is stored on.</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_3.html","title":"The Relational Database Model","text":""},{"location":"CIS-50/Chapter_3.html#the-relational-database-model","title":"The Relational Database Model","text":"<ul> <li>3 Well defined components<ul> <li>A logical data structure represented by relations</li> <li>A set of integrity rules to enforce that the data is consistent and remains consistent over time</li> <li>A set of operations that defines how data is manipulated</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_3.html#rdm-logical-structure","title":"RDM Logical Structure","text":"<ul> <li>DBMS sits between application and Database and abstracts data and metadata.</li> <li>RDM allows designer to ignore physical data layer  by focusing on logical layer.</li> <li>Table/Relation concept leads to structural and data independence.</li> </ul>"},{"location":"CIS-50/Chapter_3.html#basic-components--table-structure","title":"Basic Components &amp; Table Structure","text":"Term RDM Term Interpretation     Table Relation sometimes mistakenly called a file   Row Tuple sometimes mistakenly called a record   Columns Attributes sometimes mistakenly called a field   Keys Unique Group of Attributes Determiniation: Knowing A -&gt; Knowing B     <ul> <li>Keys are Full Functional Dependencies, Knowing the Key attribute(s) -&gt; determins the values of other attributes.</li> <li>Full indicates ALL Key Attributes are necessary to determine determinants.<ul> <li>e.g. Determinant (Key) determins -&gt; Determinant (Other attributes)</li> <li>STU_NUM -&gt; (STU_LNAME, STU_FNAME, STU_GPA)</li> </ul> </li> <li>Composite Keys: keys with more than one key attribute</li> <li>Super Key: Uniquly determins (one and onkly one Row) all other attributes in table (Full Functional Dependency)</li> <li>Candidate Key: Superkey without unnecessary attributes.</li> <li>Primary Key: A candidate key chosen by the designer<ul> <li>Ensures Entity Integrity (Rows unique) by ensuring:<ul> <li>PK is unique</li> <li>PK can\u2019t be NULL</li> </ul> </li> </ul> </li> <li>NULL: Absence of value<ul> <li>Many NULLS indicates bad design</li> <li>Some can\u2019t be avoided (e.g. middle name)</li> <li>Can cause issues with COUNT, SUM, etc.</li> <li>Can cause issues with JOINs</li> </ul> </li> <li>Foreign Key: PK of one table placed in another to create a relationship.<ul> <li>Ensures Referential Integrity (Every FK must be NULL or have a valid PK in related table).</li> </ul> </li> <li>Secondary Key: Key use to narrow/speed up query results<ul> <li>Not guranteed to be unique</li> </ul> </li> </ul>  <ul> <li>Some designers use flags instead of NULLS to alert user/application of certain conditions.</li> </ul>"},{"location":"CIS-50/Chapter_3.html#relational-operators--manipulation","title":"Relational Operators &amp; Manipulation","text":"<ul> <li>Relational Algebra: Theoretical ways of manipulating relations with relational operators.<ul> <li>Later we\u2019ll learn to use SQL to accomplish relational algebra operations.</li> <li>Minimally Relational: SELECT, PROJECT, JOIN</li> </ul> </li> <li>When speaking in terms of Relational Algebra:<ul> <li>RelVar (R) == Table: Structure that holds the data, which has 2 parts<ul> <li>Heading: Names of attributes</li> <li>Body: Holds the relation</li> </ul> </li> <li>Relation (r) == The actual data  </li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_3.html#set-operators","title":"Set Operators","text":"Note <p>Because Set Operators have closure property (i.e. Set Operators on relations ALWAYS produce new relations), you can combine them like so!</p> <p>\u03c0cus_fname,cus_lname(\u03c3cus_code=10010(customer))</p>  <ul> <li>SELECT (or RESTRICT): Single table as input (unary), and retrives ALL or horizontal subsection of relation (i.e. rows). <ul> <li>\u03c3cus_code=10010(customer)</li> </ul> </li> <li>PROJECT: Single table as input (unary), and retrieves ALL vertical subsection of relation (i.e. columns) <ul> <li>\u03c0cus_fname,cus_lname(customer)</li> </ul> </li> <li>UNION: Combines rows of TWO relations (minus duplicates) with same attributes and domains (i.e. 2 tables with same number of columns and column types in the same order). <ul> <li>\u03c0supplier_name(supplier) \u22c3 \u03c0vendor_name(vendor)</li> </ul> </li> <li>INTERSECT: Yields only rows in common between TWO relations with same attributes and domains <ul> <li>\u03c0supplier_name(supplier) \u22c2 \u03c0vendor_name(vendor)</li> </ul> </li> <li>DIFFERENCE: Yields only rows found in relation 1 that aren\u2019t in relation 2 <ul> <li>\u03c0supplier_name(supplier) \u2013 \u03c0vendor_name(vendor)</li> </ul> </li> <li>PRODUCT: All possible combinations for rows from TWO tabnles. <ul> <li>customer \u00d7 agent</li> </ul> </li> <li>JOIN: <ul> <li>Natural Join: <ul> <li>customer \u22c8 agent</li> <li>\u03c0cus_code,cus_lname,cus_fname,cus_initial,cus_renew_date,agent_code,agent_areacode,agent_phone,agent_lname,agent_ytd_sls(\u03c3customer.agent_code=agent.agent_code(customer \u00d7 agent))</li> </ul> </li> <li>Left Outer Join: <ul> <li>Yields all of the rows in the relation 1, including those that do not have matching values in relation 2</li> <li>{(a1,\u2026,an)} be the singleton relation on the attributes that are unique to the relation agent</li> <li>customer \u22c8 agent \u22c3 ((customer \u2013 \u03c0c1,c2,c3,\u2026,cn(customer \u22c8 agent)) \u00d7 {(a1,\u2026,an)})</li> </ul> </li> <li>Right Outer Join: <ul> <li>Yields all of the rows in the relation 2, including those that do not have matching values in relation 1</li> </ul> </li> <li>Outer joins are the application of JOIN, DIFFERENCE, UNION, and PRODUCT</li> </ul> </li> <li>DIVIDE: Relation 1 is divided by Relation 2 on a common attribute to yield all data in Relation 1 that matches all data in Relation 2.<ul> <li>To be included in the result, unshared columns/attributes must have all the common attributes from table 2 associated in its rows. </li> <li>r \u00f7 s</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_3.html#data-dictionary--system-catalog","title":"Data Dictionary &amp; System Catalog","text":"<ul> <li>Both are  metadata (data about data)</li> </ul>"},{"location":"CIS-50/Chapter_3.html#data-dictionary---designer-view","title":"Data Dictionary - Designer View","text":"<ul> <li>Description of all tables in DB, and at a minimum contains:<ul> <li>Attributes</li> <li>Relationship types</li> <li>Entities</li> <li>Referential integrity checks and enforcement</li> <li>Index types and components</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_3.html#system-catalog---system-view","title":"System Catalog - System View","text":"<ul> <li>Is a detailed, system data dictionary.</li> <li>Data about all objects in the DB, like:<ul> <li>Table names</li> <li>Table\u2019s creator and creation date</li> <li>Number of columns in each table</li> <li>Data type corresponding to each column</li> <li>Index filenames</li> <li>Index creators</li> <li>Authorized users</li> <li>Access privileges</li> </ul> </li> <li>System created Database, that can be queried using SQL</li> </ul>"},{"location":"CIS-50/Chapter_3.html#identifying-entities--relationships","title":"Identifying Entities &amp; Relationships","text":"<ul> <li>1:M Is normal<ul> <li>Easily implemented by putting the primary key of the 1 side in the table of the many side as a foreign key.</li>  </ul> </li> <li>1:1 Is rare<ul> <li>Typically done by putting the primary key of one of the 1 sides in the other table. If the tables already have a 1:M relationship, the 1:1 relationship should be enforced by moving the primary key of the M side into the table with the 1 side.</li> <li>You can also link on other candidate keys as long as they are non-null and unique as defined.</li>  </ul> </li> <li>M:N Turns into multiple 1:M\u2019s by introducing a linking table (i.e. composite, bridge, associative entity)<ul> <li>Create a linking table with the primary key of the M side and the primary key of the N side becoming the primary key of the linking table. Introduce any other attributes to the linking table you think should be associated with the relationship.</li>  </ul> </li> </ul>"},{"location":"CIS-50/Chapter_3.html#handling-data-redundancy-in-rdm","title":"Handling Data Redundancy in RDM","text":"Note <p>The real test of redundancy is not how many copies of a given attribute are stored, but whether the elimination of an attribute will eliminate information. Therefore, if you delete an attribute and the original information can still be generated through relational algebra, the inclusion of that attribute would be redundant. Given that view of redundancy, proper foreign keys are clearly not redundant in spite of their multiple occurrences in a table. However, even when you use this less restrictive view of redundancy, keep in mind that controlled redundancies are often designed as part of the system to ensure transaction speed and/or information requirements.</p> <ul> <li>One such purposeful redundancy is product line price on an Invoice Line Item VS the product\u2019s current price in a product table.</li> <li>Another is the automatic generation of an invoice Line Number, which is redundant but allows for ordering line-items the same way everytime the invoice data is re-constructed.</li> </ul>"},{"location":"CIS-50/Chapter_3.html#purpose-of-indexing","title":"Purpose of Indexing","text":"<ul> <li>Index: An ordered arrangement of keys and pointers. Each key points to the location of the data identified by the key. </li> <li>Used to locate a needed item quickly via pointers.</li> <li>Can also be used to QUICKLY retrieve data ordered by a specific attribute or attributes (think Customers ordered by name, or Products ordered by Manufacturer).</li> <li>Primary Key is a special index called a Unique Index that can only have a single pointer.</li> <li>Indexes with multiple attributes, i.e. (PROD_CODE, MANUFACTUER_CODE), are called composite indexes.</li> </ul>"},{"location":"CIS-50/Chapter_3.html#am-i-an-rdms","title":"Am I an RDMS?","text":"Rule Rule Name Description     1 Information All information in a relational database must be logically represented as column values in rows within tables.   2 Guaranteed access Every value in a table is guaranteed to be accessible through a combination of table name, primary key value, and column name.   3 Systematic treatment of nulls Nulls must be represented and treated in a systematic way, independent of data type.   4 Dynamic online catalog based on the relational model The metadata must be stored and managed as ordinary data\u2014that is, in tables within the database; such data must be available to authorized users using the standard database relational language.   5 Comprehensive data sublanguage The relational database may support many languages; however, it must support one well-defined, declarative language as well as data definition, view definition, data manipulation (interactive and by program), integrity constraints, authorization, and transaction management (begin, commit, and rollback).   6 View updating Any view that is theoretically updatable must be updatable through the system.   7 High-level insert, update, and delete The database must support set-level inserts, updates, and deletes.   8 Physical data independence Application programs and ad hoc facilities are logically unaffected when physical access methods or storage structures are changed.   9 logical data independence Application programs and ad hoc facilities are logically unaffected when changes are made to the table structures that preserve the original table values (changing order of columns or inserting columns).   10 Integrity independence All relational integrity constraints must be definable in the relational language and stored in the system catalog, not at the application level.   11 Distribution independence The end users and application programs are unaware of and unaffected by the data location (distributed vs. local databases).   12 Nonsubversion If the system supports low-level access to the data, users must not be allowed to bypass the integrity rules of the database.   13 Rule zero All preceding rules are based on the notion that to be considered relational, a database must use its relational facilities exclusively for management."},{"location":"CIS-50/Chapter_4.html","title":"Entity Relationship Modeling","text":""},{"location":"CIS-50/Chapter_4.html#entity-relationship-modeling","title":"Entity Relationship Modeling","text":"Note <p>ERM is a Conceptual Model and is therefore  independent of Database type and can be used to model an organization\u2019s data requirments. ER Models are used in logical design, but for the purposes of this class, the conceptural model will be directly related to ER Components.</p>"},{"location":"CIS-50/Chapter_4.html#identify-er-components","title":"Identify ER Components","text":"<ul> <li>ERM forms basis of ERD (Conceptual End-User View)</li> <li>ERD comprises of: entities, attributes, and relationships and can take 3 forms:<ul> <li>Chen notation: Favors conceptual modeling.<ul> <li>Chen Notation</li> </ul> </li> <li>Crow\u2019s Foot notation: Favors implementation modeling.</li> <li>UML notation: Can be used for both conceptual or implementation modeling.</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_4.html#erm-parts","title":"ERM Parts","text":""},{"location":"CIS-50/Chapter_4.html#entities-entity-referes-to-entity-set-and-not-individual-occurances-ie-in-erm-think-table-not-row","title":"Entities: Entity referes to Entity set and not individual occurances (i.e. in ERM think table not row)","text":"<ul> <li>In all 3 notations it is a rectangle usually with an UPPERCASE noun NAME</li> </ul>"},{"location":"CIS-50/Chapter_4.html#attributes-characteristics-of-entities","title":"Attributes: Characteristics of Entities","text":"<ul> <li>Chen\u2019s notation: Ovals with UPPERCASE attribute name, connected via a line to entity rectangle </li> <li>UML and Crow\u2019s Foot: In a separate box below the entity rectangle.</li> <li>Required Attributes: Values are required</li> <li>Name/Label are usually BOLD</li> <li>Optional Attributes: can be left empty.</li> <li>Name/Label are normal</li> <li>Domain Attributes: restricted range of values (GPA, gender, address, etc.)</li> <li>Identifier Attributes: These are synonymous with Primary keys<ul> <li>Underlined in most notations.</li> <li>Composite Identifier: More than 1 attribute makes up the Primary Key<ul> <li>Usually just multiple underlined attributes.</li> </ul> </li> </ul> </li> <li>Composite Attributes: An attribute that can be sub-divided (e.g. Address)</li> <li>Chen notation is attribute bubbles stemmed from main attribute bubble.</li> <li>UML and Crow\u2019s Foot usually decompose these into individual simple attributes, but how that is done is left to the designer.</li> <li>Single Valued Attribute: Attributes with just a single value (Part No., SSN, etc.)<ul> <li>Could still be a Composite Attribute</li> </ul> </li> <li>Multivalued Attribute: Attributes that can have multiple values (Car: Top, Body, Trim Color, etc.)<ul>  <li>Implementing in ERD:<ul> <li>Method 1: Ceate new attributes for each value type (i.e. CAR_TOPCOLOR, CAR_BODYCOLOR, CAR_TRIMCOLOR), but this is only OK if:<ul>  <li>Every instance will have the same number of values for the multivalued attribute</li> <li>No instance will ever have more values</li> </ul> </li> <li>Method 2: Create a new Entity with a 1:M relationship back to the Entity the Multivalued attribute was attached to.<ul>  </ul> </li> </ul> </li> </ul> </li> <li>Derived Attributes: Attributes derived from other attributes (e.g. Age from DoB).<ul> <li>Chen Notation: Dashed line</li> <li>UML/Crow\u2019s Foot Notation: None</li> <li>Storing these in the DB depend on Application constraints and computational complexity.</li> <li>Most modern RDBMs\u2019 include features to support calculated attributes.</li>  </ul> </li> </ul>"},{"location":"CIS-50/Chapter_4.html#define-refine-and-incorporate-relationships-between-entities","title":"Define, Refine, and Incorporate Relationships Between Entities","text":"<ul> <li>Active or Passiver VERB association between 2 or more entities (AKA participants).</li> </ul>"},{"location":"CIS-50/Chapter_4.html#connectivity--cardinality","title":"Connectivity &amp; Cardinality","text":"<ul> <li>Relationships are always bi-directional connectivity, so when deciding on relationship classification ask yourself how the entities are connected going in both directions (e.g. Person -&gt; Dept and Dept -&gt; Person).</li> <li>Relationship connectivity can have minimum and maximum limits dubbed cardinality</li> <li>Cardinality is usually indicated in parenthesis like: (min, max), and are established by business rules. <ul> <li>Cardinality is enforced either at the application level or by databadse triggers</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_4.html#existence-and-independence","title":"Existence and Independence","text":"<ul> <li>An entity that can\u2019t exist without a dependent entity is existence-dependent entity (e.g. Dependent and Employee)</li> <li>An entity that can exist on its own, even though relationships exist are existence independent entities (e.g. Parts and Vendor, since a part might not have a Vendor).</li> </ul>"},{"location":"CIS-50/Chapter_4.html#relationship-strength","title":"Relationship Strength","text":"<ul> <li>Weak/Strong relationships are new to ERM and therefore not part of the conceptual Chen notation.</li> <li>A Weak or Non-Identifying relationship is one where the primary key of the related entity does NOT contain the primary key from the other related entity.<ul> <li>The typical 1:M relationship where the primary key from the 1 side becomes a foreign key on the M side is a weak relationship.</li> <li>A Dashed connecting line in a Crow\u2019s Foot diagram indicates a weak relationship.</li>  </ul> </li> <li>A Strong or Identifying relationship is one where the primary key of the related entity IS in the primary key of the other related entity.<ul> <li>A Solid connecting line in a Crow\u2019s Foot diagram indicates a strong relationship.</li>  </ul> </li> <li>The DB Designer must consider transactions, efficiency, and information requirements to decide the type of strength relationship to use.</li> </ul>"},{"location":"CIS-50/Chapter_4.html#entity-strength","title":"Entity Strength","text":"<ul> <li>Strong/Regular Entity simple need to satisfy existence independence</li> <li>A Weak Entity must be existence-dependent and have a Strong relationship<ul>  </ul> </li> </ul>"},{"location":"CIS-50/Chapter_4.html#relationship-participation","title":"Relationship Participation","text":"<ul> <li>Optional Participation: A row on the :M optional side of the relationship doesn\u2019t have to exist.<ul> <li>Designated with an O indicating optional participation in a Crow\u2019s Foot diagram.</li> <li>Cardinality minimum has to be 0</li> </ul> </li> <li>Mandatory Participation: A row on the :M side MUST exist.<ul> <li>Cardinality minimum has to be at least 1</li> </ul> </li> </ul>  Note <p>The relationship strength depends on how the PK of the related entity is formulated, while the relationship participation depends on how the business rule is written. </p> <p>Below is a great connectivity example showing how Class is optional to Professors (i.e. professors may do research only), while every Class has to have 1 and only 1 Professor. </p>"},{"location":"CIS-50/Chapter_4.html#relationship-degree","title":"Relationship Degree","text":""},{"location":"CIS-50/Chapter_4.html#recursive-relationships","title":"Recursive Relationships","text":"<ul> <li>Method 1: Unary, add an attribute column that matches PK of table (e.g. Employee has a Manager). This is a 1:1 relationship where each entry will only have a single manager.</li> <li>Method 2: Binary, add a table with a 1:M relactionship where the :M side gets the PK from the 1: side. This allows for 1:M recursive relationships (e.g. PARTS composed of PARTS)</li> </ul>"},{"location":"CIS-50/Chapter_4.html#developing-an-er-diagram","title":"Developing an ER Diagram","text":""},{"location":"CIS-50/Chapter_4.html#iterative-process","title":"Iterative Process","text":"<ul> <li>Create a detailed narrative of the organization\u2019s description of operations.</li> <li>Identify the business rules based on the description of operations.</li> <li>Identify the main entities and relationships from the business rules.</li> <li>Develop the initial ERD.</li> <li>Identify the attributes and primary keys that adequately describe the entities.</li> <li>Revise and review the ERD. </li> </ul>"},{"location":"CIS-50/Chapter_4.html#db-design-tradeoffs-reconciling-conflicting-goals","title":"DB Design Tradeoffs, Reconciling Conflicting Goals","text":""},{"location":"CIS-50/Chapter_4.html#the-3-things-always-to-consider","title":"The 3 things always to consider","text":"<ul> <li>Design standards: Normalization, reduce nulls</li> <li>Processing speed: performance, security, shared access, and data integrity</li> <li>Information requirements</li> </ul>"},{"location":"CIS-50/Chapter_6.html","title":"Normalization","text":""},{"location":"CIS-50/Chapter_6.html#normalization","title":"Normalization","text":"Normalization <ul> <li>Good table structures</li> <li>Controls data redundancies</li> <li>Avoids data anomalies</li> </ul>"},{"location":"CIS-50/Chapter_6.html#what-is-database-normalization","title":"What is Database Normalization","text":""},{"location":"CIS-50/Chapter_6.html#definition","title":"Definition","text":"<ul> <li>Normalization: Finding and fixing table structure errors, which eliminates redundancy and reduces data anomalies.</li> <li>With normalization key attributes are called prime attributes and nonkey attributes are called non-prime attributes</li> </ul>"},{"location":"CIS-50/Chapter_6.html#normalization-goals","title":"Normalization Goals","text":"<ul> <li>Each Table/Relation represents a single subject.</li> <li>Each attribute (row/column intersection) contains only a single value (not a group of values).</li> <li>Controlled and minimum data redundancy, a value is not unnecessairily duplicated in other tables.</li> <li>All non-prime / nonkey attributes are dependent on the primary key (ensures data is unique to PK).</li> <li>There is no Table/Relation where a Insert, Update, or Delete can cause a data anomaly (ensures data integrity)</li> </ul>"},{"location":"CIS-50/Chapter_6.html#basic-process","title":"Basic Process","text":"<ul> <li>Assign table attributes based on determination and functional dependency discussed in Chapter 3 to build ERD.<ul> <li>Identifying business rules</li> <li>Identifying and defining business and data constraints</li> <li>Defining functional dependencies</li> <li>Identifying entities and relationships</li> <li>Eliminating multivalued attributes</li> </ul> </li> <li>Normalization is then applied to analyze ERD and determine if structure can be improved.</li> <li>The process is applied in steps from 1NF to 3NF, which is usually good enough.<ul> <li>1NF Steps</li> <li>2NF Steps</li> <li>3NF Steps</li> <li>Additional Steps</li> </ul> </li> <li>There are legitimate reasons to violate 3NF and higher forms, however. So 3NF is not always optimal.<ul> <li>3NF engenders the need for more tables, therefore more joins and more Compute/Memory resources.<ul> <li>Performance / Anomaly-Redundancy trade off is often a concern.</li> <li>Designers denormalize and compromise anomalies for performance.</li> </ul> </li> </ul> </li> <li>Most of the time designers are asked to use normalization process to anaylze and rectify existing files, spreadsheets and data structures.</li> </ul>"},{"location":"CIS-50/Chapter_6.html#normal-forms-low-to-high-transforms","title":"Normal Forms, Low to High Transforms","text":"<ul> <li>Partial Dependency: (A, B)  (C, D), B  C, and (A, B) is the PK then B  C is a partial dependency since its only partially dependent on the PK.</li> <li>Transitive Dependency: X  Y, Y  Z, and X is the PK then X  Z is a transitive dependency because X has a path directly to Z.<ul> <li>Transitive dependencies occur only when a functional dependence exists among nonprime attributes (i.e. Y -&gt; Z because Y is non-prime).</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_6.html#unnormalizedraw-data","title":"Unnormalized/Raw data","text":"<ul> <li>Will often contain redundant data, multivalued data, and other data anomalies like data integrity and data inconsistency</li> </ul>"},{"location":"CIS-50/Chapter_6.html#1nf","title":"1NF","text":"<ul> <li>All of the key attributes are defined.</li> <li>There are no repeating groups in the table. In other words, each row/column intersec- tion contains one and only one value, not a set of values.</li> <li>All attributes are dependent on the primary key.</li> </ul>"},{"location":"CIS-50/Chapter_6.html#1nf-steps","title":"1NF Steps:","text":"<ol> <li>Split grouped attributes into there own rows (i.e. for a row with grouped column of EmpIDs 1,2,3,\u2026 the row would be duplicated for each ID in the column EmpIDs.</li> <li>A Primary Key should be identified (i.e. for raw data it must be a set of attributes that combined identifies each row uniquely).</li> <li>Identify ALL dependencies using a dependency diagram like below:</li> </ol>   Dependency <ol> <li>PK is Bold, Underline, and Colored</li> <li>Top arrows are dependencies based off PK</li> <li>Bottom arrows indicate Partial  and Transitive dependencies</li> </ol>"},{"location":"CIS-50/Chapter_6.html#2nf","title":"2NF","text":"<ul> <li>If 1NF has non-Composite PK, Table/Relation is already in 2NF</li> <li>It is in 1NF.</li> <li>It includes no partial dependencies; no attribute is dependent on only a portion of PK.</li> <li>Transitive dependencies may still exist.</li> </ul>"},{"location":"CIS-50/Chapter_6.html#2nf-steps","title":"2NF Steps:","text":"<ol> <li>Eliminate Partial Dependencies<ul> <li>Create new Tables/Relations from each parital PK (partial PK becomes PK of new table)</li> <li>Leave partial PK/determinant attribute in original table as FK.</li> </ul> </li> <li>Use 1NF dependency diagram to reassign dependent attributes of Partial PK<ul> <li>Dependent attributes are moved to corresponding new table.</li> </ul> </li> </ol>"},{"location":"CIS-50/Chapter_6.html#3nf","title":"3NF","text":"<ul> <li>It is in 2NF</li> <li>It includes no transitive dependencies.</li> </ul>"},{"location":"CIS-50/Chapter_6.html#3nf-steps","title":"3NF Steps:","text":"<ol> <li>Make new Tables/Relations to eliminate transitive dependencies.<ul> <li>Create new Tables/Relations from each Transitive determinant (determinant becomes PK of new table)</li> <li>Leave determinant attribute in original table as FK.</li> </ul> </li> <li>Use 2NF dependency diagram to reassign dependent attributes of Transitive determinant.<ul> <li>Dependent attributes are moved to corresponding new table.</li> </ul> </li> </ol>   Multiple <p>The steps above are slightly complicated when a table has multiple candidate keys because the designer will need to pick one to become the PK. Identifying the candidate keys is still essential, however because composite candidate keys will still indicate partial dependencies, and likewise candidate keys are a sign that transitive dependencies may NOT exist since a transitive dependency requires the determinant attribute to be non-prime (i.e. not a part of any key and determined by a key).</p>"},{"location":"CIS-50/Chapter_6.html#additional-steps","title":"Additional Steps","text":"<ul> <li>Evaluate PK Assignments: Make sure the primary keys for each table make sense (e.g. use IDs/Codes instead of data entry items like Names for PKs</li> <li>Evaluate Naming Conventions: Make sure all attributes follow the DB naming conventions like Table prefix, all caps, and column names that clearly identify the purpose of the attribute.</li> <li>Refine Attribute Atomicity: Decompose attributes like Name into FIRST_NAME and LAST_NAME to abet query flexibility.</li> <li>Identify New Attributes: Add attributes that may be missing but necessary for fulfilling business rules.</li> <li>Identify New Relationships: If business rules ask for Table A to be related to Table B (i.e. Manager to Project, etc.), make sure such relationships exist.</li> <li>Refine Primary Keys as Required for Data Granularity: E.G. Make sure attributes like HOURS are defined within a timeframe and determine if multiple HOURS row entries should be allowed. If so, a surrogate key or posibly even another Table/Relation may be needed.</li> <li>Maintain Historical Accuracy: Make sure attributes like LINE_PRICE and ITEM_PRICE exist in appropriate tables if historical accuracy is necessary. In the example, LINE_PRICE would never change, but ITEM_PRICE might.</li> <li>Evaluate Using Derived Attributes: Make sure to add columns for derived attributes based on compute and performance needs.</li> <li>Clean up Composite Keys: Composite keys can become cumbersome by making foreign keys difficult or searches by PK more difficult, thus clean them up with surrogate keys, but make sure to:<ul> <li>Replace composite key with a surrogate and add any unique indexes to ensure data integrity.</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_6.html#boyce-codd-normal-form-bcnf","title":"Boyce-Codd Normal Form (BCNF)","text":"<ul> <li>A table is in Boyce-Codd normal form (BCNF) when every determinant in the table is a candidate key.</li> <li> <p>A 3NF Table/Relation only violates BCNF if it has multiple candidate keys.</p> </li> <li> <p>Example below is in 3NF because what looks like a transitive dependency is actually a dependency between candidate keys. Thus, it violates BCNF, but not 3NF. </p> </li> </ul>"},{"location":"CIS-50/Chapter_6.html#4nf","title":"4NF","text":"<ul> <li>A table is in fourth normal form (4NF) when it is in 3NF and has no multivalued dependencies.<ul> <li>4NF may be necessary if you have a table with 2 or more multivalue dependencies/attributes, independent from eachother, but dependent on what would be a single key. E.g. An EMPLOYEE with multiple ORG_CODE and multiple ASSIGNMENTS, but ASSIGNMENTS are or can be separate from ORG_CODE.</li> </ul> </li> <li>You can avoid 4NF by building your tables with 2 rules:<ul> <li>All attributes must be dependent on the primary key, but they must be independent of each other. *No row may contain two or more multivalued facts about an entity.</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_6.html#denormalization","title":"Denormalization","text":""},{"location":"CIS-50/Chapter_6.html#problems-with-denormalization","title":"Problems with Denormalization","text":"<ul> <li>Data Anomalies like:<ul> <li>Update Anomaly: e.g. Updating CLASS HOURS but multiple rows have a reference to the HOURS attribute, so many updated rows are necessary.</li> <li>Delete Anomaly: e.g. delete last STUDENT in table associated with a CLASS also deletes historical knowledge of class.</li> <li>Insert Anomaly: e.g. Insert of STUDENT in a table requiring CLASS assignment requires a DUMMY class or a NULL</li> </ul> </li> <li>Data updates are less efficient because programs that read and update tables must deal with larger tables.</li> <li>Indexing is more cumbersome. It is simply not practical to build all of the indexes required for the many attributes that might be located in a single unnormalized table.</li> <li>Unnormalized tables yield no simple strategies for creating virtual tables known as views. You will learn how to create and use views in Chapter 8, Advanced SQL.</li> </ul>"},{"location":"CIS-50/Chapter_6.html#minimum-erd-data-modeling-checklist","title":"Minimum ERD Data-Modeling Checklist","text":"<ul> <li>Help yourself, follow the process.</li> </ul>"},{"location":"CIS-50/Chapter_7.html","title":"Structured Query Language (SQL)","text":""},{"location":"CIS-50/Chapter_7.html#structured-query-language-sql","title":"Structured Query Language (SQL)","text":""},{"location":"CIS-50/Chapter_7.html#criteria-for-an-ideal-db-language-which-sql-is","title":"Criteria for an ideal DB Language, which SQL is!","text":"<ul> <li>Create database and table structures, perform basic data management chores (CRUD)</li> <li>Perform complex queries designed to transform raw data into useful information.</li> <li>Require minimal user effort</li> <li>Easy to learn<ul> <li>Fewer than 100 words in command set</li> <li>Declarative, NOT Procedural (i.e. you just declare what you want in SQL and the RDBMS figures out how to get/do your command).</li> </ul> </li> <li>Portable<ul> <li>ANSI/ISO SQL standard exist, so only minor dialect differences between competing DB Software manufacturers.</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_7.html#categories-of-sql","title":"Categories of SQL","text":"<ul> <li>Data Manipulation Language (DML): Manipulates data<ul> <li>INSERT, SELECT, UPDATE, DELETE </li> </ul> </li> <li>Data Definition Language (DDL): Creates or alters schema and structure<ul> <li>CREATE, DROP, ALTER, TRUNCATE, RENAME</li> </ul> </li> <li>Transaction Control Language (TCL): Manages multiple DML commands from Bus. Rules in transactions.<ul> <li>A transaction is a logical unit of work of set of DML commands.</li> <li>COMMIT, ROLLBACK, SAVEPOINT </li> </ul> </li> <li>Data Control Language (DCL): Access Control, security and permissions.<ul> <li>GRANT, REVOKE </li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_7.html#queries-and-operations","title":"Queries and Operations","text":"Important <p>Most SQL data manipulation commands operate over an entire table/relation, which is why SQL commands are said to be set-oriented commands. This is important because it allows users to treat SQL commands like building blocks. Once you know the building blocks, you can put them together to declare more complex sets you want.</p>"},{"location":"CIS-50/Chapter_7.html#intro-to-data-types","title":"Intro to Data Types","text":"<ul> <li>Data Type is basically the KIND of data that an attribute represents.</li> <li>Different RDBMs have similar and different data types, but all DB types fall under 3 categories:</li> </ul>"},{"location":"CIS-50/Chapter_7.html#3-fundamental-types-of-data","title":"3 Fundamental Types of Data","text":"<ul> <li>Character data: Any printable characters such as alphabetic values, digits, punctuation, and special characters.</li> <li>Numeric data: digits, such that the data has a specific numeric value.</li> <li>Date data: DATES and Times ;-)</li> </ul>"},{"location":"CIS-50/Chapter_7.html#retrieval-select-query","title":"Retrieval (SELECT Query)","text":""},{"location":"CIS-50/Chapter_7.html#basic-terms","title":"Basic Terms","text":"<ul> <li>SELECT: specifies the attributes to be returned by the query</li> <li>FROM: specifies the table(s) from which the data will be retrieved</li> <li>WHERE: filters the rows of data based on provided criteria</li> <li>GROUP BY: groups the rows of data into collections based on sharing the same values in one or more attributes</li> <li>HAVING: filters the groups formed in the GROUP BY clause based on provided criteria</li> <li>ORDER BY: sorts the final query result rows in ascending or descending order based on the values of one or more attributes.</li> </ul>"},{"location":"CIS-50/Chapter_7.html#basic-structure","title":"Basic Structure","text":"<pre><code>    SELECT [wildcard | column-list] FROM [table-list];\n</code></pre> <ul> <li>Column-list: Relational projection of attributes to return.</li> <li>Table-list: Relations to be joined in query. </li> <li>Wildcard: \u201c*\u201d characters used to designate ALL columns in the relations.</li> </ul>"},{"location":"CIS-50/Chapter_7.html#examples","title":"Examples","text":"<pre><code>    # Get all rows and columns from product table.\n    SELECT * FROM Product;\n\n    # Get all rows but only columns P_CODE, P_DESCRIPT, P_PRICE, and P_QOH  from product table.\n    SELECT P_CODE, P_DESCRIPT, P_PRICE, P_QOH FROM Product;\n\n    # Get all rows but only columns P_CODE, P_DESCRIPT, P_PRICE, and P_QOH  from product table.\n    # Alias/Rename the resulting columns in the relation to: Id, Description, Price, and Qty.\n    SELECT P_CODE AS Id, P_DESCRIPT AS Description, P_PRICE AS Price, P_QOH AS Qty FROM Product;\n\n    # Get all rows but only columns P_DESCRIPT, P_QOH, P_PRICE, and derived/calculated column INV_VAL  from product table.\n    SELECT P_DESCRIPT, P_QOH, P_PRICE, P_QOH * P_PRICE AS INV_VAL FROM PRODUCT;\n\n    # Get a list of products and the warranty cutoff date for products\n    # Swap out Date function as needed based on RDBMS Access: DATE(), SQL Server: GETDATE(), MySQL: CURDATE(), Oracle: SYSDATE \n    SELECT P_CODE, P_INDATE, SYSDATE \u2013 90 AS CUTOFF FROM PRODUCT;\n\n    # Select all the UNIQUE vendors that have products (i.e. DISTINCT removes repeats).\n    SELECT DISTINCT V_CODE FROM PRODUCT;\n</code></pre>"},{"location":"CIS-50/Chapter_7.html#other-notes","title":"Other Notes","text":"<ul> <li>When using Arithmetic Operators in derived/calculated columns PEMDAS applies.</li> <li>Dates are typically stored as a number in RDBMs as the number of days since a specific date in history.<ul> <li>Thus Date arithmetic is + or - the number of days.</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_7.html#joining","title":"Joining","text":""},{"location":"CIS-50/Chapter_7.html#basic-terms_1","title":"Basic Terms","text":"<ul> <li>FROM: specifies the table(s) from which the data will be retrieved. Tables joined by PK/FK pairs or a auto selected common attribute..</li> <li>NATURAL JOIN: returns all rows with matching values in the matching columns and eliminates duplicate columns.<ul> <li>Joins on attributes with identical names and data-types</li> <li>Joins only common values in chosen attribute(s)</li> <li>Eliminates duplicate common attribute</li> <li>If no common attributes, returns relational product of 2 tables (i.e. each row from table1 duplicated with each row of table2).</li> <li>Usage is discouraged becuase table changes can affect common attribute joins</li> </ul> </li> <li>JOIN USING: returns only the rows with matching values in the column indicated in the USING clause.<ul> <li>The column must exist in both tables.</li> <li>Eliminates duplicate common attribute</li> <li>Only in MySQL and Oracle</li> <li>Oracle doesn\u2019t allow usage of table qualifiers can\u2019t be used with the common attribute.</li> </ul> </li> <li>JOIN ON: joins tables with no common attribute based on equality condition.<ul> <li>Attributes equality condition must have the same data-type.</li> <li>Preferred Join method because its the most widely supported.</li> <li>Does NOT eliminate duplicate common attribute(s)</li> <li>table qualifier must be used to referr to duplicate common attributes.</li> </ul> </li> <li>OUTER JOINS:<ul> <li>LEFT: returns not only the rows matching the join condition, but also the rows in the left table with unmatched values in the right table.</li> <li>RIGHT: returns not only the rows matching the join condition, but also the rows in the right table with unmatched values in the left table.</li> <li>FULL: returns not only the rows matching the join condition, but also the rows with unmatched values in the table on eithr side.<ul> <li>Only supported by Oracle and SqlServer</li> </ul> </li> </ul> </li> <li>CROSS JOIN: Cartesian/Relational Product, joins all rows from table1 to all rows in table2<ul> <li>Not supported in Access</li> </ul> </li> <li>TABLE ALIAS: A way of renaming a table in a query for 3 common purposes:<ul> <li>Shortening names</li> <li>Improving query human readability.</li> <li>Recursive Joins (table joined to itself)</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_7.html#basic-structure_1","title":"Basic Structure","text":"<ul> <li>NATURAL JOIN: SELECT [column-list] FROM [table1] NATURAL JOIN [table2]</li> <li>JOIN USING: SELECT [column-list] FROM [table1] JOIN [table2] USING ([common-column])</li> <li>JOIN ON: SELECT [column-list] FROM [table1] JOIN [table2] ON [join-condition]</li> <li>LEFT OUTER JOIN: SELECT [column-list] FROM [table1] LEFT OUTER JOIN [table2] ON [join-condition]</li> <li>RIGHT OUTER JOIN: SELECT [column-list] FROM [table1] RIGHT OUTER JOIN [table2] ON [join-condition]</li> <li>FULL OUTER JOIN: SELECT [column-list] FROM [table1] FULL OUTER JOIN [table2] ON [join-condition]</li> <li>CROSS JOIN: SELECT [column-list] FROM [table1] CROSS JOIN [table2]</li> </ul>"},{"location":"CIS-50/Chapter_7.html#examples_1","title":"Examples","text":"<pre><code>    # Natural join to get all customers and their invoices joined on some auto selected common attribute.\n    SELECT CUS_CODE, CUS_LNAME, INV_NUMBER, INV_DATE FROM CUSTOMER NATURAL JOIN INVOICE;\n\n    # Join Using to get product to vendor relation USING V_CODE.\n    SELECT P_CODE, P_DESCRIPT, V_CODE, V_NAME, V_AREACODE, V_PHONE FROM PRODUCT JOIN VENDOR USING (V_CODE);\n\n    # Joins Invoice and Line tables utilizing ON equality clause. \n    SELECT INVOICE.INV_NUMBER, PRODUCT.P_CODE, P_DESCRIPT, LINE_UNITS, LINE_PRICE FROM INVOICE JOIN LINE ON INVOICE.INV_NUMBER = LINE.INV_NUMBER JOIN PRODUCT ON LINE.P_CODE = PRODUCT.P_CODE;\n\n    # Demonstrating using table qualifiers to project duplicate common attributes.\n    SELECT P_CODE, VENDOR.V_CODE, V_NAME FROM PRODUCT JOIN VENDOR ON PRODUCT.V_CODE = VENDOR.V_CODE;\n\n    # Result includes all product rows without matching vendors as well as all vendor rows without matching products\n    SELECT P_CODE, VENDOR.V_CODE, V_NAME FROM VENDOR FULL JOIN PRODUCT ON VENDOR. V_CODE = PRODUCT.V_CODE;\n\n    # Combines all invoices with all invoice lines.\n    SELECT * FROM INVOICE CROSS JOIN LINE;\n\n    # Example of a table alias to handle a recursive joining an employee to their manager\n    SELECT E.EMP_NUM, E.EMP_LNAME, E.EMP_MGR, M.EMP_LNAME FROM EMP E JOIN EMP M ON E.EMP_MGR = M.EMP_NUM;\n</code></pre>"},{"location":"CIS-50/Chapter_7.html#sort-searchrestriction-criteria","title":"Sort, Search/Restriction Criteria","text":""},{"location":"CIS-50/Chapter_7.html#basic-terms_2","title":"Basic Terms","text":"<ul> <li>ORDER BY: Sorts result rows by list of columns in order from first to last in list.<ul> <li>NULLS in order by column list results either come first or last depending on the RDBMS</li> <li>Oracle allows ordering NULLS with ORDER BY column DESC NULLS LAST; or NULLS FIRST</li> </ul> </li> <li>WHERE: Adds conditional restrictions to SELECT or search criteria allowing limits to rows in query results.<ul> <li><ul> <li>Comparison Operators can be used on character data to compare alphebetically left-to-right.</li> <li>Numbers or Dates stored incorrectly as character data can produce anomalies when comparison operators are used.</li> </ul> </li> <li>Logical Operators (AND, OR, and NOT): Allow to test multiple conditions in WHERE condition list<ul> <li>AND: Used in WHERE or HAVING clause, and all conditions must be true.</li> <li>OR: Used in WHERE or HAVING clause, and any of the conditions must be true.</li> <li>NOT: negates result of other conditions, turns TRUE to FALSE and vice versa</li> <li>Logical operators can be combined, but must be organized with parenthesis.</li> </ul> </li> </ul> </li> <li>Old Syle Joins: Joins that have a comma separated list of tables in the FROM clause and the join conditions in the WHERE clause.<ul> <li>No longer recommended for 2 major reasons<ul> <li>Splits joins between FROM and WHERE clauses making them less human readable.</li> <li>Susceptable to undetected errors because RDBMS can\u2019t determine if JOIN clauses actually exist syntactically.</li> </ul> </li> </ul> </li> </ul>  Note <p>Most RDBMS search criteria are case sensitive, so its a good idea to wrap column with UPPER() functions before performing comparisons in the following Special Operators.</p>  <ul> <li>Special Operators:<ul> <li>BETWEEN: Used to check if value is in a range (Always list LOW test value first to avoid Empty results).</li> <li>IN: Used to check if value is in a list.<ul> <li>Used heavily in sub-queries as a subquery can return the list of things to compare to.</li> </ul> </li> <li>LIKE: Used to match a character pattern<ul> <li>Like can use multiple wild-cards in its matches.</li> <li>\u2019%\u2019 is a wild-card strings to match anything before, between, or after its appearance.</li> <li>\u2018_\u2019 is a wild-card to match just a single character wherever it appears.</li> <li>Access uses \u2018*\u2019 and \u2018?\u2019 instead of \u2018%\u2019 and \u2018_\u2019</li> </ul> </li> <li>IS NULL: Used to detect NULL values specifically.<ul> <li>This operator is needed because using the = operator to compare to NULL is undefined, meaning it will always be false, thus yeilding empty results..</li> </ul> </li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_7.html#basic-structure_2","title":"Basic Structure","text":"<ul> <li>ORDER By: SELECT [column-list] FROM [table-list] ORDER BY [column-list ASC | DESC];</li> <li>WHERE: SELECT [columnlist] FROM [tablelist] WHERE [conditionlist] ORDER BY [columnlist ASC | DESC];</li> <li>BETWEEN: SELECT [columnlist] FROM [tablelist] WHERE [column] (NOT) BETWEEN [min value] AND [max value];</li> <li>IN: SELECT [columnlist] FROM [tablelist] WHERE [column] (NOT) IN ( [comma-sep-value-list] );</li> <li>LIKE: SELECT [columnlist] FROM [tablelist] WHERE UPPER( [column] ) (NOT) LIKE [\u2018pattern to match\u2019];</li> <li>IS NULL: SELECT [columnlist] FROM [tablelist] WHERE [column] IS (NOT) NULL;</li> </ul>"},{"location":"CIS-50/Chapter_7.html#examples_2","title":"Examples","text":"<pre><code>    # Get list of products sorted by Price from High to Low.\n    SELECT P_CODE, P_DESCRIPT, P_QOH, P_PRICE\n      FROM PRODUCT ORDER BY P_PRICE DESC;\n\n    # Cascading order sequence lname, fname, then middle initial\n    SELECT EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_AREACODE, EMP_PHONE\n      FROM EMPLOYEE\n    ORDER BY EMP_LNAME, EMP_FNAME, EMP_INITIAL;\n\n    # Order by with derived column/attribute\n    SELECT P_CODE, P_DESCRIPT, V_CODE, P_PRICE * P_QOH AS TOTAL\n      FROM PRODUCT\n    ORDER BY V_CODE, TOTAL DESC;\n\n    # Select product info for all vendors except 21344\n    SELECT P_DESCRIPT, P_QOH, P_PRICE, V_CODE FROM PRODUCT WHERE V_CODE &lt;&gt; 21344;\n\n    # Date Query MSSQL\n    SELECT P_DESCRIPT, P_QOH, P_MIN, P_PRICE, P_INDATE FROM PRODUCT WHERE P_INDATE &gt;= '20-Jan-2018';\n\n    # Date Query MySQL\n    SELECT P_DESCRIPT, P_QOH, P_MIN, P_PRICE, P_INDATE FROM PRODUCT WHERE P_INDATE &gt;= '2018-01-21';\n\n    # Date Query Access\n    SELECT P_DESCRIPT, P_QOH, P_MIN, P_PRICE, P_INDATE FROM PRODUCT WHERE P_INDATE &gt;= #20-Jan-2018#;\n\n    # Get all the products from Vendor 25595 and 24288 that are over $100\n    SELECT P_DESCRIPT, P_PRICE, V_CODE\n      FROM PRODUCT WHERE (V_CODE = 25595 OR V_CODE = 24288) AND P_PRICE &gt; 100;\n    # Or with IN operator\n    SELECT * FROM PRODUCT WHERE V_CODE IN ('25595', '24288') AND P_PRICE &gt; 100;\n\n    # Get vendors with a contact where the last name contains OS as the 2nd and 3rd characters.\n    SELECT V_NAME, V_CONTACT, V_AREACODE, V_PHONE FROM VENDOR WHERE UPPER(V_CONTACT) LIKE '_OS%';\n\n    # Get all products that don't have a vendor (i.e. NULL vendor).\n    SELECT P_CODE, P_DESCRIPT, V_CODE FROM PRODUCT WHERE V_CODE IS NULL;\n</code></pre>"},{"location":"CIS-50/Chapter_7.html#aggregation","title":"Aggregation","text":""},{"location":"CIS-50/Chapter_7.html#notes","title":"Notes","text":"<ul> <li>COUNT typically doesn\u2019t count NULLs, so you\u2019ll want COUNT(*) if you want a row count.</li> <li>COUNT can be combined with DISTINCT to only count unique values e.g. <code>SELECT COUNT(DISTINCT V_CODE) AS CNT FROM PRODUCT;</code></li> <li>MAX and MIN are great for getting oldest or newest dates</li> </ul>"},{"location":"CIS-50/Chapter_7.html#basic-terms_3","title":"Basic Terms","text":"<ul> <li>GROUP BY: Groups rows into smaller collections by a column list<ul> <li>Treats all NULLs as if they are the same when grouping.</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_7.html#basic-structure_3","title":"Basic Structure","text":"<ul> <li>GROUP BY: SELECT [columnlist] FROM [tablelist] WHERE [conditionlist] GROUP BY [columnlist] HAVING [group conditionlist] ORDER BY [columnlist ASC | DESC]</li> </ul>"},{"location":"CIS-50/Chapter_7.html#examples_3","title":"Examples","text":"<pre><code>    # Get a list of all unique vendors you sell products from\n    SELECT COUNT(DISTINCT V_CODE) AS \"COUNT DISTINCT\" FROM PRODUCT;\n\n    # Get the highest and lowest prices in the product table\n    SELECT MAX(P_PRICE) AS MAXPRICE, MIN(P_PRICE) AS MINPRICE FROM PRODUCT;\n\n    # Get Total still owed by customers\n    SELECT SUM(CUS_BALANCE) AS TOTBALANCE FROM CUSTOMER;\n\n    # Get the average price of products in the product table\n    SELECT AVG(P_PRICE) AS AVGPRICE FROM PRODUCT;\n\n    # Get average price of products by vendor\n    SELECT V_CODE, AVG(P_PRICE) AS AVGPRICE FROM PRODUCT GROUP BY V_CODE;\n\n    # Get a count of products and averagre prices for each vendor\n    SELECT V_CODE, V_NAME, COUNT(P_CODE) AS NUMPROD, AVG(P_PRICE) AS AVGPRICE\n      FROM PRODUCT JOIN VENDOR ON PRODUCT.V_CODE = VENDOR.V_CODE\n    GROUP BY V_CODE, V_NAME ORDER BY V_NAME;\n</code></pre>"},{"location":"CIS-50/Chapter_7.html#subqueries-and-preprocessing","title":"Subqueries and Preprocessing","text":""},{"location":"CIS-50/Chapter_7.html#data-manipulation-functions","title":"Data Manipulation Functions","text":""},{"location":"CIS-50/Chapter_7.html#key-query-principles","title":"Key Query Principles","text":""},{"location":"CIS-50/joins_ns.html","title":"Joins","text":""},{"location":"CIS-50/joins_ns.html#graphical-representation-of-joins","title":"Graphical Representation of Joins","text":"Note <p>I find these diagrams a much more approachable way of picturing and imagining the joins referenced in CIS-50 Chapter 3. Hopefully you agree!</p>"},{"location":"CIS-50/joins_ns.html#inner-join","title":"Inner Join","text":""},{"location":"CIS-50/joins_ns.html#left-join","title":"Left Join","text":""},{"location":"CIS-50/joins_ns.html#right-join","title":"Right Join","text":""},{"location":"CIS-50/joins_ns.html#full-outer-join","title":"Full Outer Join","text":""},{"location":"CIS-50/joins_ns.html#left-anti-join","title":"Left Anti-Join","text":""},{"location":"CIS-50/joins_ns.html#right-anti-join","title":"Right Anti-Join","text":""},{"location":"CIS-50/joins_ns.html#cross-join","title":"Cross Join","text":""},{"location":"CIS-50/lab002answers.html","title":"Lab 2 Part 1","text":""},{"location":"CIS-50/lab002answers.html#lab-2-part-1","title":"Lab 2 Part 1","text":"Relations <p>All relationships are 1:M</p>   Business Rules <ul> <li>One course can generate many classes. Each class is generated by one course.</li> <li>One class can be referenced in enrollment many times. Each individual enrollment references one class.</li> <li>One student can be shown in enrollment many times. Each individual enrollment entry shows one student.</li> </ul>"},{"location":"CIS-50/lab002answers.html#crows-foot","title":"Crows Foot","text":"erDiagram     COURSE ||--|{ CLASS: generates     CLASS ||--|{ ENROLL: is_referenced_in     STUDENT ||--|{ ENROLL: is_shown_in"},{"location":"CIS-50/lab002answers.html#chen","title":"Chen","text":"graph TD     Course --&gt; |1|C{generates}     C --&gt;|M| Class     Class --&gt; |1|D{is referenced by}     D --&gt;|M| Enroll     Student --&gt; |1|E{is shown in}     E --&gt;|M| Enroll"},{"location":"CIS-50/lab002answers.html#uml","title":"UML","text":"classDiagram     Course \"1..1\" -- \"0..*\" Class     Class \"1..1\" -- \"0..*\" Enroll     Student \"1..1\" -- \"0..*\" Enroll     class Student{         -STU_NUM         -STU_LNAME         -STU_FNAME         -STU_INIT         -STU_DOB         -STU_HRS         -STU_CLASS         -STU_GPA         -STU_TRANSFER         -DEPT_CODE         -STU_PHONE         -PROF_NUM     }     class Enroll{         -CLASS_CODE         -STU_NUM         -ENROLL_GRADE     }     class Class{         -CLASS_CODE         -CRS_CODE         -CLASS_SECTION         -CLASS_TIME         -CLASS_ROOM         -PROF_NUM     }     class Course{         -CRS_CODE         -DEPT_CODE         -CRS_DESCRIPTION         -CRS_CREDIT     }"},{"location":"CIS-50/lab002answers.html#lab-2-part-2","title":"Lab 2 Part 2","text":"erDiagram     CUSTOMER ||--o| ACCOUNT: responsible     ACCOUNT ||--|{ CHARGE: posted     CHARGE }|--o| ITEM: include     ACCOUNT ||--|{ PAYMENTS: makes"},{"location":"git/gitflow.html","title":"Workflows","text":""},{"location":"git/gitflow.html#git-workflows","title":"Git Workflows","text":""},{"location":"git/gitflow.html#forking-workflow","title":"Forking Workflow","text":""},{"location":"git/gitflow.html#adding-an-upstream-repo","title":"Adding an Upstream Repo","text":"<ul> <li> <p>To add the upstream repo (the repo you originally forked from) to your remote repos do the following:</p> <ul> <li> <p>Open terminal and navigate to your local git repository</p> <pre><code>cd ~/Development/&lt;CLONED REPO DIR&gt;\n</code></pre> </li> <li> <p>Run the remote add command</p> <pre><code>git remote add upstream &lt;GitHub HTTP URL TO ORIGINAL REPO&gt;\n</code></pre> </li> <li> <p>Verify that the upstream was added.</p> <pre><code>git remote -v\n</code></pre> </li> </ul> </li> </ul>"},{"location":"git/gitflow.html#updating-my-fork-cli-version","title":"Updating My Fork (CLI) Version","text":"<ul> <li> <p>Open terminal and navigate to your local git repository</p> <pre><code>cd ~/Development/&lt;PROJECT DIR&gt;\n</code></pre> </li> <li> <p>Checkout the feature branch that holds the changes you desire to merge</p> <pre><code>git checkout &lt;BRANCH NAME&gt;\n</code></pre> </li> <li> <p>Confirm your local repo knows about the upstream repo (the repo you originally forked from). If you see only remote repos from your GitHub, you must add the upstream.</p> <pre><code>git remote -v\n</code></pre> </li> <li> <p>Fetch changes made to the upstream while you were working on your feature. If there were changes, you will see them displayed.</p> <pre><code>git fetch upstream\n</code></pre> </li> <li> <p>Merge the remote upstream changes into your local branch (remember you already checked out your local feature branch).</p> <pre><code>git merge upstream/master\n</code></pre> </li> <li> <p>Now upload those changes to YOUR remote origin (i.e. your GitHub fork).</p> <pre><code>git push origin\n</code></pre> </li> </ul>  Warning <p>If you\u2019re working with feature branches (which we are!) you may need to push your changes from YOUR local feature branch to YOUR remote origin feture branch like so.</p> <pre><code>    git push origin &lt;LOCAL BRANCH NAME&gt;:&lt;ORIGIN BRANCH NAME&gt;\n</code></pre>  <ul> <li>Now our forked (origin) remote repository on GitHub is up to date with the original (upstream) repository we forked from!</li> <li>Finally, from GitHub, go to the branch you just pushed in YOUR GitHub account, and issue a Pull Request to the Semester Branch on the upstream!</li> </ul>"},{"location":"git/gitflow.html#clone-local","title":"Clone Local","text":"<ul> <li>Once you have forked the upstream repository to your GitHub account, you will need to clone it to your local computer.<pre><code>git clone &lt;GIT SSH or HTTP URL FOR REPO&gt;\n</code></pre> </li> </ul>"},{"location":"git/gitflow.html#gitflow-workflow","title":"GitFlow Workflow","text":"Note <p>This workflow is very typical within a large development organization such as Amazon and Google, though there are other workflows! I am not focusing on it because we will be using the forking workflow.</p>"},{"location":"git/gitflow.html#short-gitflow-explanation","title":"Short GitFlow Explanation","text":"<ul> <li>Master: Stable branch, that deploys direct to production.</li> <li>Develop: Unstable branch, and all feature branches will be pushed here.</li> <li>Feature: Check out from Develop branch, and push changes back to it.</li> <li>Hotfix: Check out from Master, push changes to Master AND Develop.</li> <li>Release: Semi-stable, ready to test and release, following a few bug-fixes. Checkout from Develop and push to both Master and Develop.</li> </ul>"},{"location":"hardware/cables.html","title":"Cables","text":""},{"location":"hardware/cables.html#cables","title":"Cables","text":""},{"location":"hardware/cables.html#cat-6","title":"Cat-6","text":"Info <ul> <li>10/100BaseT, Gigabit, Ethernet, 10Gig Ethernet at shorter distances.</li> <li>250Mhz Frequencey</li> <li>Shielded/Unshielded</li> <li>Plastic core reduces crosstalk </li> </ul>"},{"location":"hardware/cables.html#wiring-cat-6-straight-through-cable","title":"Wiring Cat-6 Straight Through Cable","text":"<ul> <li>Cat-6 Wiring Handout</li> </ul>"},{"location":"hardware/cables.html#wire-order","title":"Wire Order","text":""},{"location":"hardware/cables.html#wire-purpose","title":"Wire Purpose","text":""},{"location":"java/associativity.html","title":"Operator Prcedence &amp; Associativity","text":""},{"location":"java/associativity.html#associativity","title":"Associativity","text":"Level Operator Description Associativity           16 ()[]. parenthesesarray accessmember access left-to-right   15 ++-- unary post-incrementunary post-decrement left-to-right   14 +-!~++-- unary plusunary minusunary logical NOTunary bitwise NOTunary pre-incrementunary pre-decrement right-to-left   13 ()new castobject creation right-to-left   12 * / % multiplicative left-to-right   11 + -+ additivestring concatenation left-to-right   10 &lt;&lt; &gt;&gt;&gt;&gt;&gt; shift left-to-right   9 &lt; &lt;=&gt; &gt;=instanceof relational left-to-right   8 ==!= equality left-to-right   7 &amp; bitwise AND left-to-right   6 ^ bitwise XOR left-to-right   5   bitwise OR   4 &amp;&amp; logical AND left-to-right   3      2 ?: ternary right-to-left   1 =   +=   -=*=   /=   %=&amp;=   ^= =&lt;&lt;=  &gt;&gt;= &gt;&gt;&gt;= assignment   0 -&gt; lambda expression arrow"},{"location":"java/format_specifiers.html","title":"Format Specifiers","text":""},{"location":"java/format_specifiers.html#java-format-specifiers","title":"Java Format Specifiers","text":"Format Specifier Data Type Output          %a floating point (except BigDecimal) Returns Hex output of floating point number.   %b Any type \u201ctrue\u201d if non-null, \u201cfalse\u201d if null   %c character Unicode character   %d integer (incl. byte, short, int, long, bigint) Decimal Integer   %e floating point decimal number in scientific notation   %f floating point decimal number   %g floating point decimal number, possibly in scientific notation depending on the precision and value.   %h any type Hex String of value from hashCode() method.   %n none Platform-specific line separator.   %o integer (incl. byte, short, int, long, bigint) Octal number   %s any type String value   %t Date/Time (incl. long, Calendar, Date and TemporalAccessor) %t is the prefix for Date/Time conversions. More formatting flags are needed after this. See Date/Time conversion below.   %x integer (incl. byte, short, int, long, bigint) Hex string."},{"location":"java/operators.html","title":"Operators","text":""},{"location":"java/operators.html#java-operators","title":"Java Operators","text":""},{"location":"java/operators.html#arithmetic-operators","title":"Arithmetic Operators","text":"Operator Name Description Example     + Addition Adds together two values x + y   - Subtraction Subtracts one value from another x - y   * Multiplication Multiplies two values x * y   / Division Divides one value by another x / y   % Modulus Returns the division remainder x % y   ++ Increment Increases the value of a variable by 1 ++x   \u2013 Decrement Decreases the value of a variable by 1 \u2013x"},{"location":"java/operators.html#assignment-operators","title":"Assignment Operators","text":"Operator Example Same As     = x = 5 x = 5   += x += 3 x = x + 3   -= x -= 3 x = x - 3   *= x *= 3 x = x * 3   /= x /= 3 x = x / 3   %= x %= 3 x = x % 3   &amp;= x &amp;= 3 x = x &amp; 3    = x   ^= x ^= 3 x = x ^ 3   &gt;&gt;= x &gt;&gt;= 3 x = x &gt;&gt; 3   &lt;&lt;= x &lt;&lt;= 3 x = x &lt;&lt; 3"},{"location":"java/operators.html#comparison-operators","title":"Comparison Operators","text":"Operator Name Example     == Equal to x == y   != Not equal x != y   &gt; Greater than x &gt; y   &lt; Less than x &lt; y   &gt;= Greater than or equal to x &gt;= y   &lt;= Less than or equal to x &lt;= y"},{"location":"java/operators.html#logical-operators","title":"Logical Operators","text":"Operator Name Description Example     &amp;&amp; Logical and Returns true if both statements are true x &lt; 5 &amp;&amp;  x &lt; 10      Logical or   ! Logical not Reverse the result, returns false if the result is true !(x &lt; 5 &amp;&amp; x &lt; 10)"},{"location":"tomcat/install.html","title":"Install","text":""},{"location":"tomcat/install.html#installing-tomcat-on-macos","title":"Installing Tomcat on MacOS","text":""},{"location":"tomcat/install.html#prerequisite","title":"Prerequisite","text":"<ul> <li> <p>Tomcat 10 requires Java version 8 or later and since OS X 10.7 Java is not (pre-)installed anymore.</p> <pre><code>java --version\n</code></pre> </li> <li> <p>Once java is installed add the JAVA_HOME variable to your shell\u2019s startup profile</p> <pre><code>export JAVA_HOME=&lt;Path to Java Home Dir&gt;\n</code></pre> </li> </ul>"},{"location":"tomcat/install.html#install-tomcat","title":"Install Tomcat","text":"<ul> <li>Download latest .tar.gz Core binary from Tomcat Download Page</li> <li> <p>Unarchive ~/Downloads/apache-tomcat-10.0.23.tar.gz</p> <pre><code>cd ~/Downloads/\ntar -xzf ~/Downloads/apache-tomcat-10.0.23.tar.gz\n</code></pre> </li> <li> <p>Open the Terminal app to move the unarchived distribution to /usr/local like so:</p> <pre><code>sudo mkdir -p /usr/local\nsudo mv ~/Downloads/apache-tomcat-10.0.23 /usr/local\n</code></pre> </li> <li> <p>To make it easy to replace this release with future releases, we are going to create a symbolic link that we are going to use when referring to Tomcat (after removing the old link, you might have from installing a previous version):</p> <pre><code>sudo rm -f /Library/Tomcat\nsudo ln -s /usr/local/apache-tomcat-10.0.23 /Library/Tomcat\n</code></pre> </li> <li> <p>Change ownership of the /usr/local/apache-tomcat-10.0.23 folder hierarchy:</p> <pre><code>sudo chown -R &lt;your_username&gt; /usr/local/apache-tomcat-10.0.23\n</code></pre> </li> <li> <p>Make all scripts in Tomcat\u2019s ./bin folder executable:</p> <pre><code>sudo chmod +x /usr/local/apache-tomcat-10.0.23/bin/*.sh\n</code></pre> </li> </ul>"},{"location":"tomcat/install.html#running-tomcat","title":"Running Tomcat","text":"<ul> <li> <p>Starting Tomcat by executing the provided scripts, like so:</p> <pre><code>/Library/Tomcat/bin/startup.sh\n</code></pre> </li> <li> <p>Stopping Tomcat by executing the provided scripts, like so:</p> <pre><code>/Library/Tomcat/bin/shutdown.sh\n</code></pre> </li> </ul>"},{"location":"tux/imagemagick.html","title":"ImageMagick","text":""},{"location":"tux/imagemagick.html#how-to-batch-crop-images-with-imagemagick","title":"How to Batch Crop Images With Imagemagick","text":""},{"location":"tux/imagemagick.html#crop-a-single-image","title":"Crop a Single Image","text":"<ul> <li>We\u2019ll start by looking at how to crop a single image using Imagemagick.</li> <li>Open a command window in the folder containing the image(s) you want to crop.</li> <li>Then open one of the images in Gimp or Photoshop to determine the x_size, y_size, x_offset, and y_offset as depicted </li> <li>Finally use convert to test 1 image and confirm your crop settings<pre><code>convert -crop x_sizexy_size+x_offset+y_offset inputfile outputfile\n\nconvert -crop 1000x1000+38+278 Image.jpg CroppedImage.jpg\n</code></pre> </li> </ul>"},{"location":"tux/imagemagick.html#batch-crop","title":"Batch Crop","text":"Note <p>Now we could just loop over the images and crop, but we won\u2019t thanks to Imagemagick\u2019s batch processor mogrify. The command to crop a folder of images is very similar to cropping just 1.</p>  <ul> <li>First make a new folder called cropped to output cropped images to.</li> <li> <p>Next run the command as follows:</p> <pre><code>mogrify -crop 1000x1000+38+278 -path ./cropped *.jpg\n</code></pre> </li> <li> <p>That\u2019s it, you\u2019ve batch cropped your images.</p> </li> </ul>"},{"location":"tux/os_command_map.html","title":"Command Cheatsheet","text":""},{"location":"tux/os_command_map.html#windows-vs-linux-command-cheatsheet","title":"Windows VS Linux Command Cheatsheet","text":""},{"location":"tux/os_command_map.html#cmd-window-mapping","title":"Cmd Window Mapping","text":"Windows Linux Description     dir ls -l Directory listing   ren mv Rename a file   copy cp Copying a file   move mv Moving a file   cls clear Clear Screen   del rm Delete file   fc diff Compare contents of files   find grep Search for a string in a file   command /? man command Display the manual/help details of the command   chdir pwd Returns your current directory location   time date Displays the time   cd cd Change the current directory   md mkdir To create a new directory/folder   echo echo To print something on the screen   edit vim(depends on editor) To write in to files.   exit exit To leave the terminal/command window.   format mke2fs or mformat To format a drive/partition.   free mem To display free space.   rmdir rm -rf/rmdir To delete a directory.   taskkill kill To kill a task.   tasklist ps x To list running tasks.   set var=value export var=value To set environment variables.   attrib chown/chmod To change file permissions.   tracert traceroute To print the route packets trace to network host.   at cron daemon to execute scheduled commands.   type cat To print contents of a file.   ping ping To send ICMP ECHO_REQUEST to network hosts.   nslookup nslookup To query Internet name servers interactively.   chdisk du -s For disk usage.   tree ls -R To list directory recursively."},{"location":"tux/os_command_map.html#powershell-command-mapping","title":"Powershell Command Mapping","text":"Windows Powershell Linux Description     Get-Content file3.txt -Tail \u201c3\u201d     Get-Content file3.txt | Select-Object -last 3 cat file3.txt | tail -3 Extract last 3 lines of file"},{"location":"tux/pandoc.html","title":"Pandoc","text":""},{"location":"tux/pandoc.html#pandoc-awesomeness","title":"Pandoc Awesomeness","text":""},{"location":"tux/pandoc.html#convert-html-to-markdown","title":"Convert HTML to Markdown","text":"<pre><code>    pandoc -f html -t markdown myfile.html &gt;myfile.md\n    # OR\n    pandoc -f html -t 'markdown_strict+pipe_tables' myfile.html &gt;myfile.md\n</code></pre>  Warning <p>The above commands will only convert simple tables to proper Markdown.  Multi-Line or Block tables will just be rendered as HTML, which is still valid in MkDocs!</p>"},{"location":"tux/parallel.html","title":"Parallel","text":""},{"location":"tux/parallel.html#example-of-parallels-nmap","title":"Example of Parallels Nmap","text":"Info <p>Here I explore the use of several commands to speed up the nmap scanning process. Curl is used to pull down our scanning target, jq is used to parse and partially format the json from the downloaded ip list, awk is then used to generate multiple nmap commands, and finally parallel is used to execute them in parallel. So let\u2019s get started and break this down.</p>"},{"location":"tux/parallel.html#the-command","title":"The Command","text":"<pre><code>    curl https://ip-ranges.amazonaws.com/ip-ranges.json | jq -r '.prefixes[] | [.region, .ip_prefix, .ip_prefix]|@tsv' | awk -F'\\t' '{gsub(\"/\",\"-\",$2);print(\"nmap -sT -T5 -Pn -p- -oG logs/\"$1\"_\"$2\".gnmap \" $3)}' | parallel --jobs 32\n</code></pre>"},{"location":"tux/parallel.html#curl","title":"Curl","text":"<pre><code>    curl https://ip-ranges.amazonaws.com/ip-ranges.json\n</code></pre> <ul> <li>Curl makes a GET request to the Amazon URL holding a json object of Amazon AWS IPs</li> <li>The json output looks something like below:<pre><code>{\n  \"syncToken\": \"1660666986\",\n  \"createDate\": \"2022-08-16-16-23-06\",\n  \"prefixes\": [\n    {\n      \"ip_prefix\": \"3.5.140.0/22\",\n      \"region\": \"ap-northeast-2\",\n      \"service\": \"AMAZON\",\n      \"network_border_group\": \"ap-northeast-2\"\n    },\n    ...\n}\n</code></pre> </li> </ul>"},{"location":"tux/parallel.html#jq","title":"Jq","text":"<pre><code>    | jq -r '.prefixes[] | [.region, .ip_prefix, .ip_prefix]|@tsv'\n</code></pre> <ul> <li>jq\u2019s -r option tells the command to output in raw format (i.e. no extra quotes or formatting)</li> <li><code>.prefixes[]</code> grabs all the elements in the prefixes array as seen in the output.</li> <li><code>|</code> cycles over the elements in the array.</li> <li><code>[.region, .ip_prefix, .ip_prefix]</code> captures the region and ip_prefix commands into a new 3 element array</li> <li><code>|@tsv</code> cycles over the new array elements and outputs them as -r a raw tab separated line.</li> <li>The output will look something like below:<pre><code>ap-northeast-2  3.5.140.0/22    3.5.140.0/22\nap-southeast-4  13.34.37.64/27  13.34.37.64/27\nil-central-1    13.34.65.64/27  13.34.65.64/27\nus-east-1   13.34.66.0/27   13.34.66.0/27\nme-south-1  13.34.78.160/27 13.34.78.160/27\n</code></pre> </li> </ul>"},{"location":"tux/parallel.html#awk","title":"Awk","text":"<pre><code>    | awk -F'\\t' '{gsub(\"/\",\"-\",$2);print(\"nmap -sT -T5 -Pn -p- -oG logs/\"$1\"_\"$2\".gnmap \" $3)}'\n</code></pre> <ul> <li><code>awk -F'\\t'</code> splits the line by line input into 3 variables $1 will equal region $2 will equal the first ip_prefix, and $3 will equal the second ip_prefix column</li> <li><code>gsub(\"/\",\"-\",$2);</code> this replaces any subnet slashes in the first ip_prefix column with a -</li> <li><code>print(\"nmap -sT -T5 -Pn -p- -oG logs/\"$1\"_\"$2\".gnmap \" $3)</code> this prints out the nmap command but substitutes $1 (i.e. the region) and $2 (i.e. the gsub-ed ip_prefix) into the option building the log file. $3 remains the unmodified ip_prefix to scan, so the full output will look something like below: <pre><code>nmap -sT -T5 -Pn -p- -oG logs/ap-northeast-2_3.5.140.0-22.gnmap 3.5.140.0/22\nnmap -sT -T5 -Pn -p- -oG logs/ap-southeast-4_13.34.37.64-27.gnmap 13.34.37.64/27\nnmap -sT -T5 -Pn -p- -oG logs/il-central-1_13.34.65.64-27.gnmap 13.34.65.64/27\nnmap -sT -T5 -Pn -p- -oG logs/us-east-1_13.34.66.0-27.gnmap 13.34.66.0/27\nnmap -sT -T5 -Pn -p- -oG logs/me-south-1_13.34.78.160-27.gnmap 13.34.78.160/27\n</code></pre> </li> </ul>"},{"location":"tux/parallel.html#parallel","title":"Parallel","text":"<pre><code>    | parallel --jobs 32\n</code></pre> <ul> <li>This command takes the numerous lines of nmap jobs generated above and runs 32 of them in parallel.</li> <li>In this way you have increase the speed at which nmap scans to a point that will likely overheat your PC :-)</li> </ul>  Warning <p>Make sure you set up a logs directory from the folder you run this so you don\u2019t get a file system error.</p> <pre><code>    mkdir logs\n</code></pre> <p>Also, make sure your system can killall in case things get out of hand:</p> <pre><code>    killall nmap\n</code></pre>"},{"location":"tux/ssh.html","title":"SSH","text":""},{"location":"tux/ssh.html#helpful-ssh-commands","title":"Helpful SSH Commands","text":""},{"location":"tux/ssh.html#convert-ssh-key-into-openssh-classic-key","title":"Convert SSH Key into OpenSSH Classic Key","text":"<ul> <li>May need to do this for various legacy programs or API libraries like Java\u2019s JSch.<pre><code>ssh-keygen -p -f &lt;privateKeyFile&gt; -m pem -P passphrase -N passphrase\n</code></pre> </li> </ul>"},{"location":"tux/tesseract.html","title":"Tesseract","text":""},{"location":"tux/tesseract.html#tesseract","title":"Tesseract","text":""},{"location":"tux/tesseract.html#extract-text-from-an-image","title":"Extract Text from an Image","text":"<ul> <li>Cd to the folder with the image/screenshots you wish to extract text from.</li> <li>Run tesseract on an image to test, here we extract the text of a Screenshot to a file called test.txt using a resolution of 150 dpi<pre><code>tesseract Screenshot_2022-08-16-21-27-12-14_1ce46c7c043b13bd654694576893861e.jpg test --dpi 150\n</code></pre> </li> </ul>"},{"location":"tux/tesseract.html#batch-extract-text","title":"Batch Extract Text","text":"<ul> <li>If Extracting Text from an Image was successful, you\u2019re ready to batch process it.</li> <li>First cd to the folder with the images/screenshots you wish to extract text from</li> <li> <p>Now run the following command</p> <pre><code>mkdir text\nfor f in `ls *.jpg`\ndo\n    BN=$(echo ${f%.*})\n    tesseract $f ./text/${BN} --dpi 150\ndone\n</code></pre> </li> <li> <p>The above command loops over all jpegs in the current folder, removes the .jpg extension and stores that to BN, then uses the tesseract command to process the image and output it as ${BN}.txt with a resolution of 150dpi.</p> </li> </ul>"},{"location":"vim/cheat-sheet.html","title":"Cheatsheet","text":""},{"location":"vim/cheat-sheet.html#vim-cheatsheet","title":"Vim Cheatsheet","text":""},{"location":"vim/cheat-sheet.html#comment","title":"Comment","text":"<p>Go the vim way. Start by only using hjkl to move the cursor.</p>"},{"location":"vim/cheat-sheet.html#help","title":"Help","text":"<pre><code>    www.vimdoc.sourceforge.net\n</code></pre>"},{"location":"vim/cheat-sheet.html#starting-up","title":"Starting Up","text":"<pre><code>    vim {filename}\n    vim {filename} +n       Open {filename} and position the cursor on line n.\n    vim *.txt\n</code></pre>"},{"location":"vim/cheat-sheet.html#modes","title":"Modes","text":"<ul> <li>Normal</li> <li>Insert</li> <li>Insert-Normal (Use command, then return to Insert mode.)</li> <li>Operator-Pending</li> </ul>  Note <p>Below, the dash \u201c-\u201d between buttons signals holding the first button, then pressing the second.</p>"},{"location":"vim/cheat-sheet.html#getting-help","title":"Getting Help","text":"<pre><code>    vimtutor\n    :help\n</code></pre>"},{"location":"vim/cheat-sheet.html#fundamentals","title":"Fundamentals","text":"<pre><code>    .                               Repeat the last command. (Includes text insertion in insert mode.) \n    i                               Enter insert mode.\n    I                               Enter insert mode at the beginning of the line.\n    a                               Enter insert mode one character beyond the cursor.\n    A                               Enter insert mode at the end of the line.\n    Esc                             Exit insert mode.\n    s                               Delete the character under the cursor and enter insert mode.\n    J\n</code></pre>"},{"location":"vim/cheat-sheet.html#moving-through-text","title":"Moving through text","text":"<pre><code>    h, j, k, l                      Move right, down, up, or right (real lines).\n    gj, gk                          Move down or up display lines.\n    0, g0                           Move to the first character of the real (, display) line.\n    ^, g^                           Move to the first non-blank character of the real (, display) line.\n    $, g$                           Move to the end of the real (, display) line.\n    w, b                            Move to the front (, back) of the next (or current/previous) word.\n    e, ge                           Move to the back of the current/next word (, previous word).\n    W, B                            Move to the front (, back) of the next (or current/previous) WORD.\n    E, gE                           Move to the back of the current/next WORD (, previous WORD).\n    :jump                           Inspect the contents of the jump list (for &lt;ctrl-o&gt;, &lt;ctrl-i&gt;).\n    &lt;ctrl-o&gt;                        Move back through the breadcrumbs. Will jump through buffers.\n    &lt;ctrl-i&gt;                        Move forward through the breadcrumbs.\n    &lt;ctrl-b&gt;, &lt;ctrl-u&gt;              Page Up.\n    &lt;ctrl-f&gt;, &lt;ctrl-d&gt;              Page Down.\n    &lt;number&gt;|                       Move to column &lt;number&gt;.\n</code></pre>"},{"location":"vim/cheat-sheet.html#jumps-moving-through-text-and-files","title":"Jumps (Moving through text and files\u2026)","text":"Jumps: Command Effect     [count]G Jump to line number.   //patern/?pattern/n/N Jump to the next (previous) occurrence of pattern.   % Jump from matched brace (),{},[] to another (front-back).   (/) Jump to start of previous/next sentence.   {/} Jump to start of previous/next paragraph.   H/M/L Jump to top/middle/bottom of screen.   gf Jump to file name under the cursor.    Jump to the definition of keyword under the cursor. (What!?)   \u2018{mark}/`{mark} Jump to a mark (more on this elsewhere\u2026)"},{"location":"vim/cheat-sheet.html#modify-jump-to-file","title":"Modify Jump to File","text":"<pre><code>    :set suffixesadd+=.rb           Etc. Add the specified extension and vim will try to use them with gf.\n</code></pre>"},{"location":"vim/cheat-sheet.html#changes-moving-through-them","title":"Changes (Moving through them\u2026)","text":"<pre><code>    :changes                        List the changes.\n    g; / g,                         Traverse the change list (back / forwards).\n    `.                              Jumps to the location of the last change (see more under Automatic Marks).\n    `^                              Jumps to the last insertion.\n    gi                              Move to last insertion point and enter insert mode.\n</code></pre>"},{"location":"vim/cheat-sheet.html#searching","title":"Searching","text":"<pre><code>    /{pattern}                      Search forward in the buffer for {pattern}.\n    ?{pattern}                      Search backwards in the buffer for pattern.\n    n                               Repeat the search going \"forward\" (in the expected direction)..\n    N                               Repeat the search with direction reversed.\n    /&lt;cr&gt;                           Jump forward to the next match of pattern (don't preserve direction or offset).\n    ?&lt;cr&gt;                           Jump backward to the next match of pattern (don't preserve direction or offset).\n    f&lt;char&gt;                         Search for the next instance of character &lt;char&gt;.\n    ;                               Repeat the last search \"f\" performed.\n    ,                               Reverse the last character search command.\n    F&lt;char&gt;                         Search backwards through the text for the next instance of &lt;char&gt;.\n    t&lt;char&gt;                         Search forward to the next character before the next occurrence of &lt;char&gt;.\n    T&lt;char&gt;                         Search backward to the character after the previous occurrence of &lt;char&gt;.\n    *                               Place the cursor on the word you want to search for (repeats of).\n    :set ignorecase                 Turn on case-insensitive search.\n    \\c                              Ignore case in *this* search (regardless of set setting). (Put anywhere in search term.)\n    \\C                              Use case in *this* search(regardless of set setting). (Put anywhere in search term.)\n    :set smartcase                  Ignore case in the search by default unless we include a capital letter in the search.\n    /#\\([0-9a-fA-F]\\{6}\\)           Search for six consecutive hexadecimal numbers preceeded by a # sign. (Optionally also escape the closing }).\n    /\\v                             Active the \"very magic search switch.\" (All characters assume special meaning except _, a-zA-Z0-9.\n    /\\v#([0-9a-fA-F]{6})            Search for six consecutive hexadecimal numbers preceeded by a # sign. \n    /\\v#(\\x{6}|\\x{3})               Search for six or three consecutive hexadecimal numbers (w/ hex character class) preceeded by a # sign. \n    /\\V                             Activate the \"very nonmagic\" search switch. (All characters except \\ lose special meaning - literal search.)\n    ?\\V                             Activate the \"very nonmagic\" search switch. (All characters except \\ and ? lose special meaning - literal search.)\n    /\\v&lt;word&gt;                       Use &lt;&gt; to mark the boundaries of a word (e.g., search for \"the\" and not \"these\", etc.).\n    :nohlsearch                     Unlike :set nohlsearch or :set hls!, this turns of highlighting until the next search is performed. (:noh)\n    &lt;ctrl-r&gt; &lt;ctrl-w&gt;               Autocomplete search field using remainder of highlighted selection (when :set incsearch is active).\n    /{pattern}/e                    Position the cursor at the end of the pattern when searching (default is the beginning).\n    //e                             Anchor the next search of a previous pattern to the end (no need to have /e'd initially). Can be used as a motion.\n    &lt;ctrl-r&gt; /                      Paste the contents of the last search register in place (insert mode, command line mode).\n    :let @/='Pragmatic Vim'         Set the last search register to 'Pragmatic Vim'.\n</code></pre>"},{"location":"vim/cheat-sheet.html#substitution","title":"Substitution","text":"<pre><code>    :s/{pat1}/{pat2}/               Substitute the first instance of {pat1} with {pat2} on the current line.\n    :s/{pat1}/{pat2}/g              Substitute all instances of {pat1} with {pat2} in the current line.\n    :[range]s/{pat1}/{pat2}/g       Substitute all instances of {pat1} with {pat2} over the specifiec range of lines.\n    :33,34s/aa/ab/gc                Replace aa with ab on lines 33 and 34.\n    g&amp;                              Repeat the last substitution over the entire file.\n    :%s/{pat1}/{pat2}/gc            Search and replace pat1 with pat2 and prompt each time over the whole file.\n    :%s/{pat1}/&lt;ctrl-{register}&gt;/   Search and replace pat1 with the contents of register {register}.\n    :%s/{pat1}/\\=@{register}/       Use the contents of register {register}, passing the contents by value. (e.g. @0 for the yank register, @\" for default)\n    :%s//{string}/gc                Search and replace using the last match.\n    :%s///gn                        Count the number of matches of the last search pattern used, don't do anything (n suppression).\n    :&amp;&amp;                             Replay the last substitution over the current line.\n    :%&amp;&amp;                            Repeat the last substitution over the entire file (longer g&amp;).\n    :'&lt;,'&gt;&amp;&amp;                        Replay the last substitution over the visually selected range (get '&lt;,'&gt; automatically with : from visual mode).\n</code></pre>"},{"location":"vim/cheat-sheet.html#special-characters-in-substitution-command-replacement-strings","title":"Special Characters in Substitution Command Replacement Strings","text":"<pre><code>    Symbol                          Represents\n    ------                          ----------\n    \\r                              Carriage return.\n    \\t                              Tab.\n    \\\\                              Backslash.\n    \\1                              Insert the first submatch.\n    \\2                              Insert the second submatch (and so on, up to \\9).\n    \\0                              Insert the entire matched pattern.\n    &amp;                               Insert the entire matched pattern.\n    ~                               Use {string} from previous substitute.\n    \\={Vim script}                  Evaluate {Vim script} expression, use the reult as the replacement {string}.\n</code></pre>"},{"location":"vim/cheat-sheet.html#editing-in-replace-mode","title":"Editing in Replace Mode","text":"<pre><code>    R                               Enter replace mode.\n    &lt;insert&gt;                        Also may use the insert key to enter replace mode (if present).\n    gR                              Virtual replace mode (treats tab stops as though they were a single space).\n    r{char}                         Replace a single character.\n    gr{char}                        Replace a single character in virtual mode.\n    Vr-                             Select a line and replace all the characters with \"-\"\n</code></pre>"},{"location":"vim/cheat-sheet.html#mark-text","title":"Mark Text","text":"<pre><code>    m{a-zA-Z}                       Lower case letters mark only the buffer, uppercase are global (across all buffers).\n    '{mark}                         Jump to the line where the mark was set.\n    `{mark}                         Jump to the exact point the mark was set.\n</code></pre>"},{"location":"vim/cheat-sheet.html#automatic-marks","title":"Automatic Marks","text":"<pre><code>    Keystrokes                      Buffer Positions\n    ----------                      ----------------\n    ''                              Position before the last jump within current file.\n    '.                              Location of last change (beginning of line).\n    '^                              Location of last insertion (beginning of line).\n    '[                              Start of last change or yank.\n    ']                              End of last change or yank.\n    '&lt;                              Start of last visual selection.\n    '&gt;                              End of last visual selection.\n</code></pre>"},{"location":"vim/cheat-sheet.html#repeatable-and-reversible-actions","title":"Repeatable and Reversible Actions","text":"<pre><code>    Intent                          Act                     Repeat      Reverse\n    ------                          ---                     ------      -------\n    Make a change.                  Edit                    .           u\n    Scan line for next.             f{char}/t{char}         ;           ,\n    Scan line for previous.         F{char}/T{char}         ;           ,\n    Scan document for next.         /{pattern}&lt;CR&gt;          n           N\n    Scan document for previous.     ?{pattern}&lt;CR&gt;          n           N\n    Perform substituion.            :s/target/replacement   &amp;           u\n    Execute a sequence of changes.  qx{changes}q            @x          u\n</code></pre>"},{"location":"vim/cheat-sheet.html#run-commands-in-the-shell","title":"Run Commands in the Shell","text":"<pre><code>    :!                          Access the shell.\n    :!ls                        Run ls in the shell. (Note, :ls shows the contents of the buffer list.)\n    %                           On vim's command line, this is short hand for the current filename. \n    :!ruby %                    Runs the current (ruby) file being edited.\n    :shell                      Start an interactive shell session inside vim. (Use \"exit\" to return to vim.)\n    :read !{cmd}                Put the output of cmd into the current buffer.\n    :write !{cmd}               Use the current buffer as input for cmd.\n    :write {file}               Write the current buffer into {file}.\n    :write! {file}              Write the current buffer into {file} and overwrite the contents. Watch the ! placement!\n    :[range]!{cmd}              Pass the lines in range to cmd and replace the range with the output of cmd.\n    :!mkdir -p %:h              Make all the directories needed to write a file into its current path.\n</code></pre>"},{"location":"vim/cheat-sheet.html#working-with-files","title":"Working with Files","text":"<pre><code>    :cd {path}                  Change vim's working directory.\n    :pwd                        Show vim's present working directory.\n    :edit {filename}            Open a file into the buffer for editing.\n    :edit!                      Re-read the current file into the buffer and discard exisitng changes. (:e!)\n    :edit %&lt;tab&gt;                % is a short-hand for the active buffer filepath.\n    :edit %:h&lt;tab&gt;              The :h modifier removes the filename while preserving the rest of the path.\n    :find {file}                Open a file by name without a fully qualified path. (&lt;tab&gt; completion is available.)\n    :set path+={dir}/**         Add a directory to the vim \"$PATH\". (** matches all subdirectories below {dir})\n    :set path?                  Inspect the value of the path.\n</code></pre>"},{"location":"vim/cheat-sheet.html#write-changes-from-a-buffer-to-a-file","title":"Write Changes from a Buffer to a File","text":"<pre><code>    :write                                ZZ will also write and close.\n    :update\n    :saveas\n    :w !sudo tee % &gt; /dev/null            Write the current buffer as the super-user. (% expands to the path of the current buffer.)\n</code></pre>"},{"location":"vim/cheat-sheet.html#manipulate-file-buffers","title":"Manipulate File Buffers","text":"<pre><code>    :ls                                   List the files.\n    :bnext                                Switch to the next buffer. (:bn) \n    :bprev                                Switch to the previous buffer. (:bp)\n    :bfirst                               Move to the first buffer. (:bf)\n    :blast                                Move to the last buffer. (:bl)\n    :buffer N                             Move to buffer N (:ls shows the buffer numbers). (:buf N)\n    :buffer {buffname}                    Move to the buffer with name {buffname} (shown by :ls, no need for \" characters).\n    &lt;ctrl-^&gt;                              Toggle between the current and alternate buffers.\n    :bufdo                                Run an Ex command on all the buffers.\n    :bdelete N1 N2                        Delete buffers numbered N1 and N2.\n    :N, M bdelete                         Delete buffers numbered N through M (this has no effect on the associated file).\n    :5,10bd                               e.g, Delete buffers numbered 5 through 10.\n    :args                                 List of files used to launch vim. (well, more than that actually...)\n    :args {arglist}                       Populate the arguments list. (e.g., vim, followed by :args {file1} {file2}). Accepts wildcards.\n    :args **/*.*                          * is a 0 or more character wildcard. So is **, but it can recurse downward into directories below.\n    :args **/*.js **/*.css                Just get all the JavaScript and CSS, etc.\n    :args `cat .chapters`                 Use shell expansion inside the backticks.\n    :next                                 Move through the argument list.\n    :prev                                 Move through the argument list.\n    :argdo                                Execute the same command on every buffer in the set.\n    :argdo %s//{pat1}/ge                  Substitute the last search match with {pat1} in all of \"argslist\" across the whole files, suppressing error messages.\n    :argdo update                         Save every file, but only if it has been changed.\n</code></pre>"},{"location":"vim/cheat-sheet.html#managing-hidden-files","title":"Managing Hidden Files","text":"<pre><code>    :ls                                                                                                                      \n      1 %a + \"a.txt\"                        line 17   # &lt;- \"+\" &lt;- Modified.\n      2      \"b.txt\"                        line 0\n    :bn!\n    :ls\n      1 #h + \"a.txt\"                        line 17   # &lt;- \"h\" &lt;- Hidden file.\n      2 %a   \"b.txt\"                        line 1\n</code></pre>"},{"location":"vim/cheat-sheet.html#working-with-the-filesystem","title":"Working with the Filesystem","text":"<pre><code>    vim .                                   Open a filesystem browser in the current directory.\n    k,j &lt;cr&gt;                                Navigate vim's representation of the filesystem, open the selected file.\n    :edit {path - directory name}           Open a filesystem browser in the specified directory. (always recall \":edit .\" or \":e.\")\n    :edit %:h                               Open a filesystem browser in the directory of the current file.\n    :Explore\n    netrw-%                                 Create new files. (% in netrw, etc.)\n    netrw-d                                 Create new directories.\n    netrw-rename                            Rename a file.\n    netrw-del                               Delete a file.\n</code></pre>"},{"location":"vim/cheat-sheet.html#split-windows","title":"Split Windows","text":"<pre><code>    &lt;ctrl-w&gt; s                              Split windows horizontally.\n    &lt;ctrl-w&gt; v                              Split windows vertically.\n    &lt;ctrl-w&gt; {s/v} :edit {filename}         Create a split and edit.\n    :split {filename}                       Combo - create a split and edit. (Horizontal.) (:sp {file})\n    :vsplit {filename}                      Combo - create a split and edit. (Vertical.) (:vsp {file})\n    &lt;ctrl-w&gt; w                              Cycle focus between open windows. Also, &lt;ctrl-w&gt; &lt;ctrl-w&gt; (ctrl-\"ww\").\n    &lt;ctrl-w&gt; h                              shift focus to the left.\n    &lt;ctrl-w&gt; j                              shift focus below.\n    &lt;ctrl-w&gt; k                              shift focus above.\n    &lt;ctrl-w&gt; l                              shift focus to the right.\n    :close                                  Close the active window. (:cl), Also &lt;ctrl-w&gt; c\n    :only                                   Keep only the active window. (:on), Also &lt;ctrl-w&gt; o\n    &lt;ctrl-w&gt; =                              Equalize width and height of all windows.\n    &lt;ctrl-w&gt; _                              Maximize height of active window.\n    &lt;ctrl-w&gt; |                              Maximize width of active window.\n    [N]&lt;ctrl-w&gt;                             Set active window height to N rows.\n    [N]&lt;ctrl-|&gt;                             Set active window width to N columns.\n    [ Look up more details on window-moving in the help and check Vim-casts.org ]\n</code></pre>"},{"location":"vim/cheat-sheet.html#tabs","title":"Tabs","text":"<pre><code>    :lcd {path}                             Set up the working directory locally for the current window.\n    :windo lcd {path}                       Set up the working directory locally all windows in a tab. \n    :tabedit {filename}                     Open a tab with file {filename}. (:tabe {filename})\n    &lt;ctrl-w&gt; T                              Move the current window into its own tab.\n    :tabclose                               Close the current tab and all of its windows. (:tabc)\n    :tabonly                                Keep only the current tab and all of its windows.\n    [N]gt                                   Go to tab N.\n    :tabnext {N}                            Switch to tab N. (:tabn {N})\n    gt                                      Next tab.\n    :tabnext                                Next tab. (:tabn)\n    gT                                      Previous tab.\n    :tabprevious                            Previous tab. (:tabp)\n</code></pre>"},{"location":"vim/cheat-sheet.html#switch-to-normal-mode-from-insert-mode","title":"Switch to Normal Mode from Insert Mode","text":"<pre><code>    &lt;esc&gt;\n    &lt;ctrl-[&gt;\n</code></pre>"},{"location":"vim/cheat-sheet.html#switch-to-insert-normal-mode-from-insert-mode","title":"Switch to Insert-Normal Mode from Insert Mode","text":"<pre><code>    &lt;ctrl-o&gt;\n</code></pre>"},{"location":"vim/cheat-sheet.html#switch-to-visual-mode","title":"Switch to Visual Mode","text":"<pre><code>    v                       Enable character-wise visual mode. (And return to normal mode - toggle.)\n    &lt;ctrl-g&gt;                Enter Select Mode from visual mode.\n    V                       Enter line-wise visual mode.\n    &lt;ctrl-v&gt;                Enter block-wise visual mode.\n    o                       Go to the other end of highlighted text.\n</code></pre>"},{"location":"vim/cheat-sheet.html#selection-in-visual-mode","title":"Selection in Visual Mode","text":"<pre><code>    gv                      Reselect the last visual selection.\n    vit                     Select inside a tag (e.g., (cursor here-&gt;)&lt;a&gt;select me&lt;/a&gt;) on a line.\n</code></pre>"},{"location":"vim/cheat-sheet.html#using-a-visual-operator","title":"Using a Visual Operator","text":"<pre><code>    vU                      Make the selection uppercase.\n    vu                      Make the selection lowercase.\n</code></pre>"},{"location":"vim/cheat-sheet.html#delimited-text-objects-begin-and-end-with-matching-symbols","title":"Delimited Text Objects (Begin and end with matching symbols.","text":"<pre><code>    v&lt;text object&gt;          Enter visual mode and use the following to make a selction of...\n    Remember, text objects can be {motion}s.\n    a) or ab                A pair of (parentheses).\n    i) or ib                Inside of (parentheses).\n    a} or aB                A pair of {braces}.\n    i} or iB                Inside of {braces}.\n    a]                      A pair of [brackets].\n    i]                      Inside of [brackets].\n    a&gt;                      A pair of &lt;angle brackets&gt;.\n    i&gt;                      Inside of &lt;angle brackets&gt;.\n    a'                      A pair of 'single quotes'.\n    i'                      Inside of 'single quotes'.\n    a\"                      A pair of \"double quotes\".\n    i\"                      Inside a pair of \"double quotes\".\n    at                      A pair of &lt;xml&gt;tags&lt;/xml&gt;.\n    it                      Inside a of &lt;xml&gt;tags&lt;/xml&gt;.\n</code></pre>"},{"location":"vim/cheat-sheet.html#bounded-text-objects-defined-by-boundaries","title":"Bounded Text Objects (Defined by boundaries.)","text":"<pre><code>    Remember, text objects can be {motion}s.\n    iw                      Current word.\n    aw                      Current word plus one space.\n    iW                      Current WORD.\n    aW                      Current WORD plus one space.\n    is                      Current sentence.\n    as                      Current sentence plus one space.\n    ip                      Current paragraph.\n    ap                      Current paragraph plus one blank line.\n</code></pre>"},{"location":"vim/cheat-sheet.html#command-line-mode","title":"Command Line Mode","text":"<pre><code>    :                       Enter the Ex Command mode.\n    /                       Enter the pattern search mode.\n    &lt;ctrl-r&gt; &lt;ctrl-w&gt;       Insert the word under the cursor.\n    *                       /\\&lt;&lt;ctrl-r&gt; &lt;ctrl-w&gt;\\&gt;&lt;cr&gt;\n    /&lt;ctrl-r&gt; &lt;ctrl-w&gt;       Search for the word under the cursor.\n</code></pre>"},{"location":"vim/cheat-sheet.html#command-line-window","title":"Command Line Window","text":"<pre><code>    q:                      Bring up the window with a history of the Ex commands.\n    k, j                    Scroll through the command line window.\n    &lt;cr&gt;                    Execute the contents of the current line.\n    q/                      Bring up the window with a history of searches.\n    &lt;ctrl-f&gt;                Switch from the command line mode to the command line window.\n</code></pre>"},{"location":"vim/cheat-sheet.html#operators","title":"Operators","text":"<pre><code>    &gt;                       Shift (the line?) right.\n    &lt;                       Shift (the line?) left.\n    gUit                    Select text inside a tag and shift it to uppercase (tip 23).\n</code></pre>"},{"location":"vim/cheat-sheet.html#indentation","title":"Indentation","text":"<pre><code>    &gt;                       Indent the line (or visually selected text).\n    2&gt;                      Indent the line twice (3&gt; for three times, etc.).\n    &gt;G                      Increase indentation from here to the end of the file.\n    =G                      Autoindet from here to the end of the file.\n    ==                      Indent current line.\n</code></pre>"},{"location":"vim/cheat-sheet.html#editing","title":"Editing","text":"<pre><code>    s                       Remove the character under the cursor and enter insert mode.\n    c{motion}               Remove text and enter insert mode. $, l, w\n    ciw                     Remove the current word and enter insert mode.\n    u                       Undo the last change.\n    U                       Undo all changes to the line.\n    &lt;ctrl-r&gt;                Re-do the last undo.\n    daw                     Delete a word (cursor may be located anywhere within the word).\n    dap                     Delete a paragraph.\n    d{motion}               Delete. (Power move, especially with / search.)\n    ~                       Toggle case of the character under the cursor or all visually selected text.\n    g~                      Swap case. (requires motion?)\n    gu                      Make lower case. (requires motion?) guaw = convert a word, guap = paragraph \n    gU                      Make upper case. (requires motion?) gUaw = CONVERT a word, gUap = paragraph, gUgU converts a line.\n</code></pre>"},{"location":"vim/cheat-sheet.html#deleting-c-instead-of-d-to-enter-insert-after-the-edit","title":"Deleting (c instead of d to enter insert after the edit).","text":"<pre><code>    dh / x                  Delete one character backwards.\n    dl / X                  Delete one character forwards.\n    db                      Delete one word backwards.\n    dw                      Delete one word forwards.\n    dB                      Delete one non-blank word backwards.\n    dW                      Delete one non-blank word forwards.\n    d$ / D                  Delete to the end of the line.\n    d0                      Delete to the beginning of the line.\n    0d$ / dd                Delete the line.\n</code></pre>"},{"location":"vim/cheat-sheet.html#editing-in-insert-mode","title":"Editing In Insert Mode","text":"<pre><code>    &lt;ctrl-h&gt;                Delete back one character.\n    &lt;ctrl-w&gt;                Delete back one word.\n    &lt;ctrl-u&gt;                Delete back to the start of the line.\n    &lt;ctrl-r&gt; N              Paste from register N. (Press and hold ctrl-r, then release, then press the number.)\n    &lt;ctrl-r&gt; &lt;ctrl-p&gt; N     Smarter paste from register N.\n    &lt;ctrl-v&gt; Code           Enter a unicode character (expect 3 digits).\n    &lt;ctrl-v&gt; u{Code}        Enter an arbitrary code (e.g., u00bf = \u00bf).\n    &lt;ctrl-v&gt; {nondigit}     Enter a nondigit literally (e.g., a literal tab instead of spaces in case exapandtab is active).\n    &lt;ctrl-k&gt; {char1}{char2} Enter a unicode character via digraph, e.g. &lt;ctrl-k&gt; ?I = \u00bf. View a list of digraphs with :digraphs\n</code></pre>"},{"location":"vim/cheat-sheet.html#using-the-expression-register","title":"Using the Expression Register","text":"<pre><code>    &lt;ctrl-r&gt; =              In insert mode.\n</code></pre>"},{"location":"vim/cheat-sheet.html#copying-cutting-and-pasting-yanking-deleting-and-putting","title":"Copying, Cutting, and Pasting (Yanking, Deleting, and Putting)","text":"<pre><code>    Regisers are [a..z] for overwriting and [A..Z] for appending.\n    The system clipboard is \"+ (X11 at least).\n    \"{register}             Prefix to specify the register for holding the yank/delete. Defaults to unnamed (\"). \n    :reg                    Examine the contents of the registers.\n    :reg \"0                 Examine the contents of the yank register. (Also shows the contents of \"\" (unnamed).)\n    y{motion}               Copy (? ... $, l, w) into the unnamed register. Also copy into the yank register (\"0)!\n    yiw                     Copy a word.\n    yi[                     Copy everything inside the [] braces (cursor should be inside the []).\n    yy                      Copy a line.\n    yyp                     Copy a line and put it (immediately below the current line).\n    yt,                     Copy to the next comma.\n    y$                      Copy to the end of the line.\n    p                       Paste (removed with x, copied with y, for example) after the cursor position.\n    P                       Paste (removed with x, copied with y, for example) before the cursor position.\n    puP / Pup               Paste the other way when you get it wrong...\n    \"\"p                     Paste from the unnamed register (\"\"p == p).\n    \"ap                     Paste from register a.\n    \"0p                     Paste from the yank register (may also be equivalent to the unnamed or another register).\n    xp                      Cut and paste a character - effectively transpose two characters.  \n    diw                     Cut a word.\n    dd                      Cut a line.\n    ddp                     Cut and paste a line (one below the current line) - effectively transpose two lines.\n    v{selection}p           Swap the highlighted portion in visual mode with the contents of (the unnamed) register, and vice versa.\n    \"{register}v{sel}p      Swap the highlighted portion in visual mode with the contents of the register, and vice versa.\n    &lt;ctrl-r&gt;{register}      Insert Mode: Paste from register {register}. (Recall &lt;ctrl-r\"&gt; to get the unnamed!) Useful with Ex commands too!\n</code></pre>"},{"location":"vim/cheat-sheet.html#default-registers","title":"Default Registers","text":"<pre><code>    \"=                      Expression Register\n    \"%                      Name of current file.\n    \"#                      Name of alternate file.\n    \".                      Last inserted text.\n    \":                      Last Ex command.\n    \"/                      Last search pattern (can be set explicitly with :let ).\n</code></pre>"},{"location":"vim/cheat-sheet.html#addition","title":"Addition","text":"<pre><code>    N &lt;ctrl-a&gt;                                      Add N to the next number on the line, e.g. 10 -&gt; 20\n    N &lt;ctrl-x&gt;                                      Subtract N from the next number on the line, e.g., 30 -&gt; 20\n</code></pre>"},{"location":"vim/cheat-sheet.html#compound-commands","title":"Compound Commands","text":"<pre><code>    A           $a\n    C           c$\n    s           cl\n    S           ^C\n    I           ^i\n    o           A&lt;CR&gt;                               # Leverage undo power by finishing lines with {stop} &lt;esc&gt; o\n    O           ko\n</code></pre>"},{"location":"vim/cheat-sheet.html#screen-redraw","title":"Screen Redraw","text":"<pre><code>    zz                                              Redraw the screen with the cursor position in the vertical center of the page.\n    z.                                              Redraw the screen with the cursor position in the vertical center of the page.\n    zt                                              Redraw the screen with the cursor position at the top of the page.\n    &lt;ctrl-l&gt;                                        Clear and redraw the screen.\n</code></pre>"},{"location":"vim/cheat-sheet.html#ex-commands","title":"Ex Commands","text":"<pre><code>    &lt;ctrl-d&gt;                                        Offer autocompletion suggestions. Tab to cycle through them.\n    :colorscheme &lt;ctrl-d&gt;                           Show all the colorscheme options (tab to cycle through).\n    :help ex-cmd-index                              See the ex-cmd-index for the full list of commands.\n    :{N}                                            Jump to line N.\n    :$                                              Go to the end of the file.\n    :print                                          Print the line. (Abbreviate with :p)\n    :2,5p                                           Print lines 2 to 5. (.,$p prints from the current line to EOF).\n    :%p                                             Print all the lines in the file.\n    :/{pattern1}/+1,/{pattern2}/-1p                 Print all lines between, but not including, those matching patterns 1 &amp; 2.\n    :[range]delete[x]                               Delete specified lines into register x. (e.g., :3d deletes line 3).\n    :[range]yank[x]                                 Yank specified lines into register x.\n    :[line]put[x]                                   Put the text from reigster x after the specified line.\n    :[range]copy{address}                           Copy the specified lines to below the line specified by {address}. \n    :6copy.                                         Copy line 6 to below the current line.\n    :6t.                                            Copy line 6 to below the current line. ( t == copy )\n    :t.                                             Duplicate the current line without using a register (yyp uses a register).\n    :[range]move{address}                           Move the specified lines to below the line specified by {address}. ( abbrev m )\n    :[range]join                                    Join the specified lines.\n    :[range]normal{commands}                        Execute normal mode {commands} on each specified line.\n    :[range]substitute/{pattern}/{string}/[flags]   Replace {pattern} with {string} on the specified lines. (:[range]s/{pattern}/{string}/[flags])\n    :%s/{pattern}/{string}/[flags]                  Do the substitution over the entire file, looking for pattern, etc.\n    :%s/{pattern}/{string}/[flags={g,c,n,&amp;}]        Flags: g=global (all in a line), c=confirm, n=no subs, report number, &amp;=reuse flags from last \"s\"\n    :[range]global/{pattern}/[cmd]                  Execute Ex [cmd] on all specified lines with a {pattern} match.\n    :qall!                                          Quit and discard all unsaved changes in all open buffers.\n    :wall                                           Write all modified buffers to disk. (:wa)\n    :write\n    :wnext                                          Write, followed by \"next.\"\n    :tabnew\n    :split\n    :prev/:next\n    :bprev/:bnext\n    @:                                              Repeat the last Ex command.\n    :normal &lt;cmd&gt;                                   For each selected line, execute the normal mode command &lt;cmd&gt;. (jVG :normal .)\n    :%normal A;                                     Select all modes and run normal \"A;\" (append a semicolon to every line).\n    :%normal i//                                    Comment out every line (.js or .cpp).                                  \n    :delete {register}                              Cut the current line into {register} \n    :yank {register}                                Copy the current line into {register} \n    :put {register}                                 Put the line from {register} \n    :edit!                                          Undo all changes (back to last save?).\n    :sort                                           Sort!\n</code></pre>"},{"location":"vim/cheat-sheet.html#global-commands","title":"Global Commands","text":"<pre><code>    :[range]global[!]/{pattern}/[cmd]               Execute an Ex command on each line that matches a pattern.\n    :[range]global[!]/{pattern}/[range][cmd]        Template is expandable...\n    :g/re/p                                         Print a regular expression globally. ^_^\n    :g/re/d                                         Delete all lines matching a regular expression globally. \n    :[range] vglobal /{pattern}/ [cmd]              Execute an Ex command on each line that doesn't match a pattern.\n    :v/re/d                                         Delete all lines NOT matching a regular expression globally. \n    :g/TODO/yank A                                  Copy all lines with TODO in them into register a (use upper case to append).\n    :g/{/ .+1,/}/-1 sort                            Sort all items between all braces {} in a bufer.\n</code></pre>"},{"location":"vim/cheat-sheet.html#macros","title":"Macros","text":"<pre><code>    q{register}                                     Start recording a macro to {register} (e.g. \"q\"). Lower-case to overwrite, upper case to append.\n    qq                                              Start recording into register q.\n    q                                               Stop recording.\n    qQ                                              Append additional commands to the macro in register \"q\".\n    q                                               Stop appending.\n    :reg {register}                                 Examine the macro in {register}. (Useful before appending.)\n    @{register}                                     Execute the macro in {register}.\n    @@                                              Execute the most recently *invoked* {register}.\n    N@{register}                                    Execute the macro in {register} N times.\n    :normal @{register}                             Apply the macro to every visually selected line of text (e.g. vG:normal @a)\n    :argdo normal @{register}                       Apply the macro to all open buffers. (Often lead with :edit! to undo file where we recorded the macro.)\n</code></pre>"},{"location":"vim/cheat-sheet.html#vim-script","title":"Vim Script","text":"<pre><code>    :let i=0                                        Assign 0 to i.\n    :echo i                                         Print i (not to the buffer).\n    :let i += 1                                     Increment i.\n    &lt;ctrl-r&gt; =i&lt;cr&gt;                                 Insert i into the buffer.\n    :let @a=substitute(@a, '\\~', 'vU', 'g')         Substitute text *inside* the register.\n</code></pre>"},{"location":"vim/cheat-sheet.html#tags","title":"Tags","text":"<pre><code>    &lt;ctrl-]&gt;                                        Jump to a definition.\n    &lt;ctrl-t&gt;                                        Jump back through the tag history.\n    g&lt;ctrl-]&gt;                                       See a list of definitions to jump to. (Then, number and &lt;CR&gt;.)\n    :tselect                                        Show the list of definitions to jump to again (need to &lt;ctrl-]&gt; first).\n    :tnext                                          Jump to the next match without showing a prompt.\n    :tprev, :tfirst, :tlast                         Jump to matches without a prompt.\n    :tag {keyword}                                  Acts like &lt;ctrl-]&gt;. {keyword} features tab completion.\n    :tjump {keyword}                                Acts like g&lt;ctrl-]&gt;.\n    :pop                                            Acts like &lt;ctrl-t&gt;.\n</code></pre>"},{"location":"vim/cheat-sheet.html#quickfix-list","title":"Quickfix List","text":"<pre><code>    :make                                           Run make in the shell where the buffer is.\n    :cnext                                          Jump to the next error from a make (next item in the Quickfix list).\n    :cprev, :cfirst, :clast                         Jump to an item in the Quickfix list.\n    :cnfile, :cpfile                                Jump to the first item in the next (previous) file.\n    :cc N                                           Jump to the nth item.\n    :copen, :cclose                                 Open/Close the Quickfix window.\n    :5cnext, :3cprev                                Jump with a count for the number of items.\n    :colder                                         Look at an older version of the Quickfix list (vim stores up to 10).\n    :cnewer                                         Look at a newer version of the Quickfix list.\n    :setlocal makeprg=gmake\\ acquire_data-lib    \n    :setlocal makeprg=cmt\\ make    \n    :setglobal errorformat?                         Check the error format put into the Quickfix list. - %f=filename, %l=line, %m=message\n    :setlocal efm={format}                          Set the format to handle errors vim doesn't know well.\n    :compiler cmt make                              Activte the compiler plugin (set makeprg and errorformat).\n    :args $VIMRUNTIME/compiler/*.vim                Look at the compiler plugins distributed with vim.\n</code></pre>"},{"location":"vim/cheat-sheet.html#location-list","title":"Location List","text":"<pre><code>    :lnext, :lprev, ...\n</code></pre>"},{"location":"vim/cheat-sheet.html#grepping-externally","title":"Grepping Externally","text":"<pre><code>    :grep {pattern} *                               Populate the Quickfix list with the search results (-n flag is automatically present).\n    :grepprg=\"grep -n $* /dev/null\"                 Set what :grep triggers in the external shell. (For example, call ack.)\n    :grepformat=\"%f:%l:%m,%f:%l%m,%f %l%m\"          Format the search results from the external grep triggered by :grep. (See errorformat for more.)\n    :vimgrep/{pattern}/[g][j] {file}                Use vim's built-in search engine (vim regex syntax). {File} cannot be blank. (* for any file in the directory.)\n    :vimgrep/{pattern}/**                           Search through all files in subdirectories recursvely. Navigate in quickfix (use :copen).\n    :vimgrep/{&lt;ctrl-r&gt;/}/**                         Paste the last search from the search register into the pattern for external searching.\n</code></pre>"},{"location":"vim/cheat-sheet.html#autocompletion","title":"Autocompletion","text":"<pre><code>    &lt;ctrl-p&gt; / &lt;ctrl-n&gt;                             From insert mode, to select the \"previous\" and \"next\" items.\n</code></pre>"},{"location":"vim/cheat-sheet.html#autocompletion-method-table","title":"Autocompletion Method Table","text":"<pre><code>    &lt;ctrl-n&gt;                                        Generic keywords (built from a partial word list using a document scan).\n    &lt;ctrl-x&gt;&lt;ctrl-n&gt;                                Current buffer keywords.\n    &lt;ctrl-x&gt;&lt;ctrl-i&gt;                                Included file keywords (e.g., #include (c,c++), import (ruby, python), etc.) (Tweak the 'include' setting.)\n    &lt;ctrl-x&gt;&lt;ctrl-]&gt;                                Included file keywords.\n    &lt;ctrl-x&gt;&lt;ctrl-]&gt;                                Tags file keywords.\n    &lt;ctrl-x&gt;&lt;ctrl-k&gt;                                Dictionary lookup - dictionary must be populated (best with :set spell).\n    &lt;ctrl-x&gt;&lt;ctrl-l&gt;                                Whole line completion (duplicate an existing line from elsewhere in the buffer - use a few chars to start).\n    &lt;ctrl-x&gt;&lt;ctrl-f&gt;                                Filename completion (uses :pwd, so :cd {path} to get a different set).\n    &lt;ctrl-x&gt;&lt;ctrl-o&gt;                                Omni completion (we need a plug-in for the language we're using, see compl-omni-filetypes).\n</code></pre>"},{"location":"vim/cheat-sheet.html#autocompletion-pop-up-menu","title":"Autocompletion Pop-up Menu","text":"<pre><code>    &lt;ctrl-n&gt;                                        Use the next match from the list.\n    &lt;ctrl-p&gt;                                        Use the previous match from the list.\n    &lt;down&gt;                                          Select the next match from the word list.\n    &lt;up&gt;                                            Select the previous match from the word list.\n    &lt;ctrl-y&gt;                                        Adopt the currently selected match.\n    &lt;ctrl-e&gt;                                        Revert to the originally typed text.\n    &lt;ctrl-h&gt; (and &lt;BS&gt;)                             Delete one character from the current match.\n    &lt;ctrl-l&gt;                                        Add one character from the current match.\n    {char}                                          Stop completion and insert {char}.\n</code></pre>"},{"location":"vim/cheat-sheet.html#autocompletion-source-material","title":"Autocompletion Source Material","text":"<pre><code>    :ls!                                            Look at the keywords in the buffer list. (???)\n    :set include?                                   Inspect included (e.g. header) files.\n    :set complete                                   Look at the list of \"locations\" included in the complete commands.\n    :set complete+=k                                Etc. See 'complete' documentation for the include lists and defaults.\n</code></pre>"},{"location":"vim/cheat-sheet.html#spelling","title":"Spelling","text":"<pre><code>    :set spell / :set nospell                       Show/hide spell checks.\n    [s / ]s                                         Skip back / forward through misspelled words.\n    z=                                              Show suggested spelling replacements.\n    zg                                              Add current word to spell file.\n    zw                                              Remove the current word from the spell file.\n    zug                                             Revert either zg or zw commands for the current word.\n    :set spelllang=en_us                            Also, en_au, en_ca, en_gb, en_nz (try =fr, will prompt for download, etc.)\n    &lt;ctrl-x&gt;s                                       Fix spelling from insert mode (:set spell must already be active).\n</code></pre>"},{"location":"vim/cheat-sheet.html#programming","title":"Programming","text":"<pre><code>    shift-k                                         Open man page for word under the cursor.\n</code></pre>"},{"location":"vim/cheat-sheet.html#recipes---find--replace-across-many-files","title":"Recipes - Find &amp; Replace Across Many Files","text":"<ol> <li>Fully populate the args list (all files).    <code>:args **/*.txt</code></li> <li>Enable navigation w/o saving.                <code>:set hidden</code></li> <li>Set the search pattern.                      <code>/Pragmatic\\ze Vim</code></li> <li>Replace with error suppression.              <code>:argdo %s//Practical/ge</code></li> </ol>"},{"location":"vim/cheat-sheet.html#recipes---clear-a-register","title":"Recipes - Clear a Register","text":"<ol> <li>Start and finish a macro with no steps.      <code>qaq</code></li> <li>Check the register (here - a).               <code>:reg a</code></li> </ol>"},{"location":"vim/cheat-sheet.html#recipes---sort-a-list","title":"Recipes - Sort a List","text":"<ol> <li>Select the block of items.                   <code>v{motion}</code></li> <li>Apply the sort (: brings up \u2018&lt;,\u2019&gt;)           <code>:sort</code></li> </ol>"},{"location":"vim/cheat-sheet.html#recipes---use-tags","title":"Recipes - Use Tags","text":"<ol> <li>Check to see tags options.                   <code>:set tags?</code></li> <li>Generate a tags file locally.                <code>:!ctags -R</code></li> <li>Ignore some noise\u2026 (etc.)                  <code>:!ctags -R --exclude=.git</code></li> <li>Shortcut to regenerate file.                 <code>:nnoremap &lt;f5&gt; :!ctags -R&lt;CR&gt;</code></li> <li>Set autocommand on save.                     <code>:autocmd BufWritePost * call system(\"ctags -R\")</code></li> </ol>"},{"location":"vim/cheat-sheet.html#recipes---use-ack-instead-of-grep-for-grep","title":"Recipes - Use ack instead of grep for :grep","text":"<ol> <li>Set a different :grepprg                     <code>:set grepprg=ack\\ --nogroup\\ --column\\ $*</code>     # May need ack-5.12 on my Mac\u2026</li> <li>Set the format.                              <code>:set grepformat=%f:%l:%c:%m</code>                   # %c to go to the column!</li> </ol>"},{"location":"vim/cheat-sheet.html#recipes---add-a-local-dictionary-for-project-jargon-spellings","title":"Recipes - Add a \u201clocal\u201d Dictionary for Project Jargon Spellings","text":"<ol> <li>Turn on spell checking.                      <code>:set spell</code></li> <li>Set a base language (if needed).             <code>:setlocal spelllang=en_us</code></li> <li>Set a local spellfile path.                  <code>:setlocal spellfile=~/.vim/spell/en.utf-8.add</code></li> <li>Set a local spellfile addition.              <code>:setlocal spellfile+=~/mydir/mysubdir/myfile.utf-8.add</code></li> <li>Add to the second spell file.                <code>:2zg</code></li> <li>Add to the original spell file.              <code>:1zg</code></li> </ol>"},{"location":"vim/cheat-sheet.html#recipes---change-vim-on-the-fly","title":"Recipes - Change Vim on the Fly","text":"<pre><code>    :set ignorecase / :set noignorecase / :set ignorecase! (toggle) / :set ignorecase? / :set ignorecase&amp; (restore default)\n    :set tabstop=2 (:set ts=2)\n    :set softtabstop=2 (:set sts=2)\n    :set shiftwidth=2 (:set sw=2)\n    :set expandtab (:set et)\n    :set ts=2 sts=2 sw=2 et\n    :bufdo setlocal ts=4\n    :windo setlocal number\n</code></pre>"},{"location":"vim/cheat-sheet.html#recipes---customize-with-vim-files","title":"Recipes - Customize with .vim Files","text":"<ol> <li>Name the file.                               <code>vim ~/mysettings.vim</code></li> <li>Source it.                                   <code>:source ~/mysettings.vim</code></li> <li>Syntax is the same as the .vimrc file.         set tabstop=2         set softtabstop=2         set shiftwidth=2         set expandtab</li> </ol>"},{"location":"vim/cheat-sheet.html#recipes---filetype-specific-customization","title":"Recipes - Filetype Specific Customization","text":"<ol> <li> <p>Edit customizations file (e.g., ~/.vimrc):</p> <pre><code>if has(\"autocmd\")\n  filetype on\n  autocmd FileType ruby setlocal ts=2 sts=2 sw=2 et\n  autocmd FileType javascript setlocal ts=4 sts=4 sw=4 noet\n  autocmd FileType javascript compiler nodelint\nendif\n</code></pre> </li> <li> <p>Cleaner if we use the ftplugin:</p> <pre><code>~/.vim/after/ftplugin/javascript.vim\nsetlocal ts=4 sts=4 sw=4 noet\ncompiler nodelint\n</code></pre> </li> </ol>"},{"location":"vim/cheat-sheet.html#reciples---change-encoding-eg-fix-excel-exports-to-csv","title":"Reciples - Change Encoding (e.g. fix Excel exports to csv)","text":"<p>See: http://stackoverflow.com/questions/64860/best-way-to-convert-text-files-between-character-sets</p> <pre><code>    $ file Consumer_Complaints_short.csv\n    Consumer_Complaints_short.csv: Non-ISO extended-ASCII English text\n    $ vim +\"set nobomb | set fenc=utf8 |x\" Consumer_Complaints_short.csv\n    $ file Consumer_Complaints_short.csv\n    Consumer_Complaints_short.csv: UTF-8 Unicode English text\n</code></pre>"},{"location":"vim/cheat-sheet.html#recipes---paste-tablecolumn-data-from-webclipboard","title":"Recipes - Paste Table/Column Data from Web/Clipboard","text":"<ol> <li>Copy table from web</li> <li> <p>Go to exec mode and set the clipboard register to block mode</p> <pre><code>    call setreg('+', @+, 'b')\n</code></pre> </li> <li> <p>Insert and paste.</p> </li> </ol>"},{"location":"vim/cheat-sheet.html#recipes---search-for-special-characters","title":"Recipes - search for special characters","text":"<p>For example, the \u201cnew feed\u201d charcter is \u201c^L\u201d, this can be searched for with:</p> <pre><code>        /&lt;ctrl-v&gt;&lt;ctrl-l&gt;\n</code></pre>"},{"location":"virtualbox/win11install.html","title":"Install","text":""},{"location":"virtualbox/win11install.html#how-to-install-microsoft-windows-11-on-virtualbox","title":"How to install Microsoft Windows 11 on VirtualBox!","text":"Info <p>The following step-by-step guide shows how to install Microsoft Windows 11 on top of VirtualBox 6.1; this guide has been tested and verified on both macOS as well as Linux hosts. This is to address the reported issue that Windows 11 could not be installed as a VirtualBox VM.</p>"},{"location":"virtualbox/win11install.html#configuring-virtualbox-for-windows-11","title":"Configuring Virtualbox for Windows 11","text":"Note <p>The first step is to properly configure the virtual machine that will guest the \u201cMicrosoft Windows 11\u201d Installation; the virtual machine has to be configured in the following way (minimum requirements), based on official \u201cWindows 11 Specs and System Requirements\u201d and your system needs to have proper updated x86 CPU:</p>"},{"location":"virtualbox/win11install.html#configuration-system---motherboard","title":"Configuration: System - Motherboard","text":"<p><pre><code>RAM: 4GB (minimum) - 8GB (minimum suggested)\nEFI (Special OSes only) enabled\n</code></pre> </p>"},{"location":"virtualbox/win11install.html#configuration-system---processor","title":"Configuration: System - Processor","text":"<p><pre><code>CPU: 2 (minimum)\n</code></pre> </p>"},{"location":"virtualbox/win11install.html#configuration-storage","title":"Configuration: Storage","text":"<p><pre><code>64 GB Virtual Disk (minimum size)\n</code></pre> </p>"},{"location":"virtualbox/win11install.html#configuration-display---screen","title":"Configuration: Display - Screen","text":"<p><pre><code>Video Memory: 256MB\nGraphics Controller: VBoxSVGA\nEnable 3D Acceleration enabled\n</code></pre> </p>"},{"location":"virtualbox/win11install.html#installation-process","title":"Installation Process","text":"Note <p>With those configuration options in-place and the Microsoft Windows 11 ISO properly added as virtual cd-rom we can then start the installation process:</p>"},{"location":"virtualbox/win11install.html#attach-installation-iso-boot-from-cd-and-launch-regedit","title":"Attach Installation ISO, boot from CD, and launch regedit","text":"<ul> <li>Click next to show-up the Install now button</li> <li>When you see the installation button, Launch a command prompt by pressing Shift+F10 on your keyboard at the same time.<ul> <li>On some models of MacOS you may need to add the Virtualbox application to Apple Menu - Preferences - Keyboard - Shortcuts (tab) - Function Keys (Left Menu Item) </li> </ul> </li> <li>At this command prompt, type regedit and press enter to launch the Windows Registry Editor.</li> </ul>"},{"location":"virtualbox/win11install.html#required-regedit-modifications-to-bypass-tpm-checks","title":"Required Regedit Modifications to Bypass TPM Checks","text":"<ul> <li>When the Registry Editor opens, navigate to HKEY_LOCAL_MACHINE\\SYSTEM\\Setup</li> <li>Right-click on the Setup key and select New =&gt; Key.</li> <li>When prompted to name the key, enter LabConfig and press enter.</li> <li>Now right-click on the LabConfig key and select New =&gt; DWORD  (32-bit) value and create a value named BypassTPMCheck, and set its data to 1.</li> <li>With the same steps as above create the BypassRAMCheck and BypassSecureBootCheck values and set their data to 1, so it looks like the following image.</li> </ul>"},{"location":"virtualbox/win11install.html#final-steps","title":"Final Steps","text":"<ul> <li>With those three values configured under the LabConfig key, close the Registry Editor</li> <li>Type exit in the Command Prompt followed by enter to close the window</li> <li>You can now click on the Install now button to proceed to get Microsoft Windows 11 installed as a virtual-machine on top of VirtualBox.</li> </ul>"},{"location":"webdev/react/jsx.html","title":"JSX","text":""},{"location":"webdev/react/jsx.html#jsx","title":"JSX","text":""},{"location":"webdev/react/jsx.html#what-is-it","title":"What is it?","text":"<ul> <li>An optional XML-like Element definition markup</li> </ul>"},{"location":"webdev/react/jsx.html#what-is-babel","title":"What is Babel","text":"<ul> <li>It is a transpiler to transform JSX and unsupported Javascript features into older supported javascript.</li> <li>E.G. Converts ES2015 and JSX to ES5 (The standard most semi-modern browsers support)</li> <li>To use Babel to transpile/transform JSX and ES2015 into ES5, we need presets defining how to do this.</li> </ul>"},{"location":"webdev/react/jsx.html#installing-babel-and-defining-presets","title":"Installing Babel and Defining Presets","text":"<ul> <li> <p>Install React and Necessary Presets</p> <p>sudo npm install -g babel-cli    # Preset for ES2015 transform    sudo npm install -g babel-preset-es2015    # Preset for JSX transform    sudo npm install -g babel-preset-react</p> </li> <li> <p>Configure Babel to Use JSX and ES2015 Presets</p> <pre><code>vi .babelrc\n{\n    \"presets\": [\n        \"../../../../usr/local/lib/node_modules/babel-preset-es2015\",\n        \"../../../../usr/local/lib/node_modules/babel-preset-react\"\n    ]\n}\n</code></pre> </li> <li> <p>If we had installed node_modules locally instead of globally, we could have simply referenced them as follows:</p> <pre><code>vi .babelrc\n{\n  \"presets\": [\n    \"es20125\",\n    \"react\"\n  ]\n}\n</code></pre> </li> </ul>"},{"location":"webdev/react/jsx.html#dom-vs-react-components","title":"DOM VS React Components","text":"<ul> <li>JSX:  VS </li> <li>Transpiled: React.createElement(\u2018button\u2019) VS React.createElement(Button)</li> <li>HTML button VS component Button</li> </ul>"},{"location":"webdev/react/jsx.html#children","title":"Children","text":"<ul> <li> <p>Elements can be children of elements</p> <pre><code># JSX\n&lt;div&gt;\n  &lt;a href=\"http://...\"&gt;Click Here&lt;/a&gt;\n&lt;/div&gt;\n\n# Transpiles to\nReact.createElement(\n  \"div\",\n  null,\n  React.createElement(\n    \"a\",\n    { href: \"http://...\" },\n    \"Click Here\"\n  )\n);\n</code></pre> </li> <li> <p>Elements can contain Javascript or variables instead of nested elements.</p> </li> </ul>    This is a, {variable},   and this is a {function()}."},{"location":"webdev/react/jsx.html#jsx-has-differences-from-html","title":"JSX Has Differences from HTML","text":"<ul> <li>Because its transpiled, to javascript, we can\u2019t use reserved words in Javascript, like class<ul> <li>className instead of class</li> <li>htmlFor instead of for</li> <li>style takes dict of camelCase styles instead of CSS style attributes.</li> </ul> </li> <li> <p>Since its transpiled to javascript and js can\u2019t return 2 functions JSX like the following will fail</p> <pre><code>&lt;div /&gt;\n&lt;div /&gt;\n# Instead add a root.\n&lt;div&gt;\n  &lt;div /&gt;\n  &lt;div /&gt;\n&lt;/div&gt;\n</code></pre> </li> <li> <p>Transpiled JSX ignores spacing, so you must include {\u2018 \u2018} where you want spaces.</p> </li> </ul>"},{"location":"webdev/react/jsx.html#jsx-peculiarities","title":"JSX Peculiarities","text":"<ul> <li> <p>With JSX explicit attribute values should be set because an attribute without a value set is assumed to be true</p> <pre><code>&lt;button disabled /&gt;\n</code></pre> <ul> <li>In the above example disabled is assumed to be true</li> <li> <p>A good rule of thumb is to use the spread operator to pass properties to child ecomponents, don\u2019t pass the object</p> <p>const myObj = { id: \u2018101\u2019 } return </p> </li> <li> <p>This transpiles to (Which makes sense because otherwise it would be an object in an object)</p> <p>var myObj = { id: \u2018101\u2019 }; return React.createElement(\u2018div\u2019, myObj);</p> </li> </ul> </li> <li> <p>Because We\u2019ve recoupled (got rid of the separation of concerns) of our scripts JSX can now use javascript as values to attributes.</p> <pre><code>&lt;button disabled={errors.length} /&gt;\n</code></pre> </li> </ul>"},{"location":"webdev/react/react.html","title":"React Notes","text":""},{"location":"webdev/react/react.html#react-notes","title":"React Notes","text":""},{"location":"webdev/react/react.html#core-principle","title":"Core Principle","text":"<ul> <li>Declaritive NOT Imperative<ul> <li>Code declares what it wants, not the steps on how to achieve what it wants.</li> </ul> </li> </ul>"},{"location":"webdev/react/react.html#stop-unnecessary-decoupling","title":"Stop Unnecessary Decoupling","text":"<ul> <li>React wants to combine javascript, styling, and component structure</li> <li>The paradigm of separation of concerns is really separation of technology js/css/dom</li> <li>A component should contain everything necessary to make is function.</li> </ul>"},{"location":"webdev/react/react.html#building-blocks-philosophy","title":"Building Blocks Philosophy","text":"<ul> <li>For simple apps start simple with just react.js core.<ul> <li>Default javascript createElement is satisfactory for simple element creation.</li> </ul> </li> <li>As complexity increases, add transpiler for JSX<ul> <li>transpiler converts JSX into Javascript the browser/native app can understand.</li> </ul> </li> <li>Only when you need navigation should you add a router</li> <li>Only when we need complex operations should you introduce a package manager for external dependencies<ul> <li>This will happen when you need to call API endpoints.</li> </ul> </li> <li>Modules, i.e. file organization, should only come once the project looks cluttered.</li> </ul>"},{"location":"webdev/react/react.html#elements","title":"Elements","text":"<ul> <li>createClass, Component, or stateless functions are all components.</li> <li>Elements are returned by components.</li> <li>Elements control the UI flow by recursively passing properties down nested elements and requesting results until it has a full DOM tree.<ul> <li>String Elements terminate as DOM Nodes</li> <li>Function Elements are call recursively to get nested DOM results.</li> </ul> </li> </ul>"},{"location":"webdev/react/react.html#javascript-fatigue","title":"Javascript Fatigue","text":"<ul> <li>Javascript libraries come and go at a pace that incorporating them is extremely difficult.</li> <li>Balance betting on new tech and staying safe.</li> <li>Use the Facebook generated create-react-app<pre><code>npm install -g create-react-app\ncreate-react-app hello-world\ncd hello-world\nnpm start\n</code></pre> </li> </ul>"},{"location":"webdev/react/react.html#basics-of-create-react-app","title":"Basics of Create React App","text":"<ul> <li> <p>Starts the development server.</p> <p>npm start</p> </li> <li> <p>Bundles the app into static files for production.</p> <p>npm run build</p> </li> <li> <p>Starts the test runner.</p> <p>npm test</p> </li> <li> <p>Removes this tool and copies build dependencies, configuration files and scripts into the app directory.</p> </li> </ul>  Warning <p>If you do this, you can\u2019t go back!</p> <p>npm run eject</p>"},{"location":"windows/os_command_map.html","title":"Command Cheatsheet","text":""},{"location":"windows/os_command_map.html#windows-vs-linux-command-cheatsheet","title":"Windows VS Linux Command Cheatsheet","text":""},{"location":"windows/os_command_map.html#cmd-window-mapping","title":"Cmd Window Mapping","text":"Windows Linux Description     dir ls -l Directory listing   ren mv Rename a file   copy cp Copying a file   move mv Moving a file   cls clear Clear Screen   del rm Delete file   fc diff Compare contents of files   find grep Search for a string in a file   command /? man command Display the manual/help details of the command   chdir pwd Returns your current directory location   time date Displays the time   cd cd Change the current directory   md mkdir To create a new directory/folder   echo echo To print something on the screen   edit vim(depends on editor) To write in to files.   exit exit To leave the terminal/command window.   format mke2fs or mformat To format a drive/partition.   free mem To display free space.   rmdir rm -rf/rmdir To delete a directory.   taskkill kill To kill a task.   tasklist ps x To list running tasks.   set var=value export var=value To set environment variables.   attrib chown/chmod To change file permissions.   tracert traceroute To print the route packets trace to network host.   at cron daemon to execute scheduled commands.   type cat To print contents of a file.   ping ping To send ICMP ECHO_REQUEST to network hosts.   nslookup nslookup To query Internet name servers interactively.   chdisk du -s For disk usage.   tree ls -R To list directory recursively."},{"location":"windows/os_command_map.html#powershell-command-mapping","title":"Powershell Command Mapping","text":"Windows Powershell Linux Description     Get-Content file3.txt -Tail \u201c3\u201d     Get-Content file3.txt | Select-Object -last 3 cat file3.txt | tail -3 Extract last 3 lines of file"},{"location":"windows/network/arp.html","title":"Arp","text":""},{"location":"windows/network/arp.html#arp","title":"ARP","text":""},{"location":"windows/network/arp.html#display-the-arp-cache-table-for-all-interfaces","title":"Display the Arp Cache Table for all Interfaces","text":"<pre><code>    arp /a\n</code></pre>"},{"location":"windows/network/arp.html#delete-an-arp-entry","title":"Delete an Arp Entry","text":"<pre><code>    arp /d &lt;InetAddr&gt;\n</code></pre>"},{"location":"windows/network/arp.html#delete-all-arp-cache","title":"Delete all Arp Cache","text":"<pre><code>    arp /d\n</code></pre>"},{"location":"windows/network/arp.html#manually-add-an-entry-to-arp-cache","title":"Manually Add an Entry to Arp Cache","text":"<pre><code>    arp /s &lt;InetAddr&gt; &lt;Mac-Addr&gt;\n</code></pre>"},{"location":"windows/network/arp.html#getmac","title":"GetMac","text":"<ul> <li>Noting this here because it\u2019s related to arp</li> <li>Gets the MAC Addresses of all NICs.<pre><code>getmac\n</code></pre> </li> </ul>"},{"location":"windows/network/ipconfig.html","title":"Ipconfig","text":""},{"location":"windows/network/ipconfig.html#ipconfig","title":"IPCONFIG","text":""},{"location":"windows/network/ipconfig.html#show-all-network-adapter-information","title":"Show all Network Adapter Information","text":"<ul> <li>DNS, DHCP, etc.<pre><code>ipconfig /all\n</code></pre> </li> </ul>"},{"location":"windows/network/ipconfig.html#release-dhcp-ip-address","title":"Release DHCP IP Address","text":"<ul> <li>The first command releases all</li> <li>The second command releases all that start with Wireless<pre><code>ipconfig /release\nipconfig /release Wireless*\n</code></pre> </li> </ul>"},{"location":"windows/network/ipconfig.html#renew-dhcp-ip","title":"Renew DHCP IP","text":"<ul> <li>The first command renews all</li> <li>The second command renews all that start with Wireless<pre><code>ipconfig /renew\nipconfig /renew Wireless*\n</code></pre> </li> </ul>"},{"location":"windows/network/ipconfig.html#display-dns-cache","title":"Display DNS Cache","text":"<pre><code>    ipconfig /displaydns\n</code></pre>"},{"location":"windows/network/ipconfig.html#flush-your-dns-cache","title":"Flush Your DNS Cache","text":"<pre><code>    ipconfig /flushdns\n</code></pre>"},{"location":"windows/network/ipconfig.html#initiate-dynamic-dns-registration","title":"Initiate Dynamic DNS Registration","text":"<ul> <li>This ipconfig command is great for troubleshooting DNS name registration issues without rebooting the computer.<pre><code>ipconfig /registerdns\n</code></pre> </li> </ul>"},{"location":"windows/network/nbtstat.html","title":"Nbtstat","text":""},{"location":"windows/network/nbtstat.html#nbtstat---mostly-phased-out","title":"NBTSTAT - Mostly phased out","text":"<p>Nbtstat is designed to help troubleshoot NetBIOS name resolution problems.</p>"},{"location":"windows/network/nbtstat.html#connect-to-netbios-computer","title":"Connect to NetBios Computer","text":"<pre><code>    nbtstat -a &lt;Computer Name&gt;\n    # OR by IP\n    nbtstat -a &lt;IP&gt;\n</code></pre> <ul> <li>The Result lists major services:<ul> <li>&lt;00&gt;: Workstation Service</li> <li>&lt;20&gt;: Server Service</li> <li>&lt;03&gt;: Messenger Service</li> </ul> </li> </ul>"},{"location":"windows/network/nbtstat.html#list-remote-netbios-computerssessions","title":"List Remote NetBIOS Computers/Sessions","text":"<pre><code>    nbtstat -S\n    # Or to list computer names instead of IP\n    nbtstat -s\n</code></pre>"},{"location":"windows/network/nbtstat.html#list-netbios-name-resolution-stats","title":"List NetBios Name Resolution Stats","text":"<pre><code>    nbtstat -r\n</code></pre>"},{"location":"windows/network/nbtstat.html#purge-netbios-name-cache","title":"Purge NetBios Name Cache","text":"<pre><code>    nbtstat -R\n</code></pre>"},{"location":"windows/network/nbtstat.html#release-and-refresh-netbios-names","title":"Release and Refresh NetBios Names","text":"<pre><code>    nbtstat -RR\n</code></pre>"},{"location":"windows/network/net.html","title":"Net","text":""},{"location":"windows/network/net.html#net-command","title":"NET Command","text":"Info <p>The net command has a massive number of options, only a few are covered here. Remember all Windows commands can get help with /? <code>net time /?</code> or <code>net /?</code></p>"},{"location":"windows/network/net.html#show-computers-on-immediate-network","title":"Show Computers on Immediate Network","text":"<ul> <li>Also shows if they operate as a workgroup or a domain</li> </ul> <pre><code>net view\n</code></pre>"},{"location":"windows/network/net.html#show-time-for-networked-computer","title":"Show Time for Networked Computer","text":"<ul> <li>UNC: Universal Naming Convention<ul> <li>UNC: Always starts with \\</li> </ul> </li> </ul> <pre><code>net time \\\\UNC\n</code></pre>"},{"location":"windows/network/net.html#show-user-accounts-for-networked-computer","title":"Show User Accounts for Networked Computer","text":"<pre><code>    net user\n    # Or for a remote computer\n    net user \\\\UNC\n</code></pre>"},{"location":"windows/network/net.html#list-running-services","title":"List Running Services","text":"<pre><code>    net start\n</code></pre>"},{"location":"windows/network/net.html#start-and-stop-service","title":"Start and Stop Service","text":"<pre><code>    net stop &lt;service name&gt;\n    net start &lt;service name&gt;\n</code></pre> <ul> <li> <p>Example: Themes Service</p> <pre><code>net stop themes\nnet start themes\n</code></pre> </li> <li> <p>Example: Print spooler</p> <pre><code>net stop \"print spooler\"\nnet start \"print spooler\"\n</code></pre> </li> </ul>"},{"location":"windows/network/net.html#force-account-passwords-to-expire-after-180-days","title":"Force Account Passwords to Expire After 180 Days","text":"<pre><code>    net accounts /MAXPWAGE:180\n</code></pre>"},{"location":"windows/network/net.html#share-a-folder-on-the-network","title":"Share a Folder on the Network","text":"<pre><code>    net share &lt;TheShareName&gt;=C:\\Share\\Path /GRANT:everyone,FULL\n</code></pre>"},{"location":"windows/network/netstat.html","title":"Netstat","text":""},{"location":"windows/network/netstat.html#netstat","title":"Netstat","text":""},{"location":"windows/network/netstat.html#show-all-connections","title":"Show all connections","text":"<pre><code>    netstat -a\n</code></pre>"},{"location":"windows/network/netstat.html#show-only-connection-by-state","title":"Show only Connection by State","text":"<pre><code>    netstat | findstr ESTABLISHED\n    netstat | findstr LISTENING\n    netstat | findstr CLOSE_WAIT\n    netstat | findstr TIME_WAIT\n</code></pre>"},{"location":"windows/network/netstat.html#show-process-id-used-by-port-number","title":"Show Process ID used by Port Number","text":"<pre><code>    netstat -o\n    netstat \u2013o | findstr &lt;PORT&gt;\n</code></pre>"},{"location":"windows/network/netstat.html#show-protocol-statistics-and-find-errors","title":"Show Protocol Statistics and Find Errors","text":"<pre><code>    netstat \u2013s\n    inetstat -s | findstr Errors\n</code></pre>"},{"location":"windows/network/netstat.html#show-routing-information","title":"Show Routing Information","text":"<pre><code>    netstat \u2013r\n</code></pre>"},{"location":"windows/network/netstat.html#show-interface-statistics","title":"Show Interface Statistics","text":"<pre><code>    netstat -e\n</code></pre>"},{"location":"windows/network/netstat.html#show-fully-qualified-domain-name-of-foreign-address-remote-host","title":"Show Fully Qualified Domain Name of foreign address (remote host)","text":"<pre><code>    netstat \u2013f\n    netstat \u2013f | findstr ESTABLISHED\n</code></pre>"},{"location":"windows/network/nslookup.html","title":"Nslookup","text":""},{"location":"windows/network/nslookup.html#nslookup","title":"NSLOOKUP","text":""},{"location":"windows/network/nslookup.html#domain-a-record-lookup","title":"Domain A Record Lookup","text":"<pre><code>    nslookup example.com\n</code></pre>"},{"location":"windows/network/nslookup.html#check-authoritative-name-servers-ns-for-a-domain","title":"Check Authoritative Name Servers (NS) for a Domain","text":"<pre><code>    nslookup -type=ns example.com\n</code></pre>"},{"location":"windows/network/nslookup.html#query-domain-start-of-authority-soa-zone-records","title":"Query Domain Start of Authority (SoA) Zone Records","text":"<pre><code>    nslookup -type=soa example.com\n</code></pre>"},{"location":"windows/network/nslookup.html#find-the-mail-exchange-mx-records","title":"Find the Mail Exchange (MX) Records","text":"<pre><code>    nslookup -query=mx example.com\n</code></pre>"},{"location":"windows/network/nslookup.html#list-all-available-dns-records-for-a-domain","title":"List all Available DNS Records for a Domain","text":"<pre><code>    nslookup -type=any example.com\n</code></pre>"},{"location":"windows/network/nslookup.html#check-the-dns-using-a-specific-dns-server","title":"Check the DNS Using a Specific DNS Server","text":"<pre><code>    nslookup example.com &lt;name server ip or fqdn&gt;\n</code></pre>"},{"location":"windows/network/nslookup.html#check-revers-dns-lookup","title":"Check Revers DNS Lookup","text":"<pre><code>    nslookup 10.20.30.40\n</code></pre>"},{"location":"windows/network/nslookup.html#check-for-domain-ptr-record","title":"Check for Domain PTR Record","text":"<ul> <li>Remember you have to reverse the IP and add in-addr.arpa</li> <li>This will verify the IP belongs to a specific domain<pre><code>nslookup -type=ptr 1.0.168.192.in-addr.arpa\n</code></pre> </li> </ul>"},{"location":"windows/network/nslookup.html#check-which-servers-respond-faster","title":"Check which Servers Respond Faster","text":"<pre><code>    nslookup -timeout=5 example.com\n</code></pre>"},{"location":"windows/network/nslookup.html#some-useful-output-for-debugging-dns","title":"Some Useful Output For Debugging DNS","text":"<pre><code>    nslookup -debug example.com\n</code></pre>"},{"location":"windows/network/ping.html","title":"Ping","text":""},{"location":"windows/network/ping.html#ping","title":"PING","text":""},{"location":"windows/network/ping.html#increase-or-decrease-ping-ttl","title":"Increase or Decrease ping TTL","text":"<ul> <li> <p>Example: Wait for 5 seconds before sending the next packet.</p> <pre><code>ping -i 5 IP\n</code></pre> </li> <li> <p>Example: Wait 0.1 seconds before sending the next packet.</p> <pre><code>ping -i 0.1 IP\n</code></pre> </li> </ul>"},{"location":"windows/network/ping.html#send-n-packets-and-stop","title":"Send n packets and stop","text":"<pre><code>    ping -n 10 &lt;IP|Domain&gt;\n</code></pre>"},{"location":"windows/network/ping.html#continuous-ping","title":"Continuous Ping","text":"<ul> <li>Start before you reboot a remote server or VM</li> <li>Make sure you have a backup console if remote!!!<pre><code>ping -t &lt;IP|Domain&gt;\n</code></pre> </li> </ul>"},{"location":"windows/network/ping.html#hostname-lookup-with-ping","title":"Hostname Lookup with Ping","text":"<pre><code>    ping -a &lt;IP&gt;\n</code></pre>"},{"location":"windows/network/ping.html#ping-localhost","title":"Ping Localhost","text":"<ul> <li>Tests own protocol stack<pre><code>ping 127.0.0.1\n</code></pre> </li> </ul>"},{"location":"windows/network/ping.html#ping-ipv6","title":"PING IPv6","text":"<pre><code>    ping -t -6 &lt;IP|Domain&gt;\n</code></pre>"},{"location":"windows/network/ping.html#change-the-packet-size","title":"Change the Packet Size","text":"<pre><code>    ping -l 1500 &lt;IP|Domain&gt;\n</code></pre>"},{"location":"windows/network/ping.html#ping-of-death-ping-flood-buffer-overflow-attempt","title":"Ping of Death (Ping Flood Buffer Overflow Attempt)","text":"<ul> <li>-l: Buffer size</li> <li>-w: wait timeout in ms</li> <li>-n: number of echo requests</li> <li>Script is to loop infinitely<pre><code>:loop\n\nping &lt;IP|Domain&gt; -l 65500 -w 1 -n 1\ngoto :loop\n</code></pre> </li> </ul>"},{"location":"windows/network/tracert.html","title":"Tracert","text":""},{"location":"windows/network/tracert.html#tracert","title":"TRACERT","text":"<ul> <li>Look for latency between network hops</li> <li>Look for routing loops</li> <li>Look for flapping routes</li> <li>Count hops to determine if large routing path is reason for latency</li> </ul>"},{"location":"windows/network/tracert.html#show-the-path-from-the-networked-computer-to-destination","title":"Show the Path from the Networked Computer to Destination","text":"<pre><code>    tracert &lt;IP|Domain&gt;\n</code></pre>"},{"location":"windows/network/tracert.html#get-path-to-destination-but-exclude-dns","title":"Get Path to Destination but Exclude DNS","text":"<ul> <li>The idea behind this tracert command is that it allows you to find out whether a router has malfunctioned. By comparing the tracert results with your network documentation, you should be able to alert the correct network person to the problem, or perhaps fix the problem yourself.<pre><code>tracert -d &lt;IP|Domain&gt;\n</code></pre> </li> </ul>"},{"location":"windows/network/tracert.html#get-path-to-destination-but-limit-hops","title":"Get Path to Destination but Limit Hops","text":"<ul> <li>hop: Number of routing devices a packet passes through from source to destination<pre><code>tracert -h 3 &lt;IP|Domain&gt;\n</code></pre> </li> </ul>"},{"location":"windows/network/tracert.html#pathping","title":"PATHPING","text":"<ul> <li>Pathping is similar to tracert but it will also compute the degree of packet loss.<pre><code>pathping &lt;IP|Domain&gt;\n</code></pre> </li> </ul>"}]}