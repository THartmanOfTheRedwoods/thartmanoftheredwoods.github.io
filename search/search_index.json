{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stemmer","trimmer","stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":""},{"location":"index.html#instructor-wiki","title":"Instructor Wiki","text":"Info <p>This is where I put my random Tech Notes that I find useful and lesson plans that I share with students!</p>"},{"location":"index.html#references","title":"References","text":"<ul> <li>GitHub Pages shows how to turn your mkdocs output directory into a freely hosted GitHub Site</li> </ul> <p> Scan and Go!</p> <ul> <li>Instructor GitHub Repos shows how to turn your mkdocs output directory into a freely hosted GitHub Site</li> </ul> <p> Scan and Go!</p>"},{"location":"MacOS_Overview.html","title":"MacOS Overview","text":""},{"location":"MacOS_Overview.html#macos-overview","title":"MacOS Overview","text":""},{"location":"MacOS_Overview.html#mission-control","title":"Mission Control","text":"<ul> <li>Shows all Open Winodows + Allows for Multiple Desktops<ul> <li>Drag Items Onto new Desktop to Add</li> <li>Arrow between them with Control + Left or Right Arrows</li> </ul> </li> <li>4 Finger Gesture UP / DOWN to close</li> <li>Arrow &gt; 3 Window Button</li> </ul>"},{"location":"MacOS_Overview.html#launchpad","title":"Launchpad","text":"<ul> <li>Easy access to installed apps</li> <li>5 Finter Gesture IN / OUT to close</li> <li>Arrow &gt; 6 Window Button</li> </ul>"},{"location":"MacOS_Overview.html#mac-desktop","title":"Mac Desktop","text":""},{"location":"MacOS_Overview.html#finder","title":"Finder","text":"<ul> <li>Finder menu bar\u2019s Go feature can access shares</li> <li>Access to files and folders<ul> <li>Applications are the mac binary programs we can run</li> <li>Utilities support a Mac with things like terminal or disk access.</li> <li>Locations are storage locations including remote/shared locations</li> <li>Tags can be used to tag important files</li> </ul> </li> </ul>"},{"location":"MacOS_Overview.html#apple-menu","title":"Apple Menu","text":"<ul> <li>Access to System Information, Preferences, App Store, recent items, Force Quit options<ul> <li>Preferences: System wide settings and features<ul> <li>Track Pad</li> <li>iCloud </li> <li>Time Machine</li> <li>Users &amp; Groups</li> <li>Sharing like Screen Sharing or Remote Login</li> <li>Network Settings</li> <li>Spotlight (Search Utility)</li> </ul> </li> </ul> </li> </ul>"},{"location":"MacOS_Overview.html#spotlight","title":"Spotlight","text":"<ul> <li>Command + SpaceBar</li> </ul>"},{"location":"MacOS_Overview.html#keychain","title":"KeyChain","text":"<ul> <li>MacOS Password Manager found under Utilities</li> </ul>"},{"location":"MacOS_Overview.html#screen-sharing","title":"Screen Sharing","text":"<ul> <li>System Preferences &gt; Sharing</li> </ul>"},{"location":"MacOS_Overview.html#remote-disc","title":"Remote Disc","text":"<ul> <li>Allows access to Optical drive via the network.</li> </ul>"},{"location":"MacOS_Overview.html#terminal","title":"Terminal","text":"<ul> <li>Super User Command Line Control</li> </ul>"},{"location":"archive.html","title":"Index","text":""},{"location":"archive.html#class-notes","title":"Class Notes","text":""},{"location":"archive.html#cis-50","title":"CIS-50","text":""},{"location":"archive.html#week-1","title":"Week 1","text":"<ul> <li>Database Systems</li> </ul>"},{"location":"archive.html#week-2","title":"Week 2","text":"<ul> <li>Data Models</li> </ul>"},{"location":"archive.html#week-3","title":"Week 3","text":"<ul> <li>The Relational Database Model</li> <li>Joins</li> </ul>"},{"location":"archive.html#week-4","title":"Week 4","text":"<ul> <li>Entity Relationship Modeling</li> </ul>"},{"location":"archive.html#week-6","title":"Week 6","text":"<ul> <li>Normalization</li> </ul>"},{"location":"archive.html#week-7","title":"Week 7","text":"<ul> <li>Structured Query Language \\(SQL\\)</li> </ul>"},{"location":"archive.html#week-8","title":"Week 8","text":"<ul> <li>Advanced Data Modeling</li> </ul>"},{"location":"archive.html#week-11","title":"Week 11","text":"<ul> <li>Database Design</li> </ul>"},{"location":"archive.html#week-12","title":"Week 12","text":"<ul> <li>Database Performance Tuning and Query Optimization</li> </ul>"},{"location":"archive.html#week-13","title":"Week 13","text":"<ul> <li>Business Intelligence and Data Warehouses</li> </ul>"},{"location":"archive.html#week-14","title":"Week 14","text":"<ul> <li>Database Connectivity and Web Technologies</li> </ul>"},{"location":"archive.html#week-15","title":"Week 15","text":"<ul> <li>Big Data and NoSQL</li> </ul>"},{"location":"archive.html#cis-18","title":"CIS-18","text":""},{"location":"archive.html#week-1_1","title":"Week 1","text":"<ul> <li>Review</li> <li>Sprint Planning</li> <li>User Story Intro</li> <li>User Story Lesson</li> </ul>"},{"location":"archive.html#week-2_1","title":"Week 2","text":"<ul> <li>Encapsulation, Inheritance, Abstraction, and Polymorphism</li> </ul>"},{"location":"archive.html#week-3_1","title":"Week 3","text":"<ul> <li>Key OO Principles</li> <li>Observer Design Pattern</li> </ul>"},{"location":"archive.html#week-4_1","title":"Week 4","text":"<ul> <li>Decorator Design Pattern</li> </ul>"},{"location":"archive.html#week-5","title":"Week 5","text":"<ul> <li>Factory Design Pattern</li> </ul>"},{"location":"archive.html#week-7_1","title":"Week 7","text":"<ul> <li>Singleton Design Pattern</li> </ul>"},{"location":"archive.html#week-8_1","title":"Week 8","text":"<ul> <li>Command Design Pattern</li> </ul>"},{"location":"archive.html#week-9","title":"Week 9","text":"<ul> <li>Adapter &amp; Facade Design Pattern</li> </ul>"},{"location":"archive.html#week-10","title":"Week 10","text":"<ul> <li>Template Method Design Pattern</li> </ul>"},{"location":"archive.html#week-12_1","title":"Week 12","text":"<ul> <li>Iterator &amp; Composite Design Patterns</li> </ul>"},{"location":"archive.html#week-13_1","title":"Week 13","text":"<ul> <li>State Design Pattern</li> </ul>"},{"location":"archive.html#week-14_1","title":"Week 14","text":"<ul> <li>Proxy Design Pattern</li> </ul>"},{"location":"archive.html#week-15_1","title":"Week 15","text":"<ul> <li>Compound Design Patterns</li> </ul>"},{"location":"archive.html#cis-12---java","title":"CIS-12 - Java","text":""},{"location":"archive.html#week-1_2","title":"Week 1","text":"<ul> <li>Introduction to Programming</li> </ul>"},{"location":"archive.html#week-2_2","title":"Week 2","text":"<ul> <li>Variables and Operators</li> </ul>"},{"location":"archive.html#week-4_2","title":"Week 4","text":"<ul> <li>Methods</li> </ul>"},{"location":"archive.html#week-6_1","title":"Week 6","text":"<ul> <li>Conditions</li> </ul>"},{"location":"archive.html#week-7_2","title":"Week 7","text":"<ul> <li>Methods Take 2</li> </ul>"},{"location":"archive.html#week-10_1","title":"Week 10","text":"<ul> <li>Arrays</li> </ul>"},{"location":"archive.html#week-12_2","title":"Week 12","text":"<ul> <li>Objects</li> </ul>"},{"location":"archive.html#cis-12---python","title":"CIS-12 - Python","text":""},{"location":"archive.html#week-1_3","title":"Week 1","text":"<ul> <li>Programming as a way of Thinking</li> </ul>"},{"location":"archive.html#week-2_3","title":"Week 2","text":"<ul> <li>Variables and Statements</li> </ul>"},{"location":"archive.html#week-3_2","title":"Week 3","text":"<ul> <li>Functions</li> </ul>"},{"location":"archive.html#week-4_3","title":"Week 4","text":"<ul> <li>Functions and Interfaces</li> </ul>"},{"location":"archive.html#week-6_2","title":"Week 6","text":"<ul> <li>Conditionals and Recursion</li> </ul>"},{"location":"archive.html#week-6_3","title":"Week 6","text":"<ul> <li>Return Values</li> </ul>"},{"location":"archive.html#week-7_3","title":"Week 7","text":"<ul> <li>Iteration &amp; Search</li> </ul>"},{"location":"archive.html#week-8_2","title":"Week 8","text":"<ul> <li>Strings &amp; Regular Expressions</li> </ul>"},{"location":"archive.html#week-8_3","title":"Week 8","text":"<ul> <li>Lists</li> </ul>"},{"location":"archive.html#week-9_1","title":"Week 9","text":"<ul> <li>Dictionaries</li> </ul>"},{"location":"archive.html#week-9_2","title":"Week 9","text":"<ul> <li>Tuples</li> </ul> <p> Take these notes with you!</p>"},{"location":"aug23_lesson.html","title":"Aug23 lesson","text":""},{"location":"aug23_lesson.html#todays-lesson","title":"Today\u2019s Lesson","text":""},{"location":"aug23_lesson.html#introduction","title":"Introduction","text":""},{"location":"aug23_lesson.html#cable-demonstration","title":"Cable Demonstration","text":"<ul> <li>Cat-6 and RJ45</li> </ul>"},{"location":"aug23_lesson.html#networking-commands","title":"Networking Commands","text":"<ul> <li>Commands on the cmd prompt CLI</li> </ul>"},{"location":"aug30_lesson.html","title":"Aug30 lesson","text":""},{"location":"aug30_lesson.html#lab-1-review","title":"Lab 1 Review","text":""},{"location":"aug30_lesson.html#part-1---ipconfig","title":"Part 1 - Ipconfig","text":"<pre><code>    ipconfig /all\n</code></pre> <ul> <li>IPv4 Address should be something like 192.168.1.15</li> <li>Subnet mask should be something like 255.255.255.0</li> <li>Default Gateway should be something like 192.168.1.1</li> <li>Should see Autoconfiguration Enabled Meaning DHCP</li> <li>Should see Lease Obtained and Expires Allowing to calculate lease time</li> <li>Make and model of Ethernet is listed under Description</li> <li>Mac Address is Physical Address can also be retrieved via getmac<ul> <li>Unique on the network</li> <li>Can be spoofed</li> <li>Allows for Ethernet communication, wraps IP packets and routes on LAN only</li> </ul> </li> <li>DNS Servers should be listed under DNS Servers</li> </ul>"},{"location":"aug30_lesson.html#part-2---ipconfig-release","title":"Part 2 - Ipconfig Release","text":"<pre><code>    ipconfig /release\n    ipconfig /all\n</code></pre> <ul> <li>Releases autoconfiguration IP, DNS, gateway, etc.</li> <li>IP is 169.254.176.94, the APIPA IP - No IP was leased, DHCP failure</li> <li>subnet mask is now 255.255.0.0 </li> <li>Default Gateway no longer configured</li> <li>Physical MAC is unrelated, does not change.</li> <li>Ping Google DNS is a transmit failure</li> <li>There is no browser connectivity, no DNS, No IP means no routing to the Internet</li> </ul>"},{"location":"aug30_lesson.html#part-3---ipconfig-renew","title":"Part 3 - Ipconfig Renew","text":"<pre><code>    ipconfig /renew\n    ipconfig /all\n</code></pre> <ul> <li>IPv4 Address is now VERY likely 192.168.1.15 again, but could be different depending on lease times and network conditions.</li> <li>Lease Obtained and Expires times will have updated, but the configured DHCP overall lease time is dependent on the server config, so it didn\u2019t change.</li> <li>DNS is now back (DHCP Assigned) so ping 8.8.8.8 replies</li> <li>With an IP and DNS, we can now route to and browse the internet again.</li> </ul>"},{"location":"aug30_lesson.html#part-4---static-ip","title":"Part 4 - Static IP","text":"<ul> <li>Windows Config should have showed Obtain an IP address automatically in IPv4 Properties</li> <li>Depending on your Static Settings you COULD achieve connectivity. Still need to be on the same network with same Gateway, OR add routes via route add command</li> </ul>"},{"location":"aug30_lesson.html#part-5---dns","title":"Part 5 - DNS","text":"<pre><code>    ipconfig /displaydns\n    ipconfig /displaydns | find /c /v \"\"\n    # OR\n    ipconfig /displaydns | find /c /i \"search str\"\n    ipconfig /flushdns\n    netstat\n</code></pre> <ul> <li>If you can\u2019t get to a web-site, but other sites work, and other systems can get to the site, it may be local DNS cache.</li> <li>Display DNS shows all the records in your local DNS cache (42 records, could vary though)</li> <li>Flush DNS clears your local cahce forcing your system to query its DNS Server and refresh its local cache</li> <li>NetStat command shows open network connections, and can be used to find the programs the connect to!!!</li> </ul>"},{"location":"aug30_lesson.html#tools-review","title":"TOOLS Review","text":"<ul> <li>ESD Strap, Screwdrivers, tweezers, flashlight, compressed air</li> <li>Loopback plug: tests NIC ports</li> <li>Post Card: Can be used to test PCI, PCIe, USB, post errors</li> <li>Power Supply Tester: Can be used to test function/voltage of power supply</li> <li>Multi-Meter: Continuity of network cables, resistance, power supply voltage</li> <li>Network Toner: Find cables snaked through walls and ceilings</li> </ul>"},{"location":"aug30_lesson.html#chapter-notes","title":"Chapter Notes","text":"<ul> <li>Keep GOOD notes, mkdocs, cell-phone pictures, draw pictures</li> <li>Shutdown system, unplug it, press power to drain, put on ESD strap</li> <li>Internal: MB, CPU, Expansion, Mem, </li> <li>Case form-factors are ATX, MicroATX, MiniITX, NanoITX, PicoITX</li> <li>BIOS/UEFI Mange essential devices K,V,M, Storage</li> <li>Power Supplys today use 24-pin P1 with 4 or 8 pin Aux.</li> </ul>"},{"location":"aug30_lesson.html#references","title":"References","text":"<ul> <li>K</li> </ul>"},{"location":"chroma-backgrounds.html","title":"Chroma-Key Backgrounds","text":"Image Thumbnails"},{"location":"chroma-science.html","title":"Chroma-Key","text":""},{"location":"chroma-science.html#title","title":"Title:","text":"<p>Creating Chroma-Key Effects with OpenCV and Java</p> <p> Take Chroma-Key Science With You!</p>"},{"location":"chroma-science.html#abstract","title":"Abstract:","text":"<p>This project demonstrates how Chroma-Key technology works, commonly known as \u201cgreen screen,\u201d by developing a Java-based app using OpenCV to replace green backgrounds with custom images. The goal is to understand the technical process behind Chroma-Keying and apply it through a program capable of handling video frames in real time.</p>"},{"location":"chroma-science.html#question","title":"Question:","text":"<p>How can we use Chroma-Key technology to replace a green screen background in real-time using OpenCV and Java?</p>"},{"location":"chroma-science.html#hypothesis","title":"Hypothesis:","text":"<p>If we can effectively identify and mask the green screen pixels in a video feed, then we can replace the background with high-quality images, enhancing the visual appeal and practical applications of the footage.</p>"},{"location":"chroma-science.html#background-research","title":"Background Research:","text":"<p>Chroma-Keying is a special effects technique widely used in media production, where a solid color (usually green or blue) background is replaced by another image or video. OpenCV, an open-source computer vision library, allows us to perform image and video processing, making it ideal for experimenting with Chroma-Keying effects in Java. This project explores color detection, masking, and compositing to achieve the effect.</p>"},{"location":"chroma-science.html#additional-research-necessary-for-implementation","title":"Additional Research Necessary for Implementation","text":""},{"location":"chroma-science.html#how-hsv-represents-color","title":"How HSV Represents Color","text":"<p>HSV stands for Hue, Saturation, and Value, which are three characteristics that define color:</p> <ul> <li>Hue (H): This is the main color component, represented by an angle on a color wheel (0\u2013360 degrees). It determines the color type\u2014e.g., red, blue, green. For example: <pre><code>Red \u2248 0\u00b0 or 360\u00b0\nGreen \u2248 120\u00b0\nBlue \u2248 240\u00b0\n</code></pre></li> <li> <p>Saturation (S): Saturation measures the intensity or purity of the color, from 0 to 100%. A low saturation results in a more grayish color, while higher saturation yields vivid colors.</p> </li> <li> <p>Value (V): Value represents the brightness of the color, from 0% (black) to 100% (full brightness). This aspect determines how light or dark the color appears.</p> </li> </ul> <p>In computer vision, HSV is often preferred over RGB for color filtering because it better separates chromatic content (i.e. color) from intensity (brightness), making it easier to isolate colors in various lighting conditions.</p>"},{"location":"chroma-science.html#hsv-range-in-java","title":"HSV Range in Java","text":"<ul> <li>To define a color range in HSV, we establish the lower and upper bounds for hue, saturation, and value.</li> <li>In OpenCV, the range is typically set like shown below: <pre><code>// Define the lower and upper bounds for the color range\nScalar lowerBound = new Scalar(35, 100, 100); // Lower HSV bounds for green\nScalar upperBound = new Scalar(85, 255, 255); // Upper HSV bounds for green\n</code></pre></li> <li>Images then need to be converted from BGR to HSV for comparison <pre><code>Imgproc.cvtColor(image, hsvImage, Imgproc.COLOR_BGR2HSV);\n</code></pre></li> <li>Finally a inRange comparison can be made to <code>mask</code> the HSV range. <pre><code>Core.inRange(hsvImage, lowerBound, upperBound, mask);\n</code></pre></li> </ul>"},{"location":"chroma-science.html#why-a-bluish-or-greenish-range-is-ideal-for-mask-creation","title":"Why a Bluish or Greenish Range is Ideal for Mask Creation","text":"<p>Green and blue are ideal for creating Chroma-Key masks for several reasons:</p> <ul> <li>Distinct Hue: Green and blue hues are distinct from most natural skin tones and colors found in clothing, making it easier to isolate these colors without accidentally masking people or other foreground objects.</li> <li>High Intensity and Saturation: Green and blue tend to provide high saturation values without losing brightness, resulting in a clean and easily distinguishable color even in varying lighting.</li> <li>Lower Noise in Channels: Since RGB cameras often capture more data in the green and blue channels, they produce less noise in these colors compared to others, allowing for cleaner edges when creating the mask.</li> </ul>"},{"location":"chroma-science.html#materials","title":"Materials:","text":"<ul> <li>Computer with Java and IntelliJ installed</li> <li>OpenCV library</li> <li>Web camera or video source with green screen backdrop</li> <li>Sample images for background replacement</li> <li>Good lighting setup for consistent background color</li> </ul>"},{"location":"chroma-science.html#procedure","title":"Procedure:","text":"<ol> <li>Setup OpenCV and Java Environment: Integrate OpenCV into a Java project in IntelliJ.</li> <li>Capture Video Feed: Use OpenCV to access the webcam and capture video frames. <pre><code>configuration = Configuration.getInstance();\ncapture = new VideoCapture();\nif(configuration.getConfig(ConfigKey.CAMERA) != null) {\ncameraIndex = (int)configuration.getConfig(ConfigKey.CAMERA).value();\n}\ndesiredSize = new Size(\n(int)configuration.getConfig(ConfigKey.FRAME_WIDTH).value(),\n(int)configuration.getConfig(ConfigKey.FRAME_HEIGHT).value()\n);\n/*...This happens in separate method...*/\ncapture.open(cameraIndex);\n// Set the resolution of the captured video\ncapture.set(Videoio.CAP_PROP_FRAME_WIDTH, desiredSize.width);\ncapture.set(Videoio.CAP_PROP_FRAME_HEIGHT, desiredSize.height);\n/*...Video processing starts in its own thread of execution...*/\n// Launch processing and displaying frames in a separate thread\ncameraThread = new Thread(this::processAndDisplayFrames);\ncameraThread.start();\n/*...Capture occurrs in Thread...*/\n// Capture a frame from the webcam\nMat frame = new Mat();\ncapture.read(frame);\n</code></pre></li> <li>Green Color Detection: Configure OpenCV to detect green pixels using lowerBound and upperBound HSV color thresholds. <pre><code>// Define lower and upper bounds for green color in HSV (Hue, Saturation, Value)\nint hue = (int)configuration.getConfig(ConfigKey.LOWER_HUE).value();\nint sat = (int)configuration.getConfig(ConfigKey.LOWER_SATURATION).value();\nint val = (int)configuration.getConfig(ConfigKey.LOWER_VALUE).value();\n//System.out.printf(\"L-H:%d,S:%d,V:%d%n\", hue, sat, val);\nScalar lowerBound = new Scalar(hue, sat, val);  // Lower Green\nhue = (int)configuration.getConfig(ConfigKey.UPPER_HUE).value();\nsat = (int)configuration.getConfig(ConfigKey.UPPER_SATURATION).value();\nval = (int)configuration.getConfig(ConfigKey.UPPER_VALUE).value();\n//System.out.printf(\"U-H:%d,S:%d,V:%d%n\", hue, sat, val);\nScalar upperBound = new Scalar(hue, sat, val);  // Upper Green\n</code></pre></li> <li>Mask Creation: Create two mask by first finding all pixels in HSV detection range <code>mask</code>, then invert the mask to extract everything NOT in the color range <code>maskI</code>. <pre><code>Mat mask = new Mat();\nMat maskI = new Mat();\n// Create a mask based on the specified color range\nCore.inRange(hsvFrame, lowerBound, upperBound, mask);\n// Invert the mask (to select everything except the specified color)\nCore.bitwise_not(mask, maskI);\n</code></pre></li> <li>Apply Background Replacement: Use <code>maskI</code> and <code>mask</code> to create a new image, but overlaying a chosen background image on each pixel of <code>mask</code>. <pre><code>String background = (String)configuration.getConfig(ConfigKey.BACKGROUND).value();\n// Load the replacement background image.\nreplacementMat = Utils.loadImage(background, desiredSize);\n/*...Another part of code...*/\n// Apply the inverted mask to the original frame\nCore.bitwise_and(frame, frame, result, maskI);\nMat currentResult = matBuffer.swap(result);\n// Apply the replacement image to the original frame where the mask is applied\nCore.bitwise_or(replacementMat, replacementMat, currentResult, mask);\n</code></pre></li> <li>Real-Time Processing: Ensure the replacement happens quickly enough for real-time playback. <pre><code>// Convert the modified frame to a JavaFX Image\nImage imageToShow = Utils.mat2Image(currentResult);\n// Update the image buffer with the new image\nimageBuffer.updateImage(imageToShow);\n</code></pre></li> <li>Test and Refine: Adjust thresholds and lighting to achieve clean edges and minimal color spill. </li> </ol>"},{"location":"chroma-science.html#results","title":"Results:","text":"<ul> <li>Real-time Chroma-Key effect successfully replaces the green screen with the chosen images.</li> <li>Key challenges include handling shadows and lighting inconsistencies, which affect green color detection. </li> </ul>"},{"location":"chroma-science.html#conclusion","title":"Conclusion:","text":"<p>Using OpenCV with Java effectively implements a Chroma-Key application, where proper masking and background replacement create professional-looking results. This project demonstrates how color-based keying and masking can simulate effects typically seen in media productions.</p>"},{"location":"chroma-science.html#future-direction","title":"Future Direction:","text":"<ul> <li>Experiment with other background colors (e.g., blue) to understand color sensitivity.</li> <li>Explore improvements in edge detection and shadow handling using advanced OpenCV filters.</li> <li>Add video as a replacement background for dynamic scene changes.</li> </ul>"},{"location":"debugging_pycharm.html","title":"Debugging pycharm","text":""},{"location":"debugging_pycharm.html#debugging-python-code-with-pycharm","title":"Debugging Python Code with PyCharm","text":"<p>Objective: Students will learn how to effectively use PyCharm\u2019s debugging tools to identify and resolve issues in Python code.</p>"},{"location":"debugging_pycharm.html#introduction-to-debugging","title":"Introduction to Debugging","text":"<ul> <li>Objective: Learn what debugging is and why it\u2019s important.</li> <li>Key Points:</li> <li>Definition of debugging: The process of identifying, isolating, and fixing errors (bugs) in code.</li> <li>Importance of debugging: Ensures code runs correctly, improves code quality, and saves time in the long run.</li> </ul>"},{"location":"debugging_pycharm.html#setting-up-pycharm-for-debugging","title":"Setting Up PyCharm for Debugging","text":"<ul> <li>Objective: Learn the setup process to prepare PyCharm for debugging.</li> <li>Activities:</li> <li>Open PyCharm and create or open an existing Python project.</li> <li>The layout of PyCharm:<ul> <li>The editor</li> <li>Project explorer</li> <li>The console</li> </ul> </li> <li>Learn how to configure the Python interpreter.</li> <li>Learn python virtual environments.</li> </ul> Note <p>A Python virtual environment is a self-contained directory that encapsulates a specific Python interpreter along with its installed packages. This setup allows developers to create isolated environments for different projects, ensuring that dependencies for one project don\u2019t interfere with another. Virtual environments are especially useful when working on multiple projects that require different versions of the same packages or libraries. By using a virtual environment, you can maintain a clean and organized project structure, avoid package conflicts, and ensure consistency across development, testing, and production environments.</p>"},{"location":"debugging_pycharm.html#understanding-breakpoints","title":"Understanding Breakpoints","text":"<ul> <li>Objective: Learn how to use breakpoints to pause code execution at specific lines.</li> <li>Activities:</li> <li>Learn how to set a breakpoint by clicking in the left gutter next to the line number.</li> <li>Explain the purpose of breakpoints: to pause the program\u2019s execution so that the state of the program can be examined.</li> <li>Run the code with breakpoints and observe how the program stops at the breakpoint.</li> </ul>"},{"location":"debugging_pycharm.html#navigating-through-code-during-debugging","title":"Navigating Through Code During Debugging","text":"<ul> <li>Objective: Learn how to control code execution using PyCharm\u2019s debugging tools.</li> <li>Activities:</li> <li>Step Over: Execute the current line of code and move to the next line.</li> <li>Step Into: Dive into the function being called on the current line.</li> <li>Step Out: Exit the current function and return to the caller.</li> <li>Resume Program: Continue running the program until the next breakpoint or until the program ends.</li> </ul>"},{"location":"debugging_pycharm.html#inspecting-variables-and-the-debugger-window","title":"Inspecting Variables and the Debugger Window","text":"<ul> <li>Objective: Learn how to inspect the values of variables and understand the information in the debugger window.</li> <li>Activities:</li> <li>View variable values in the debugger window while the program is paused.</li> <li>Learn how to modify variable values during debugging.</li> <li>Explain the significance of the \u201cWatches\u201d section to monitor specific variables.</li> </ul>"},{"location":"debugging_pycharm.html#handling-exceptions-and-viewing-the-call-stack","title":"Handling Exceptions and Viewing the Call Stack","text":"<ul> <li>Objective: Learn how to handle exceptions and understand the call stack in PyCharm.</li> <li>Activities:</li> <li>Trigger an exception in the code and observe how PyCharm handles it.</li> <li>Explain how to read the exception message and traceback to identify the source of the error.</li> <li>Introduce the call stack: a view that shows the sequence of function calls leading up to the current point in the program.</li> </ul> <p>Additional Debugging Tips: - Take a methodical approach to debugging: isolate the problem, understand it, and then fix it. - Debugging is a skill that improves with practice.</p>"},{"location":"fun.html","title":"Fun","text":""},{"location":"fun.html#creative-thinking-warm-ups","title":"Creative Thinking Warm Ups","text":""},{"location":"fun.html#building-escape","title":"Building Escape!","text":""},{"location":"learningstyles.html","title":"Learningstyles","text":""},{"location":"learningstyles.html#how-many-of-you-have-been-taught-these","title":"How Many of you have been taught these:","text":""},{"location":"learningstyles.html#what-if-i-told-you-learning-styles-are-bs","title":"What if I told you learning styles are BS?","text":"<ul> <li>Veritasium</li> <li>So if learning styles are BS what really works?<ul> <li>Valid Envrionment: There must be a closed space with valid solutions, i.e.  things don\u2019t randomly change.</li> <li>Many Repetitions: You must do it again and again!</li> <li>Timely Feedback: You must get feedback, ask question!</li> <li>Deliberate Practice: Code, Code, Code</li> </ul> </li> <li>I will add to this, in my experience, an optomistic outlook and persistent motivation are not only the best teachers, but greater indicators of success than natural intelligence.</li> </ul>"},{"location":"learningstyles.html#reference","title":"Reference","text":"<ul> <li>Stubborn Myth of Learning Styles</li> </ul>"},{"location":"live_survey.html","title":"Survey","text":"Mermaid Chart with Web Workers  10  20  30 Submit <pre>\nxychart-beta\n  title \"Is the speed of this course just right\"\n  x-axis [yes, no, undecided]\n  y-axis \"Votes\" 0 --&gt; 30\n  bar []\n  </pre>"},{"location":"live_test.html","title":"Test","text":"Mermaid Barchart Example <pre>\n    xychart-beta\n    title \"Sales Revenue\"\n    x-axis [jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec]\n    y-axis \"Revenue (in $)\" 4000 --&gt; 11000\n    bar [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]\n    line [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]\n  </pre>"},{"location":"markdown-cheat-sheet.html","title":"Markdown","text":""},{"location":"markdown-cheat-sheet.html#markdown-cheat-sheet","title":"Markdown Cheat Sheet","text":"<p>This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can\u2019t cover every edge case, so if you need more information about any of these elements, refer to the reference guides for basic syntax and extended syntax.</p>"},{"location":"markdown-cheat-sheet.html#basic-syntax","title":"Basic Syntax","text":"<p>These are the elements outlined in John Gruber\u2019s original design document. All Markdown applications support these elements.</p>"},{"location":"markdown-cheat-sheet.html#heading","title":"Heading","text":"<pre><code># H1\n## H2\n### H3\n</code></pre>"},{"location":"markdown-cheat-sheet.html#bold","title":"Bold","text":"<pre><code>**bold text**\n</code></pre>"},{"location":"markdown-cheat-sheet.html#italic","title":"Italic","text":"<pre><code>*italicized text*\n</code></pre>"},{"location":"markdown-cheat-sheet.html#blockquote","title":"Blockquote","text":"<pre><code>&gt; blockquote\n</code></pre>"},{"location":"markdown-cheat-sheet.html#ordered-list","title":"Ordered List","text":"<pre><code>1. First item\n1. Second item\n1. Third item\n</code></pre>"},{"location":"markdown-cheat-sheet.html#unordered-list","title":"Unordered List","text":"<pre><code>- First item\n- Second item\n- Third item\n</code></pre>"},{"location":"markdown-cheat-sheet.html#code","title":"Code","text":"<pre><code>`code`\n</code></pre>"},{"location":"markdown-cheat-sheet.html#horizontal-rule","title":"Horizontal Rule","text":"<pre><code>---\n</code></pre>"},{"location":"markdown-cheat-sheet.html#link","title":"Link","text":"<pre><code>[Markdown Guide](https://www.markdownguide.org)\n</code></pre>"},{"location":"markdown-cheat-sheet.html#image","title":"Image","text":"<pre><code>![alt text](https://www.markdownguide.org/assets/images/tux.png)\n</code></pre>"},{"location":"markdown-cheat-sheet.html#extended-syntax","title":"Extended Syntax","text":"<pre><code>These elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements.\n</code></pre>"},{"location":"markdown-cheat-sheet.html#table","title":"Table","text":"<pre><code>| Syntax | Description |\n| ----------- | ----------- |\n| Header | Title |\n| Paragraph | Text |\n</code></pre>"},{"location":"markdown-cheat-sheet.html#fenced-code-block","title":"Fenced Code Block","text":"<pre><code>    ```\n    {\n      \"firstName\": \"John\",\n      \"lastName\": \"Smith\",\n      \"age\": 25\n    }\n    ```\n</code></pre>"},{"location":"markdown-cheat-sheet.html#footnote","title":"Footnote","text":"<pre><code>Here's a sentence with a footnote. [^1]\n\n[^1]: This is the footnote.\n</code></pre>"},{"location":"markdown-cheat-sheet.html#heading-id","title":"Heading ID","text":"<pre><code>### My Great Heading {#custom-id}\n</code></pre>"},{"location":"markdown-cheat-sheet.html#definition-list","title":"Definition List","text":"<pre><code>term\n: definition\n</code></pre>"},{"location":"markdown-cheat-sheet.html#strikethrough","title":"Strikethrough","text":"<pre><code>~~The world is flat.~~\n</code></pre>"},{"location":"markdown-cheat-sheet.html#task-list","title":"Task List","text":"<pre><code>- [x] Write the press release\n- [ ] Update the website\n- [ ] Contact the media\n</code></pre>"},{"location":"markdown-cheat-sheet.html#emoji","title":"Emoji","text":"<pre><code>That is so funny! :joy:\n\n(See also [Copying and Pasting Emoji](https://www.markdownguide.org/extended-syntax/#copying-and-pasting-emoji))\n</code></pre>"},{"location":"markdown-cheat-sheet.html#highlight","title":"Highlight","text":"<pre><code>I need to highlight these ==very important words==.\n</code></pre>"},{"location":"markdown-cheat-sheet.html#subscript","title":"Subscript","text":"<pre><code>H~2~O\n</code></pre>"},{"location":"markdown-cheat-sheet.html#superscript","title":"Superscript","text":"<pre><code>X^2^\n</code></pre>"},{"location":"minesweeper.html","title":"Minesweeper","text":""},{"location":"minesweeper.html#minesweeper","title":"Minesweeper","text":"classDiagram class Location Location : +int x Location : +int y Location : +equal(Location) boolean class Square Square : +boolean isRevealed Square : +boolean isMine Square : +Location location Square : +int hint Square : +reveal() Square : +setMine() Square : +toString() String class Board Board : +int size Board : +List~Square~ squares Board : +boolean isRevealed Board : +createEmptyBoard(int) Board Board : +revealAllSquares() Board : +revealOneSquare(Location) Board : +getSquare(Location) Square Board : +getNeighbors(Square) Iterable~Square~ Board : +hasLocation(Location) boolean Board : +toString() String class IGenerateMines IGenerateMines : +placeMines(int, Board) class RandomMinesGenerator RandomMinesGenerator : +placeMines(int, Board) class Game Game : -IGenerateMines minesGenerator Game : +Board board Game : +int state Game : +CreateBoard() Game : +Play() class Rule Rule : +isWinningCondition(Board) boolean Rule : +isLosingCondition(Board) boolean IGenerateMines &lt;|.. RandomMinesGenerator IGenerateMines *-- Board Game *-- Board Game *-- Rule Game *-- IGenerateMines Board *-- Square Square *-- Location"},{"location":"nov15_lesson.html","title":"Nov15 lesson","text":""},{"location":"nov15_lesson.html#supporting-the-power-systems-and-troubleshooting-computers","title":"Supporting the Power Systems and Troubleshooting Computers","text":""},{"location":"nov15_lesson.html#cooling-methods-and-devices","title":"Cooling Methods and Devices","text":"<ul> <li>Keep the case closed</li> <li>Keep the computer clean</li> <li>Keep the computer in a proper location<ul> <li>Not on the floor in dusty areas</li> <li>Not enclosed in a non-ventalated cabinet</li> <li>Vents should be exposed and uncovered.</li> </ul> </li> </ul>"},{"location":"nov15_lesson.html#processor-coolers-fans-and-heat-sinks","title":"Processor Coolers, Fans, and Heat Sinks","text":"<ul> <li>Heat sinks<ul> <li>Pick a metal material with great thermal conductive properties (copper is better than aluminum, but much more expensive).</li> <li>thermal conductivity to cost ratio.</li> <li>With heat-sinks material, shape, and size matter.</li> </ul> </li> <li>Fans attached to the heatsink can help dissapate heat more rapidly.<ul> <li>4-pin fans are more appropriate for CPU coolers as they allow for variable fan speeds via PWM pin (or pulse-width-modulation).</li> <li>3-pin fans can plug into 4-pin fan power, but won\u2019t have variable control.</li> <li>Fans are usually between 80 - 150mm and the larger fans generally are quieter because they can move the same amount of air at lower RPMs.</li> <li>You may also find fans and heat-sinks attached to memory chips and especially high-end graphics cards.</li> </ul> </li> <li>Liquid cooling systems<ul> <li>Less common in industry</li> <li>Cost more and are higher maintenence due to liquid pumps</li> <li>Quietest option, but only necessary for high-end gaming systems or high-end computer systems.</li> </ul> </li> </ul>"},{"location":"nov15_lesson.html#selecting-a-power-supply","title":"Selecting a Power Supply","text":"<ul> <li>ATX or micro ATX form factors</li> <li>Rated by Watts (i.e. Power consumption), which is the first thing to be aware of</li> <li>Pick your power supply not just off Wattage, but also off the Watts per rail<ul> <li>In high end gaming systems +12V rail is the most important</li> <li>In large storage systems the +5V rail is often the most important</li> </ul> </li> <li>Add up all the Power needs of all the components in your system and estimate for 30% higher than that. </li> </ul>"},{"location":"nov15_lesson.html#wattage-calc","title":"Wattage Calc","text":"<pre><code>Power = Voltage * Amperage\n</code></pre>"},{"location":"nov15_lesson.html#strategies-to-troubleshoot-any-computer","title":"Strategies to Troubleshoot Any Computer","text":""},{"location":"nov15_lesson.html#tier-1-flowchart","title":"Tier 1 Flowchart","text":"<p> * Also go review page 181-182 and try to memorize as many of the symptom to solution messages as you can! * But remember, don\u2019t ignore BEEP codes</p>"},{"location":"nov15_lesson.html#troubleshooting-the-electrical-system","title":"Troubleshooting the Electrical System","text":"<ul> <li>If you see smoke or smell electrical burn smell, immediately track down the source and turn the system off.</li> <li>Look for discoloration on capacitors on the various circuit boards<ul> <li>Burned capacitors are usually the culprit of smell, and always mean the faulty component should be replaced. </li> </ul> </li> <li>Use a multimeter to test voltage of power-supplies (!!! DC i.e. Direct Current !!!).</li> </ul>"},{"location":"nov15_lesson.html#troubleshooting-the-motherboard-processor-and-ram","title":"Troubleshooting the Motherboard, Processor, and RAM","text":"<ul> <li>Windows Memory Diagnostic Tool</li> <li>MemTest86</li> </ul>"},{"location":"nov8_lesson.html","title":"Nov8 lesson","text":""},{"location":"nov8_lesson.html#networking","title":"Networking!","text":""},{"location":"oct11_lesson.html","title":"Oct11 lesson","text":""},{"location":"oct11_lesson.html#windows-installation","title":"Windows Installation","text":""},{"location":"oct11_lesson.html#plan","title":"Plan","text":""},{"location":"oct11_lesson.html#choose-the-edition-license-and-version","title":"Choose the Edition, License and Version","text":"<ul> <li>OEM License:<ul> <li>Only on a new computer</li> <li>Allows hardware upgrades, but not motherboard</li> <li>Costs Less</li> </ul> </li> <li>Retail License:<ul> <li>Direct Microsoft support</li> <li>Transferable between hardware</li> </ul> </li> </ul>"},{"location":"oct11_lesson.html#pick-architecture","title":"Pick Architecture","text":"<ul> <li>32 bit<ul> <li>RAM limited to 4GB</li> </ul> </li> <li>64 bit<ul> <li>Requires 64 bit device drivers</li> </ul> </li> </ul>"},{"location":"oct11_lesson.html#verifying-that-system-qualifies","title":"Verifying that System Qualifies","text":"<ul> <li>Typically Windows will be backward compatible with processors &lt; 10 years old<ul> <li>Microsoft will typically indicate which processor features are required.</li> </ul> </li> <li>MBR or GPT</li> <li>GPT required for drives larger than 2.2 TB</li> <li>64 bit windows required</li> <li>BIOS/UEFI</li> <li>UEFI is required for drives larger than 2.2 TB</li> <li>64 bit windows required</li> <li>Secure boot only enabled with UEFI</li> <li>CSM mode only recommended to support legacy hard drives</li> <li>Boot priority must be set to allow installation media to boot first</li> <li>Application and Hardware Compatibility</li> <li>Make sure Device Drivers will work for Windows 10 or that older drivers still work</li> <li>Make sure you can upgrade your necessary applications<ul> <li>For legacy applications consider dual or multi-boot</li> </ul> </li> </ul>"},{"location":"oct11_lesson.html#installation-type","title":"Installation Type","text":"<ul> <li>In-Place Upgrade:<ul> <li>Must be a supportable Upgrade path, find these tables online.</li> </ul> </li> <li>Clean Install:<ul> <li>Necessary to migrate from 32bit OS to 64bit, assuming you hardware supports it.</li> <li>If you choose not to format and erase, data will be preserved.</li> <li>Windows.old folder will be created.</li> </ul> </li> <li>Dual/Multi Boot:<ul> <li>Needs a second partition</li> </ul> </li> </ul>"},{"location":"oct11_lesson.html#understanding-the-install-choices","title":"Understanding the Install Choices","text":"<ul> <li>If you choose dual boot, always install older OS first.</li> <li>Consider the applications that will run on system when partitioning<ul> <li>Data Volume for Database</li> <li>What partition sizes are relevant</li> </ul> </li> <li>Network considerations<ul> <li>Will this be part of a domain?</li> <li>What type of network am I installing system on?</li> <li>Download speeds</li> <li>Proxy access</li> <li>DHCP/DNS?</li> </ul> </li> </ul>"},{"location":"oct11_lesson.html#final-checklist","title":"Final Checklist","text":"<ul> <li>Make sure you have a valid product/activation key or a domain to grab one from.</li> <li></li> </ul>"},{"location":"oct17_lesson.html","title":"Oct17 lesson","text":""},{"location":"oct17_lesson.html#maintaining-windows","title":"Maintaining Windows","text":""},{"location":"oct17_lesson.html#verifying-critical-windows-settings","title":"Verifying Critical Windows Settings","text":"<ul> <li>Windows Updates</li> <li>Antivrus Software</li> <li>Network Secuirty<ul> <li>Private VS Public</li> <li>Firewall enabled</li> </ul> </li> <li>Proper level of Backups<ul> <li>User Data VS Windows Volume VS System files</li> </ul> </li> <li>Uninstall unnecessary software and features</li> <li>Regularly clean HD<ul> <li>At least 15% free space</li> <li>scheduled defrag on non-SSD</li> </ul> </li> </ul>"},{"location":"oct17_lesson.html#patches--drivers","title":"Patches / Drivers","text":"<ul> <li>x86 VS x64 VS x86_64</li> <li>64 bit updates/drivers on 64bit OS</li> </ul>"},{"location":"oct17_lesson.html#backups","title":"Backups","text":""},{"location":"oct17_lesson.html#disaster-recovery-planning","title":"Disaster Recovery Planning","text":"<ul> <li>Decide the type of backup<ul> <li>file-level-backup<ul> <li>granular control over user data</li> <li>Not great for system or application content</li> </ul> </li> <li>image-level-backup<ul> <li>Restores everything</li> <li>Doesn\u2019t allow partial/selective restore</li> </ul> </li> <li>critical-applications<ul> <li>cloud solutions for backing up these critical applications</li> </ul> </li> </ul> </li> <li>Decide Backup Destination<ul> <li>Cloud<ul> <li>Easiest and most reliable</li> <li>Also most costly</li> </ul> </li> <li>Local<ul> <li>Easy to access at your location</li> <li>Danger of data loss in catastrophic event unless also shipped off-site.</li> </ul> </li> </ul> </li> <li>Decide Backup Software<ul> <li>Consider what it backs up and how full/incremental</li> <li>Is it on separate bootable media for easy restore in case of HD crash</li> <li>Is it schedulable</li> <li>Does it allow for off-site backups</li> </ul> </li> <li>Decide Backup Strategy<ul> <li>What is acceptable data loss, 4-6 hours?</li> <li>Are partial restores necessary</li> <li>Are speed, network, and/or cost factors?</li> <li>Is documentation necessary for audits?</li> <li>Is off-site necessary?</li> </ul> </li> <li>Decide how to ensure business continuity<ul> <li>UPS, generator, etc.</li> <li>Regularily test recovery process/media</li> <li>Regularily rotate and replace backup media if local.</li> <li>Where are backups stored and how is integrity guranteed.</li> </ul> </li> </ul>"},{"location":"oct17_lesson.html#backup-user-data","title":"Backup User Data","text":"<ul> <li>File History<ul> <li>File-Level-Backup: Documents, Music, Pictures, Videos and Desktop folders to External HD, network share, and OneDrive</li> <li>Offered in 11, 10, and 8</li> <li>Access via Control Panel Items &gt;&gt; File History</li> <li>Restore via Control Panel Items &gt;&gt; File History &gt;&gt; Restore personal files or right clicking a file you want to restore.</li> </ul> </li> <li>Backup and Restore<ul> <li>Image-Level-Backup: Initial full backup of select folders and volume, then incremental changes backup up to External HD or network share</li> <li>Offered in 11, 10, and 7</li> <li>Access via Control Panel Items &gt;&gt; Backup and Restore</li> <li>Restore via this</li> <li>Can be used to recover a failed HD</li> <li>Should Backup:<ul> <li>AppData</li> <li>Favorites</li> <li>or all User Profiles C:\\Users</li> </ul> </li> </ul> </li> <li>recimg<ul> <li>Image-Level-Backup</li> <li>Offered in 8</li> </ul> </li> <li>System Protection<ul> <li>Creates snapshots, called restore points, of changed system files</li> <li>Access via Control Panel &gt;&gt; System &gt;&gt; System Protection  or rstrui.exe</li> <li>Restore via Control Panel &gt;&gt; System &gt;&gt; System Protection  or rstrui.exe</li> <li>This can\u2019t restore from a HD failure</li> </ul> </li> </ul>"},{"location":"oct17_lesson.html#files-folder-and-sorage-devices","title":"Files, Folder, and Sorage Devices","text":""},{"location":"oct17_lesson.html#partitions-and-file-systems","title":"Partitions and File Systems","text":"<ul> <li> <p>MBR Partitions</p> <ul> <li>Required for 32bit OS or when using legacy BIOS</li> <li>Max of 4 partitions per drive</li> <li>3 Primary partitions</li> <li>4th extended partition of one or mor logical drives</li> <li>Boots off single active partition, which BIOS/UEFI searches for OS on </li> </ul> </li> <li> <p>GPT Partitions</p> <ul> <li>Requires 64bit OS and UEFI firmware</li> <li>Supports 128 partitions</li> <li>Required for drives over 2.2TB and to use Secure Boot</li> <li>1 sector is Protective MBR: Legacy info</li> <li>GPT Header tracks all partitions and immediately follows Protective MBR</li> <li>Partition Table in header, but also backed up at end of disk</li> <li>Boots from ESP which holds a boot loader which knows how to find and start the OS </li> </ul> </li> <li> <p>Windows FS</p> <ul> <li>Overall structure an OS uses to name, store, and organize files and folders on a HD</li> <li>High-Level-Formatting<ul> <li>Asigns Drive Letter</li> <li>Creates Root Directory</li> <li>Create FS on a volume</li> </ul> </li> <li>NTFS<ul> <li>Replaced Fat32</li> <li>more reliable, efficient, and secure (admin pass required)</li> <li>Supports encryption, disk quotas, and compression</li> </ul> </li> <li>ReFS<ul> <li>Improves upon NTFS with better performance and fault tolerance (protects sectors upon HD failure)</li> <li>Better compatibility with virtualization and RAID</li> </ul> </li> <li>NFS, exFAT, FAT32, CDFS and UDF</li> </ul> </li> </ul>"},{"location":"oct17_lesson.html#disk-mgmt","title":"Disk Mgmt","text":"<ul> <li>We\u2019ve coverd this and will cover it again in the lab, so I\u2019m not going to chat about this except to mention Dynamic Disks</li> </ul>"},{"location":"oct17_lesson.html#dynamic-disks","title":"Dynamic Disks","text":"<ul> <li>Several disks work together to present a single dynamic volume (Linux calls these Volume Groups and Logical Volumes).</li> <li>Extended volume across dynamic disks is called spanning</li> <li>Can improve performance and aid fault tolerance (i.e. to provide software RAID) </li> </ul>"},{"location":"oct17_lesson.html#storage-spaces","title":"Storage Spaces","text":"<ul> <li>Replacement for traditional software RAID</li> <li>Uses storage pools from a mixture of technologies SAS, STA, USB, etc.</li> <li>Options for Storage Spaces<ul> <li>Simple: like RAID 0</li> <li>Two-Way Mirror: like RAID 1+0</li> <li>Three-Way Mirror: like RAID 5</li> <li>Parity: like RAID 6</li> </ul> </li> <li>Access via Control Panel &gt;&gt; Storage Spaces </li> </ul>"},{"location":"oct25_lesson.html","title":"Oct25 lesson","text":""},{"location":"oct25_lesson.html#troubleshooting-windows-after-startup","title":"Troubleshooting Windows After Startup","text":""},{"location":"oct25_lesson.html#solving-problems-with-windows-apps","title":"Solving Problems with Windows Apps","text":""},{"location":"oct25_lesson.html#what-is-the-shell-and-kernel","title":"What is the Shell and Kernel","text":"<ul> <li> <p>Shell: portion of the os that relates to user applications</p> <ul> <li>User Mode: so limited access to system information</li> <li>Win32 security: sign-in, file ACLs, application access</li> </ul> </li> <li> <p>Kernel: portion of the os responsible for interacting with hardware</p> <ul> <li>Kernel Mode: direct access to hardware, and segmented off from user.</li> <li>Components<ul> <li>HAL</li> <li>Executive services: ntoskrnl.exe</li> </ul> </li> <li>Features<ul> <li>Memory management </li> <li>Device management</li> <li>File System</li> <li>Resource management (sharing CPU and hardware between processes)</li> <li>Access to hardware (CPU, I/O, etc.)</li> </ul> </li> </ul> </li> </ul>"},{"location":"oct25_lesson.html#important-directories","title":"Important Directories","text":"<ul> <li> <p>User Profile: Important user data after sign-in</p> <ul> <li>Profile Path: C:\\Users\\ <li>NTUSER.DAT: User settings copied to the registry</li> <li>Startup Programs: C:\\User\\\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup <li> <p>Program Files: Where the programs are</p> <ul> <li>Path: C:\\Program Files OR C:\\Program Files (x86)</li> <li>Startup Programs: C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</li> </ul> </li> <li> <p>Windows Data:</p> <ul> <li>Registry Path: C:\\Windows\\System32\\config folder.</li> <li>Backup registry: C:\\Windows\\System32\\config\\RegBack</li> <li>Fonts: C:\\Windows\\Fonts</li> <li>Temporary files: C:\\Windows\\Temp</li> <li>Offline files: C:\\Windows\\CSC</li> </ul> </li>"},{"location":"oct25_lesson.html#windows-app-mgmt","title":"Windows App Mgmt","text":"<ul> <li>Process: program in shell</li> <li>Process resource request to Win32 subsystem: Thread (single task in kernel)</li> </ul>"},{"location":"oct25_lesson.html#tools","title":"Tools","text":""},{"location":"oct25_lesson.html#solve-windows-problems-using-these-tools","title":"Solve Windows problems using these tools:","text":"<p>tool                     description System File Checker (sfc.exe) use System File Checker (SFC) to verify and replace Windows system files. It keeps a cache of current system files in case it needs to refresh a damaged file.</p> <p>dISm (dism.exe) use dISm (deployment Image Servicing and management) to repair corrupted Windows system files when SFC cannot do the job or Windows update is corrupted.</p> <p>Windows updates use Windows updates to download and apply the latest Windows updates to solve problems with Windows, applications, and hardware. In Windows 10, open Windows updates in the Settings app. For Windows 8/7, use the System window to find Windows updates.</p> <p>Clean boot a clean boot disables all third-party software that has been added to the Windows startup process. to clean boot, use System Configuration and task manager to disable all but microsoft services launched at startup. you learn how to do this later in the chapter.</p> <p>Safe mode, aka Safe boot Safe mode goes beyond a clean boot; it not only eliminates third-party software from Windows startup, it also reduces startup to only the Windows minimum configuration necessary to start the oS. It can create a stable environment when the Windows system or device drivers become corrupted. First try a clean boot. If that doesn\u2019t resolve a problem, try Safe mode. to do so, use System Configuration to restart the computer in Safe boot.</p> <p>System restore (rstrui.exe) use System restore to revert the system back to a previously saved restore point before a problem started.</p>"},{"location":"oct25_lesson.html#solve-application-errors-or-crashes-with-these-tools","title":"Solve application errors or crashes with these tools:","text":"<p>programs and Features (appwiz.cpl) use the programs and Features tool in Control panel to repair and uninstall applications and enable and disable Windows features.</p> <p>tasklist the tasklist command reports the process identifier (pId), which is a number that identifies each running process.</p> <p>taskkill the taskkill command uses the process Id to kill the task or process. use taskkill to end a process when task manager is unable to do so.</p> <p>Component Services use Component Services (also called Com+) in the administrative tools group to register components in the Windows registry so that an application can access the component. this resolves a problem that happens when a component is not correctly registered to the application when it is first installed or the connection between the two gets broken.</p> <p>Secondary logon use a secondary logon to run an application using administrator privileges that refused to run under the authority of a standard user. use the properties dialog box of the application program file to perform a secondary logon.</p> <p>Compatibility mode to solve an incompatibility problem with the oS, try running the application in compatibility mode by using the properties dialog box of the application program file.</p> <p>digital signature a digital signature verifies that the application is not a rogue application and that it is certified as Windows-compatible by microsoft. verify a digital signature using the properties dialog box of the application program file.</p> <p>data Sources use data Sources, also called odBC data Sources (open database Connectivity data Sources), to create a connection between a local application and a remote database so that the application can manage the database. data Sources can be accessed in the administrative tools group.</p> <p>task Scheduler (taskschd.msc) use task Scheduler in the administrative tools group to schedule a program to run at a future time, including at startup.</p>"},{"location":"oct25_lesson.html#manage-and-solve-problems-with-hardware-using-these-tools","title":"Manage and solve problems with hardware using these tools:","text":"<p>device manager (devmgmt.msc) recall device manager in Control panel is the go-to tool to make sure Windows has correctly installed a hardware device and to solve problems with a device.</p> <p>print management (printmanagement.msc) use print management in the administrative tools group to monitor and manage printer queues for all printers on the network.</p> <p>display applet (desk.cpl) use the display applet to manage display settings. In Windows 10, access display settings in the Settings app. For Windows 8/7, use Control panel.</p> <p>dxdiag (dxdiag.exe) use the dxdiag (directX diagnostic tool) command to diagnose problems with directX. directX is microsoft\u2019s interface between video and sound hardware and the applications that use these devices. Some gaming applications or other apps that rely heavily on graphics and sound require the latest version of directX. dxdiag can tell you which version of directX is installed; you can download the latest version from microsoft.com.</p> <p>memory diagnostics (mdsched.exe) use memory diagnostics in administrative tools to test memory before or after Windows is launched.</p> <p>chkdsk the chkdsk command checks the hard drive for a corrupted file system and bad sectors on the drive. use this command to check drive C: and recover data: chkdsk c: /r</p> <p>disk defragmenter (defrag.exe) defrag a magnetic hard drive to improve drive performance. (defrag.exe)</p>"},{"location":"pemdas.html","title":"Pemdas","text":""},{"location":"pemdas.html#pemdas","title":"PEMDAS","text":"<p>PEMDAS is an acronym that stands for Parentheses, Exponents, Multiplication and Division (from left to right), Addition and Subtraction (from left to right). It\u2019s a set of rules that determine the order in which mathematical operations should be performed to ensure accurate results.</p> <p>Here\u2019s a breakdown of each step:</p> <ol> <li>Parentheses: Any expressions within parentheses should be calculated first.</li> <li>Exponents: Any exponents or powers should be evaluated next.</li> <li>Multiplication and Division: Perform multiplication and division operations in order, from left to right. If both operations are present, the one encountered first should be performed.</li> <li>Addition and Subtraction: Perform addition and subtraction operations in order, from left to right. If both operations are present, the one encountered first should be performed.</li> </ol> <p>By following these steps in order, you can correctly solve complex mathematical expressions that involve multiple operations.</p> <p>Here\u2019s an example to illustrate PEMDAS:</p> <pre><code>20 - (5 + 3 * 2) ^ 2 / 4\n</code></pre> <ol> <li> <p>Parentheses: First, calculate the expression within the parentheses:    <pre><code>20 - (5 + 6) ^ 2 / 4\n20 - 11 ^ 2 / 4\n</code></pre></p> </li> <li> <p>Exponents: Next, calculate the exponent:    <pre><code>20 - 121 / 4\n</code></pre></p> </li> <li> <p>Division: Perform the division:    <pre><code>20 - 30.25\n</code></pre></p> </li> <li> <p>Subtraction: Finally, perform the subtraction:    <pre><code>-10.25\n</code></pre></p> </li> </ol> <p>Therefore, the value of the expression is -10.25.</p> <p>By using PEMDAS, you can ensure that you always get the correct answer when evaluating mathematical expressions.</p>"},{"location":"photos.html","title":"Photos","text":"Chroma-Key Photo Gallery <p> Take the gallery with you (Temporarily)!</p>"},{"location":"potato-science.html","title":"Potato Cannon","text":""},{"location":"potato-science.html#calculating-muzzle-velocity-using-a-potato-cannons-trajectory-and-range","title":"Calculating Muzzle Velocity Using a Potato Cannon\u2019s Trajectory and Range","text":"<p> Take Potato Ballistic Science With YOU!</p>"},{"location":"potato-science.html#abstract","title":"Abstract","text":"<p>This project investigates the use of trajectory and range to determine the muzzle velocity of a potato gun. By measuring how far a potato travels and at what angle it\u2019s launched, the muzzle velocity can be calculated. This project combines physics and engineering principles to understand projectile motion.</p>"},{"location":"potato-science.html#question","title":"Question","text":"<p>How can the trajectory and range of a potato gun be used to accurately (minus some variables) calculate its muzzle velocity?</p>"},{"location":"potato-science.html#hypothesis","title":"Hypothesis","text":"<p>If the launch angle and range of a potato gun are measured accurately, then the muzzle velocity can be calculated using projectile motion formulas, assuming air resistance is negligible.</p>"},{"location":"potato-science.html#background-research","title":"Background Research","text":"<p>Research topics include:</p> <ol> <li>Newton\u2019s laws of motion</li> <li>Projectile motion equations</li> <li>Factors affecting muzzle velocity such as barrel length, friction, and angle of launch</li> </ol> <p>Similar research in ballistics provides a foundation for calculating initial velocity based on projectile trajectory. I derive the equation this science project will need below!!!</p> <p></p> <p>For a projectile launched with an muzzle velocity \\( v \\) at an angle \\( \\theta \\) above the horizontal, we can break down the motion into horizontal (x) and vertical (y) components.</p>"},{"location":"potato-science.html#initial-velocity-components","title":"Initial Velocity Components","text":"<p>The initial velocity \\( v \\) can be split into:</p> <ul> <li>Horizontal Component: \\( v_x = v \\cos \\theta \\)</li> <li>Vertical Component: \\( v_y = v \\sin \\theta \\)</li> </ul>"},{"location":"potato-science.html#calculate-the-time-of-flight","title":"Calculate the Time of Flight","text":"<p>So, to find the range \\( R \\), horizontal distance traveled, we need the total time of flight (i.e. how long the potatoe stays in the air).</p> <p>In projectile motion, the only vertical force acting on the object is gravity, which decelerates the object as it rises and accelerates it as it falls. When the projectile reaches its highest point (A), its vertical velocity is 0 (zero).</p> <p>The vertical motion formula \\( v_{y,\\text{final}} = v_{y,\\text{initial}} - g t \\) (where \\( g \\) is the acceleration due to gravity, taken as 32.2 ft/s\u00b2 on Earth), the time to reach the peak, \\( t_{\\text{up}} \\), is:</p> \\[ t_{\\text{up}} = \\frac{v_y}{g} = \\frac{v \\sin \\theta}{g} \\] <ul> <li>How did we get this?<ul> <li>Without deriving the vertical motion formula, it intuitively makes sense that gravity over time would decelerate the initial velocity in the y direction, hence  \\( v_{y,\\text{final}} = v_{y,\\text{initial}} - g t \\)</li> <li>\\( v_{y,\\text{final}} \\) is 0 at \\( t_{\\text{up}} \\)</li> <li>So, we simply made \\( v_{y,\\text{final}} \\) 0, moved \\( g t \\) like so \\( g t = v_{y,\\text{initial}} \\)</li> <li>Divided by \\( g \\) and substituted \\( v_{y,\\text{initial}} \\) with its equivalent \\( v \\sin \\theta \\)</li> </ul> </li> </ul> <p>Since the time to go up equals the time to come down, the total time of flight, \\( t_{\\text{total}} \\), is:</p> \\[ t_{\\text{total}} = 2 \\cdot t_{\\text{up}} = 2 \\cdot \\frac{v \\sin \\theta}{g} = \\frac{2 v \\sin \\theta}{g} \\]"},{"location":"potato-science.html#calculate-the-range","title":"Calculate the Range","text":"<p>The horizontal motion is unaffected by gravity (assuming no air resistance), so the horizontal velocity \\( v_x \\) remains constant at \\( v \\cos \\theta \\). The range \\( R \\) is the horizontal distance traveled in the total time of flight:</p> \\[ R = v_x \\cdot t_{\\text{total}} = (v \\cos \\theta) \\cdot \\frac{2 v \\sin \\theta}{g} \\] <p>Remember the famous \\( rate \\times time = distance \\) formula you likely were forced to memorize!</p>"},{"location":"potato-science.html#simplify-using-trigonometric-identity","title":"Simplify Using Trigonometric Identity","text":"<p>Using the trigonometric identity \\( 2 \\sin \\theta \\cos \\theta = \\sin(2 \\theta) \\), we can simplify:</p> \\[ R = \\frac{v^2 \\sin(2 \\theta)}{g} \\] <p>This formula is FULL of assassumptions, but I\u2019m gonna be lazy and assume:</p> <ul> <li>The only force acting on the projectile is gravity.</li> <li>The launch and landing heights are the same.</li> <li>Air resistance is negligible. </li> </ul>"},{"location":"potato-science.html#finding-muzzle-velocity","title":"Finding Muzzle Velocity","text":"<p>The above formula can be used to find the muzzle velocity if you know the range \\( R \\) and launch angle \\( \\theta \\)!</p>"},{"location":"potato-science.html#materials","title":"Materials","text":"<ul> <li>Potato gun with a 1.5-inch diameter ABS barrel (48 inches long) and a 14-inch chamber (~ 3.5-inch diameter)  </li> <li>Potatoes (as projectiles)</li> <li>Protractor or inclinometer for measuring launch angle</li> <li>Tape measure or laser distance measurer</li> <li>Calculator or computer with software for trajectory calculations</li> <li>Safety goggles and ear protection</li> </ul>"},{"location":"potato-science.html#procedure","title":"Procedure","text":"<ol> <li>Setup and Safety: Set up the testing area with clear sight lines and secure zones. Used protective equipment.</li> <li>Launch Angle: Used the protractor to set and measure a specific launch angle.</li> <li>Measurement: Fired the potato gun, and recorded the range (distance from launch point to landing point).</li> <li>Data Collection: Repeated for different angles and record each range.</li> <li>Calculations: Used the range and angle data with projectile motion equations to calculate initial velocity (muzzle velocity).</li> </ol>"},{"location":"potato-science.html#results","title":"Results","text":"<ul> <li>TODO: Need to add formatted table results</li> <li>Calculating muzzle velocity using the projectile motion formula for Range</li> </ul> \\[ R = \\frac{v^2 \\sin(2\\theta)}{g} \\] <p>where:</p> <ul> <li>\\( R \\) is the range in feet,</li> <li>\\( v \\) is the muzzle velocity we want to find,</li> <li>\\( \\theta \\) is the launch angle, and</li> <li>\\( g \\) is the acceleration due to gravity (32.2 ft/s\u00b2).</li> </ul>"},{"location":"potato-science.html#muzzle-velocity-calculation","title":"Muzzle Velocity Calculation","text":"<p>if:</p> <ul> <li>\\( R \\) is 200 yards, about 600 feet</li> <li>\\( \\theta \\) is an angle of 45 degrees</li> <li>\\( g \\) is the acceleration due to gravity (32.2 ft/s\u00b2).</li> </ul> <p>Then \\(\\sin(2 \\times 45^\\circ) = 1\\), the formula simplifies to:</p> \\[ R = \\frac{v^2}{g} \\] <p>Rearranging to solve for \\( v \\):</p> \\[ v = \\sqrt{R \\times g} \\] \\[ v = \\sqrt{600 \\times 32.2} \\] \\[ v = \\sqrt{19320} \\approx 139 \\text{ ft/s} \\] <p>So, the muzzle velocity is approximately 139 feet per second in this scenario.</p> <p>Experiements by the USAF Academy in a paper \u201cStudying the Internal Ballistics of a Combustion Driven Potato Cannon using High-speed Video appear to correllate with these calculations.</p> <p></p>"},{"location":"potato-science.html#conclusion","title":"Conclusion","text":"<p>The calculated muzzle velocities for my various firing attempts were between 91 ft/s (62 mph) and 150 ft/s (107 mph) which varied both with the angle of the gun and with the quantity of propellant used, though the propellant had a larger effect. The angle affected range significantly, but didn\u2019t appear to greatly impact muzzle velocity. In the calculation shown above, an angle of about 45 degrees produced the greatest ranges, but not the greatest muzzle velocities, though I need more experimental data to determine if that\u2019s a valid observation. All calculated muzzle velocities do corroborate other experimental evidence on the muzzle velocity of potato guns, so my hypothesis is supported, that having the angle and range allows you to accurately predict muzzle velocity.</p>"},{"location":"potato-science.html#future-direction","title":"Future Direction","text":"<ol> <li>Investigate the effects of varying potato mass, air pressure, or chamber volume on muzzle velocity.</li> <li>Explore using high-speed cameras to calculate velocity directly and compare with trajectory-based calculations.</li> <li>Determine if audio from a potato exiting the muzzle and hitting a gong can be used to calculate muzzle velocity.</li> </ol>"},{"location":"potato-science.html#corroborating-science","title":"Corroborating Science","text":"<ul> <li>USAF Academy Potato Canon Science</li> <li>Muzzle Velocity from Audio Experiment</li> <li>More Advanced Projectile Motion Calculator</li> </ul>"},{"location":"sep13_lesson.html","title":"Sep13 lesson","text":""},{"location":"sep13_lesson.html#week-4-cis-98-notes","title":"Week 4 CIS-98 Notes","text":""},{"location":"sep13_lesson.html#features-of-processors","title":"Features of Processors","text":"<ul> <li>Processor freq: Speed of operation</li> <li>Lithography: Space between transistors</li> <li>Socket &amp; Chipset: Must match the processor</li> <li>Multiprocessing: Multiple Cores/ALUs in use</li> <li>Multithreading: Multiple threads per Core/ALU</li> <li>Multi-Core: Multiple processors on the same housing</li> <li>Dual Processor: 2 Separate chips in separates housings</li> <li>Cache: Memory included in processor package<ul> <li>L1: on the processor die</li> <li>L2: in the same package</li> </ul> </li> <li>GPU: may be integreated in processor</li> </ul>"},{"location":"sep13_lesson.html#major-manufacturers","title":"Major Manufacturers","text":"<ul> <li>Intel</li> <li>AMD</li> <li>Should know how to determine family, generation, and features like unlocked.</li> </ul>"},{"location":"sep13_lesson.html#memory-features","title":"Memory Features","text":"<ul> <li>DIMM: dual inline memory module</li> <li>SO-DIMM: Small Outline, dual inline memory module<ul> <li>Used in laptops and some All-In-One machines</li> </ul> </li> <li>DDR: Double Data Rate, 2x as fast as SIMM</li> <li>DDR2: 4x SIMM</li> <li>DDR3 &amp; DDR4: 8x SIMM</li> <li>CAS or CL: Column Access Strobe, measureing access timing<ul> <li>Lower numbers == faster</li> </ul> </li> <li>ECC: Error Correcting Code, find and fix errors</li> <li>Parity: Older mem error checking</li> <li>Buffered &amp; Registered: Amplify signal before written</li> </ul>"},{"location":"sep20_lesson.html","title":"Sep20 lesson","text":""},{"location":"sep20_lesson.html#drives","title":"Drives","text":""},{"location":"sep20_lesson.html#magnetic-drives","title":"Magnetic Drives","text":"<ul> <li>Stacked, spinning platters with read/write head between each</li> <li>Platters spin at 5400, 7200, 10000, and 15000 RPM</li> <li>Data is organized in tracks (one loop) and sectors (segment of track)</li> <li>Low-Level-Formatting, or sector markings are written before leaving factory</li> <li>3.5\u201d and 2.5\u201d form factor</li> </ul>"},{"location":"sep20_lesson.html#ssd-or-solid-state","title":"SSD or Solid State","text":"<ul> <li>No moving parts</li> <li>NAND, or Not And, pair of transistor gates holds data in rows and columns</li> <li>Lifespan based of writes to drive because of limited transistor re-programming</li> <li>Currently a tiny bit more expensive than magnetic</li> <li>Sata, M.2 sata, M.2 NVME, PCI Express NVME</li> <li>Uses wear leveling to ensure LBA does not always refere to the same block</li> <li>Reserves blocks to use when other blocks approach re-programming limits</li> <li>Usually 2.5\u201d form factor</li> </ul>"},{"location":"sep20_lesson.html#smart-or-self-monitoring-analysis-and-reporting-technology","title":"S.M.A.R.T or Self Monitoring Analysis and Reporting Technology","text":"<ul> <li>Used to predict drive failures and warn you before the failure takes place.</li> <li>Usually turned on/off in BIOS/UEFI</li> <li>SSDs Report # of writes.</li> </ul>"},{"location":"sep20_lesson.html#interfaces","title":"Interfaces","text":"<ul> <li>IDE: Integrated Drive Electronics (No longer used)</li> <li>SCSI: Small Computer System Interface (No longer used)<ul> <li>supported up to 15 drives per cable.</li> </ul> </li> <li>SATA: Serial ATA, 7-pin data with 15 pin power connectors<ul> <li>Sata 1: 1.5 Gb/s</li> <li>Sata 2: 3 Gb/s</li> <li>Sata 3: 6 Gb/s</li> <li>Sata Express: 18 Gb/s</li> </ul> </li> <li>NVMe: Non-Volatile Memory Express, PCIex4, M.2, or U.2<ul> <li>Only SSD</li> <li>PCIex4 required</li> <li>32Gb/s or 5x Sata 3</li> </ul> </li> </ul>"},{"location":"sep20_lesson.html#raid","title":"RAID","text":"<ul> <li>RAID 0: Striping </li> <li>RAID 1: Mirroring </li> <li>RAID 5: Stripes with Parity info<ul> <li>Requires 3 or more drives</li> <li>No data duplication, so better space utilization </li> </ul> </li> <li>RAID 10: Stiping and Mirroring </li> <li>Raid 6 </li> </ul>"},{"location":"sep6_lesson.html","title":"Sep6 lesson","text":""},{"location":"sep6_lesson.html#most-important-part-of-motherboard-selection","title":"Most Important Part of Motherboard Selection","text":""},{"location":"sep6_lesson.html#chipset","title":"Chipset!","text":"<ul> <li> <p>Prior to 2008 used to be divided into 2 chips</p> <ul> <li>Northbridge: CPU pathway to RAM</li> <li>Southbridge: CPU communication to PCI and Storage</li> <li>Intel moved most of the Northbridge into the CPU, and some of it to the Chipset</li> </ul> </li> <li> <p>9th/10th Gen </p> </li> <li> <p>11th/12th Gen </p> </li> </ul>"},{"location":"CIS-12/floating_point_numbers.html","title":"Floating Point Numbers","text":""},{"location":"CIS-12/floating_point_numbers.html#floating-point-visually-explained","title":"FLOATING POINT VISUALLY EXPLAINED","text":""},{"location":"CIS-12/floating_point_numbers.html#how-floating-point-are-usually-explained","title":"HOW FLOATING POINT ARE USUALLY EXPLAINED","text":"<p>In the C language, floats are 32-bit container following the IEEE 754 standard. Their purpose is to store and allow operations on approximation of real numbers. The way I have seen them explained so far is as follow. The 32 bits are divided in three sections:</p> <ul> <li>1 bit S for the sign</li> <li>8 bits E for the exponent</li> <li>23 bits for the mantissa</li> </ul> <p>Floating Point Internals</p> <p></p> <p>The three sections of a floating point number.</p> <p></p> <p>So far, so good. Now, how numbers are interpreted is usually explained with the formula:</p> \\[ (-1)^{S} * 1.M * 2^{(E-127)} \\] <p>This is how everybody hates floating point to be explained to them.</p> <p>This is usually where I flip the table. Maybe I am allergic to mathematic notation but something just doesn\u2019t click when I read it.</p> <p>Floating-point arithmetic is considered an esoteric subject by many people.  - David Goldberg</p>"},{"location":"CIS-12/floating_point_numbers.html#a-different-way-to-explain","title":"A DIFFERENT WAY TO EXPLAIN\u2026","text":"<p>Although correct, this way of explaining floating point will leaves some of us completely clueless. Fortunately, there is a different way to explain it. Instead of Exponent, think of a Window between two consecutive power of two integers. Instead of a Mantissa, think of an Offset within that window.</p> <p></p> <p>The window tells within which two consecutive power-of-two the number will be: [0.5,1], [1,2], [2,4], [4,8] and so on (up to [2127 ,2128]).</p> <p>The offset divides the window in \\(2^{23} = 8388608\\) buckets. With the window and the offset you can approximate a number. The window is an excellent mechanism to protect from overflowing. Once you have reached the maximum in a window (e.g [2,4]), you can \u201cfloat\u201d it right and represent the number within the next window (e.g [4,8]). It only costs a little bit of precision since the window becomes twice as large.</p> <p>The next figure illustrates how the number 6.1 would be encoded. The window must start at 4 and span to next power of two, 8. The offset is about half way down the window.</p> <p></p>"},{"location":"CIS-12/floating_point_numbers.html#precision","title":"PRECISION","text":"<p>How much precision is lost when the window covers a wider range? Let\u2019s take an example with window [1,2] where the 8388608 offsets cover a range of 1 which gives a precision of \\((2 - 1) / 8388608 = 0.00000011920929\\). In the window [2048,4096] the 8388608 offsets cover a range of \\(4096 - 2048 = 2048\\) which gives a precision of \\(4096 - 2048 / 8388608 = 0.0002\\).</p>"},{"location":"CIS-12/floating_point_numbers.html#an-other-example","title":"AN OTHER EXAMPLE","text":"<p>Let\u2019s take an other example with the detailed calculations of the floating point representation of a number we all know well: 3.14.</p> <ul> <li>The number \\(3.14\\) is positive \\(\u2192 S = 0\\).</li> <li>The number \\(3.14\\) is between the power of two 2 and 4 so the floating window must start at \\(2^{1} \u2192 E = 128\\) (see formula where window is \\(2^{(E\u2212127)}\\)).</li> <li>Finally there are \\(2^{23}\\) offsets available to express where \\(3.14\\) falls within the interval [2-4]. It is at \\((3.14 - 2) / (4 - 2) = 0.57\\) within the interval which makes the offset \\(M = 2^{23} \u2217 0.57 = 4781507\\)</li> </ul> <p>Which in binary translates to:</p> <ul> <li>S = 0 = 0b</li> <li>E = 128 = 10000000b</li> <li>M = 4781507 = 10010001111010111000011b</li> </ul> <p></p> <p>The value \\(3.14\\) is therefore approximated to \\(3.1400001049041748046875\\). The corresponding value with the ugly formula:</p> \\[ 3.14 = (-1)^{0} \u2217 1.57 \u2217 2^{(128 - 127)} \\] <p>And finally the graphic representation with window and offset:</p> <p></p>"},{"location":"CIS-12/floating_point_numbers.html#credit","title":"CREDIT","text":"<p>All credit for this brilliant breakdown goes to Fabien Sanglard</p>"},{"location":"CIS-12/week_1.html","title":"Week 1 - Introduction to Programming","text":""},{"location":"CIS-12/week_1.html#introduction-to-java","title":"Introduction to Java","text":""},{"location":"CIS-12/week_1.html#what-is-programming","title":"What is Programming","text":"<ul> <li>Set of instructions organized into an steps to solve a problem (Algorithm)<ul> <li>Computation, text manipulation, searching, graphics</li> </ul> </li> <li>Every language<ul> <li>Input, output, math, decisions (conditional), repetition (while, for, do\u2026while loops)</li> </ul> </li> </ul>"},{"location":"CIS-12/week_1.html#what-is-computer-science","title":"What is Computer Science","text":"<ul> <li>Study of and discovery of algorithms (or creating the steps to solve a problem)<ul> <li>Reduce computational expense</li> <li>Novel ways to solve a problem</li> </ul> </li> <li>Program (Algorithm) errors are called Bugs</li> </ul>"},{"location":"CIS-12/week_1.html#programming-languages","title":"Programming Languages","text":"<ul> <li>Low Level Language: machine code like the RISC vs CISC assembly language battle<ul> <li>RISC = 1 instruction / cycle VERSUS CISC = Many Instructions / several cycles</li> <li>Complex Instruction Set Computer<ul> <li>CISC 80x86 is what Intel uses</li> </ul> </li> <li>Reduced Instruction Set Computer<ul> <li>RISC is what many ARM processors use</li> </ul> </li> </ul> </li> <li>High Level Languages<ul> <li>Easier to understand, formatting human readable <pre><code>; ----------------------------------------------------------------------------------------\n; Writes \"Hello, World\" to the console using only system calls. Runs on 64-bit Linux only.\n; To assemble and run:\n;\n;     nasm -felf64 hello.asm &amp;&amp; ld hello.o &amp;&amp; ./a.out\n; ----------------------------------------------------------------------------------------\n\n          global    _start\n\n          section   .text\n_start:   mov       rax, 1                  ; system call for write\n          mov       rdi, 1                  ; file handle 1 is stdout\n          mov       rsi, message            ; address of string to output\n          mov       rdx, 13                 ; number of bytes\n          syscall                           ; invoke operating system to do the write\n          mov       rax, 60                 ; system call for exit\n          xor       rdi, rdi                ; exit code 0\n          syscall                           ; invoke operating system to exit\n\n          section   .data\nmessage:  db        \"Hello, World\", 10      ; note the newline at the end\n</code></pre> VERSUS <pre><code>/**\nWrites \"Hello, World\" to the console.\n\njavac HelloWorld.java  # compiled to byte-code.\njava HelloWorld        # Looks for and executes main.\n*/\n\nclass HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\"); \n    }\n}\n</code></pre></li> <li>Less cumbersome to debug</li> <li>Portable</li> </ul> </li> <li>Types of High Level Languages</li> <li>Note on Compiling - In layman\u2019s speak, a program that converts a program in one programming language into another program in another programming language.</li> <li>Compiled to machine code AOT (Ahead of Time): C, C++<ul> <li>Must be compiled to the target architecture (80x86, ARMv8, etc.)</li> </ul> </li> <li>Compile to byte-code, then Interpreted JIT (Just in Time): Java<ul> <li>Portable to any system with bytcode interpreter (JVM)</li> </ul> </li> <li>Interpreted: Scripting Languages<ul> <li>Extremely Portable</li> <li>Slower due to fewer runtime optimizations and fully just in time compiling</li> </ul> </li> </ul>"},{"location":"CIS-12/week_1.html#description-of-helloworld","title":"Description of HelloWorld","text":"<ul> <li>class: template used to create objects<ul> <li>Defines object data types.</li> <li>Contains methods to get/set/modify the object.</li> </ul> </li> <li>class == category</li> <li>object == item in that category</li> <li>static: A static method belongs to the class rather than instances. This also goes for static variables.</li> <li>void: It Returns NOTHING - We believe in nothing, Lebowski. Nothing. == VOID</li> <li>public: Modifier that makes the method (variable, etc.) accessible OUTSIDE the class</li> </ul>"},{"location":"CIS-12/week_1.html#a-bit-about-git","title":"A Bit About Git","text":"<p>Git Flow * Will demo full git turn in process at the end of class.</p>"},{"location":"CIS-12/week_1.html#learning","title":"Learning!","text":"<ul> <li>Learn by doing - code, code, code, all day long</li> <li>Learn tools that are relevant - IntelliJ, Git</li> <li>Learn Languages where the jobs are - Python, Java, Web-Technologies (React, Next.js, Vue.js, GraphQL)</li> <li>Ask for help! Be agile, Pair Program, run a personal (OR TEAM) scrum.<ul> <li>Questions to ask in Team/Personal scrum every day:<ul> <li>What did you do yesterday?</li> <li>What will you do today?</li> <li>What\u2019s getting in your way?</li> <li>Something fun I learned!</li> </ul> </li> </ul> </li> </ul>"},{"location":"CIS-12/week_10.html","title":"Week 10 - Arrays","text":""},{"location":"CIS-12/week_10.html#arrays","title":"Arrays","text":""},{"location":"CIS-12/week_10.html#first-lets-review","title":"FIRST Let\u2019s Review","text":""},{"location":"CIS-12/week_10.html#what-things-do-you-need-more-help-with","title":"What Things do You Need More Help With?","text":"<ul> <li>Review the what you should know by now section and come up with some questions about topics you are still not clear on.</li> </ul>"},{"location":"CIS-12/week_10.html#what-you-should-know-by-now","title":"What You Should Know by Now","text":"<ul> <li>Input / Output<ul> <li>sout, scanner, input streams</li> </ul> </li> <li>Comments<ul> <li>javadoc</li> <li>single line or multi-line comments</li> </ul> </li> <li>Variables<ul> <li>Declaration and data-type</li> <li>Assignment</li> <li>Naming conventions</li> <li>Access Modifier</li> </ul> </li> <li>Data Types<ul> <li>type casting</li> <li>Basic types: int, double, float, long</li> <li>Special types: Strings</li> <li>Object types</li> </ul> </li> <li>Operators<ul> <li>Arithmetic</li> <li>Assignment</li> <li>Comparison</li> <li>Logical</li> <li>Bitwise</li> </ul> </li> <li>Packages and Imports<ul> <li>Math</li> <li>Scanner</li> <li>Package VS Class VS Object</li> </ul> </li> <li>Conditionals<ul> <li>if/else if/else</li> <li>switch</li> <li>ternary</li> </ul> </li> <li>Loops<ul> <li>While loop</li> <li>For loop</li> <li>do while</li> <li>break / continue</li> </ul> </li> <li>Methods<ul> <li>Static VS Public: Class accessible VS Object accessible</li> <li>Acessing / Calling a Method: dot notation or .</li> <li>Access Modifier: public, protected, private, determines if can be accessed outside class and inherited and overloaded.</li> <li>Method Parameters: Between ( ), preceeded by Data-Type, follows variable naming conventions</li> <li>Return types (i.e. Value Methods): After access and  optional static modifier, is a Data-Type</li> <li>Overloading: Same method name, different parameter signature.</li> <li>Constructors: Same name as class it constructs, always public, no return type.</li> <li>Scope: Containment in brackets: { } </li> </ul> </li> <li>Class<ul> <li>Naming, File Naming, and Packaging</li> <li>Declaration</li> <li>Attributes / Instance variables</li> </ul> </li> </ul>"},{"location":"CIS-12/week_10.html#array-declaration","title":"Array Declaration","text":""},{"location":"CIS-12/week_10.html#method-1---long-way","title":"Method 1 - Long way","text":"<pre><code>String[] companies = new String[5];\n\ncompanies[0] = \"Apple\";\ncompanies[1] = \"Microsoft\";\ncompanies[2] = \"Oracle\";\ncompanies[3] = \"VMWare\";\ncompanies[4] = \"Raspberry Pi Foundation\";\n</code></pre> Declaration Excercise <p>Use what you\u2019ve learned to define 2 arrays: * Define an array of the primitive type int that will hold 5 elements and assign the values 10, 9, 8, 7, 6. * Define a Second array of the Object type Integer that will hold 5 elements and assign the values 20, 19, 18, 17, 16.</p> Declaration Answer <pre><code>import java.util.Arrays;\nimport java.util.stream.IntStream;\nimport java.util.stream.Stream;\n\npublic class ArrayDeclaration {\npublic static void partOne() {\nfinal int high = 10, low = 6;\n\n// Method 1 using procedural programming and a loop to assign values.\nint[] myInt = new int[high - low + 1];\nfor (int j=0, i = high; i &gt;= low; j++, i--) {\nmyInt[j] = i;\n}\nSystem.out.println(Arrays.toString(myInt));\n\n// Alternate method utilizing functional programming paradigm\nmyInt = IntStream.rangeClosed(low, high).map(i -&gt; high - i + low).toArray();\nSystem.out.println(Arrays.toString(myInt));\n}\n\npublic static void partTwo() {\nfinal int high = 20, low = 16;\n\n// Method 1 using procedural programming and a loop to assign values.\nInteger[] myInteger = new Integer[high - low + 1];\nfor (int j=0, i = high; i &gt;= low; j++, i--) {\nmyInteger[j] = i;\n}\nSystem.out.println(Arrays.toString(myInteger));\n\n// Alternate method utilizing functional programming paradigm\nmyInteger = Stream.iterate(high, i -&gt; i - 1).limit(5).toList().toArray(new Integer[0]);\nSystem.out.println(Arrays.toString(myInteger));\n}\n\npublic static void main(String[] args) {\npartOne();\npartTwo();\n}\n}\n</code></pre>"},{"location":"CIS-12/week_10.html#method-2---short-way","title":"Method 2 - Short way","text":"<pre><code>String[] companies = {\"Apple\", \"Microsoft\", \"Oracle\", \"VMWare\",\"Raspberry Pi Foundation\"};\n</code></pre>"},{"location":"CIS-12/week_10.html#access-the-elements-of-an-array","title":"Access the Elements of an Array","text":"<pre><code>System.out.println( companies[2] ); // Expected output would be \"Oracle\"\n</code></pre> Access Excercise <p>Given the Array definition below, how would you swap the values at index 0 and 1? <pre><code>int[] numbers= new int[5];\nnumbers[0] = 42;\nnumbers[1] = 13;\nnumbers[2] = 12;\nnumbers[3] = 7;\nnumbers[4] = 1;\n</code></pre></p> Answer <pre><code>int helper = numbers[0];\nnumbers[0] = numbers[1];\nnumbers[1] = helper;\n</code></pre> Swap Excercise <p>Given your answer above, can you write a generalized swap method that takes two integer arguments representing the indices to swap and swaps them?</p> Answer <pre><code>import java.util.Arrays;\n\npublic class ArrayTests {\npublic static &lt;T&gt; T[] swapImmutable(T[] arr, int i1, int i2) {\nif (i1 &lt; 0 || i1 &gt;= arr.length || i2 &lt; 0 || i2 &gt;= arr.length) {\nthrow new IllegalArgumentException(\"Invalid index values\");\n}\n\n// Create a copy of the original array to keep it immutable\nT[] newArray = Arrays.copyOf(arr, arr.length);\n\n// Use the swapOperation to swap the elements\nnewArray[i1] = arr[i2];\nnewArray[i2] = arr[i1];\n\nreturn newArray;\n}\n\n/**\n     * Swaps two indexes of an Object array in a procedural way.\n     * @param arr: Passed by reference, so mutable.\n     * @param i1: index 1\n     * @param i2 index 2\n     */\npublic static &lt;T&gt; void swap(T[] arr, int i1, int i2) {\nif (i1 &lt; 0 || i1 &gt;= arr.length || i2 &lt; 0 || i2 &gt;= arr.length) {\nthrow new IllegalArgumentException(\"Invalid index values\");\n}\n\nT value = arr[i2];\narr[i2] = arr[i1];\narr[i1] = value;\n}\n\npublic static void main(String[] args) {\nString[] myStringArr = new String[] {\"Hello\", \"Java\", \"Gurus\", \"Have a nice day!\"};\nSystem.out.println(Arrays.toString(myStringArr));\nArrayTests.swap(myStringArr, 0, 2);\nSystem.out.println(Arrays.toString(myStringArr));  // Showing that it is swapped and mutated.\nString[] newArr = ArrayTests.swapImmutable(myStringArr, 0, 2);\nSystem.out.println(Arrays.toString(myStringArr));  // Showing that is not mutated\nSystem.out.println(Arrays.toString(newArr));       // Showing that the new array swapped\n}\n}\n</code></pre>"},{"location":"CIS-12/week_10.html#change-elements-of-an-array","title":"Change Elements of an Array","text":"<pre><code>companies[2] = \"College of the Redwoods\";\nSystem.out.println( companies[2] ); // Expected output would be \"Ciollege of the Redwoods\"\n</code></pre>"},{"location":"CIS-12/week_10.html#array-length-and-accessing-the-last-element","title":"Array Length and Accessing the Last Element","text":"<pre><code>String lastElement = companies[companies.length - 1];  // -1 because remember computer scientist start counting at \"0\"\n</code></pre>"},{"location":"CIS-12/week_10.html#array-looping","title":"Array Looping","text":""},{"location":"CIS-12/week_10.html#basic-loop","title":"Basic Loop","text":"<pre><code>for(int i=0; i&lt;companies.length; i++) {\nSystem.out.println( companies[i] );\n}\n</code></pre>"},{"location":"CIS-12/week_10.html#enhanced-or-foreach-loop","title":"Enhanced OR foreach Loop","text":"<pre><code>for(String e : companies) {\nSystem.out.println( e );\n}\n</code></pre> Looping Exercise <p>The provided code template includes an array with numbers. Your task is to finish the program so that it prompts the user to input a number for searching within the array. If the array includes the specified number, the program should indicate the index where the number is found. However, if the number is not present in the array, the program should inform the user that the number was not located. <pre><code>import java.util.Scanner;\n\npublic class ArrayLooping {\npublic static Scanner s = new Scanner(System.in);\n\npublic static void main(String[] args) {\nint[] numbers = new int[4];\nnumbers[0] = 42;\nnumbers[1] = 13;\nnumbers[2] = 12;\nnumbers[3] = 7;\n}\n}\n</code></pre></p> Looping Answer <pre><code>import java.util.Scanner;\n\npublic class ArrayLooping {\npublic static Scanner s = new Scanner(System.in);\n\npublic static &lt;T&gt; int linearSearch(T[] arr, T search) {\nfor(int i=0; i &lt; arr.length; i++) {\nif(arr[i].equals(search)) {\nreturn i;\n}\n}\nreturn -1;\n}\n\npublic static void main(String[] args) {\nInteger[] numbers = new Integer[4];\nnumbers[0] = 42;\nnumbers[1] = 13;\nnumbers[2] = 12;\nnumbers[3] = 7;\n\nint numToFind = 13;\nint index = linearSearch(numbers, numToFind);\n\nif( index != -1 ) {\nSystem.out.printf(\"Found %d at %d%n\", numToFind, index);\n} else {\nSystem.out.printf(\"Failed to find %d%n\", numToFind);\n}\n\nnumToFind = 15;\nindex = linearSearch(numbers, numToFind);\nif( index != -1 ) {\nSystem.out.printf(\"Found %d at %d%n\", numToFind, index);\n} else {\nSystem.out.printf(\"Failed to find %d%n\", numToFind);\n}\n}\n}\n</code></pre>"},{"location":"CIS-12/week_10.html#multidimensional-arrays","title":"Multidimensional Arrays","text":""},{"location":"CIS-12/week_10.html#declaring","title":"Declaring","text":"<pre><code>String[][] myCompanies = { {\"Apple\", \"Microsoft\"}, {\"Facebook\", \"Twitter\"} };\n</code></pre>"},{"location":"CIS-12/week_10.html#accessing","title":"Accessing","text":"<pre><code>System.out.println(myCompanies[1][0]); // Expected output \"Facebook\"\n</code></pre>"},{"location":"CIS-12/week_10.html#looping","title":"Looping!","text":"<pre><code>for (int i = 0; i &lt; myCompanies.length; ++i) {\nfor(int j = 0; j &lt; myCompanies[i].length; ++j) {\nSystem.out.println(myCompanies[i][j]);\n}\n}\n</code></pre> Last Exercise <p>Implement a method <code>public static void printInStars(int[] array)</code> in a class named <code>Printer</code> to display rows of stars, with each row having a number of stars determined by the corresponding element in the given array.</p> Last Answer <pre><code>import java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\npublic class Printer {\npublic static void printInStarsWithFormat(int[] array) {\nSystem.out.println(\"-- The dynamic format and replace method. --\");\nfor (int value : array) {\nSystem.out.print(String.format(\"%\" + value + \"s%n\", \"\").replace(' ', '*'));\n}\n\nSystem.out.println(\"-- The String repeat char method. --\");\nfor (int value : array) {\nSystem.out.printf(\"%s%n\", \"*\".repeat(value));\n}\n}\npublic static void printInStars(int[] array) {\nfor (int value : array) {\nfor (int i = 0; i &lt; value; i++) {\nSystem.out.print(\"*\");\n}\nSystem.out.println(); // Move to the next line after each row of stars\n}\n}\n\npublic static void printInStarsFunctional(int[] array) {\nString stars = IntStream.of(array)\n.mapToObj(count -&gt; \"*\".repeat(count))\n.collect(Collectors.joining(\"\\n\"));\n\nSystem.out.println(stars);\n}\n\npublic static void main(String[] args) {\nint[] starCounts = {3, 5, 2, 7, 4};\nSystem.out.println(\"Method 1 - Procedural nested loops\");\nprintInStars(starCounts);\nSystem.out.println(\"Method 2 - Procedural loop but inner loop replaced with format specifiers\");\nprintInStarsWithFormat(starCounts);\nSystem.out.println(\"Method 3 - Functional way of thinking\");\nprintInStarsFunctional(starCounts);\n}\n}\n</code></pre>"},{"location":"CIS-12/week_11py.html","title":"Week 11 - Text Analysis &amp; Generation","text":""},{"location":"CIS-12/week_11py.html#markov-chain-text-analysis-with-primitive-python","title":"Markov Chain Text Analysis with primitive Python","text":""},{"location":"CIS-12/week_11py.html#introduction-to-markov-chains","title":"Introduction to Markov Chains","text":"<p>A Markov chain is a way to predict what comes next in a sequence based on the current state, without considering the past.</p> <p>Think of it like this: if you have a bunch of text, you look at each word and see what words usually follow it. For example, after \u201cI want,\u201d you might often see \u201cto eat\u201d or \u201cto sleep.\u201d</p> <p>When you want to generate new text, you start with a word and pick the next word based on what usually follows it. You keep doing this to create a sentence that sounds somewhat natural, but it might not always make total sense.</p> <p>So, basically, a Markov chain helps create random text that resembles real conversation by using patterns in word sequences.</p> <ul> <li>Markov Chains are VERY primitive examples of one part of LLMs.</li> </ul> <p>Language models use something kinda like Markov chains to build attention layers to predict the next word in a sequence based on previous words and attention given to them. By analyzing the patterns in a text, the LLMs can learn to generate new text that mimics the original style, vocabulary, and even sentence structure.</p> <ul> <li>Today, we will be taking small steps toward building our own SIMPLE Markov chain generator.</li> </ul>"},{"location":"CIS-12/week_11py.html#unique-words","title":"Unique Words","text":"<ul> <li> <p>Counting Unique Words in a text file, though not with any finesse. <pre><code>unique_words = {}\nfor line in open(filename):\n    for word in line.split():\n        unique_words[word] = 1\n\nprint(len(unique_words))\n</code></pre></p> </li> <li> <p>Relevance to Markov Objective: This is a basic step in text analysis, allowing us to understand the vocabulary richness of a text.</p> </li> </ul>"},{"location":"CIS-12/week_11py.html#dealing-with-punctuation-an-intro-to-data-wrangling","title":"Dealing with Punctuation, an Intro to Data Wrangling","text":"<pre><code>import unicodedata  # Imported unicodedata so I could find punctuation marks (unicodedata.category that startswith 'P')\n\ndef get_punctuation(filename):\n    punc_marks = {}\n    with open(filename) as fp:\n        for line in fp:\n            for char in line:\n                category = unicodedata.category( char )\n                if category.startswith( 'P' ):\n                    punc_marks[char] = 1\n    return ''.join(punc_marks)\n\npunctuation = get_punctuation('files/hyde.txt')\n\ndef split_line(line):\n    return line.replace('\u2014', ' ').split()\n\ndef clean_word(word, punctuation):\n    return word.strip(punctuation).lower()\n</code></pre> <ul> <li>Relevance to Markov Objective: Cleaning the text ensures accurate word counting and analysis, better than above!.</li> </ul>"},{"location":"CIS-12/week_11py.html#word-frequencies","title":"Word Frequencies","text":"<p><pre><code>word_counter = {}\nfor line in open(filename):\n    for word in split_line(line):\n        word = clean_word(word)\n        word_counter[word] += word_counter.get(word, 0)\n\nprint_most_common(word_counter)  # This method is below!\n</code></pre> * Relevance to Markov Objective: Understanding word frequencies helps identify important words and themes in a text.</p>"},{"location":"CIS-12/week_11py.html#optional-parameters","title":"Optional Parameters","text":"<p><pre><code>def print_most_common(word_counter, num=5):  # Notice num is optional. If you pass no arg to num it defaults to 5\n    items = sorted(word_counter.items(), key=lambda x: x[1], reverse=True)\n    for word, freq in items[:num]:\n        print(freq, word, sep='\\t')\n</code></pre> * Relevance to Markov Objective: Optional parameters make functions more flexible and reusable, but there is no relevance to Markov TA.</p>"},{"location":"CIS-12/week_11py.html#dictionary-subtraction","title":"Dictionary Subtraction","text":"<ul> <li>Here we want to remove the words that aren\u2019t considered valid words by our language standards. <pre><code>def subtract(d1, d2):\n    res = {}\n    for key in d1:\n        if key not in d2:\n            res[key] = d1[key]\n    return res\n\n# OR\n\ndef subtract_eff(d1, d2):\n    return {key: d1[key] for key in d1 if key not in d2}\n\ndiff = subtract(word_counter, valid_words)  # Valid words would be loaded by a dictionary file.\nprint_most_common(diff)\n</code></pre></li> <li>Relevance: This technique can be used for spell-checking, identifying uncommon words, or finding unique vocabulary.</li> </ul>"},{"location":"CIS-12/week_11py.html#random-numbers","title":"Random Numbers","text":"<p><pre><code>weights = word_counter.values()  # i.e. the frequency of each word\nrandom_words = random.choices(words, weights=weights, k=6)  # k=6 means select 6 words\nprint(' '.join(random_words))  # print the sentence.\n</code></pre> * Relevance to Markov Objective Only relevant to show that random text generation, even based on word frequency, sounds way more like gibberish.</p>"},{"location":"CIS-12/week_11py.html#bigrams","title":"Bigrams","text":"<ul> <li>A bigram is a sequence of two consecutive words or elements in a text or dataset, often used for analyzing relationships and patterns in language. <pre><code>window = []\n\ndef count_bigram(bigram):\n    key = tuple(bigram)\n    bigram_counter[key] = bigram_counter.get(key, 0) + 1\n\ndef process_word(word):\n    window.append(word)\n\n    if len(window) == 2:\n        count_bigram(window)\n        window.pop(0)\n\nbigram_counter = {}\nfor line in open(filename):\n    for word in split_line(line):\n        word = clean_word(word)\n        process_word(word)\n\nprint_most_common(bigram_counter)\n</code></pre></li> <li>Relevance to Markov Objective: Analyzing bigrams helps us understand word associations and patterns.</li> </ul>"},{"location":"CIS-12/week_11py.html#markov-analysis","title":"Markov Analysis","text":"<p><pre><code>successor_map = {}\n\ndef add_bigram(bigram):\n    first, second = bigram\n    successor_map[first].setdefault(first, []).append(second)\n\ndef process_word_bigram(word):\n    window.append(word)\n\n    if len(window) == 2:\n        add_bigram(window)\n        window.pop(0)\n\nfor line in open(filename):\n    for word in split_line(line):\n        word = clean_word(word)\n        process_word_bigram(word)\n\nprint(successor_map['going'])\n</code></pre> * Relevance It Is: Markov analysis is the foundation for generating text by predicting the next word based on the current word or sequence of words.</p>"},{"location":"CIS-12/week_11py.html#generating-text","title":"Generating Text","text":"<p><pre><code>for i in range(10):\n    successors = successor_map[word]\n    word = random.choice(successors)\n    print(word, end=' ')\n</code></pre> * Relevance: This is the final goal of the lecture and generates text that mimics the original style. It\u2019s still gibberish, however!</p>"},{"location":"CIS-12/week_12.html","title":"Week 12 - Objects","text":""},{"location":"CIS-12/week_12.html#object-oriented-programming","title":"Object Oriented Programming","text":"<ul> <li>It\u2019s Just the Beginning, but WHY???</li> </ul>"},{"location":"CIS-12/week_12.html#we-can-make-models-and-patterns-that-help-us-solve-problems","title":"We Can Make Models, and Patterns, that Help Us Solve Problems","text":""},{"location":"CIS-12/week_12.html#favor-composition-over-inheritence","title":"Favor Composition over Inheritence","text":"<ul> <li>Wait, what\u2019s Inheritance? </li> <li>OK, that makes sense, but what is Composition? <ul> <li>But how can I favor composition?<ul> <li>One way is Interfaces</li> </ul> </li> </ul> </li> </ul>"},{"location":"CIS-12/week_12.html#walk-through-lab-code","title":"Walk Through Lab Code","text":"<p>Lab 10</p> classDiagram class WeatherStation WeatherStation : -URL url WeatherStation : -List~Display~ displays WeatherStation : -Gson gson WeatherStation : -float temperature WeatherStation : -float humidity WeatherStation : -float pressure WeatherStation : +WeatherStation() WeatherStation : +registerDisplay(display) WeatherStation : +removeDisplay(display) WeatherStation : +notifyDisplays() WeatherStation : +getTemperature() float WeatherStation : +getHumidity() float WeatherStation : +getPressure() float WeatherStation : +measure() class I_Display I_Display : update() I_Display : display() class CurrentConditions CurrentConditions: -WeatherStation ws CurrentConditions : -float temperature CurrentConditions : -float humidity CurrentConditions : +CurrentConditions(weatherstation) CurrentConditions : update() CurrentConditions : display() class StatisticsDisplay StatisticsDisplay: -WeatherStation ws StatisticsDisplay : -float temperatureMin StatisticsDisplay : -float temperatureMax StatisticsDisplay : -float temperatureTotal StatisticsDisplay : -int numReadings StatisticsDisplay : +StatisticsDisplay(weatherstation) StatisticsDisplay : update() StatisticsDisplay : display() class ForecastDisplay ForecastDisplay: -WeatherStation ws ForecastDisplay : -float currentPressure ForecastDisplay : -float lastPressure ForecastDisplay : +ForecastDisplay(weatherstation) ForecastDisplay : update() ForecastDisplay : display() I_Display &lt;|.. CurrentConditions  I_Display &lt;|.. StatisticsDisplay I_Display &lt;|.. ForecastDisplay WeatherStation --* CurrentConditions WeatherStation --* StatisticsDisplay WeatherStation --* ForecastDisplay I_Display --* WeatherStation"},{"location":"CIS-12/week_12py.html","title":"Week 12 - Files &amp; Databases","text":""},{"location":"CIS-12/week_12py.html#file-manipulation-and-persistent-storage-in-python","title":"File Manipulation and Persistent Storage in Python","text":""},{"location":"CIS-12/week_12py.html#objectives","title":"Objectives","text":"<p>By the end of this lesson, students will: * Understand how to work with file names and paths using the <code>os</code> and <code>pathlib</code> modules. * Master string formatting using f-strings. * Read and write YAML files using the <code>yaml</code> module. * Use the <code>shelve</code> module to create and manipulate persistent key-value stores. * Perform file equivalency checks using hash functions. * Walk through directories and perform operations on files.</p>"},{"location":"CIS-12/week_12py.html#file-names-and-paths","title":"File Names and Paths","text":"<ul> <li> <p>Absolute Path: An absolute path is the whole path to a file or directory from the root of the file system (Think C: on Windows or / on Nix based systems). It specifies the exact location of the file or directory, starting from the root directory. Absolute paths are unambiguous and always point to the same location, regardless of the current working directory.</p> <ul> <li>Example: <code>/home/viable/documents/a_file.txt</code> or <code>C:\\Users\\viable\\Documents\\file.txt</code></li> </ul> </li> <li> <p>Relative Path: A relative path specifies the location of a file or directory relative to the current working directory. It is NOT fixed and can change based on where your program is executed. Relative paths are useful when you want to make file navigation more flexible within your project directory.</p> <ul> <li>Example: <code>./documents/file.txt</code> or <code>../file.txt</code>.</li> </ul> </li> <li> <p>Note in the code below: <code>import os and pathlib</code>, <code>os.path.join</code>, overloaded <code>/</code> path operator, <code>path.resolve()</code> <pre><code>import os\nfrom pathlib import Path\n\n# Using os.path to join and get absolute paths\nfile_name = 'example.txt'\ndir_path = '/home/user/documents'\nfull_path = os.path.join(dir_path, file_name)\nprint(\"Full path using os.path:\", os.path.abspath(full_path))\n\n# Using pathlib for path manipulations\npath = Path('/home/user') / 'documents' / file_name\nprint(\"Full path using pathlib:\", path.resolve())\n</code></pre></p> </li> <li>Note 1: The resolve method returns an absolute path for the path object after resolving any symbolic links and or relative path entries.</li> <li>Note 2: <code>/</code> is overloaded by overloading the <code>__truediv__(self, scalar):</code> method in pathlib\u2019s Path class.</li> </ul>"},{"location":"CIS-12/week_12py.html#string-formatting-with-f-strings-a-review","title":"String Formatting with f-strings (A Review)","text":"<ul> <li>As you know by now, F-strings are a concise way to format strings using expressions inside curly braces <code>{}</code> preceded by an <code>f</code> or <code>F</code>.</li> <li>They are more convenient because they are easier to read and write compared to older formatting methods like printf used in C based languages.</li> <li> <p>F-Strings allow inline variable or expression evaluation directly in the string, which makes the output more human readable.</p> </li> <li> <p>Note in the code below: The <code>f</code>, the <code>{file_name}</code>, the <code>{age + 42}</code> expression.   <pre><code>name = \"Alice\"\nage = 30\nprint(f\"Hello, {name}! You are {age + 42} years old.\")\n\nfile_path = \"/home/user/documents\"\nfile_name = \"data.txt\"\nprint(f\"The file {file_name} is located in {file_path}.\")\n</code></pre></p> </li> </ul>"},{"location":"CIS-12/week_12py.html#reading-and-writing-yaml-files","title":"Reading and Writing YAML Files","text":"<ul> <li>YAML What Is It?: Stands for Yet Another Markup Language</li> <li> <p>It is a human-readable way for presenting, structuring, and storing data in a file or data-store.</p> <ul> <li>In the output.yaml file below, we can see how this code is formatted.</li> </ul> </li> <li> <p>Note in the code below: <code>import yaml</code> module, <code>load</code> vs <code>safe_load</code>, <code>dump</code> vs <code>safe_dump</code>.   <pre><code>import yaml\n\n# Writing YAML data to a file\ndata = {'name': 'John', 'age': 25, 'skills': ['Python', 'Machine Learning']}\nwith open('output.yaml', 'w') as file:\n    yaml.dump(data, file)\n\n# Reading YAML data from a file\nwith open('output.yaml', 'r') as file:\n    loaded_data = yaml.safe_load(file)\nprint(\"Loaded YAML data:\", loaded_data)\n</code></pre></p> </li> <li>In the <code>yaml</code> module, <code>load</code> can parse any YAML, including potentially unsafe types like Python objects, while <code>safe_load</code> only parses standard YAML types to avoid security risks.</li> <li>Similarly, <code>dump</code> can serialize Python objects into YAML with more flexibility, while <code>safe_dump</code> restricts serialization to standard YAML types to ensure safety. <pre><code>import yaml\nimport os\n\n# Define a custom constructor that could execute system commands\ndef run_constructor(loader, node):\n    command = loader.construct_scalar(node)\n    os.system(command)  # This is the dangerous part, but it does happen!\n\n# Register the custom constructor with a YAML tag\nyaml.add_constructor('!run', run_constructor)\n\n# Arbitrary YAML now allowed to run system commands!\n# This could come from a YAML file, not just this string.\nmalicious_yaml = \"\"\"\nrun: !run \"echo 'This is malicious code execution!'\"\n\"\"\"\n\nyaml.load(malicious_yaml, Loader=yaml.FullLoader)\n</code></pre></li> </ul>"},{"location":"CIS-12/week_12py.html#using-shelve-for-persistent-storage","title":"Using Shelve for Persistent Storage","text":"<ul> <li>Shelve is a simple way to store Python objects persistently</li> <li>It is Key/Value based just like a Python dictionary</li> <li>Useful for small/medium sized data that doesn\u2019t requrie a database.</li> <li>Common uses:<ul> <li>Storing settings, preferences, and application state</li> <li>Caching common data to reduce computational overhead.</li> <li>Persisting user data for small data projects.</li> </ul> </li> <li>Example:   <pre><code>import shelve\n\n# Writing to a shelf\nwith shelve.open('data_store') as db:\n    db['username'] = 'john_doe'\n    db['is_active'] = True\n    db['last_login'] = '2024-11-08'\n\n# Reading from a shelf\nwith shelve.open('data_store') as db:\n    print(\"Username:\", db['username'])\n    print(\"Is active:\", db['is_active'])\n    print(\"Last login:\", db['last_login'])\n</code></pre></li> </ul>"},{"location":"CIS-12/week_12py.html#checking-file-equivalency-using-hash-functions","title":"Checking File Equivalency Using Hash Functions","text":"<ul> <li>We can use MD5 hashes to compare the contents of 2 files for equality. HOW?</li> <li>We use the hashlib md5 algorithm to hash each files contents. WHY this works?</li> <li>MD5 accidental collisions are extremely rare due to the vast number of possible hash values it can produce.<ul> <li>MD5 generates a 128-bit hash, which means it can produce 2^128 different hash values.</li> <li>This is an incredibly large number, and the probability of two random inputs producing the same hash value is incredibly small. \u00a0 </li> <li>To illustrate this, consider the following analogy:<ul> <li>Imagine you have a vast number of pigeonholes (representing the possible hash values) and a much smaller number of pigeons (representing the inputs). The probability of two pigeons ending up in the same pigeonhole is very small.</li> </ul> </li> </ul> </li> <li>Code Items to Note: <code>import hashlib</code>, <code>def md5_digest</code>, mode <code>rb</code>.   <pre><code>import os\n\ndef find_txt_files(directory, depth=5):\n  for root, dirs, files in os.walk(directory):\n    if depth == 0:\n      break\n    for file in files:\n      if file.endswith('.txt'):\n        print(os.path.join(root, file))\n    depth -= 1\n\nroot_dir = \"/path/to/your/root/directory\"\nfind_txt_files(root_dir)\n</code></pre></li> </ul>"},{"location":"CIS-12/week_12py.html#walking-through-directories","title":"Walking Through Directories","text":"<ul> <li> <p>Let\u2019s just look at the code, as it is pretty self explanatory!!!</p> </li> <li> <p>The Recursive way   <pre><code>#!/usr/bin/env python3\nimport os\n\ndef recursive_dir_walk(directory, max_depth=5):\n    if max_depth == 0:\n        return\n\n    for entry in os.listdir(directory):\n        full_path = os.path.join(directory, entry)\n        if os.path.isdir(full_path):\n            recursive_dir_walk(full_path, max_depth - 1)\n        elif entry.endswith(\".txt\"):\n            print(full_path)\n\nroot_directory = \"/Users/trevorhartman/CR/thartmanoftheredwoods.mkdocs\"\nrecursive_dir_walk(root_directory)\n</code></pre></p> </li> <li> <p>The os.walk way <pre><code>#!/usr/bin/env python3\n\nimport os\n\ndef non_recursive_dir_walk(directory, max_depth=4):\n    for root, dirs, files in os.walk(directory, topdown=True):\n        depth = root.count(os.sep) - directory.count(os.sep)\n        if depth &gt;= max_depth:\n            # Prune directories at the max depth\n            del dirs[:]\n\n        for file in files:\n            if file.endswith(\".txt\"):\n                print(os.path.join(root, file))\n\nroot_directory = \"/Users/trevorhartman/CR/thartmanoftheredwoods.mkdocs\"\nnon_recursive_dir_walk(root_directory)\n</code></pre></p> </li> </ul>"},{"location":"CIS-12/week_12py.html#exercises","title":"Exercises","text":"<ol> <li> <p>Replace Word in File: Write a function <code>replace_in_file</code> that takes a target word, a replacement word, and two file paths as arguments. It should read the contents of the first file, replace occurrences of the target word, and write the modified contents to the second file.</p> <ul> <li>Hint: Use <code>open()</code> and <code>with</code> statements for file operations.</li> <li>Example:  <pre><code>replace_in_file('oldword', 'newword', 'source.txt', 'destination.txt')\n</code></pre></li> </ul> </li> <li> <p>YAML Configuration Loader: Write a script that reads a YAML configuration file and prints out a formatted message for each configuration setting. If the setting is a dictionary, print its keys and values.</p> <ul> <li>Example:  <pre><code># Config example: {'database': {'host': 'localhost', 'port': 3306}}\nprint_config('config.yaml')\n</code></pre></li> </ul> </li> <li> <p>Directory Image Finder: Create a function <code>find_images_in_directory</code> that takes a directory path and a list of image extensions (e.g., <code>['.png', '.jpg']</code>). Use <code>os.walk</code> to find and list all image files in the directory and its subdirectories.</p> <ul> <li>Example:  <pre><code>find_images_in_directory('/path/to/images', ['.png', '.jpg'])\n</code></pre></li> </ul> </li> </ol>"},{"location":"CIS-12/week_12py_async.html","title":"Week 12 - Async &amp; Await","text":""},{"location":"CIS-12/week_12py_async.html#asyncio-in-python","title":"AsyncIO in Python","text":""},{"location":"CIS-12/week_12py_async.html#definition","title":"Definition","text":"<p>The asyncio module is a library for writing concurrent code using the async/await syntax, enabling single-threaded, cooperative multitasking.</p>"},{"location":"CIS-12/week_12py_async.html#use-case","title":"Use Case","text":"<p>Primarily used for I/O-bound operations (network requests, file reads/writes) where tasks spend a significant amount of time waiting for external resources.</p>"},{"location":"CIS-12/week_12py_async.html#when-to-use","title":"When to Use","text":"<p>When you have many tasks that involve waiting, and you want to improve responsiveness and efficiency without the overhead of threads or processes.</p>"},{"location":"CIS-12/week_12py_async.html#why-its-better-than-threads-for-io-bound-tasks","title":"Why it\u2019s Better (than threads for I/O bound tasks)","text":"<ul> <li>Reduced Overhead: Avoids the context switching and memory overhead associated with threads, leading to better performance for I/O-bound tasks.</li> <li>Predictable Execution: Cooperative multitasking allows for more control over task execution, reducing race conditions and deadlocks that can occur with threads.</li> <li>Simplified Concurrency: async/await simplifies the syntax and logic of concurrent programming compared to traditional thread management.</li> </ul>"},{"location":"CIS-12/week_12py_async.html#explicate-a-code-example","title":"Explicate a Code Example","text":"<pre><code># Sample async await block, websockets is a Python module for handling web communication.\n\nasync with websockets.serve(view_log, host, port):\n    await asyncio.Future()\n</code></pre>"},{"location":"CIS-12/week_12py_async.html#explanation-of-example","title":"Explanation of example:","text":"<ul> <li> <p><code>async with websockets.serve(view_log, host, port):</code>:</p> <ul> <li>Establishes a WebSocket server.</li> <li><code>view_log</code> is the function handling incoming WebSocket connections.</li> <li><code>host</code> and <code>port</code> define the server\u2019s address.</li> <li><code>async with</code> ensures the server cleanly shuts down when exiting the block.</li> </ul> </li> <li> <p><code>await asyncio.Future():</code>:</p> <ul> <li>Creates a <code>Future</code> object, representing a value that will become available later.</li> <li><code>await</code> suspends execution until the <code>Future</code> is resolved (which never happens in this case).</li> <li>This effectively keeps the server running indefinitely, as the server will not exit this line of code.</li> </ul> </li> </ul> <p>This code starts a WebSocket server and then enters an infinite wait, keeping the server alive. In the context of Python\u2019s <code>asyncio</code> and <code>Future</code> objects, resolving a Future means setting the result or exception associated with that <code>Future</code>.</p> <ul> <li> <p>Future Object:</p> <ul> <li>A <code>Future</code> is a placeholder for a result that will become available at some point in the future.</li> <li>It represents the eventual outcome of an asynchronous operation.</li> </ul> </li> <li> <p>Resolving a Future:</p> <ul> <li>Setting a Result: When the asynchronous operation completes successfully, the result is set using the <code>set_result()</code> method of the <code>Future</code> object. This signals that the value is now available.</li> <li>Setting an Exception: If the asynchronous operation encounters an error, an exception is set using the <code>set_exception()</code> method. This indicates that the operation failed.</li> <li>Once a Future is resolved, it cannot be resolved again.</li> <li>When a Future is awaited, the await expression will return the result of the future, or raise the exception that was set.</li> </ul> </li> <li> <p>Why it Matters:</p> <ul> <li><code>await</code> expressions suspend execution until a <code>Future</code> is resolved.</li> <li>Resolving a <code>Future</code> triggers the resumption of the coroutine that was waiting for it.</li> <li>This mechanism allows asynchronous tasks to communicate and synchronize their execution.</li> </ul> </li> </ul>"},{"location":"CIS-12/week_12py_async.html#the-magic-behind-await-and-future-of-the-asyncio-event-loop","title":"The Magic Behind <code>await</code> and <code>Future</code> of the <code>asyncio</code> Event Loop","text":"<ol> <li> <p>Coroutine Suspension:</p> <ul> <li>When a coroutine encounters an <code>await</code> expression, it doesn\u2019t just stop. Instead, it pauses its execution and yields control back to the event loop.</li> <li>This pausing involves saving the coroutine\u2019s current state:<ul> <li>The current execution frame (local variables, etc.).</li> <li>The instruction pointer (the exact location in the code where execution should resume).</li> </ul> </li> <li>This state is stored internally by the coroutine object itself.</li> </ul> </li> <li> <p>Future and Callbacks:</p> <ul> <li>The <code>await</code> expression typically involves a <code>Future</code> (or something that acts like one).</li> <li>When a coroutine <code>await</code>s a <code>Future</code>, it registers a callback function with that <code>Future</code>. This callback is essentially \u201crun this coroutine when the Future is resolved.\u201d</li> <li>This callback is a special function that knows how to resume the waiting coroutine.</li> <li>The Future object stores a list of these callbacks.</li> </ul> </li> <li> <p>Event Loop Coordination:</p> <ul> <li>The event loop is the heart of <code>asyncio</code>. It manages the execution of coroutines and I/O operations.</li> <li>When an I/O operation completes (e.g., data arrives from a network socket), the event loop is notified.</li> <li>The event loop then checks if any <code>Future</code> objects are associated with the completed operation.</li> <li>When the Future is resolved, the loop then calls all of the callbacks that are stored within the future.</li> <li>The callback then tells the event loop to schedule the coroutine to continue running.</li> </ul> </li> <li> <p>Coroutine Resumption:</p> <ul> <li>When the <code>Future</code> is resolved, the registered callback is executed.</li> <li>This callback tells the event loop to resume the coroutine.</li> <li>The event loop retrieves the saved state of the coroutine and resumes its execution from the exact point where it was suspended (the <code>await</code> expression).</li> <li>This resumption is done by the event loop calling the coroutine\u2019s <code>.send()</code> method, which sends the result of the future into the coroutine. If an exception was set, then the <code>.throw()</code> method is called on the coroutine.</li> </ul> </li> </ol> <p>The <code>Future</code> acts as a communication channel between the asynchronous operation and the waiting coroutine. The event loop acts as the orchestrator, managing the suspension and resumption of coroutines based on the state of <code>Future</code> objects. Essentially you have an Observer of Obersers pattern where the Future is the Subject of the Coroutine Observers while simultaneously being an Observer of the asyncio event loop.</p>"},{"location":"CIS-12/week_12py_async.html#sequence-diagram-of-await-and-future","title":"Sequence Diagram of await and Future","text":"sequenceDiagram     participant Coroutine     participant Future     participant EventLoop      Coroutine-&gt;&gt;Future: await Future     activate Coroutine     Coroutine-&gt;&gt;Future: Register Callback (resume coroutine)     Coroutine-&gt;&gt;EventLoop: Yield Control (suspend)     deactivate Coroutine      EventLoop-&gt;&gt;ExternalIO: Perform I/O Operation      ExternalIO--&gt;&gt;EventLoop: I/O Complete      EventLoop-&gt;&gt;Future: set_result() or set_exception()     Future-&gt;&gt;EventLoop: Notify Callbacks      EventLoop-&gt;&gt;Coroutine: Resume Coroutine (send/throw)     activate Coroutine     Coroutine--&gt;&gt;Future: Result/Exception received     Coroutine-&gt;&gt;EventLoop: Yield control or Continue     deactivate Coroutine"},{"location":"CIS-12/week_13pyCh14.html","title":"Week 13 - Introduction to Classes &amp; Attributes","text":""},{"location":"CIS-12/week_13pyCh14.html#introduction-to-programmer-defined-types-aka-classes","title":"Introduction to Programmer-Defined Types AKA Classes","text":"<p>Objective:</p> <p>By the end of this lesson, students should be able to:</p> <ol> <li>Create a simple class in Python</li> <li>Understand attributes and instance variables</li> <li>Manipulate class instances using functions</li> </ol>"},{"location":"CIS-12/week_13pyCh14.html#what-is-a-class","title":"What is a Class?","text":"<ol> <li>Explanation <ul> <li>A class as a blueprint for creating objects in all OOP languages, including Python.</li> <li>A class organizes both code and data using programmer-defined types.<ul> <li>Data is associated with each object instance via instance variables or attributes.</li> <li>Code and actions are encapsulated in class methods.</li> </ul> </li> </ul> </li> <li>Code Activity <ul> <li>Run the following code and observe the output.  <pre><code>class Book:  # User defined type\n\"\"\"Represents a book in a library.\"\"\"\n\n# Creating an instance of the Book class\nmy_book = Book()  # Calling the constructor\nprint(type(my_book))  # Output: &lt;class '__main__.Book'&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"CIS-12/week_13pyCh14.html#creating-and-using-attributes","title":"Creating and Using Attributes","text":"<ol> <li>Explanation <ul> <li>One way of adding and accessing attributes/instance variables in a class is using dot notation.</li> <li>Attributes are like variables, holding data, that belong to an object or an instance of a class.<ul> <li>Hence why they are sometimes called instance variables.</li> </ul> </li> </ul> </li> <li>Example <pre><code>class Book:\n\"\"\"Represents a book in a library.\"\"\"\n\nmy_book = Book()\nmy_book.title = \"1984\"\nmy_book.author = \"George Orwell\"\nmy_book.year = 1949\n\n# Accessing attributes\nprint(f\"{my_book.title} by {my_book.author}, published in {my_book.year}.\")\n</code></pre></li> <li>Activity <ul> <li>How could we add genre, pages, publisher, and isbn attributes to this class?</li> </ul> </li> </ol>"},{"location":"CIS-12/week_13pyCh14.html#functions-and-object-instances","title":"Functions and Object Instances","text":"<ol> <li>Explanation <ul> <li>We can create functions to display or manipulate object/instance data.</li> <li>In fact, objects can be passed to function parameters just like any other data-type.<ul> <li>It is critical to know, that objects passed as parameters is really just passing by reference.<ul> <li>The object\u2019s memory address is copied to the parameter, hence they point at the same object.</li> <li>The object, nor its attributes, nor its attribute data is copied. Only the address is passed.</li> <li>Thus, the object can be mutated.</li> <li>This is different than passing primitive data types or immutable data types.</li> </ul> </li> </ul> </li> </ul> </li> <li>Code Example <pre><code>def display_book(book):\n    print(f\"{book.title} by {book.author}, published in {book.year}.\")\n\nmy_book = Book()\nmy_book.title = \"The Great Gatsby\"\nmy_book.author = \"F. Scott Fitzgerald\"\nmy_book.year = 1925\n\ndisplay_book(my_book)\n</code></pre></li> <li>Activity <ul> <li>How would you modify the <code>display_book</code> function to include additional information, like genre or isbn?</li> </ul> </li> </ol>"},{"location":"CIS-12/week_13pyCh14.html#objects-as-return-values","title":"Objects as Return Values","text":"<ol> <li>Explanation <ul> <li>Below I create a function that constructs and returns an object.</li> <li>Note that I only use parameters to set initial attribute values after I instantiate the object <code>book</code>.</li> <li>Note, that I return the object <code>book</code> with return just like all other types we\u2019ve dealt with in Python.<ul> <li>This returns the memory address of the object, effectively copying the reference or pointer, so whatever variable receives this reference will now point at the object. <code>new_book</code> in this case.</li> </ul> </li> </ul> </li> <li>Code Example <pre><code>def create_book(title, author, year):\n    book = Book()  # Creating an instance of Book (i.e. an object)\n    book.title = title  # Setting the title instance variable / attribute\n    book.author = author\n    book.year = year\n    return book\n\nnew_book = create_book(\"To Kill a Mockingbird\", \"Harper Lee\", 1960)  # Returned the address of the object to new_book, so new_book now points at the object.\ndisplay_book(new_book)\n</code></pre></li> <li>Create Activity <ul> <li>Can you write a similar function for a <code>Movie</code> class?</li> </ul> </li> </ol>"},{"location":"CIS-12/week_13pyCh14.html#mutability-and-modifying-objects","title":"Mutability and Modifying Objects","text":"<ol> <li>Explanation<ul> <li>We\u2019ve learned the data types of <code>strings</code> and <code>tuples</code> are immutable objects, meaning once assigned their attributes can\u2019t be changed. To change these, we must copy the original object.</li> <li>Most objects are mutable, however. Mutability refers to being able to change the attributes of an object either directly or via its methods.</li> <li>The implication of being able to modify an object is that methods can change the objects state or attributes without us being aware of the change.</li> <li>For mutable data types, we have to be careful to control the attribute change in our code to prevent unexpected behavior.</li> <li>Mutable types can make algorithms faster, as copying objects is NOT necessary to make updates.</li> <li>Mutability however does preclude objects from being keys in data-structurs like dictionaries, as mutable types are not hashable.</li> </ul> </li> <li>Code Example <pre><code>def update_year(book, new_year):\n    book.year = new_year\n\nupdate_year(new_book, 1961)\ndisplay_book(new_book)  # Year is now updated to 1961\n</code></pre></li> <li>Activity <ul> <li>Can you write a function to update your Book object\u2019s genre attribute?</li> </ul> </li> </ol>"},{"location":"CIS-12/week_13pyCh14.html#copying-objects-and-pure-functions","title":"Copying Objects and Pure Functions","text":"<ol> <li>Explanation<ul> <li>Since user defined types create mutable objects, we sometimes need a way to preserve the objects data or its state (i.e. the state/value of the objects attributes).<ul> <li>We can preserve an objects state utilizing the <code>copy</code> module, which does a deep copy of an object and its attributes, and returns a new equivalent object.</li> <li>A programmer cann now modify the object copy without concern about modifying the original object (At the expense of a full copy, of course).</li> </ul> </li> <li>Introduce the <code>copy</code> module to duplicate objects.</li> <li>Pure Functions are functions that don\u2019t modify the original object passed as a parameter, and the copy module is one way to gurantee a function can be a pure function.</li> </ul> </li> <li>Code Example <pre><code>from copy import copy\n\nbook_copy = copy(new_book)\nupdate_year(book_copy, 2020)\ndisplay_book(new_book)   # Original book remains unchanged\ndisplay_book(book_copy)  # Copy has the updated year\n</code></pre></li> <li>Let\u2019s practice <ul> <li>Create a method for your <code>Movie</code> class that can modify a movie object by adding a <code>producer</code> without changing the original movie object.</li> </ul> </li> </ol>"},{"location":"CIS-12/week_13pyCh14.html#wrap-up","title":"Wrap-Up","text":"<ul> <li>Why use classes?<ul> <li>To organize and structure code and data.</li> <li>To isolate human concepts into classes.</li> <li>To encapsulate code that modifies an object of the user defined class type.</li> </ul> </li> <li>Remember pure functions are functions that DON\u2019T modify the original object passed to it via parameters. Impure functions do alter the objects passed to them.<ul> <li>The implications of pure functions is that we can use them to test object state without ever changing the original object. This comes at decreased performance, however as copies take memory and time.</li> <li>Impure functions can alter object state and make many algorithms faster due to not needing to copy objects, however altering the object can introduce bugs if we\u2019re not careful about understanding what is being modified and when.</li> <li>For concurrency purposes, pure functions are often better as they can often be treated as thread-safe functions..</li> </ul> </li> <li>QUESTIONS?</li> </ul>"},{"location":"CIS-12/week_13pyCh15.html","title":"Week 13 - OOP &amp; Classes &amp; Methods","text":""},{"location":"CIS-12/week_13pyCh15.html#introduction-to-python-classes-and-methods","title":"Introduction to Python Classes and Methods","text":""},{"location":"CIS-12/week_13pyCh15.html#objectives","title":"Objectives","text":"<p>By the end of this lesson, students will:</p> <ol> <li>Understand how to define and use methods within classes.</li> <li>Differentiate between instance methods, static methods, and special methods.</li> <li>Learn how to overload operators in Python.</li> <li>Recognize the importance of invariants and how to use assertions for debugging.</li> </ol>"},{"location":"CIS-12/week_13pyCh15.html#introduction-to-object-oriented-programming","title":"Introduction to Object-Oriented Programming","text":"<ul> <li>Object Oriented Programming is a programming paradigm where objects, which are instances of classes (i.e. blueprints), model real-world or domain specific things or entities.<ul> <li>Generally we use nouns to define classes and therefore objects.</li> <li>Verbs are the <code>class methods</code> or actions that alter or affect the objects of a particular class.</li> <li>Adjectives are the attributes or instance variables that describe the data or state of an object of a particular class.</li> </ul> </li> <li>Core Concepts of OOP, only 2 necessary to know for this chapter:<ul> <li>Encapsulation: The concept of bundling the state/data (attributes) and methods (functions) that operate on the data into a single unit, known as a class. Encapsulation also involves restricting direct access to some of an object\u2019s components to maintain integrity and protect the data, but Python only supports access modifiers by convention.</li> <li>Abstraction: The concept of hiding the complex implementation details (in attributes and methods) and only exposing the necessary parts of an object via public methods. This simplifies interactions with objects and applications by providing a clear and simplified interfaces to modify instances.</li> <li>Inheritance (Another week\u2019s topic): The concept of creating new classes based on existing classes, allowing them to inherit attributes and methods from the parent class. It promotes code reuse and establishes a relationship between classes.</li> <li>Polymorphism (Another week\u2019s topic): The concept of using a single interface to represent different data types or classes. It allows objects to be treated as instances of their parent class rather than their actual class, enabling method overloading and overriding.<ul> <li>Python doesn\u2019t really have the concept of an <code>interface</code> like C# or Java, however. In Python, Duck Typing is used instead to describe objects that look like each-other.</li> </ul> </li> </ul> </li> </ul> <p>Code Example: Simple Class with Attributes <pre><code>class Dog:\n\n    def __init__(self, name, age):  # This is a special method that assigns values to attributes, kinda like a C# or Java constructor.\n        self.name = name\n        self.age = age\n\nmy_dog = Dog(\"Buddy\", 5)  # Code outside the class to create an instance of class Dog (i.e. my_dog points at an object)\nprint(my_dog.name)  # Output: Buddy\nprint(my_dog.age)   # Output: 5\n</code></pre></p>"},{"location":"CIS-12/week_13pyCh15.html#defining-methods","title":"Defining Methods","text":"<ul> <li>Methods are similar to <code>functions</code>, however they are defined inside our classes and are named based on actions our class objects will perform or use to altr object state.<ul> <li>The first <code>parameter</code> of a method is always <code>self</code> which is a reference to the already created object instance of the class the method is in.</li> <li><code>self</code> can be used to read or update the attributes of the object it references.</li> </ul> </li> <li>Regular functions, on the other hand, encapsulate algorithms and processing but don\u2019t need to occur inside a <code>class</code>, don\u2019t get an object as the first parameter, and are attached to a global namespace with no direct access to object attributes.</li> </ul> <p>Code Example: Method Inside a Class <pre><code>def bark(d1):\n    d1.bark()\n\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def bark(self):\n        print(f\"{self.name} says woof!\")\n\nmy_dog = Dog(\"Buddy\", 5)\nmy_dog.bark()  # Calling the method with an object, my_dog get's passed as self\nbark(my_dog)   # Calling a function\n</code></pre></p>"},{"location":"CIS-12/week_13pyCh15.html#function-vs-method-summary-a-quick-compare-and-contrast","title":"Function VS Method Summary, a Quick Compare and Contrast","text":"<ul> <li> <p>Methods: </p> <ul> <li>Defined within a class and associated with an object or a class.</li> <li>Is called on instances of that class with dot notation, and the instance is passed as <code>self</code>.</li> <li>There are 3 types of methods: Instance, Static, and Class methods (More on this later)</li> <li>Can access and modify the attributes of the class or instance it belongs to.</li> <li>Used for tasks that involve manipulating the state of an object or performing actions related to the class.</li> </ul> </li> <li> <p>Functions:</p> <ul> <li>A block of reusable code defined using the def keyword and associated with the global, or a module\u2019s, namespace.</li> <li>Is called independently by name or dot notation when in a module import.</li> <li>A functions is simply a function object.</li> <li>Cannot directly access or modify the attributes of a class or instance.</li> <li>Used for general-purpose tasks that do not require access to class or instance-specific data.</li> </ul> </li> </ul>"},{"location":"CIS-12/week_13pyCh15.html#static-methods","title":"Static Methods","text":"<ul> <li>Properties of static methods<ul> <li>No Instance/Object Required: Static methods do not require an instance of the class to be called.</li> <li>Class-Level Operations: They are typically used for operations that are not dependent on instance-specific data, like utility methods or calculations performed in isolation of instances, but still relevant to the class..</li> <li>Memory Efficiency: They are loaded into memory only once, making them more efficient for certain types of operations.</li> <li>Limited Access: They cannot access instance/object variables or instance/object methods directly.</li> <li>We define by putting these methods in the class and decorating them with <code>@staticmethod</code>.</li> <li>We call these methods with the <code>Class</code> name, not an object instance.</li> </ul> </li> </ul> <p>Code Example: Static Method <pre><code>class MathUtils:\n    @staticmethod\n    def add(a, b):\n        return a + b\n\nresult = MathUtils.add(5, 10)\nprint(result)\n</code></pre></p>"},{"location":"CIS-12/week_13pyCh15.html#special-methods","title":"Special Methods","text":"<ul> <li>Special methods have double underscores at the beginning and end of their names.</li> <li>These methods allow you to define the behavior of objects for built-in operations like comparison or operator overloading.<ul> <li>See this non-comprehensive list of special methods</li> </ul> </li> <li>Below I introduce the <code>__str__</code> method which can be used to convert an object to a human friendly string when printing.</li> <li>Below I also show overloading the + operator using the <code>__add__</code> method.</li> </ul> <p>Code Example: <code>__str__</code> and <code>__add__</code> Methods <pre><code>class Time:\n    def __init__(self, hour, minute):\n        self.hour = hour\n        self.minute = minute\n\n    def __str__(self):\n        return f\"{self.hour:02d}:{self.minute:02d}\"\n\n    def __add__(self, other):\n        total_minutes = (self.hour + other.hour) * 60 + (self.minute + other.minute)\n        hour, minute = divmod(total_minutes, 60)\n        return Time(hour, minute)\n\nt1 = Time(2, 30)\nt2 = Time(1, 45)\nt3 = t1 + t2\nprint(t3)\n</code></pre></p>"},{"location":"CIS-12/week_13pyCh15.html#using-assertions-for-debugging","title":"Using Assertions for Debugging","text":"<ul> <li>Invariants are conditions that must always hold true for an object throughout its lifetime.<ul> <li>They are essential for ensuring the consistency and correctness of an object\u2019s state.</li> <li>Invariants can be classified into several types:<ul> <li>Class Invariants: Conditions that must be true for all instances of a class. For example, in a class representing a rectangle, the width and height must always be non-negative.</li> <li>Loop Invariants: Conditions that must be true at the start and end of each iteration of a loop. These are crucial for proving the correctness of algorithms.</li> <li>Method Invariants: Conditions that must be true before and after the execution of a method. These ensure that the method does not leave the object in an inconsistent state.</li> </ul> </li> <li>In Python assertions are often used to enforce these variant conditions.</li> <li>Failing assert statements will <code>raise</code> and <code>AssertionError</code></li> </ul> </li> </ul> <p>Code Example: Using Assertions <pre><code>class Time:\n    def __init__(self, hour, minute):\n        self.hour = hour\n        self.minute = minute\n\n    def is_valid(self):\n        return 0 &lt;= self.minute &lt; 60 and isinstance(self.hour, int)\n\n    def add_time(self, other):\n        assert self.is_valid(), \"Invalid Time object\"\n        assert other.is_valid(), \"Invalid Time object\"\n        total_minutes = (self.hour + other.hour) * 60 + (self.minute + other.minute)\n        hour, minute = divmod(total_minutes, 60)\n        return Time(hour, minute)\n\nt1 = Time(2, 30)\nt2 = Time(1, 45)\nt3 = t1.add_time(t2)\nprint(t3)  # Output: 04:15\n</code></pre></p> <ul> <li>I think it\u2019s important to note that assert statements are typically used for debugging purposes and can be disabled in production environments by running Python with the <code>-O (optimize)</code> flag. For critical checks that should always be enforced, it\u2019s better to use explicit conditionals and raise exceptions.</li> </ul>"},{"location":"CIS-12/week_13pyCh15.html#practice","title":"Practice","text":"<ul> <li>Exercise 1: Write a class <code>Rectangle</code> that includes methods to calculate area and perimeter. Implement <code>__str__</code> for string representation.<ul> <li>You should include an init method that receives a width and height.</li> </ul> </li> <li>Exercise 2: Create a <code>BankAccount</code> class with methods for depositing and withdrawing money. Add <code>assert</code> validation to ensure the balance doesn\u2019t go negative.</li> </ul>"},{"location":"CIS-12/week_14py.html","title":"Week 14 - Classes &amp; Objects","text":""},{"location":"CIS-12/week_14py.html#object-composition-and-oop-features-in-python","title":"Object Composition and OOP Features in Python","text":""},{"location":"CIS-12/week_14py.html#objectives","title":"Objectives:","text":"<ol> <li>Understand object composition and why it\u2019s central to object*oriented programming.</li> <li>Learn about special method overriding, particularly <code>__eq__</code>, and the distinction between <code>==</code> (equivalence) and <code>is</code> (identity).</li> <li>Explore state change in objects through methods like <code>translate</code> and <code>grow</code> that change object attribute values.</li> <li>Learn Python\u2019s <code>copy</code> module, shallow vs. deep copies, and when to use each.</li> <li>Understand polymorphism and its practical benefits in object*oriented programming.</li> </ol>"},{"location":"CIS-12/week_14py.html#introduction-to-object-composition","title":"Introduction to Object Composition","text":""},{"location":"CIS-12/week_14py.html#definition-and-benefits","title":"Definition and Benefits:","text":"<ul> <li>Object Composition: A design principle where objects are made up of other objects, allowing more flexible and modular designs.<ul> <li>Example: A <code>Line</code> is composed of two <code>Point</code> objects.</li> <li>Example: A <code>Rectangle</code> is composed of four <code>Line</code> objects.</li> <li>Why Composition is Preferred: It encourages reuse and models real-world hierarchies better than inheritance in most cases (inheritance is a topic for next week).</li> </ul> </li> </ul>"},{"location":"CIS-12/week_14py.html#example-point-and-line-classes","title":"Example: Point and Line Classes","text":"<p><pre><code>class Point:\n\"\"\"Represents a point in 2D space.\"\"\"\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return f'Point({self.x}, {self.y})'\n\n    def translate(self, dx, dy):\n        self.x += dx\n        self.y += dy\n\nclass Line:\n\"\"\"Represents a line segment defined by two points.\"\"\"\n    def __init__(self, p1:Point, p2:Point):\n        self.p1 = p1\n        self.p2 = p2\n\n    def __str__(self):\n        return f'Line({self.p1}, {self.p2})'\n</code></pre> Discussion: As you can see, we have a <code>Line</code> composed of 2 <code>Point</code> objects, let\u2019s see how we\u2019d instantiate this (PyCharm Activity).</p>"},{"location":"CIS-12/week_14py.html#special-method-overriding-and-equivalence-vs-identity","title":"Special Method Overriding and Equivalence vs. Identity","text":""},{"location":"CIS-12/week_14py.html#special-method-__eq__","title":"Special Method <code>__eq__</code>:","text":"<ul> <li>Purpose: Redefines how the <code>==</code> operator works for objects.</li> <li>Example:  <pre><code>class Point:\n    ...\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n</code></pre></li> <li>As you can see, instead of testing if the <code>other</code> object has the same <code>identity</code>, it checks the equivalency of each object\u2019s attributes (Note: a subset of attributes is often used).</li> </ul>"},{"location":"CIS-12/week_14py.html#identity-vs-equivalence","title":"Identity vs. Equivalence:","text":"<ul> <li><code>is</code>: Checks object identity (memory address or object unique-id in some languages).</li> <li><code>==</code>: By default checks identity since its inherited from Python\u2019s base object, but it is usually Overloaded to check equivalence as defined by <code>__eq__</code> (see discussion above).</li> </ul>"},{"location":"CIS-12/week_14py.html#lets-see-a-demonstration","title":"Let\u2019s see a Demonstration:","text":"<p><pre><code>p1 = Point(100, 200)\np2 = Point(100, 200)\np3 = p1\nprint(p1 == p2)  # True (equivalence via __eq__)\nprint(p1 is p2)  # False (different objects)\nprint(p1 is p3)  # True (they point to the same object)\n</code></pre> * As you can see the <code>is</code> operator verifies object identity while the equivalance operator checks for attribute equivalence. Try removing the overload and see what happens (PyCharm Activity)</p>"},{"location":"CIS-12/week_14py.html#object-state-change-with-mutable-attributes","title":"Object State Change with Mutable Attributes","text":""},{"location":"CIS-12/week_14py.html#uusing-methods-to-change-object-state","title":"UUsing Methods to Change Object State:","text":"<ul> <li>Methods are the actions objects perform or that are performed on objects (hence why we say English verbs become methods), but how do methods affect the objects?</li> <li>Each object has its own vaules for the <code>attributes / instance variables</code> defined in a <code>class</code>, thus methods affect objects by changing these attribute values.</li> <li>translate: Modify <code>x</code> and <code>y</code> coordinates to move a <code>Rectangle</code> object.</li> <li>grow: Adjust width and height attributes to increase or decrease the size of a <code>Rectangle</code> object..</li> </ul>"},{"location":"CIS-12/week_14py.html#example-with-rectangle","title":"Example with Rectangle:","text":"<pre><code>class Rectangle:\n    def __init__(self, width, height, corner):\n        self.width = width\n        self.height = height\n        self.corner = corner\n\n    def translate(self, dx, dy):\n        self.corner.translate(dx, dy)\n\n    def grow(self, dwidth, dheight):\n        self.width += dwidth\n        self.height += dheight\n</code></pre> <p>Discussion: Mutating an object via methods that change attribute values is exactly what we want to do in OOP, however we have to be careful when ojbects use <code>composition</code>. For example, in hte Rectangle above, the <code>self.corner</code> attribute is a composed object of type <code>Point</code>. If we copy our rectangle with the copy module, the <code>self.corner</code> memory address get\u2019s copied to the new <code>Rectangle</code> object, so manipulating <code>self.corner</code> via translate will actually impact both <code>Rectangle</code> objects. Let\u2019s see this in action (PyCharm Activity).</p> <p>We\u2019ll try to clarify this further in the next section.</p>"},{"location":"CIS-12/week_14py.html#copy-module-and-deep-copying","title":"Copy Module and Deep Copying","text":""},{"location":"CIS-12/week_14py.html#shallow-copy","title":"Shallow Copy:","text":"<ul> <li>Shallow copies made by the <code>copy</code> module\u2019s <code>copy</code> function only copies an object, but not the object\u2019s the object composes or references. <pre><code>from copy import copy\n\nbox1 = Rectangle(100, 50, Point(10, 10))\nbox2 = copy(box1)\nbox2.corner.translate(5, 5)\nprint(box1.corner)  # Affected due to shared reference\n</code></pre></li> <li>See how the shallow copy didn\u2019t copy the <code>self.corner</code> point?</li> <li>See how the SAME Point object was translated for both box1 and box2?</li> <li>This is referred to as an <code>unintended side effect</code> and can easily happen in OOP languages if the programmer is not careful due to mutable objects.</li> </ul>"},{"location":"CIS-12/week_14py.html#deep-copy","title":"Deep Copy:","text":"<ul> <li>Now a deep copy creates a fully independent object and copies the objeca AND any composed objects. It even copies objects composed in child objects.</li> <li>Remember the memoization shortcut we learned in the <code>recursion</code> chapter? That is often used in these types of copies to make object copies faster and allows us to know when to handle copy loops (AKA cyclic object dependencies). <pre><code>from copy import deepcopy\n\nbox3 = deepcopy(box1)\nbox3.corner.translate(10, 10)\nprint(box1.corner)  # Unaffected\n</code></pre></li> <li>Now the corner Point refers to a completely different object, so there are not unintended side-effects.</li> </ul>"},{"location":"CIS-12/week_14py.html#polymorphism","title":"Polymorphism","text":""},{"location":"CIS-12/week_14py.html#definition-and-benefits_1","title":"Definition and Benefits:","text":"<ul> <li>Polymorphism: Same interface, different behaviors for objects.<ul> <li>Python doesn\u2019t have the concept of an <code>interface</code> so by this we mean 2 classes have the SAME Methods</li> <li>Python does have Abstract classes, which is similar to an interface, but that\u2019s a topic of CIS-18</li> </ul> </li> <li>How is Polymorphism Useful: It simplifies code by allowing different object types to be treated in a uniform way. How? Because if the objects all have the same methods and arguments, you can treat them as if they are the same type of object, but when you call those methods, the actions performed by the methods can be drastically different.</li> </ul>"},{"location":"CIS-12/week_14py.html#example-the-draw-method","title":"Example: The <code>draw</code> Method","text":"<pre><code>class Rectangle:\n    ...\n    def draw(self):\n        print(f'Drawing rectangle at {self.corner} with width {self.width} and height {self.height}')\n\nclass Line:\n    ...\n    def draw(self):\n        print(f'Drawing line from {self.p1} to {self.p2}')\n\nshapes = [Rectangle(50, 30, Point(10, 10)), Line(Point(0, 0), Point(10, 0))]\nfor shape in shapes:\n    shape.draw()\n</code></pre> <ul> <li>In this example, both the Rectanlge and the Line classes havre a draw method, so we can put both into a list, loop over them, and know that the <code>draw</code> method will be accessible no matter which object we\u2019re referencing in our loop. Still, one draws a line when called, and one draws a rectangle! POLYMORPHISM!</li> </ul>"},{"location":"CIS-12/week_14py.html#interactive-exercises","title":"Interactive Exercises","text":"<ol> <li>Equivalence vs. Identity:<ul> <li>Create a class named <code>Dog</code> with attributes <code>breed</code>, <code>name</code>, <code>age</code> and <code>size</code></li> <li>Override the str method to return an f-string formatting all the attributes.</li> <li>Override the eq method to test if <code>breed</code>, <code>age</code>, and <code>size</code> are all equivalent.</li> <li>Create two objects of type <code>Dog</code>. Test your objects using <code>is</code> and <code>==</code>.</li> </ul> </li> <li>Shallow vs. Deep Copy:<ul> <li>Now create a class called <code>Size</code> with a string attribute named <code>size</code> which can be set to <code>small, medium, or large</code></li> <li>Override its str method to return the size attribute.</li> <li>Override its eq method to compare the <code>size</code> attribute to another Size attribute.</li> <li>Now change the attribute of your original <code>Dog</code> class to be of type <code>Size</code> and update your <code>Dog</code> class\u2019 eq method to work with your Size class if necessary?<ul> <li>Was it necessary? Why / Why Not?</li> </ul> </li> <li>Finally, Experiment with <code>copy</code> and <code>deepcopy</code> to observe behavior differences after copying dog objects and modifying their Size attributes.</li> </ul> </li> <li>Polymorphism:<ul> <li>Let\u2019s extend the Line Rectangle exmaple  with a <code>Square</code> class.</li> <li>Let\u2019s practice implementing a <code>draw</code> method to demonstrate polymorphism.</li> </ul> </li> </ol>"},{"location":"CIS-12/week_15Ch18py.html","title":"Week 15 - Python Extras","text":""},{"location":"CIS-12/week_15Ch18py.html#advanced-python-features","title":"Advanced Python Features","text":""},{"location":"CIS-12/week_15Ch18py.html#learning-objectives","title":"Learning Objectives","text":"<ul> <li>Understand and apply Python sets for unique data manipulation and operations.</li> <li>Explore <code>collections.Counter</code> for counting elements and performing multiset operations.</li> <li>Learn to utilize <code>defaultdict</code> for simplifying dictionary initialization and handling missing keys.</li> <li>Use conditional expressions for concise code and logical branching.</li> <li>Master list comprehensions for creating lists efficiently.</li> <li>Understand <code>any</code> and <code>all</code> built-in functions for evaluating conditions across sequences.</li> <li>Familiarize with packing and unpacking keyword arguments for flexible function calls.</li> </ul>"},{"location":"CIS-12/week_15Ch18py.html#1-python-sets","title":"1. Python Sets","text":"<p>Objective: Demonstrate set creation, operations, and practical applications.</p> <p>Examples: 1. Creating and Manipulating Sets <pre><code>fruits = set(['apple', 'orange', 'banana', 'apple'])  # Duplicates removed\nprint(fruits)  # {'orange', 'banana', 'apple'}\n</code></pre></p> <ol> <li> <p>Set Operations <pre><code>evens = {2, 4, 6, 8}\nodds = {1, 3, 5, 7}\nprimes = {2, 3, 5, 7}\nprint(evens | odds)       # Union\nprint(primes &amp; evens)     # Intersection\nprint(odds - primes)      # Difference\nprint(odds &lt;= primes)     # Subset\n</code></pre></p> </li> <li> <p>Practical Example    Check if two lists share common elements: <pre><code>list1 = [1, 2, 3, 4]\nlist2 = [3, 4, 5, 6]\nprint(bool(set(list1) &amp; set(list2)))  # True\n</code></pre></p> </li> </ol>"},{"location":"CIS-12/week_15Ch18py.html#2-using-collectionscounter","title":"2. Using <code>collections.Counter</code>","text":"<p>Objective: Count elements in sequences and perform arithmetic operations.</p> <p>Examples: 1. Counting Elements <pre><code>from collections import Counter\nvotes = ['Alice', 'Bob', 'Alice', 'Alice', 'Bob']\ncount = Counter(votes)\nprint(count)  # Counter({'Alice': 3, 'Bob': 2})\n</code></pre></p> <ol> <li> <p>Arithmetic Operations <pre><code>counter1 = Counter({'a': 3, 'b': 2})\ncounter2 = Counter({'b': 1, 'c': 4})\nprint(counter1 + counter2)  # Counter({'c': 4, 'a': 3, 'b': 3})\nprint(counter1 - counter2)  # Counter({'a': 3, 'b': 1})\n</code></pre></p> </li> <li> <p>Anagram Checker <pre><code>def are_anagrams(word1, word2):\n    return Counter(word1) == Counter(word2)\nprint(are_anagrams('listen', 'silent'))  # True\n</code></pre></p> </li> </ol>"},{"location":"CIS-12/week_15Ch18py.html#3-collectionsdefaultdict","title":"3. <code>collections.defaultdict</code>","text":"<p>Objective: Simplify dictionary initialization for dynamic values.</p> <p>Examples: 1. Basic Usage <pre><code>from collections import defaultdict\ndd = defaultdict(int)\ndd['a'] += 1\nprint(dd)  # defaultdict(&lt;class 'int'&gt;, {'a': 1})\n</code></pre></p> <ol> <li>Grouped Data <pre><code>names = [('USA', 'Alice'), ('USA', 'Bob'), ('India', 'Ravi')]\ngrouped = defaultdict(list)\nfor country, name in names:\n    grouped[country].append(name)\nprint(grouped)  # defaultdict(&lt;class 'list'&gt;, {'USA': ['Alice', 'Bob'], 'India': ['Ravi']})\n</code></pre></li> </ol>"},{"location":"CIS-12/week_15Ch18py.html#4-conditional-expressions","title":"4. Conditional Expressions","text":"<p>Objective: Write concise conditional logic.</p> <p>Examples: 1. Inline Logic <pre><code>x = 10\ny = 'Positive' if x &gt; 0 else 'Negative'\nprint(y)  # Positive\n</code></pre></p> <ol> <li>Recursive Example <pre><code>def factorial(n):\n    return 1 if n == 0 else n * factorial(n - 1)\nprint(factorial(5))  # 120\n</code></pre></li> </ol>"},{"location":"CIS-12/week_15Ch18py.html#5-list-comprehensions","title":"5. List Comprehensions","text":"<p>Objective: Simplify list construction.</p> <p>Examples: 1. Simple Transformation <pre><code>numbers = [1, 2, 3, 4]\nsquares = [n**2 for n in numbers]\nprint(squares)  # [1, 4, 9, 16]\n</code></pre></p> <ol> <li>Filter with Comprehension <pre><code>names = ['Alice', 'Bob', 'Charlie']\nshort_names = [name for name in names if len(name) &lt;= 4]\nprint(short_names)  # ['Bob']\n</code></pre></li> </ol>"},{"location":"CIS-12/week_15Ch18py.html#6-built-ins-any-and-all","title":"6. Built-ins: <code>any</code> and <code>all</code>","text":"<p>Objective: Use these functions for efficient sequence checks.</p> <p>Examples: 1. Using <code>any</code> <pre><code>values = [0, 0, 1]\nprint(any(values))  # True\n</code></pre></p> <ol> <li>Using <code>all</code> <pre><code>values = [1, 1, 1]\nprint(all(values))  # True\n</code></pre></li> </ol>"},{"location":"CIS-12/week_15Ch18py.html#7-packing-and-unpacking-keyword-arguments","title":"7. Packing and Unpacking Keyword Arguments","text":"<p>Objective: Pass dynamic arguments to functions.</p> <p>Examples: 1. Packing Arguments <pre><code>def display_info(**kwargs):\n    for key, value in kwargs.items():\n        print(f\"{key}: {value}\")\ndisplay_info(name='Alice', age=25)\n</code></pre></p> <ol> <li>Unpacking into Function Calls <pre><code>data = {'name': 'Bob', 'age': 30}\ndisplay_info(**data)\n</code></pre></li> </ol>"},{"location":"CIS-12/week_15Ch18py.html#activities","title":"Activities","text":"<ol> <li>Set Operations: Find common and unique elements between two lists.</li> <li>Counter Applications: Write a program to count votes and find the winner.</li> <li>Defaultdict Usage: Implement a function to group words by their first letter.</li> <li>List Comprehensions: Create a list of even numbers from 1 to 20.</li> <li><code>any</code> and <code>all</code>: Check if a list contains only positive numbers.</li> </ol>"},{"location":"CIS-12/week_15py.html","title":"Week 15 - Inheritance","text":""},{"location":"CIS-12/week_15py.html#object-oriented-programming---inheritance","title":"Object-Oriented Programming - Inheritance","text":""},{"location":"CIS-12/week_15py.html#learning-objectives","title":"Learning Objectives","text":"<ol> <li>Understand the concept of inheritance and its role in object-oriented programming.</li> <li>Implement inheritance to extend the functionality of base classes.</li> <li>Learn how to override methods and call methods from parent classes.</li> <li>Explore real-world examples to deepen understanding.</li> </ol>"},{"location":"CIS-12/week_15py.html#introduction-to-inheritance","title":"Introduction to Inheritance","text":"<p>Inheritance allows a child class to acquire the properties and methods of its parent class (i.e. the class the child is inheriting from). It helps in code reuse and creates a hierarchical relationship between classes.</p>"},{"location":"CIS-12/week_15py.html#example","title":"Example","text":"<pre><code># Parent class\nclass Animal:\n    def __init__(self, name):\n        self.name = name\n\n    def speak(self):\n        return f\"{self.name} makes a sound.\"\n\n# Child class\nclass Dog(Animal):\n    def speak(self):\n        return f\"{self.name} barks.\"\n\n# Demonstration\ngeneric_animal = Animal(\"Generic Animal\")\ndog = Dog(\"Buddy\")\n\nprint(generic_animal.speak())  # Output: Generic Animal makes a sound.\nprint(dog.speak())             # Output: Buddy barks.\n</code></pre>"},{"location":"CIS-12/week_15py.html#important-concepts-about-inheritance","title":"Important Concepts about Inheritance","text":"<ul> <li>Though not demonstrated in the code above, inheritance avoids duplicating code by allowing child classes to inherit already implmented methods from the parent..</li> <li>Demonstrated abovee, overriding methods allows specialization of behavior in child classes (i.e. the dog objects now bark instead of simply makeing sound)..</li> </ul>"},{"location":"CIS-12/week_15py.html#demonstrating-oop-inheritance-with-cards","title":"Demonstrating OOP Inheritance with Cards","text":"<p>To demonstrate OOP and inheritance, we first start off with a simple object blueprint for a <code>Card</code>. There is no inheritance in the Card class, but you should see how we compose <code>Card</code>s into a <code>Deck</code> class in the UML and of course the code below.</p> <p>As you can see from the UML and code, the <code>Deck</code> class demonstrates inheritance by creating a hierarchy of card-related classes like Hand, PokerHand and BridgeHand (see UML below).</p> classDiagram     class Card {         - suit: int         - rank: int         + suit_names: list         + rank_names: list         + __init__(suit: int, rank: int)         + __str__() str         + __eq__(other: Card) bool         + __lt__(other: Card) bool         + __le__(other: Card) bool         + to_tuple() tuple     }      class Deck {         - cards: list         + __init__(cards: list)         + make_cards() list         + __str__() str         + take_card() Card         + put_card(card: Card)         + shuffle()         + sort()         + move_cards(other: Deck, num: int)         + deal_hand(label: str, num_cards: int) Hand     }      class Hand {         - label: str         - cards: list         + __init__(label: str)         + add_card(card: Card)         + remove_card(card: Card)         + __str__() str     }      class PokerHand {         + __init__(label: str)         + evaluate_hand() str     }      class BridgeHand {         + __init__(label: str)         + evaluate_hand() dict     }      Deck &lt;|-- Hand     Deck *-- Card     Hand &lt;|-- PokerHand     Hand &lt;|-- BridgeHand"},{"location":"CIS-12/week_15py.html#example_1","title":"Example","text":"<pre><code>from random import shuffle\n\nclass Card:\n    suit_names = [\"Clubs\", \"Diamonds\", \"Hearts\", \"Spades\"]\n    rank_names = [None, \"Ace\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"Jack\", \"Queen\", \"King\"]\n\n    def __init__(self, suit: int, rank: int):\n        self.suit = suit\n        self.rank = rank\n\n    def __str__(self):\n        return f\"{self.rank_names[self.rank]} of {self.suit_names[self.suit]}\"\n\n    def __eq__(self, other: 'Card') -&gt; bool:\n        return self.suit == other.suit and self.rank == other.rank\n\n    def __lt__(self, other: 'Card') -&gt; bool:\n        return self.to_tuple() &lt; other.to_tuple()\n\n    def __le__(self, other: 'Card') -&gt; bool:  # Example of using tuples directly\n        return (self.suit, self.rank) &lt;= (other.suit, other.rank)\n\n    def to_tuple(self) -&gt; tuple:\n        return self.suit, self.rank\n\n\nclass Deck:\n    def __init__(self, cards=None):\n        self.cards = cards if cards else Deck.make_cards()\n\n    @staticmethod\n    def make_cards():\n        return [Card(suit, rank) for suit in range(4) for rank in range(1, 14)]\n\n    def __str__(self):\n        return \"\\n\".join(str(card) for card in self.cards)\n\n    def take_card(self) -&gt; Card:\n        return self.cards.pop() if self.cards else None\n\n    def put_card(self, card: Card):\n        self.cards.append(card)\n\n    def shuffle(self):\n        shuffle(self.cards)\n\n    def sort(self):\n        self.cards.sort()\n\n    def move_cards(self, other: 'Deck', num: int):\n        for _ in range(num):\n            other.put_card(self.take_card())\n\n\nclass Hand(Deck):\n    def __init__(self, label: str):\n        super().__init__()\n        self.label = label\n        self.cards = []\n\n    def add_card(self, card: Card):\n        self.put_card(card)\n\n    def remove_card(self, card: Card):\n        self.cards.remove(card)\n\n    def __str__(self):\n        return f\"{self.label}: \" + \", \".join(str(card) for card in self.cards)\n\n\nclass PokerHand(Hand):\n    def __init__(self, label: str):\n        super().__init__(label)\n\n    def evaluate_hand(self) -&gt; str:\n        return \"Evaluation of Poker Hand\"\n\n\nclass BridgeHand(Hand):\n    def __init__(self, label: str):\n        super().__init__(label)\n\n    def evaluate_hand(self) -&gt; dict:\n        return \"Evaluation of Bridge Hand\"\n</code></pre>"},{"location":"CIS-12/week_15py.html#expanding-functionality-with-deck","title":"Expanding Functionality with Deck","text":"<p>Compostion: This was last week\u2019s topic, but notice how the <code>Deck</code> class extends it\u2019s own functionality by managing a collection of <code>Card</code> objects in the code above?</p>"},{"location":"CIS-12/week_15py.html#a-few-other-things-to-notice","title":"A few other things to notice","text":"<ul> <li>Static methods for creating structured data (e.g. creating the cards).</li> <li>Delegating complex logic to helper methods.</li> </ul>"},{"location":"CIS-12/week_15py.html#adding-hands-with-inheritance","title":"Adding Hands with Inheritance","text":"<p>The <code>Hand</code> class inherits from <code>Deck</code>, specializing its behavior for card games.</p>"},{"location":"CIS-12/week_15py.html#example-usage","title":"Example Usage","text":"<pre><code># Usage\ndeck = Deck()\nhand = Hand(\"Player 1\")\nhand.add_card(deck.deal_card())\nhand.add_card(deck.deal_card())\n\nprint(hand)  # Output: Player 1's Hand: Random Card 1, Random Card 2\n</code></pre>"},{"location":"CIS-12/week_15py.html#notice-a-few-things-about-the-hand-code","title":"Notice a few things about the Hand code","text":"<ul> <li><code>super().__init__()</code> is used to call the parent constructor.</li> <li>The child doesn\u2019t need to implement any methods the parent contains already, though the child class can override (i.e. <code>take_card</code>, etc.).</li> <li>We can also provide helper methods or provide more appropriate method names that utilize the inherited methods (i.e. <code>add_card</code>).</li> </ul>"},{"location":"CIS-12/week_15py.html#comparing-cards-with-custom-methods---pythonic-coding-tip","title":"Comparing Cards with Custom Methods - Pythonic Coding Tip","text":"<p>Custom comparison methods should use tuples for consistent ordering of cards.</p>"},{"location":"CIS-12/week_15py.html#example_2","title":"Example","text":"<pre><code>class Card:\n    # Existing code...\n\n    def to_tuple(self):\n        return self.suit, self.rank\n\n    def __lt__(self, other):\n        return self.to_tuple() &lt; other.to_tuple()\n\n# Usage\ncard1 = Card(2, 12)  # Queen of Hearts\ncard2 = Card(3, 6)   # 6 of Spades\n\nprint(card1 &lt; card2)  # Output: True\n</code></pre>"},{"location":"CIS-12/week_15py.html#in-general","title":"In General","text":"<ul> <li>Defining comparison behavior for sorting and compare logic when building classes and hierarchies is advised.</li> <li>Using tuple-based comparisons increase readability and correctness since tuples are immutable.</li> </ul>"},{"location":"CIS-12/week_15py.html#advanced-applications","title":"Advanced Applications","text":"<p>Inheritance enables specialized decks, such as a deck for a specific card game.</p>"},{"location":"CIS-12/week_15py.html#example_3","title":"Example","text":"<pre><code>class PokerDeck(Deck):\n    def __init__(self):\n        super().__init__()\n        self.shuffle()  # Shuffle upon creation\n\n    def deal_hand(self, num_cards):\n        return [self.deal_card() for _ in range(num_cards)]\n\n# Usage\npoker_deck = PokerDeck()\nhand = poker_deck.deal_hand(5)\nfor card in hand:\n    print(card)\n</code></pre>"},{"location":"CIS-12/week_15py.html#homeworkpractice","title":"Homework/Practice","text":"<ol> <li>Challenge: Create a <code>BlackjackHand</code> class that extends <code>Hand</code>, adding a method to calculate the total value of the cards.</li> <li>Reflection: Write a short paragraph on the advantages of using inheritance in the card-related examples.</li> </ol>"},{"location":"CIS-12/week_1_lecture.html","title":"Week 1L - Lecture","text":""},{"location":"CIS-12/week_1_lecture.html#how-do-you-learn","title":"How do you learn?","text":"<p>Learning Styles</p>"},{"location":"CIS-12/week_1_lecture.html#weekw-1-getting-started-with-programming","title":"Weekw 1: Getting Started with Programming","text":"<ul> <li>Programs are written as High-Level Language Source code<ul> <li>Procedural source code consists of:<ul> <li>Statements: <code>System.out.println(\"Hello world\");</code></li> <li>Expressions: <code>int a = 2;</code></li> <li>Executed from Top-to-Bottom, Left-to-Right</li> </ul> </li> <li>HLL were created to make coding faster and more human-readable.</li> <li>Hundres of languages, but Java is very popular and makes learning other languages easier.</li> <li>Languages like Java have many APIs, Libraries, and GUI tools to make development easier.</li> <li></li> </ul> </li> <li>Modern programming is always done in an IDE<ul> <li>Useful tools for programmer<ul> <li>Real-time Syntax checking</li> <li>Auto-Documentation tools</li> <li>Code Completion</li> <li>Console</li> <li>Debugger</li> <li>AI Generative code assistance</li> </ul> </li> </ul> </li> </ul>"},{"location":"CIS-12/week_1_lecture.html#exercise-1---get-familiar-with-ide","title":"Exercise 1 - Get familiar with IDE","text":"<ul> <li>Open your IDE, start a NEW Project</li> <li>Add or find the Main.java file created for the project, what do you think the following do?</li> <li>Note the line public class Main</li> <li>Note the main method inside that Main.java file.</li> <li>Note any // lines.</li> <li>Note the ; terminating each code line.</li> <li>Now locate the following.<ul> <li>Build/Run Buttons</li> <li>Project/Settings</li> <li>SDK/System settings</li> <li>Console</li> </ul> </li> <li>Keep a lookout for Syntax errors/warnings in IDE</li> </ul>"},{"location":"CIS-12/week_1_lecture.html#exercise-2---what-does-the-following-program-print","title":"Exercise 2 - What does the following program print","text":"Exercise2.java<pre><code>public class Exercise2 {\npublic static void main(String[] args) {\n// The statements used by the program start below!\nSystem.out.println(\"Welcome to CIS-12 - you will learn to program!\");\n}\n}\n</code></pre>"},{"location":"CIS-12/week_1_lecture.html#simple-printing","title":"Simple Printing","text":"<ul> <li>Stdin, Stdout, Stderr</li> <li>Java\u2019s <code>System.out.println(\"\");</code> will output stdout to console!</li> </ul>"},{"location":"CIS-12/week_1_lecture.html#anatomy-of-a-java-program","title":"Anatomy of a Java Program","text":"Week1.java<pre><code>public class Week1 {\npublic static void main(String[] args) {\n// The statements used by the program start below!\nSystem.out.println(\"I have something to say!\");\n}\n}\n</code></pre> <ul> <li>Every java file must be named the same as the class with a .java extension.</li> <li>Execution always starts in main method.</li> <li>Code blocks are contained within { and } brackets.</li> <li>Single line comments are denoted with //<ul> <li>This is one way to document your code and leave yourself notes.</li> </ul> </li> </ul>"},{"location":"CIS-12/week_1_lecture.html#exercise-3---my-first-print","title":"Exercise 3 - My First Print","text":"YourNameHere.java<pre><code>public class YourNameHere {\npublic static void main(String[] args) {\n// Write a program that prints your first and last name here.\n}\n}\n</code></pre> <ul> <li>Run the program via Build/Run</li> <li>Run the program command line.</li> <li>sout</li> </ul>"},{"location":"CIS-12/week_1_lecture.html#multiple-line-printing","title":"Multiple Line Printing","text":"<ul> <li>You could simply put multiple print statements.</li> </ul> MultipleLinePrint.java<pre><code>public class MultipleLinePrint {\npublic static void main(String[] args) {\nSystem.out.println(\"Hello world!\");\nSystem.out.println(\"Hello universe!\");\nSystem.out.println(\"Hello world!\\nHello universe!\");\nSystem.out.println(\"\"\"\n            Hello world!\n            Hello universe!\n        \"\"\");\n}\n}\n</code></pre>"},{"location":"CIS-12/week_1_lecture.html#a-glance-into-your-future","title":"A Glance Into Your Future","text":""},{"location":"CIS-12/week_1_lecture.html#what-is-systemoutprintln-really","title":"What is System.out.println() Really?","text":"<ul> <li>System is a static class.</li> <li>out is a class/static object (e.g. only one instance for the whole system Stdout!).</li> <li>println is a method in the out object that can be called via \u201c.\u201d because out is an object.</li> <li>\u201cText to be printed\u2026\u201d is a parameter of data-type String<ul> <li>A parameter is data passed to a method so the method can use it and is always in the ( ) parenthesis.</li> </ul> </li> <li>; Separates the statements and expressions in your source code.</li> </ul>"},{"location":"CIS-12/week_1_lecture.html#comments","title":"Comments","text":"<ul> <li>So far we\u2019ve seen single line comments //</li> <li>There is also a multi-line comment: Multi-Line Comment<pre><code>/*\nComment\ntext\ngoes\nhere.\n*/\n</code></pre></li> </ul>"},{"location":"CIS-12/week_1_lecture.html#reading-input","title":"Reading Input","text":""},{"location":"CIS-12/week_1_lecture.html#what-is-input","title":"What is input?","text":"<ul> <li>Remember Stdin?</li> <li>It is text typed by a user that is always read as a String</li> <li>There are many ways to read input, but we\u2019ll mostly use the Scanner class.</li> </ul>"},{"location":"CIS-12/week_1_lecture.html#excercise-4---guess-what","title":"Excercise 4 - Guess What?","text":"ScannerIntro.java<pre><code>import java.util.Scanner;\n\npublic class ScannerIntro {\n\npublic static void main(String[] args) {\nScanner scanner = new Scanner(System.in);\nSystem.out.println(\"Write Something: \");\nString message = scanner.nextLine();\nSystem.out.println(message);\n}\n}\n</code></pre>"},{"location":"CIS-12/week_1_lecture.html#what-it-does-in-human-statement-exec-line-by-line","title":"What it does, in human\u2026 Statement exec line-by-line","text":"<ul> <li>Introduce the scanner tool used for reading user input</li> <li>Create a tool for reading user input and name it scanner</li> <li>Print \u201cWrite Something: \u201c</li> <li>Read the string written by the user, and assign it</li> <li>to program memory \u201cString message = (string that was given as input)\u201d</li> <li>Print the message written by the user</li> </ul>"},{"location":"CIS-12/week_1_lecture.html#what-it-does-in-programmer","title":"What it does, in programmer\u2026","text":"<ul> <li>Imports the Scanner class from the Java SDK libraries</li> <li>Creates a Java Object of type Scanner so we can access its method for reading input.</li> <li>Prints to StdOut a message requesting input</li> <li>Uses \u201cdot\u201d notation to call the scanner object\u2019s nextLine method to read from StdIn until a newline (i.e. \\n) is encountered.</li> <li>Assigns the returned typed line captured in method nextLine  and stores it in variable message, which is of data-type String</li> <li>Prints to StdOut the typed message out of the variable message.</li> </ul>"},{"location":"CIS-12/week_1_lecture.html#exercise-5---user-input","title":"Exercise 5 - User Input","text":"Exercise5.java<pre><code>import java.util.Scanner;\n\npublic class Exercise5 {\n\npublic static void main(String[] args) {\nScanner scanner = new Scanner(System.in);\n\nSystem.out.println(\"Write a message: \");\n// Write a program that asks the user to write a string.\n// When the user has typed a string and pressed the enter key,\n// the program should print the string that was provided by the user.\n}\n}\n</code></pre>"},{"location":"CIS-12/week_1_lecture.html#what-is-a-string-anyway","title":"What is a String Anyway?","text":"<ul> <li>Why do we say String where most people would say Text?</li> <li>String is just shorthand for saying charachters strung together like beads on a necklace.<ul> <li>And that\u2019s how a computer views text</li> </ul> </li> <li>We\u2019ve used strings in printing to StdOut and reading from StdIn to store the string in a variable</li> <li>So what\u2019s a variable (Don\u2019t worry, we\u2019ll revisit this)!<ul> <li>A storage location for some type of data (So far we\u2019ve only seen String)</li> <li>They are declared like so <code>String message = \"Hello\";</code><ul> <li>String is the type</li> <li>message is the variable name</li> <li>= is an assignment operator just like MATH!<ul> <li>It assigns the String \u201cHello\u201d to the storage/memory location pointed to by message**.</li> </ul> </li> </ul> </li> <li>Variables are used to reference the data at their storage location throughout a program.</li> <li>Varaibles are used for Re-Use and repetition.</li> </ul> </li> </ul>"},{"location":"CIS-12/week_1_lecture.html#string-operations","title":"String Operations","text":"<ul> <li>Can we join strings together?<ul> <li>YES, through concatenation\u2026 ConcatStr.java<pre><code>public class ConcatStr {\n\npublic static void main(String[] args) {\nSystem.out.println(\"Hello \" + \"world!\");\n}\n}\n</code></pre></li> </ul> </li> <li>You can also use variables, and you can do it any number of times! ConcatStr.java<pre><code>public class ConcatStr {\n\npublic static void main(String[] args) {\nString message1 = \"Hello world!\";\nString message2 = \"and the universe!\";\n\nSystem.out.println(message1 + \" ... and the galaxy ... \" + message2);\n}\n}\n</code></pre></li> </ul>"},{"location":"CIS-12/week_1_lecture.html#exercise-6---string-concatenation","title":"Exercise 6 - String Concatenation","text":"Bond.java<pre><code>public class Bond {\n\npublic static void main(String[] args) {\nString start = \"My name is \";\nString end = \", James Bond\";\n\n// Modify the program so that it prints the contents of the variable start and end, and the printed text is the following: My name is Bond, James Bond\n}\n}\n</code></pre>"},{"location":"CIS-12/week_1_lecture.html#reading-strings","title":"Reading Strings","text":"ReadingStrings.java<pre><code>//Introduce the Scanner tool used for reading\nimport java.util.Scanner;\n\npublic class ReadingStrings {\n\npublic static void main(String[] args) {\n\n//Create the tool for reading, assign it to variable caller \"scanner\nScanner scanner = new Scanner(System.in);\n\n//Print user a message \"Write a message: \"\nSystem.out.println(\"Write a message: \");\n\n// nextLine method reads the user's input and returns a string\n// If we then want to use the string in the program, it must be saved to a string variable\nString message = scanner.nextLine();\n\n// A value saved to a variable can be used repeatedly\nSystem.out.println(message);\nSystem.out.println(message);\n}\n}\n</code></pre>"},{"location":"CIS-12/week_1_lecture.html#exercise-7","title":"Exercise 7","text":"TimesThree.java<pre><code>import java.util.Scanner;\n\npublic class TimesThree {\n\npublic static void main(String[] args) {\nScanner scanner = new Scanner(System.in);\n\nSystem.out.println(\"Write a message: \");\n// Write a program that asks the user to type a string.\n// When the user has typed a string and pressed enter,\n// the program must print the user's string three times.\n}\n}\n</code></pre>"},{"location":"CIS-12/week_1_lecture.html#exercise-8","title":"Exercise 8","text":"LiteralConcatenation.java<pre><code>import java.util.Scanner;\n\npublic class LiteralConcatenation {\n\npublic static void main(String[] args) {\nScanner scanner = new Scanner(System.in);\n\n// Write a program that prompts the user for their name with the message \"What's your name?\".\n// When the user has written their name, the program has to print \"Hi \"\n// followed by the user's name.\n}\n}\n</code></pre>"},{"location":"CIS-12/week_1_lecture.html#waiting-for-input","title":"Waiting for Input","text":"<ul> <li>What does the nextLine method really due?<ul> <li>Puts process thread into a wait state that will get notified asynchronously, via an event, when the enter key on the keyboard is pressed.</li> <li>So what does this mean? Take the following program for example: Program.java<pre><code>import java.util.Scanner;\n\npublic class Program {\n\npublic static void main(String[] args) {\nScanner scanner = new Scanner(System.in);\n\nSystem.out.println(\"Write the first string:\");\nString first = scanner.nextLine();\nSystem.out.println(\"Write the second string:\");\nString second = scanner.nextLine();\nSystem.out.println(\"Write the third string:\");\nString third = scanner.nextLine();\n\nSystem.out.println(\"You wrote:\");\nSystem.out.println(first);\nSystem.out.println(second);\nSystem.out.println(third);\n}\n}\n</code></pre></li> <li>Thie program will pause and go idle at each call of nextLine, its context will be switched out (Think 0% CPU usage).</li> <li>Upon a Keyboard Enter key being pressed, an event will be generated that will context switch it back.</li> </ul> </li> </ul>"},{"location":"CIS-12/week_1_lecture.html#excercise-9","title":"Excercise 9","text":"<ul> <li>Write a program that asks the user for a name and a job to do. Your program then prints a short story as follows: <pre><code>I will tell you a story, but first, I need some info!\nWhat is your name? Trevor\nWhat is their job? developer\nHere is the story:\nOnce upon a time there was Trevor, who was a developer.\nOn the way to work, Trevor reflected on AI.\nPerhaps Trevor will not be a developer forever.\n</code></pre></li> </ul>"},{"location":"CIS-12/week_1py.html","title":"Week 1 - Programming as a way of Thinking","text":""},{"location":"CIS-12/week_1py.html#first-things-first-how-do-you-learn","title":"First things First, How do you learn?","text":"<p>Learning Styles</p>"},{"location":"CIS-12/week_1py.html#introduction-to-python-programming","title":"Introduction to Python Programming","text":""},{"location":"CIS-12/week_1py.html#overview","title":"Overview","text":"<p>Welcome to CIS-12 and the Python programming language. In this lecture, we will explore the fundamentals of Python and dive into some of the core concepts that will help you get started with this powerful and versatile language.</p>"},{"location":"CIS-12/week_1py.html#what-is-python","title":"What is Python?","text":"<p>Python is a high-level, general-purpose programming language that has gained immense popularity in recent years. It is known for its simplicity, readability, and flexibility, making it an excellent choice for beginners and experienced programmers alike. Python is used in a wide range of applications, from web development and data analysis to scientific computing and machine learning.</p>"},{"location":"CIS-12/week_1py.html#setting-up-your-development-environment","title":"Setting up Your Development Environment","text":"<p>Before we dive into the Python language, let\u2019s make sure you have the necessary tools installed on your computer.</p>"},{"location":"CIS-12/week_1py.html#installing-pycharm","title":"Installing PyCharm","text":"<p>PyCharm is a powerful Integrated Development Environment (IDE) that makes it easy to write, run, and debug Python code.</p> <p>To install PyCharm, follow these steps:</p> <ul> <li>Visit the official PyCharm website and download the version suitable for your operating system. The PyCharm Community Edition is adequate for this course.</li> <li>Run the installer and follow the on-screen instructions to complete the installation process.</li> <li>Once installed, you can launch PyCharm and start creating your first Python project.</li> </ul>"},{"location":"CIS-12/week_1py.html#installing-git","title":"Installing Git","text":"<p>We will also be utilizing and installing Git this semseter. Git is a version control system that allows you to track changes in your code, collaborate with others, and manage your project\u2019s history.</p> <p>Let\u2019s install Git on your system:</p> <ul> <li>Visit the official Git website (https://git-scm.com/downloads) and download the appropriate version for your operating system.</li> <li>Run the installer and follow the on-screen instructions to complete the installation process.</li> <li>Once installed, you can open a terminal or command prompt and verify the installation by running the <code>git --version command</code>.</li> </ul> <p>Now that you have PyCharm and Git set up, you\u2019re ready to start coding in Python!!! \u2026Probably\u2026 </p>"},{"location":"CIS-12/week_1py.html#python-maybe","title":"Python? Maybe\u2026","text":"<p>Depending on your system you may also need to install Python. PyCharm often comes with a Python interpreter defined, but in the event it doesn\u2019t, you may need to install the official version of Python.</p> <ul> <li>Python is available for free on the official Python website, and the installation process is straightforward. Once you have Python installed, you can start writing and running your first Python programs.</li> </ul>"},{"location":"CIS-12/week_1py.html#alternatives-to-pycharm-ide","title":"Alternatives to PyCharm IDE","text":"<p>While PyCharm is a popular choice, there are several other IDEs available for Python development. Some popular alternatives include:</p> <ul> <li>Visual Studio Code: A free, open-source IDE developed by Microsoft, which offers excellent support for Python and a wide range of other programming languages.</li> <li>Spyder: A free, open-source IDE designed specifically for scientific and data-oriented Python development.</li> <li>Eclipse: A popular, open-source IDE that also provides a Python development environment with the help of plugins like PyDev.</li> <li>Google\u2019s Jupyter Colab</li> </ul>"},{"location":"CIS-12/week_1py.html#using-googles-jupyter-colab","title":"Using Google\u2019s Jupyter Colab","text":"<p>Another option for writing and running Python code is Google\u2019s Jupyter Colab. Jupyter Colab is a cloud-based Jupyter Notebook environment that allows you to write and execute Python code directly in your web browser, without the need to install any additional software.</p> <p>To get started with Jupyter Colab:</p> <ol> <li>Visit the Jupyter Colab website at https://colab.research.google.com/.</li> <li>You can either create a new notebook or open an existing one.</li> <li>In the notebook, you can write and execute Python code, as well as add rich text, images, and other multimedia content.</li> <li>Jupyter Colab also provides access to various Python libraries and tools, making it a great choice for data analysis, machine learning, and scientific computing tasks.</li> </ol>"},{"location":"CIS-12/week_1py.html#python-basics","title":"Python Basics","text":""},{"location":"CIS-12/week_1py.html#arithmetic-operators","title":"Arithmetic Operators","text":"<p>Let\u2019s start by exploring the basic arithmetic operators in Python. We\u2019ll cover addition, subtraction, multiplication, division, and exponentiation, and see how we can use these operators to perform calculations.</p> <pre><code># Addition\nprint(30 + 12)  # Output: 42\n\n# Subtraction\nprint(43 - 1)  # Output: 42\n\n# Multiplication\nprint(6 * 7)  # Output: 42\n\n# Division\nprint(84 / 2)  # Output: 42.0\n\n# Integer Division\nprint(84 // 2)  # Output: 42\n\n# Exponentiation\nprint(7 ** 2)  # Output: 49\n</code></pre>"},{"location":"CIS-12/week_1py.html#expressions-and-order-of-operations","title":"Expressions and Order of Operations","text":"<p>Next, we\u2019ll learn about expressions, which are combinations of operators and values/operands, and explore the order of operations in Python.</p> <p><pre><code># Expression with multiple operators\nprint(6 + 6 ** 2)  # Output: 42\n\n# Order of operations (PEMDAS)\nprint(12 + 5 * 6)  # Output: 42\nprint((12 + 5) * 6)  # Output: 102\n</code></pre> PEMDAS</p>"},{"location":"CIS-12/week_1py.html#strings","title":"Strings","text":"<p>In addition to numbers, Python can also work with text, which is represented as strings. We\u2019ll learn how to create, concatenate, and manipulate strings.</p> <p>If you have a hard time remembering the word String, just remember that a string is characters strung together like beads on a string.</p> <pre><code># Creating strings\nprint('Hello')\nprint(\"world\")\n\n# Concatenating strings\nprint('Well, ' + \"it's a small \" + 'world.')  # Output: \"Well, it's a small world.\"\n\n# Repeating strings\nprint('Spam, ' * 4)  # Output: \"Spam, Spam, Spam, Spam, \"\n</code></pre>"},{"location":"CIS-12/week_1py.html#types-and-type-conversion","title":"Types and Type Conversion","text":"<p>Python has several built-in data types, including integers, floating-point numbers, and strings. We\u2019ll explore how to work with these types and learn how to convert between them.</p> <pre><code># Checking types\nprint(type(2))  # Output: &lt;class 'int'&gt;\nprint(type(42.0))  # Output: &lt;class 'float'&gt;\nprint(type('Hello'))  # Output: &lt;class 'str'&gt;\n\n# Type conversion\nprint(int(42.9))  # Output: 42\nprint(float(42))  # Output: 42.0\nprint(int('126'))  # Output: 126\n</code></pre>"},{"location":"CIS-12/week_1py.html#debugging-and-troubleshooting","title":"Debugging and Troubleshooting","text":"<p>As we progress through the lecture, we\u2019ll discuss the importance of debugging and troubleshooting, which are essential skills for any programmer. We\u2019ll cover common types of errors, such as syntax errors, and strategies for identifying and resolving them.</p> <p>Debugging Tips for PyCharm</p>"},{"location":"CIS-12/week_1py.html#conclusion","title":"Conclusion","text":"<p>You should now have a solid understanding of the fundamentals of Python programming, including arithmetic operations, expressions, strings, and data types. You\u2019ll be well on your way to becoming a proficient Python programmer. Remember, the key to success is practice, so be sure to experiment with the code examples and try writing your own programs.</p> <p>Happy coding!</p>"},{"location":"CIS-12/week_1py.html#now-a-quick-lesson-on-git-if-time-permits","title":"Now a quick lesson on Git\u2026 If time permits!","text":"<p>Git Forking Workflow</p>"},{"location":"CIS-12/week_2.html","title":"Week 2 - Variables and Operators","text":""},{"location":"CIS-12/week_2.html#variables-and-operators","title":"Variables and Operators","text":""},{"location":"CIS-12/week_2.html#declaring-variables","title":"Declaring Variables","text":"<ul> <li>Allocate Storage Location of that Data-Type</li> <li> <p>Type informs java of possible Values.</p> <pre><code>String aString;\nint anInt;\ndouble a64BitFloat;\nfloat a32BitFloat;\nchar aCharacter;\n</code></pre> </li> <li> <p>Note the capital letter in String</p> <ul> <li>A string is Special Object in Java</li> <li>OK, so why don\u2019t we have to create strings like we create other objects i.e. <code>String aString = new String(\"aString\");</code>?<ul> <li>Java founders determined Strings were so common, Strings needed to be treated differently (i.e. reference the same literal string even if assigned to 2 different variables.</li> <li>Consider the following blocks of code: <pre><code>String a = \"Next iteration\";\nString b = \"Next iteration\";\nSystem.out.println(\"What will this be?\" +  ((a == b) ? \"True\" : \"False\") ); // ? are they the same ?\n\nfor (int i = 0; i &lt; 10; i++) {\n  System.out.println(\"Next iteration\"); // If the literal String weren't a reference, this would instantiate the string every single loop.\n}\n</code></pre></li> <li>Thus, Strings are interned to:<ul> <li>Lower memory requirements.</li> <li>Make comparisons faster.</li> </ul> </li> <li>BUT WAIT, if strings are shared/cached references, wouldn\u2019t changing the string for variable a also change it for b?<ul> <li>Yes, but that\u2019s why the designers also made literal strings immutable. String methods that modify a string will return new string, not the original literal.</li> <li>This is also why you should not compare strings with <code>==</code> but <code>a.equals(b)</code> because <code>==</code> compares the reference while the other compares the string.</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Declare variables of the same type on 1 line!</p> <pre><code>int a, b, c = 5; // This is OK!\n</code></pre> </li> <li> <p>Variables names must be unique (within its scope), and not a reserved keyword like static, private, public, final, class, etc.</p> </li> </ul> <pre><code>public class Example {\n    public static void main(String[] args) {\n        double pi = 3.14;\n        double pi = 3.141592653;  // Nope, Nope, Nope!\n\n        System.out.println(\"The value of pi is: \" + pi);\n    }\n}\n</code></pre> <ul> <li>Variables are case sensitive</li> </ul> <pre><code>int firstName = 1;\nint FirstName = 2;\n</code></pre> <ul> <li>Camel Case is Java\u2019s preferred naming convention.</li> </ul> <pre><code>int firstName;\n</code></pre>"},{"location":"CIS-12/week_2.html#other-naming-conventions","title":"Other Naming Conventions","text":"<ul> <li>Variable names cannot contain certain special symbols, such as exclamation marks (!).</li> <li>Spaces are not allowed.</li> <li>Numbers can be used within a variable name as long as the name does not begin with a number.</li> <li>A variable\u2019s name cannot already be in use.</li> </ul>"},{"location":"CIS-12/week_2.html#excercise","title":"Excercise","text":"<ul> <li>What is wrong with these variable names?</li> </ul> Bad Variables<pre><code>last day of month = 20\n1day = 1952\nbeware! = 1910\n1920 = 1\n</code></pre>"},{"location":"CIS-12/week_2.html#assignment---initialize-a-variable","title":"Assignment - Initialize a Variable","text":"<ul> <li>Stores/Updates variable value, but you must assign the right data-type.</li> </ul> <pre><code>String a = \"123\";\nString a = 123; // Error: wrong type.\n</code></pre> <ul> <li>You only have to define the variable type when declaring it, any assignment after must leave off the type.<ul> <li>The variable type persists. <pre><code>int value = 10;\nvalue = 4;\n</code></pre></li> </ul> </li> <li>Variables of different type(s) can be assinged as long as there is no loss in precision. <pre><code>double fpNum = 42.5;\nfpNum = 42;\n</code></pre></li> </ul>"},{"location":"CIS-12/week_2.html#state---forget-diagrams-like-in-the-book---use-intellij-debug","title":"State - Forget diagrams (like in the book) - Use IntelliJ debug","text":"<ul> <li>Why waste your time, use the state diagrams that already exist in your IDE ;-)</li> <li>Breakpoints &amp; variable analysis is the modern way to debug variables.</li> </ul>"},{"location":"CIS-12/week_2.html#arithmetic-operators","title":"Arithmetic Operators","text":"<ul> <li>Symbols for doing Math</li> <li>See Arithmetic Operators </li> <li>Type aware, int division is int only result! (i.e. 59/60 == 0)</li> </ul>"},{"location":"CIS-12/week_2.html#operations-with-floating-point","title":"Operations with Floating Point","text":"<ul> <li>Fractional numbers, with fractional precision, BUT NOT PERFECT!, which leads to rounding errors.<ul> <li>Irrational numbers can\u2019t be represented.</li> <li>Nor can repeating fractions.</li> <li>Rounding Errors Explained</li> </ul> </li> <li>1 or more double numbers will cause operators to use floating point calculations.</li> <li>If you\u2019re equation depends on fractional precision use doubles to avoid 59/60 error, or convert to whole numbers like $$$ libraries do.</li> <li>Java will implicitly convert integer assignment to a double, however.</li> </ul>"},{"location":"CIS-12/week_2.html#operators-for-strings","title":"Operators for Strings","text":"<ul> <li>+ concatenates<ul> <li>Many variables can be joined to a string using the + operator:</li> </ul> </li> </ul> Variable/String Concatenation<pre><code>String text = \"contains text\";\nint wholeNumber = 123;\ndouble floatingPoint = 3.141592653;\nboolean trueOrFalse = true;\n\nSystem.out.println(\"Text variable: \" + text);\nSystem.out.println(\"Integer variable: \" + wholeNumber);\nSystem.out.println(\"Floating-point variable: \" + floatingPoint);\nSystem.out.println(\"Boolean: \" + trueOrFalse);\n</code></pre> StdOut<pre><code>Text variable: contains text\nInteger variable: 123\nFloating-point variable: 3.141592653\nBooolean: true\n</code></pre> <ul> <li><code>.equals(\"compares\");</code> compares!</li> </ul>"},{"location":"CIS-12/week_2.html#errors","title":"Errors","text":"<ul> <li>Compile Errors - Syntax errors, Keywords as variable names, etc. causes Parser to barf.</li> <li>Runtime Errors - Errors that cause exceptions only when the program is run i.e. FileNotFoundException</li> <li>Logic Error - Compiles and runs without errors, but the output is invalid. <code>double percent = 59 / 60;</code></li> </ul>"},{"location":"CIS-12/week_2.html#show-how-to-read-strings-integers-doubles-and-more","title":"Show how to Read Strings, Integers, Doubles, and More","text":"Read an String<pre><code>import java.util.Scanner;\n\npublic class Program {\n\npublic static void main(String[] args) {\nScanner scanner = new Scanner(System.in);\n\nSystem.out.println(\"Write text and press enter \");\nString text = scanner.nextLine();\nSystem.out.println(\"You wrote \" + text);\n}\n}\n</code></pre> Read an Integer<pre><code>import java.util.Scanner;\n\npublic class Program {\n\npublic static void main(String[] args) {\nScanner scanner = new Scanner(System.in);\n\nSystem.out.println(\"Write a value \");\nint value = Integer.parseInt(scanner.nextLine().trim());\nSystem.out.println(\"You wrote \" + value);\n}\n}\n</code></pre> Read a Double<pre><code>import java.util.Scanner;\n\npublic class Program {\npublic static void main(String[] args) {\nScanner scanner = new Scanner(System.in);\nSystem.out.println(\"Write a value \");\ndouble value = Double.parseDouble(scanner.nextLine().trim());\nSystem.out.println(\"You wrote \" + value);\n}\n}\n</code></pre>"},{"location":"CIS-12/week_2.html#exercise","title":"Exercise","text":"<ol> <li>Write a program that asks the user for an integer value. The program should then add 1 to the value provided by the user, and print that new value. </li> <li>Write a program that asks the user for a floating-point number using the variable type Double. The program then prints the user\u2019s input value.</li> <li>Make the following code ouput:</li> </ol> StdOut<pre><code>Summary:\n    Chicken: 4\nBacon: 5.600000\n    Tractor: John Deer!\n</code></pre> Replace variables<pre><code>import java.util.Scanner;\n\npublic class Main {\npublic static void main(String[] args) {\nint chicken = 3;\ndouble bacon = 5.5;\nString tractor = \"None!\";\nString summary = \"\"\"\n\n                Summary:\n                    Chicken: %d\n                    Bacon: %f\n                    Tractor: %s\n                \"\"\";\nScanner s = new Scanner(System.in);\ntry {\nSystem.out.printf(\"Chicken: %d%n\", chicken);\nString input = s.nextLine().trim();\nchicken = (input.isEmpty()) ? chicken : Integer.parseInt(input);\nSystem.out.printf(\"Bacon: %f%n\", bacon);\ninput = s.nextLine().trim();\nbacon = (input.isEmpty()) ? bacon : Double.parseDouble(input);\nSystem.out.printf(\"Tractor: %s%n\", tractor);\ninput = s.nextLine().trim();\ntractor = (input.isEmpty()) ? tractor : input;\nSystem.out.printf(summary, chicken, bacon, tractor);\n} catch (NumberFormatException nfe) {\nSystem.out.println(\"Error parsing number.\");\n}\n}\n}\n</code></pre>"},{"location":"CIS-12/week_2.html#talk-about-assignment","title":"Talk About Assignment!","text":""},{"location":"CIS-12/week_2py.html","title":"Week 2 - Variables and Statements","text":""},{"location":"CIS-12/week_2py.html#variables-and-statements","title":"Variables and Statements","text":""},{"location":"CIS-12/week_2py.html#introduction","title":"Introduction","text":"<ul> <li>Previous chapter: Operators and arithmetic expressions</li> <li>This chapter: Variables, statements, import statement, print function</li> <li>New vocabulary: \u201cargument\u201d and \u201cmodule\u201d</li> </ul>"},{"location":"CIS-12/week_2py.html#variables","title":"Variables","text":""},{"location":"CIS-12/week_2py.html#definition","title":"Definition","text":"<ul> <li>A name that refers to a value or a storage location for a value.</li> </ul>"},{"location":"CIS-12/week_2py.html#creating-variables-assignment-statements","title":"Creating variables (Assignment statements)","text":"<ol> <li>Syntax: <code>variable_name = expression</code></li> <li>Examples:    <pre><code>n = 17\npi = 3.141592653589793\nmessage = 'And now for something completely different'\n</code></pre></li> <li>No visible output when running assignment statements in the Python interpreter or Jupyter Notebook (i.e. Google Colab).</li> </ol>"},{"location":"CIS-12/week_2py.html#using-variables","title":"Using variables","text":"<ol> <li>As expressions    <pre><code>message\n# Output: 'And now for something completely different'\n</code></pre></li> <li>In arithmetic expressions    <pre><code>n + 25\n# Output: 42\n2 * pi\n# Output: 6.283185307179586\n</code></pre></li> <li>In function calls    <pre><code>round(pi, 2)\n# Output: 3\nlen(message)\n# Output: 42\n</code></pre></li> </ol>"},{"location":"CIS-12/week_2py.html#state-diagrams","title":"State diagrams","text":"<ul> <li>Graphical representation of variables and their values</li> <li>Used throughout the book to model Python\u2019s variable storage, but you can generate better ones on Python Tutor</li> <li>Python Tutor or your IDE Debugger can be used (and we will later) to give you a better understanding of how the internals of Python work (i.e. stack/frames, heap/objects)</li> </ul>"},{"location":"CIS-12/week_2py.html#python-variable-naming-rules-other-languages-have-slightly-different-rules","title":"Python Variable naming rules (Other languages have slightly different rules)","text":"<ol> <li>Can be any length (Though choose to be reasonable!)</li> <li>Can contain letters and numbers</li> <li>Cannot start with a number</li> <li>Conventionally lowercase (PEP Standards)</li> <li>Underscore (_) is the only allowed punctuation<ul> <li>Used for multi-word names: <code>your_name</code>, <code>airspeed_of_unladen_swallow</code></li> <li>snake_case_it_is</li> </ul> </li> <li>Cannot use keywords as variable names<ul> <li>They are reserved in the Python grammar to designate features supported by python like class, import, etc.</li> </ul> </li> </ol>"},{"location":"CIS-12/week_2py.html#illegal-variable-names-examples","title":"Illegal variable names (examples)","text":"<pre><code>million! = 1000000                          # SyntaxError: invalid syntax\n76trombones = 'big parade'                  # SyntaxError: invalid decimal literal\nclass = 'Self-Defence Against Fresh Fruit'  # SyntaxError: invalid syntax\n</code></pre>"},{"location":"CIS-12/week_2py.html#keywords-in-python","title":"Keywords in Python","text":"<ul> <li>There currently exist 36 keywords in Python 3.12</li> <li>They will get highlighted in your PyCharm IDE</li> </ul> Keyword Description and Logical AND operator. as Used in <code>import</code> statements to alias modules or packages. assert Used for debugging, raises an AssertionError if a condition is false. async Indicates an asynchronous function or expression. await Used within asynchronous functions to wait for a coroutine to complete. break Terminates the innermost loop. class Defines a new class. continue Skips the current iteration of a loop and starts the next. def Defines a function. del Deletes an object or variable. elif Used in <code>if</code> statements for alternative conditions. else Used in <code>if</code> and <code>try</code> statements for a default block. except Used in <code>try</code> statements to handle exceptions. False Boolean value representing false. finally Used in <code>try</code> statements to execute code regardless of exceptions. for Used for creating loops that iterate over a sequence. from Used in <code>import</code> statements to import specific objects from a module. global Declares a variable as global. if Used for conditional statements. import Used to import modules or packages. in Used to check membership in a sequence. is Compares the identity of two objects. lambda Used to create anonymous functions. None Represents the absence of a value. nonlocal Declares a variable as nonlocal within a nested function. not Logical NOT operator. or Logical OR operator. pass Used as a placeholder for a statement. raise Raises an exception. return Returns a value from a function. True Boolean value representing true. try Used for exception handling. while Used for creating loops that continue as long as a condition is true. with Used for context management, often with file handling or resource management. yield Used in generator functions to return values one at a time."},{"location":"CIS-12/week_2py.html#the-import-statement","title":"The import Statement","text":"<ul> <li>Purpose: Importing Python features</li> <li>Syntax or Usage: <code>import module_name</code></li> </ul>"},{"location":"CIS-12/week_2py.html#modules","title":"Modules","text":"<ul> <li>Collections of variables and functions</li> <li> <p>Example We\u2019ve seen: math module   <pre><code>import math\nprint(math.pi)  # Output: 3.141592653589793\n</code></pre></p> </li> <li> <p>Accessing module contents, like functions stored in the module.</p> </li> <li>Use the dot operator (.)</li> <li>Examples:   <pre><code>math.sqrt(25)  # Output: 5.0\nmath.pow(5, 2)  # Output: 25.0\n</code></pre></li> </ul>"},{"location":"CIS-12/week_2py.html#expressions-and-statements","title":"Expressions and Statements","text":""},{"location":"CIS-12/week_2py.html#types-of-expressions---these-are-evaluated","title":"Types of expressions - These are Evaluated","text":"<p>Evaluating an expression means Computing its value</p> <ol> <li>Single values (integer, float, string)</li> <li>Collections of values and operators (i.e. <code>x + y</code>)</li> <li>Variable names</li> <li>Function calls</li> </ol>"},{"location":"CIS-12/week_2py.html#complex-expression-example","title":"Complex expression example","text":"<pre><code>19 + n + round(math.pi) * 2\n</code></pre>"},{"location":"CIS-12/week_2py.html#statements---these-are-executed","title":"Statements - These are Executed","text":"<ul> <li>Executing a statement: Running it and performing its action</li> <li>Definition: Units of code with an effect but no value</li> <li>Examples: Assignment statements, import statements <code>import math</code> or <code>x = 5</code></li> </ul>"},{"location":"CIS-12/week_2py.html#the-print-function","title":"The print Function","text":""},{"location":"CIS-12/week_2py.html#purpose-displaying-multiple-values","title":"Purpose: Displaying multiple values","text":""},{"location":"CIS-12/week_2py.html#basic-usage","title":"Basic usage","text":"<pre><code>print(n+2)\nprint(n+3)\n</code></pre>"},{"location":"CIS-12/week_2py.html#working-with-different-data-types","title":"Working with different data types","text":"<pre><code>print('The value of pi is approximately')\nprint(math.pi)\n</code></pre>"},{"location":"CIS-12/week_2py.html#multiple-arguments","title":"Multiple arguments","text":"<ul> <li> <p>(Yes, we will learn how to make our own functions that can take multiple arguments, both named and unnamed) <pre><code>print('The value of pi is approximately', math.pi)\n</code></pre></p> </li> <li> <p>Note: print function ALWAYS adds a space between values when passing multiple arguments to the function.</p> <ul> <li>BUT you can change it:</li> </ul> <pre><code>print(\"Hello\", \"world!\", sep=\"---\")\n</code></pre> </li> </ul>"},{"location":"CIS-12/week_2py.html#printing-formmatted-strings-and-format-specifiers","title":"Printing Formmatted Strings and Format Specifiers","text":"<ul> <li>Using variables in format string    <pre><code>print(f\"{variable_name}\")\n</code></pre></li> <li>Using variables and utilizing data-type specific formatting    <pre><code>print(f\"{math.pi:.2f}\")  # 2 decimal spots\nprint(f\"{my_int:05d}\")   # 5 spaces padded with 0\n</code></pre></li> <li>Using variables and aligning in formatting    <pre><code>print(f\"Hi {math.pi:&gt;10.2f}\")  # 2 decimal spaces with 10 padded spaces aligned right\nprint(f\"Hi {math.pi:&lt;10.2f}\")  # 2 decimal spaces with 10 padded spaces aligned left\nprint(f\"Hi {math.pi:^10.2f}\")  # 2 decimal spaces with 10 padded spaces aligned center\n</code></pre></li> </ul>"},{"location":"CIS-12/week_2py.html#arguments","title":"Arguments","text":"<ul> <li>Definition: Expressions in parentheses when calling a function</li> </ul>"},{"location":"CIS-12/week_2py.html#functions-with-different-numbers-of-arguments","title":"Functions with different numbers of arguments","text":"<ol> <li>Single argument: <code>int('101')</code></li> <li>Two arguments: <code>math.pow(5, 2)</code></li> <li>Optional arguments: <code>int('101', 2)</code>, <code>round(math.pi, 3)</code><ul> <li>We will learn how to write functions and methods that take optional arguments, just not yet.</li> </ul> </li> <li>Variable number of arguments: <code>print('Any', 'number', 'of', 'arguments')</code><ul> <li>We will learn how to write functions and methods that take a variable number of arguments and allow for packing and unpacking them, but not yet.</li> </ul> </li> </ol>"},{"location":"CIS-12/week_2py.html#argument-errors","title":"Argument errors","text":"<ol> <li>Too many arguments: TypeError<ul> <li>This implies the function does not allow variable arguments.</li> </ul> </li> <li>Too few arguments: TypeError<ul> <li>This implies the function has required arguments (i.e. non-optional) and you are missing one or more.</li> </ul> </li> <li>Incorrect argument type: TypeError<ul> <li>This implies there could be a datatype mismatch among other posibilities.</li> <li>Type Hints/Annotation were introduced in Python 3.5 to abet in addressing common TypeError issues in Python, but they are used by IDEs because the Python Interpreter does not enforce them.    <pre><code>def add_numbers(a: int, b: int) -&gt; int:\n\"\"\"Add two numbers and return the result.\"\"\"\n    return a + b\n\ndef concatenate_strings(strings: List[str]) -&gt; str:\n\"\"\"Concatenate a list of strings and return the result.\"\"\"\n    return \"\".join(strings)\n\nage: int = 76\nfirst_name: str = \"Alice\"\nlast_name: str = \"Cooper\"\nconcatenate_strings(first_name, last_name)\nadd_numbers(age, 24)\n</code></pre></li> </ul> </li> </ol>"},{"location":"CIS-12/week_2py.html#comments","title":"Comments","text":"<ul> <li>Purpose: Adding notes to explain code</li> <li>Syntax/Usage: # symbol</li> </ul>"},{"location":"CIS-12/week_2py.html#types-of-comments","title":"Types of comments","text":"<ol> <li>Full-line comments    <pre><code># number of seconds in 42:42\nseconds = 42 * 60 + 42\n</code></pre></li> <li>End-of-line comments<ul> <li>The standard says 2 spaces befor the comment # in end of line comments.    <pre><code>miles = 10 / 1.61  # 10 kilometers in miles\n</code></pre></li> </ul> </li> </ol>"},{"location":"CIS-12/week_2py.html#best-practices","title":"Best practices","text":"<ul> <li>Document non-obvious features</li> <li>Explain WHY, not what</li> <li>Avoid redundant comments</li> <li>Use good variable names to reduce need for comments</li> </ul>"},{"location":"CIS-12/week_2py.html#debugging","title":"Debugging","text":""},{"location":"CIS-12/week_2py.html#types-of-errors","title":"Types of errors","text":"<ol> <li>Syntax errors<ul> <li>Related to program structure</li> <li>Prevent program from running</li> <li>Example: Illegal variable names</li> </ul> </li> <li>Runtime errors (exceptions)<ul> <li>Occur during program execution</li> <li>Example: Using unsupported operators</li> </ul> </li> <li>Semantic errors AKA Logic errors<ul> <li>Program runs but doesn\u2019t do what\u2019s intended</li> <li>Example: Incorrect order of operations</li> </ul> </li> </ol>"},{"location":"CIS-12/week_2py.html#additional-notes-on-variables-and-statements-not-covered-by-the-book","title":"Additional Notes on Variables and Statements not Covered by the Book","text":"<ol> <li>Type Hints/Annotations (introduced in Python 3.5) were already mentioned above in Argument Errors section.</li> <li>F-strings or Format Strings (introduced in Python 3.6) were already mentioned above in the Variable Printing section.</li> <li> <p>Walrus operator := (introduced in Python 3.8)</p> <ul> <li>Allows assignment within expressions   <pre><code>if (n := len(data)) &gt; 10:\n    print(f\"List is too long ({n} elements, expected &lt;= 10)\")\n</code></pre></li> </ul> <pre><code>name = \"Alice\"\nage = 30\nprint(f\"{name} is {age} years old\")\n</code></pre> </li> <li> <p>Underscores in numeric literals (introduced in Python 3.6) just to make large numbers simpler to read. <pre><code>million = 1_000_000\n</code></pre></p> </li> </ol>"},{"location":"CIS-12/week_3.html","title":"Week 3 - Program Structure & More on Reading Input","text":""},{"location":"CIS-12/week_3.html#program-structure--more-on-reading-input","title":"Program Structure &amp; More on Reading Input","text":"Learning Objectives <ul> <li>First introduction to methods, parameters, arguments, and return values.</li> <li>What is a method, and how/why do we create them.</li> <li>Decomposition of problem into smaller parts.</li> </ul>"},{"location":"CIS-12/week_3.html#intro-to-methods","title":"Intro to Methods","text":"<ul> <li>Simply, a method is a named set of statements.</li> <li>It can be called from other parts of the program.<ul> <li>e.g. <code>System.out.println(\"Message\");</code> calls the method println with the String argument \u201cMessage\u201d to print message to the console.</li> <li>We can call it from anywhere in our program for the same purpose.</li> </ul> </li> <li>So far all the methods you have used/seen have been constructed for you, but you can write your own!</li> </ul>"},{"location":"CIS-12/week_3.html#anatomy-of-a-program","title":"Anatomy of a Program","text":"Given the code below, where would your Custom Methods go? <pre><code>import java.util.Scanner;\n\npublic class Example {\n    public static void main(String[] args) {\n        Scanner scanned = new Scanner(System.in);\n        // program code\n    }\n}\n</code></pre> Where the Custom Method hello is! <pre><code>import java.util.Scanner;\n\npublic class Example {\n    public static void main(String[] args) {\n        Scanner scanned = new Scanner(System.in);\n        // program code\n    }\n\n    // new Custom Method!\n    public static void hello() {\n        System.out.println(\"Greetings from the method world!\");\n    }\n}\n</code></pre> <ul> <li>Review:<ul> <li>Class names?</li> <li>main method?</li> <li>top-down, left-to-righ execution</li> <li>Scoping brackets?</li> <li>Static vs Object?</li> </ul> </li> </ul>"},{"location":"CIS-12/week_3.html#memory-in-java","title":"Memory in Java","text":"<ul> <li>Memory</li> </ul>"},{"location":"CIS-12/week_3.html#stack","title":"Stack","text":"<ul> <li>One JVM Stack per Java Thread.</li> <li>Method calls are pushed on top of the stack.</li> <li>Stacks are First-in-First-out datastructures (FIFO).</li> <li>When passing arguments, a new variable is created on the stack.</li> <li>Primitive type variables are passed by value, so changing them does not change their value, but Object variables are passed by reference, so changing them in methods does change the object.</li> <li>ALL local variables created on stack and removed from the stack upon return!</li> </ul>  Your browser does not support the video tag."},{"location":"CIS-12/week_3.html#excercise","title":"Excercise","text":"<ol> <li>What does the program below print and why?</li> <li>Hint: pass-by-value <pre><code>public static void main(String[] args) {\nint number = 10;\nmodifyNumber(number);\nSystem.out.println(number);\n}\n\npublic static void modifyNumber(int number) {\nnumber = number - 4;\n}\n</code></pre></li> </ol> Answer <p>10 because number is a primitive type and primitive types get passed by value meaning a new variable number (i.e. modifyNumber\u2019s parameter) gets put on the stack with the value 10 copied into it. Thus, the copy, not the original local variable is modified in the method.</p>"},{"location":"CIS-12/week_3.html#heap","title":"Heap","text":"<ul> <li>All the memory for you application, except the data on the stack.</li> <li>1 Heap shared among all threads</li> <li>Most objects are large, and we want to pass them around.<ul> <li>Putting them on the heap makes passing objects easy because it does it by memory reference via a variable on the stack. </li> </ul> </li> </ul>"},{"location":"CIS-12/week_3.html#packages","title":"Packages","text":"<ul> <li>Used to group related classes.</li> <li>Consider packages like directories in file-systems.</li> <li>Packages are used to avoid name conflicts, and to write a reusable and maintainable code.</li> </ul>"},{"location":"CIS-12/week_3.html#package-categories","title":"Package Categories","text":"<ul> <li>Built-in Packages (Packages from the Java API)</li> <li>User-defined Packages (Packages you create)</li> </ul>"},{"location":"CIS-12/week_3.html#built-in-packages","title":"Built-in Packages","text":"<ul> <li>Prewritten classes, that are free to use, like <code>java.util.*</code></li> <li>Included in the Java Development Environment (JDK/JRE).<ul> <li>Contains components for managing input, database programming, and more.</li> </ul> </li> <li>The Built-in library is divided into packages and classes.<ul> <li>So either import a single class (along with its methods and attributes),</li> <li>OR import an entire package containing all the classes that belong to the specified package.</li> </ul> </li> </ul>"},{"location":"CIS-12/week_3.html#user-defined-packages","title":"User-defined Packages","text":"<ul> <li>To create your own package, you need to understand that Java uses a file system directory to store them. Just like folders on your computer:</li> </ul> <pre><code>Example\n\u2514\u2500\u2500 root\n  \u2514\u2500\u2500 mypack\n    \u2514\u2500\u2500 MyPackageClass.java\n</code></pre> <ul> <li>To create a package, use the package keyword:</li> </ul> MyPackageClass.java<pre><code>package mypack;\n\nclass MyPackageClass {\npublic static void main(String[] args) {\nSystem.out.println(\"This is my package!\");\n}\n}\n</code></pre> <ol> <li> <p>Save the file as MyPackageClass.java, and compile it <pre><code>C:\\Users\\Your Name&gt;javac MyPackageClass.java\n</code></pre></p> </li> <li> <p>Then compile the package: <pre><code>C:\\Users\\Your Name&gt;javac -d . MyPackageClass.java\n</code></pre></p> </li> <li> <p>This forces the compiler to create the \u201cmypack\u201d package.</p> <ul> <li>The -d keyword specifies the destination for where to save the class file.</li> <li>You can use any directory name, like c:/user (windows), or, if you want to keep the package within the same directory, you can use the dot sign \u201c.\u201d.</li> <li>Note: The package name should be written in lower case to avoid conflict with class names.</li> </ul> </li> <li> <p>When we compiled the package in the example, a new folder was created, called \u201cmypack\u201d.</p> </li> <li> <p>To run the MyPackageClass.java file, write the following:</p> </li> </ol> <pre><code>C:\\Users\\Your Name&gt;java mypack.MyPackageClass\n</code></pre> <ol> <li>The output will be: <pre><code>This is my package!\n</code></pre></li> </ol>"},{"location":"CIS-12/week_3.html#using-packages","title":"Using Packages","text":"<ul> <li>To use a class or a package from the built-in library, you need to use the import keyword:</li> </ul> <pre><code>import package.name.Class;   // Import a single class\nimport package.name.*;   // Import the whole package\n</code></pre>"},{"location":"CIS-12/week_3.html#import-a-class","title":"Import a Class","text":"<ul> <li>Example importing the Scanner class</li> <li>java.util is a package, while Scanner is a class of the java.util package. <pre><code>import java.util.Scanner;\n</code></pre></li> </ul>"},{"location":"CIS-12/week_3.html#import-a-package","title":"Import a Package","text":"<ul> <li>There are many packages to choose from.</li> <li>We used the Scanner class from the java.util package, but this package also contains<ul> <li>date and time facilities</li> <li>random-number generator</li> <li>data structures</li> <li>and other utility classes</li> </ul> </li> <li>To import a whole package, end the sentence with an asterisk sign (*).<ul> <li>The following example will import ALL the classes in the java.util package <pre><code>import java.util.*;\n</code></pre></li> </ul> </li> </ul>"},{"location":"CIS-12/week_3py.html","title":"Week 3 - Functions","text":""},{"location":"CIS-12/week_3py.html#python-3-functions","title":"Python 3 Functions","text":""},{"location":"CIS-12/week_3py.html#introduction","title":"Introduction","text":"<ul> <li>Built-in functions (e.g., <code>int</code>, <code>float</code>) and modules (e.g., <code>math</code>).<ul> <li>The primary purpose of Python\u2019s built-in functions is to provide essential functionalities that are commonly used in programming tasks.</li> <li>Built-in functions are generally FASTER than pure Python functions for the following reasons:<ol> <li>Implementation in C avoids Interpreter Overhead: Most built-in functions in Python are implemented in C, which is a lower-level language known for its speed and efficiency.<ul> <li>C code is typically compiled into machine code that can be executed directly by the CPU, making it faster than interpreted Python code.</li> </ul> </li> <li>They leverage Hardware Capabilities: Built-in functions generally leverage hardware capabilities like vectorization or SIMD instructions to perform operations more efficiently because of their compiled nature.</li> <li>Optimization: Python\u2019s developers have optimized the implementation of built-in functions for performance.<ul> <li>They often use techniques like algorithmic improvements, caching, and inline expansion to reduce overhead and improve execution speed.</li> </ul> </li> <li>The are Specialized: Built-in functions are tailored for specific tasks and are often optimized for those particular use cases.<ul> <li>The len() function is highly optimized for determining the length of a sequence</li> <li>The abs() function is optimized for calculating the absolute value of a number.</li> </ul> </li> </ol> </li> </ul> </li> <li>Why are we talking about functions?<ul> <li>Increased code clarity</li> <li>Reusability</li> <li>Modularity by dividing and conquering a problem</li> </ul> </li> <li>You will also see <code>for</code> loops for repetition in this week\u2019s chapter! </li> </ul>"},{"location":"CIS-12/week_3py.html#defining-functions","title":"Defining Functions","text":""},{"location":"CIS-12/week_3py.html#function-definition-syntax-using-def","title":"Function definition syntax using <code>def</code>:","text":"<ul> <li>Keyword <code>def</code>: means define</li> <li>Function name: has to follow variable naming conventions</li> <li>Parentheses: parameters go insed and store the data we pass to a function. Empty for no params.</li> <li>Colon (<code>:</code>): Always end a function definition with a <code>:</code></li> <li>Body: All the properly indented statements after the header.<ul> <li>Simple example <code>print_lyrics</code><ul> <li>Displays Monty Python song lyrics: <pre><code>def print_lyrics():\n    print(\"I'm a lumberjack, and I'm okay.\")\n    print(\"I sleep all night and I work all day.\")\n</code></pre></li> </ul> </li> </ul> </li> </ul>"},{"location":"CIS-12/week_3py.html#calling-functions-just-like-built-in-functions","title":"Calling Functions (just like built-in functions)","text":"<pre><code>print_lyrics()\n</code></pre>"},{"location":"CIS-12/week_3py.html#whats-a-function-object","title":"What\u2019s a Function Object?","text":"<pre><code># Here is a function definition\ndef greet(name):\n    print(\"Hello, \" + name + \"!\")\n\n# Assigning the function object to a variable\nsay_hello = greet\n\n# Calling the function using the variable\nsay_hello(\"Alice\")  # Output: Hello, Alice!\n\n# Passing the function object as an argument to another function\ndef call_function(func, name):\n    func(name)\n\ncall_function(greet, \"Bob\")  # Output: Hello, Bob!\n</code></pre>"},{"location":"CIS-12/week_3py.html#parameters-and-arguments","title":"Parameters and Arguments","text":"<ul> <li>Parameters are Placeholders in the function definition that behave like local variables.</li> <li>Arguments are the values  passed when calling the function<ul> <li>Variables can be passed as arguments.</li> <li>We should already know this, think <code>print(my_var)</code></li> </ul> </li> <li>Functions can have multiple parameters meaning you will pass multiple arguments (e.g., <code>repeat(word, n)</code> below)<ul> <li>Later we will see functions can have unlimited arguments that get packed and unpacked.</li> </ul> </li> <li>It is critical to understand that argument values get copied to parameters within the function body: <pre><code>def repeat(word, n):\n    print(word * n)\n\nspam = 'Spam, '\nrepeat(spam, 4)  # Output: Spam, Spam, Spam, Spam,\n</code></pre></li> </ul>"},{"location":"CIS-12/week_3py.html#function-nesting-and-decomposition","title":"Function Nesting and Decomposition","text":"<ul> <li>You may call functions from within other functions, see our examples below.</li> <li>Function nesting is one way to break down complex tasks<ul> <li>Consider the code below (e.g., <code>print_verse</code> using <code>repeat</code> and <code>first_two_lines</code>, <code>last_three_lines</code>)</li> <li>This process of breaking down tasks is known as Decomposition</li> </ul> </li> </ul> <pre><code>def first_two_lines():\n    repeat(spam, 4)\n    repeat(spam, 4)\n\ndef last_three_lines():\n    repeat(spam, 2)\n    print('(Lovely Spam, Wonderful Spam!)')\n    repeat(spam, 2)\n\ndef print_verse():\n    first_two_lines()\n    last_three_lines()\n</code></pre> <ul> <li>Let\u2019s look at a well-designed set of functions to show modularity and reusability: <pre><code>def calculate_circle_area(radius):\n    pi = 3.14159\n    return pi * radius * radius\n\ndef calculate_square_area(side_length):\n    return side_length * side_length\n\ndef calculate_rectangle_area(width, height):\n    return width * height\n\ndef calculate_area(shape, **kwargs):\n    if shape == \"circle\":\n        return calculate_circle_area(**kwargs)\n    elif shape == \"square\":\n        return calculate_square_area(**kwargs)\n    elif shape == \"rectangle\":\n        return calculate_rectangle_area(**kwargs)\n    else:\n        raise ValueError(f\"Unknown shape: {shape}\")\n\n# Example usage\nradius = 5\nside_length = 10\nwidth = 8\nheight = 6\n\ncircle_area = calculate_area(\"circle\", radius=radius)\nsquare_area = calculate_area(\"square\", side_length=side_length)\nrectangle_area = calculate_area(\"rectangle\", width=width, height=height)\n\nprint(\"Circle area:\", circle_area)\nprint(\"Square area:\", square_area)\nprint(\"Rectangle area:\", rectangle_area)\n</code></pre></li> </ul>"},{"location":"CIS-12/week_3py.html#first-glimpse-at-repetition","title":"First Glimpse at Repetition","text":""},{"location":"CIS-12/week_3py.html#for-loop-syntax","title":"For Loop Syntax","text":"<ul> <li>Keyword <code>for</code></li> <li>Loop variable</li> <li>Keyword <code>in</code></li> <li>Iterable object (e.g., <code>range(n)</code>)</li> <li>Colon (<code>:</code>)</li> <li>Body (indented statements)</li> </ul>"},{"location":"CIS-12/week_3py.html#for-loop-examples","title":"For Loop Examples:","text":"<pre><code>for i in range(2):\n    print(i)  # Output: 0\n             #        1\n</code></pre> <pre><code>for i in range(2):\n    print_verse()\n</code></pre>"},{"location":"CIS-12/week_3py.html#nesting-for-loops-and-functions","title":"Nesting <code>for</code> Loops and Functions","text":"<pre><code>def print_n_verses(n):\n    for i in range(n):\n        print_verse()\n</code></pre>"},{"location":"CIS-12/week_3py.html#nesting-for-loops-and-for-loops","title":"Nesting <code>for</code> Loops and <code>for</code> Loops","text":"<pre><code>rows = 10\ncolumns = 10\n\nfor i in range(1, rows + 1):\n    for j in range(1, columns + 1):\n        product = i * j\n        print(f\"{i} x {j} = {product}\", end=\"\\t\")\n    print()\n</code></pre>"},{"location":"CIS-12/week_3py.html#local-scope","title":"Local Scope","text":"<ul> <li>Local variables<ul> <li>Created within a function.</li> <li>Accessible only within the function.</li> <li>Pop off the stack (i.e. go away) when the function returns.</li> </ul> </li> <li>Errors are thrown when trying to access local variables outside the function scope</li> </ul>"},{"location":"CIS-12/week_3py.html#examples","title":"Examples","text":"<p><pre><code>def cat_twice(part1, part2):\n    cat = part1 + part2\n    print_twice(cat)\n\nline1 = 'Always look on the '\nline2 = 'bright side of life.'\ncat_twice(line1, line2)  # Output: Always look on the bright side of life.\n\nprint(cat)  # This would raise a NameError\n</code></pre> * Treat parameters like local scoped variables as well.</p>"},{"location":"CIS-12/week_3py.html#debugging","title":"Debugging","text":""},{"location":"CIS-12/week_3py.html#stack-diagrams","title":"Stack Diagrams","text":"<ul> <li>Let\u2019s revisit Python Tutor<ul> <li>Visualize function calls and variable scope.</li> <li>Look at stack/frames representing functions and their local variables.</li> <li>Look at the above <code>cat_twice</code> example to gain understanding of previous concepts.</li> </ul> </li> </ul>"},{"location":"CIS-12/week_3py.html#tracebacks","title":"Tracebacks","text":"<ul> <li>Tracebacks are error messages listing the function call stack.</li> <li>Let\u2019s look at print_twice below, which throws a <code>NameError</code>, to view a traceback:</li> </ul> <pre><code>def print_twice(string):\n    print(cat)  # NameError\n    print(cat)\n</code></pre> <ul> <li>As you should see, the traceback shows the sequence of functions leading up to the error.</li> </ul>"},{"location":"CIS-12/week_3py.html#more-debugging-help","title":"More Debugging Help","text":"<ul> <li>Debugging is just problem-solving and experimentation.<ul> <li>Use print statements for skaffolding</li> <li>Use IDE breakpoints and debugger tools</li> </ul> </li> <li>A good practice to create bug free code is ta start with a working program and make small modifications.</li> <li>Peer code reviews and AI Chatbots are also great debugging tools</li> </ul>"},{"location":"CIS-12/week_3py.html#recap-on-the-benefits-of-functions","title":"Recap on the Benefits of Functions","text":"<ul> <li>Improved code readability and maintainability through clear naming.</li> <li>Reduced code duplication and easier updates through centralized function changes.</li> <li>Easier debugging by focusing on individual functions.</li> <li>Reusability across different programs.</li> </ul>"},{"location":"CIS-12/week_3py.html#terms-the-book-thinks-you-should-know","title":"Terms the Book thinks you should know","text":"<ul> <li>Look these up as an excercise, or quiz yourself out loud!</li> <li>function definition</li> <li>header</li> <li>body</li> <li>function object</li> <li>parameter</li> <li>loop</li> <li>local variable</li> <li>stack diagram</li> <li>stack/frame</li> <li>traceback</li> </ul>"},{"location":"CIS-12/week_4.html","title":"Week 4 - Methods","text":""},{"location":"CIS-12/week_4.html#methods","title":"Methods","text":""},{"location":"CIS-12/week_4.html#method-signature","title":"Method Signature","text":"<ul> <li>Access Modifer (public, protected, private),<ul> <li>Optional [static] modifier,<ul> <li>Return Type (void, double, String, Object, etc)<ul> <li>Method Name (Anything you want following nameing convention)<ul> <li>Method Parameters (Comma separated list of DataType parameterName)</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"CIS-12/week_4.html#staticclass-method","title":"Static/Class Method","text":""},{"location":"CIS-12/week_4.html#first-lets-re-visit-static","title":"First Let\u2019s Re-Visit Static","text":"<ul> <li>In the Student class below remember you can declare static variables, which are variables that won\u2019t vary with instances of a class.</li> </ul> <pre><code>class Student {\nString name;   // Student name always varies with student\nString ssn;    // Student social security number always varies with the student.\nint startYear; // The student's academic start year will always vary with the student.\nstatic String institution;  // static variable because the current school/institution does not vary per student.\nstatic int semester;        // static variable because the current semester will not vary per student.\n}\n</code></pre> <ul> <li>Storing variables statically is more memory efficient because we don\u2019t have separate storage locations for institution and semester per student.</li> <li>Because static means class-level we only allocate memory for these variables once when the class is loaded.</li> <li> <p>Static is largely used for efficient memory mangagment in Java.</p> </li> <li> <p>Example of a static or class method (i.e. belongs to the class) <pre><code>public class MyClass {\npublic static void main(String args[]) {\n// Method block statments go here...\n}\n}\n</code></pre></p> </li> <li> <p>Every instance of the class has access to the static/class method.</p> <ul> <li>If ANY instance of the class modifies the static variable, its modified for ALL Instances</li> </ul> </li> <li>Static methods can access static/class variables without an object instance.</li> <li>Only static data can be accessed.</li> <li>All static variables and methods are stored in the Heap when a class is loaded, but the Addresses are shared.<ul> <li>Prior to Java 8, there used to be a static/non-heap memory location called the Method Area or PermGen where they were stored, but this is no longer used.</li> <li>A new area of Heap called MetaSpace is now used where all the names fields of the class, methods of a class with the byte code of methods, constant pool, JIT optimizations are stored.</li> </ul> </li> </ul> <p> Static Instance Counter<pre><code>public class InstanceCounter {\n\nprivate static int numInstances = 0;\n\nprotected static int getCount() {\nreturn numInstances;\n}\n\nprivate static void addInstance() {\nnumInstances++;\n}\n\nInstanceCounter() {\nInstanceCounter.addInstance();\n}\n\npublic static void main(String[] arguments) {\nSystem.out.println(\"Starting with \" + InstanceCounter.getCount() + \" instances\");\n\nfor (int i = 0; i &lt; 500; ++i) {\nnew InstanceCounter();\n}\nSystem.out.println(\"Created \" + InstanceCounter.getCount() + \" instances\");\n}\n}\n</code></pre></p> <ul> <li>This is a mental picture, of Instance methods, but in reality a single memory location is used and the Object pointer is passed to it.  Object Instance Counter<pre><code>public class InstanceCounter {\n\nprivate static int numInstances = 0;\n\nprotected static int getCount() {\nreturn numInstances;\n}\n\nprivate void addInstance() {\nnumInstances++;\n}\n\nInstanceCounter() {\nthis.addInstance();\n}\n\npublic static void main(String[] arguments) {\nSystem.out.println(\"Starting with \" + InstanceCounter.getCount() + \" instances\");\n\nfor (int i = 0; i &lt; 500; ++i) {\nnew InstanceCounter();\n}\nSystem.out.println(\"Created \" + InstanceCounter.getCount() + \" instances\");\n}\n}\n</code></pre></li> </ul>"},{"location":"CIS-12/week_4.html#publicobjectinstance-method","title":"Public/Object/Instance Method","text":"<ul> <li> <p>Example of a public or object/instance method (i.e. can only be called from an object instance)</p> <pre><code>public class MyClass {\n    public String sayHello(String firstName, String lastName) {\n        return \"Hello %s %s!\".format(firstName, lastName);\n    }\n}\n</code></pre> </li> <li> <p>Does NOT contain static keyword.</p> </li> <li>Requires an Object Instance to call.<ul> <li>Belong to the Object of the class, not to the class</li> </ul> </li> <li>Are NOT stored on a per-instance basis, even with virtual methods (CIS-18 will talk about these).<ul> <li>They\u2019re stored in a single memory location, and they only know which object they belong to because the Object\u2019s pointer is passed when you call them.</li> </ul> </li> <li>They can be overridden since they are resolved using dynamic binding (binding method to method body/declaration) at run time.</li> </ul>"},{"location":"CIS-12/week_4.html#calling-methods","title":"Calling Methods","text":""},{"location":"CIS-12/week_4.html#calling-a-staticclass-method","title":"Calling a Static/Class Method","text":"<ul> <li>Example calling the static/class method<pre><code>MyClass.main(new String[]);\n</code></pre> </li> </ul>"},{"location":"CIS-12/week_4.html#calling-an-objectinstance-method","title":"Calling an Object/Instance Method","text":"<ul> <li>Example calling the public/object/instance method<pre><code>MyClass myClass = new MyClass();\nmyClass.sayHello(\"Trevor\", \"Hartman\");\n</code></pre> </li> </ul>"},{"location":"CIS-12/week_4.html#scope","title":"Scope","text":""},{"location":"CIS-12/week_4.html#static-variable--method-scope","title":"Static Variable / Method Scope","text":"<ul> <li>You can NOT declare static variables in <code>main(String[] args)</code> or any other method.</li> <li>Static variables/methods must be declared as class members, since the belong to the class.</li> <li>Static variables/methods can be accessed by calling the class name, no instance needed.</li> <li>Static variables/methods can be called from static OR non-static methods.</li> </ul>"},{"location":"CIS-12/week_4.html#non-static--instance-method-scope","title":"Non-Static / Instance Method Scope","text":"<ul> <li>Can only be accessed by first creating an instance of the class.</li> <li>Trying to access a non-static variable from a static method is an error.</li> </ul> Error Example<pre><code>public class Scaler {\n\nint number;\n\nstatic void check() {\n// Error as non-static number is accessed in a static method\nSystem.out.println(number);\n}\n\nvoid check1() {\nSystem.out.println(number); // Valid accessing\n}\n}\n</code></pre> Example of Proper Access<pre><code>public class Main {\n\nstatic int age = 10;\nint objAge;\n\npublic Main(int objAge) {\nthis.objAge = objAge;\n}\n\npublic int getObjAge() {\nreturn this.objAge;\n}\n\npublic static void main(String[] args) {\n// Static variable access in static Method\nSystem.out.println(Main.age);\nSystem.out.println(age);\n\n// Object/Instance method access to static variable (works with WARNINGs)\nMain ob = new Main();\nSystem.out.println(ob.age);  // WARNING\nSystem.out.println(ob.objAge); // Need an object to access non-static variable\nSystem.out.println(ob.getObjAge()); // Need an object to access non-static variable\n}\n}\n</code></pre>"},{"location":"CIS-12/week_4.html#what-do-we-use-methods-for","title":"What do we use Methods for?","text":"<ul> <li>Reuseable Code! <ul> <li>i.e. don\u2019t have to rewrite System.out.println from scratch every time we want to print to console.</li> </ul> </li> <li>Parameterize Code<ul> <li>Allow us to provide a parameters that changes the way the code works.</li> </ul> </li> <li>Top-Down Programming<ul> <li>Solve big problems by breaking it down into smaller parts (i.e. methods)</li> </ul> </li> <li>Smaller Conceptual Units (Cleaner Code)<ul> <li>Makes it easier to debug and maintain the code over-time if methods are concise and well-named.</li> </ul> </li> <li>Abstraction<ul> <li>Methods hide local variables and implementation from rest of code, simplifying other parts of the program.</li> </ul> </li> </ul>"},{"location":"CIS-12/week_4.html#when-to-use-static-methods","title":"When to use Static Methods","text":"<ul> <li> <p>Static Methods criteria for use</p> <ul> <li>static methods can\u2019t modify the state of an object.<ul> <li>4 wheels of a car, but all 4 are independent or have independent state.</li> </ul> </li> <li>static methods mostly operate on arguments passed into it, commonly Utility Methods.<ul> <li>java.lang.Math or StringUtils both only really perform action on arguments.</li> <li>StringUtils.isEmpty(String text)</li> </ul> </li> <li>if you need a method to act on the entire class hierarchy<ul> <li>equals() method for Ojbects is a good example</li> </ul> </li> </ul> </li> <li> <p>Other Examples of Static Methods</p> <ul> <li>Factory design pattern (i.e. a method to CREATE other objects)</li> <li>Utility methods like Array (provides methods that only work on array arguments)</li> <li>valueOf functions that convert types</li> </ul> </li> <li> <p>Every other type of method should be a public/object/instance method</p> </li> </ul>"},{"location":"CIS-12/week_4.html#method-parameters","title":"Method Parameters","text":"<ul> <li>Parameters are values given to a method that can be used in its execution.</li> <li>The parameters of a method are defined on the uppermost line of the method within the parentheses following its name.</li> <li>The values of the parameters that the method can use are copied from the argument values given to the method when it is executed.</li> </ul> <p>Example Parameterized Method<pre><code>public class Main {\npublic static void greet(int numOfTimes) {\nint i = 0;\nwhile (i &lt; numOfTimes) {\nSystem.out.println(\"Greetings!\");\ni++;\n}\n}\n\npublic static void main(String[] args) {\ngreet(1);\nSystem.out.println(\"\");\ngreet(3);\n}\n}\n</code></pre> * A method can be defined with multiple parameters.     * When calling such a method, the parameters are passed in the same order. <pre><code>public class Main {\npublic static void main(String[] args) {\nsum(3, 5);\n\nint number1 = 2;\nint number2 = 4;\n\nSystem.out.println(\"\" + number1 + \" + \" + number2 + \" = \" + sum(number1, number2));\n}\n\npublic static int sum(int first, int second) {\nreturn first + second;\n}\n}\n</code></pre></p>"},{"location":"CIS-12/week_4.html#excercises","title":"Excercises","text":"<ol> <li>Create a method called printText which prints the phrase \u201cIn a hole in the ground there lived a method\u201d and a newline.</li> </ol> Exercise 1 <pre><code>public class Main {\npublic static void main(String[] args) {\nMain.printText();\n}\n\npublic static void printText() {\nSystem.out.println(\"In a hole in the ground there lived a method.\");\n}\n}\n</code></pre> <ol> <li>The code below contains a method that has been named with an incorrect style. <pre><code>public static void printcodingis_cool() {\nSystem.out.println(\"Coding is cool!\");\n}\n</code></pre></li> </ol> Exercise 2 <pre><code>public static void printCodingIsCool() {\n}\n</code></pre> <ol> <li>Write a method public static void division(int numerator, int denominator) that prints the result of the division of the numerator by the denominator. Keep in mind that the result of the division of the integers is an integer \u2014 in this case we want the result to be a floating point number.</li> </ol> Exercise 3 <pre><code>public class Main {\npublic static void main(String[] args) {\nMain.division(22, 7);\n}\n\npublic static void division(int numerator, int denominator) {\nSystem.out.println(1.0*numerator/denominator);\n}\n}\n</code></pre>"},{"location":"CIS-12/week_4py.html","title":"Week 4 - Functions and Interfaces","text":""},{"location":"CIS-12/week_4py.html#functions-and-interfaces","title":"Functions and Interfaces","text":""},{"location":"CIS-12/week_4py.html#the-jupyturtle-or-turtle-module","title":"The <code>jupyturtle</code> OR <code>turtle</code> module","text":"<ul> <li><code>jupyturtle</code>: Used for turtle graphics to create simple drawings in Google CoLab.</li> <li>Main functions:</li> <li><code>make_turtle()</code>: Creates a canvas and a turtle to draw.</li> <li><code>forward(100)</code>: Moves the turtle 100 units forward.</li> <li><code>left(90)</code>, <code>right(90)</code>: Turns the turtle by a specified angle in degrees.</li> <li><code>turtle</code>: Is turtle graphics to create simple drawings in IDEs like PyCharm.</li> <li><code>t = turtle.Turtle()</code>: Creates a window canvas and a turtle to draw.</li> <li><code>t.forward(100)</code>: Moves the turtle 100 units forward.</li> <li><code>t.left(90)</code>, <code>right(90)</code>: Turns the turtle by a specified angle in degrees.</li> </ul>"},{"location":"CIS-12/week_4py.html#google-colab-code-example","title":"Google CoLab Code Example:","text":"<pre><code>from jupyturtle import make_turtle, forward, left\n\nmake_turtle()\nforward(100)\nleft(90)\nforward(100)\n</code></pre>"},{"location":"CIS-12/week_4py.html#pycharm-code-example","title":"PyCharm Code Example:","text":"<pre><code>import turtle\n\n# Create a turtle object\nt = turtle.Turtle()\n\n# Hide the turtle and set speed\nt.speed(10)  # 1 is slow, 10 is fast, 0 is instant\nt.hideturtle()\n\n# Create a window to draw in\n# Create a new turtle screen and set its background color\nscreen = turtle.Screen()\nscreen.bgcolor(\"darkblue\")\n# Set the width and height of the screen\nscreen.setup(width=600, height=600)\n# Clear the screen\nt.clear()\n\nt.forward(100)\nt.left(90)\nt.forward(100)\n\n# Close the turtle graphics window when clicked\nturtle.exitonclick()\n</code></pre>"},{"location":"CIS-12/week_4py.html#repeating-commands","title":"Repeating Commands","text":"<ul> <li>Use for and while loops to simplify repetitious code: <pre><code>from jupyturtle import make_turtle, forward, left\n\nmake_turtle()\nfor i in range(4):\n    forward(50)\n    left(90)\n</code></pre></li> </ul>"},{"location":"CIS-12/week_4py.html#encapsulation-and-generalization","title":"Encapsulation and Generalization","text":"<ul> <li>Encapsulation: Wrap code into a function for reuse.</li> <li>Generalization: Make functions more flexible by using parameters.</li> </ul> <pre><code>def square(length):  # Parameters are used to make the code more general.\n    for i in range(4):\n        forward(length)\n        left(90)\n\nmake_turtle()\nsquare(30)  # Then we can modify behavior by passing different arguments.\nsquare(60)\n</code></pre>"},{"location":"CIS-12/week_4py.html#refactoring","title":"Refactoring","text":"<ul> <li>Refactoring: Improve code structure by organizing repeated logic into reusable functions (e.g., polyline).</li> <li>Creating arcs: The arc function draws part of a circle based on an angle.<ul> <li>Both of the functions below were used to demonstrate how the author refactored functions like polygon and circle into simpler more generalized implementaions.</li> <li>Refactoring is the process, generalization is what occurred. <pre><code>def polyline(n, length, angle):\n    for i in range(n):\n        forward(length)\n        left(angle)\n\ndef arc(radius, angle):\n    arc_length = 2 * math.pi * radius * angle / 360\n    n = 30\n    length = arc_length / n\n    step_angle = angle / n\n    polyline(n, length, step_angle)\n\nmake_turtle(delay=0)\narc(radius=70, angle=70)\n</code></pre></li> </ul> </li> </ul>"},{"location":"CIS-12/week_4py.html#stack-diagrams-yes-again","title":"Stack Diagrams (Yes Again)","text":"<ul> <li>Let\u2019s use Python Tutor to visualize the stack of function calls when calling circle -&gt; arc -&gt; polyline: <pre><code>def polyline(n, length, angle):  # This is really generalized and flexible now.\n    for i in range(n):\n        my_turtle.forward(length)\n        my_turtle.left(angle)\n\ndef arc(radius, angle):  # Similar to circle, but can do fractional circles.\n    arc_length = 2 * math.pi * radius * angle / 360  # Here we calculate how much of the arc of a circle to draw.\n    n = 30  # We fix the segments to 30 still, but this is 30 segments per arc, so smaller arcs will appear smoother.\n    length = arc_length / n\n    step_angle = angle / n  # Since we are covering a fraction of the arc of a circle, we need smaller angles too.\n    polyline(n, length, step_angle)  # And now we approximate the arc with polyline.\n\ndef circle(radius):\n    arc(radius, 360)\n</code></pre></li> </ul>"},{"location":"CIS-12/week_4py.html#plan-your-development","title":"Plan Your Development","text":"<ul> <li>You can take steps to make your development process more efficient and less error prone. Here are some suggestions:<ol> <li>Start small without functions.</li> <li>Encapsulate parts of code into functions.</li> <li>Generalize functions with parameters.<ul> <li>The process of doing this is often referred to as Interface design and the function headers are often called interfaces.</li> </ul> </li> <li>Refactor as needed for cleaner, reusable code.</li> </ol> </li> <li>Rinse and Repeat!</li> </ul>"},{"location":"CIS-12/week_4py.html#docstrings","title":"Docstrings","text":"<ul> <li>Docstrings: Document function interfaces, parameter types, and effects.</li> <li>Multiline strings: Use triple quotes for detailed docstrings.</li> <li>Example of a good docstring: <pre><code>def polyline(n, length, angle):\n\"\"\"Draws line segments with the given length and angle between them.\n\n    n: integer number of line segments\n    length: length of the line segments\n    angle: angle between segments (in degrees)\n    \"\"\"\n    for i in range(n):\n        forward(length)\n        left(angle)\n</code></pre></li> <li>Later we will see that you can use docstrings to help automatically test your code!</li> </ul>"},{"location":"CIS-12/week_4py.html#debugging","title":"Debugging","text":"<ul> <li>Preconditions: Conditions that must be true before the function is called.</li> <li>Postconditions: Conditions that should be true after the function has executed.</li> <li>Responsibility: If preconditions aren\u2019t met, it\u2019s the caller\u2019s fault. If postconditions aren\u2019t met, it\u2019s the function\u2019s fault.</li> </ul>"},{"location":"CIS-12/week_6.html","title":"Week 6","text":""},{"location":"CIS-12/week_6.html#conditionals","title":"Conditionals","text":""},{"location":"CIS-12/week_6.html#you-will-understand-why-we-need-conditions","title":"You Will Understand Why We Need Conditions","text":"<ul> <li>To make decisions based off different inputs.</li> <li>Perform different actions in the same program.</li> </ul>"},{"location":"CIS-12/week_6.html#basics","title":"Basics","text":"<ul> <li>if, switch, else if</li> <li>boolean expression, boolean variable, boolean method call</li> <li>executes or bypasses statements in block<pre><code>if (x &gt; 0) {\n    System.out.println(\"x is positive\");\n} else if(x == 0) {\n    System.out.println(\"x is 0\");\n} else {\n    if( x &gt; -10 ) {\n        System.out.println(\"x is negative, but barely\");\n    }\n    System.out.println(\"x is negative\");\n}\n</code></pre> </li> </ul>"},{"location":"CIS-12/week_6.html#relational-operators-or-comparison-operators","title":"Relational operators OR Comparison Operators","text":"<pre><code>    x == y // x is equal to y\n    x != y // x is not equal to y\n    x &gt; y  // x is greater than y\n    x &lt; y  // x is less than y\n    x &gt;= y // x is greater than or equal to y\n    x &lt;= y // x is less than or equal to y\n    // Strings are different because they are special/immutable objects\n    aStr.equals(\"abc\");\n</code></pre>"},{"location":"CIS-12/week_6.html#logical-operators","title":"Logical operators","text":"<pre><code>    &amp;&amp;  Logical and Returns true if both statements are true    x &lt; 5 &amp;&amp;  x &lt; 10    \n    ||  Logical or  Returns true if one of the statements is true   x &lt; 5 || x &lt; 4  \n    !   Logical not Reverse the result, returns false if the result is true !(x &lt; 5 &amp;&amp; x &lt; 10)\n</code></pre>"},{"location":"CIS-12/week_6.html#short-circuit-evaluation","title":"Short Circuit Evaluation","text":"<ul> <li>The first condition that satisfies the condition stops evaluation</li> </ul>"},{"location":"CIS-12/week_6.html#demorgans-law","title":"DeMorgan\u2019s Law","text":"<pre><code>    !(A &amp;&amp; B) isthesameas !A || !B\n    !(A || B) isthesameas !A &amp;&amp; !B\n</code></pre>"},{"location":"CIS-12/week_6.html#recursion-is-important","title":"Recursion is Important","text":"<ul> <li>But we\u2019re not going to cover that much in this class</li> </ul>"},{"location":"CIS-12/week_6.html#review","title":"Review","text":"<ul> <li>Modulus</li> <li>Variables in methods</li> <li>Why we use methods</li> <li>class/static vs public/object/instance</li> </ul>"},{"location":"CIS-12/week_6L.html","title":"Week 6 - Conditions","text":""},{"location":"CIS-12/week_6L.html#java-conditions","title":"Java Conditions","text":"<ul> <li>A quick reference</li> </ul>"},{"location":"CIS-12/week_6L.html#learning-objectives","title":"Learning Objectives","text":"<ol> <li>Understand the Concept of Conditionals: Ensure students understand the basic concept of conditionals, which allow a program to make decisions based on certain conditions.</li> <li>Introduction to Boolean Values: Introduce the boolean data type and explain how it represents true or false values, which are essential for conditionals.</li> <li>If Statements: Teach students how to use the if statement to execute a block of code when a specified condition is true.</li> <li>Else Statements: Explain how to use the else statement to execute a block of code when the if condition is false.</li> <li>Else-If Statements: Introduce the else if statement to handle multiple conditions and provide alternatives when the initial if condition is false.</li> <li>Nested Conditionals: Show how to nest conditional statements within each other to create more complex decision-making structures.</li> <li>Switch Statements: Teach students how to use the switch statement to select one of many code blocks to execute based on the value of a single expression.</li> <li>Logical Operators: Explain the logical operators (&amp;&amp;, ||, !) and how they can be used to combine and manipulate boolean expressions in conditionals.</li> <li>Comparative Operators: Introduce comparative operators (==, !=, &lt;, &lt;=, &gt;, &gt;=) and show how to use them to compare values in conditionals.</li> </ol>"},{"location":"CIS-12/week_6L.html#understand-the-concept-of-conditionals","title":"Understand the Concept of Conditionals","text":""},{"location":"CIS-12/week_6L.html#what-are-conditionals","title":"What Are Conditionals?","text":"<p>Conditionals in programming are like decision-making tools for a computer. They allow the computer to make choices and take different actions based on specific conditions or criteria. Imagine it as a branching path in a story where the plot changes depending on the choices made.</p>"},{"location":"CIS-12/week_6L.html#why-do-we-use-conditionals","title":"Why Do We Use Conditionals?","text":"<p>We use conditionals to make our programs smart and responsive. Just like in real life, we often make decisions based on certain conditions. For example, if it\u2019s raining, you might decide to take an umbrella with you. If it\u2019s not raining, you might leave the umbrella at home. Similarly, conditionals help our programs make decisions and respond accordingly.</p>"},{"location":"CIS-12/week_6L.html#how-do-conditionals-work","title":"How Do Conditionals Work?","text":"<p>In programming, we use conditionals to check whether something is true or false. Think of it as asking a yes-or-no question. If the answer is \u201cyes\u201d (true), the program does one thing; if the answer is \u201cno\u201d (false), it does something else. Here\u2019s a simple example in Java:</p> <pre><code>if (itIsRaining) {\ntakeUmbrella();\n} else {\nleaveUmbrellaAtHome();\n}\n</code></pre> <p>In this code:</p> <ul> <li>We have a condition: itIsRaining.</li> <li>If itIsRaining is true, the program calls takeUmbrella().</li> <li>If itIsRaining is false, the program calls leaveUmbrellaAtHome().</li> </ul> <p>So, conditionals help our program adapt and make choices based on the situation, just like we do in everyday life.</p>"},{"location":"CIS-12/week_6L.html#real-life-analogy","title":"Real-Life Analogy:","text":"<p>When the light is green, you go. When it\u2019s red, you stop. Conditionals in programming work similarly by determining what the program should do based on specific conditions.</p>"},{"location":"CIS-12/week_6L.html#introduction-to-boolean-values","title":"Introduction to Boolean Values","text":""},{"location":"CIS-12/week_6L.html#the-basics","title":"The Basics:","text":"<p>In programming, we often need to work with conditions that can be either true or false. Boolean values are like the \u201cyes\u201d and \u201cno\u201d answers in programming.</p>"},{"location":"CIS-12/week_6L.html#real-life-examples","title":"Real-Life Examples:","text":"<p>These real-life examples illustrate the concept of true and false:</p> <ol> <li>Light Switch:</li> </ol> <p>True: When the light switch is in the \u201con\u201d position, the light is on. False: When the light switch is in the \u201coff\u201d position, the light is off.</p> <ol> <li>Weather Conditions:</li> </ol> <p>True: If it\u2019s raining outside, you need an umbrella. False: If it\u2019s not raining, you don\u2019t need an umbrella.</p> <ol> <li>Traffic Light:</li> </ol> <p>True: When the traffic light is green, it means you can go. False: When the traffic light is red, it means you must stop.</p> <ol> <li>Door Lock:</li> </ol> <p>True: If the door is locked, you cannot enter without a key. False: If the door is unlocked, you can enter without a key.</p> <ol> <li>Alarm Clock:</li> </ol> <p>True: When the alarm clock\u2019s time matches the set alarm time, it rings to wake you up. False: When the alarm clock\u2019s time doesn\u2019t match the set alarm time, it remains silent.</p> <ol> <li>Weather Forecast:</li> </ol> <p>True: If the weather forecast predicts rain, you might carry an umbrella. False: If the forecast predicts clear skies, you won\u2019t need an umbrella.</p> <ol> <li>Binary Code:</li> </ol> <p>True: In binary code (used in computers), \u201c1\u201d represents true or on, while \u201c0\u201d represents false or off.</p> <ol> <li>Password Authentication:</li> </ol> <p>True: Entering the correct password grants access to a secure account. False: Entering an incorrect password denies access.</p> <ol> <li>Game State:</li> </ol> <p>True: In a video game, if your character has low health points (HP), you may need to find health potions. False: If your character has full health, you don\u2019t need to find health potions.</p> <ol> <li>Smartphone Screen:</li> </ol> <p>True: When you touch the smartphone screen, it responds to your touch. False: When you don\u2019t touch the screen, it remains inactive.</p> <p>These real-life examples demonstrate situations where the concept of true (yes) and false (no) decisions is clear.</p>"},{"location":"CIS-12/week_6L.html#the-boolean-data-type","title":"The boolean Data Type:","text":"<p>In Java, we use the boolean keyword to declare boolean variables.</p> <pre><code>boolean isSkyBlue = true;\nboolean isLightOn = false;\n</code></pre>"},{"location":"CIS-12/week_6L.html#relate-boolean-data-type-to-conditions","title":"Relate boolean Data Type to Conditions:","text":"<p>Boolean values are often used in conditions to make decisions. For example:</p> <pre><code>if (isSkyBlue) {\n// Do something when the sky is blue\n} else {\n// Do something else when the sky is not blue\n}\n</code></pre>"},{"location":"CIS-12/week_6L.html#logical-thinking","title":"Logical Thinking:","text":"<p>Ask questions like:</p> <ul> <li>If it\u2019s sunny (true), should you bring sunglasses?</li> <li>If it\u2019s not sunny (false), do you still need sunglasses?</li> </ul> <p>boolean values are about making choices based on conditions.</p>"},{"location":"CIS-12/week_6L.html#boolean-operators","title":"Boolean Operators:","text":"<ul> <li>&amp;&amp; (logical AND): Returns true only if both conditions are true.</li> <li>|| (logical OR): Returns true if at least one condition is true.</li> <li>! (logical NOT): Flips the boolean value (true becomes false, and vice versa).</li> <li>^ (XOR or Exclusive OR): Returns true if condition A or B is true, but NOT both A and B.</li> </ul>"},{"location":"CIS-12/week_6L.html#practice","title":"Practice:","text":"<pre><code>boolean isSunny = true;\nboolean isWarm = true;\n\nif (isSunny &amp;&amp; isWarm) {\n// You might want to go to the beach\n} else {\n// Consider other plans\n}\n</code></pre>"},{"location":"CIS-12/week_6L.html#visual-aids","title":"Visual Aids:","text":"<ul> <li>Basic if else</li> </ul> graph LR A[Start] --&gt; B[Evaluate Condition] B --&gt;|Yes| C[Take an umbrella] B --&gt;|No| D[No need for an umbrella] C --&gt; E[End] D --&gt; E  <ul> <li>if, else if, else</li> </ul> graph LR A[Start] --&gt; B[Evaluate Condition 1] B --&gt;|Yes| C[Take an umbrella] B --&gt;|No| D[Evaluate Condition 2] D --&gt;|Yes| E[Take a light jacket] D --&gt;|No| F[Leave the umbrella at home] E --&gt; G[End] C --&gt; G F --&gt; G"},{"location":"CIS-12/week_6L.html#basic-statements-in-java","title":"Basic Statements in Java","text":""},{"location":"CIS-12/week_6L.html#if","title":"If","text":"<ol> <li>Syntax of the \u201cif\u201d statement<ul> <li>Includes the keyword if, followed by a condition enclosed in parentheses, and a block of code enclosed in curly braces. <pre><code>if (condition) {\n// Code to execute if the condition is true\n}\n</code></pre></li> </ul> </li> <li>Boolean Expressions: The condition in an \u201cif\u201d statement must evaluate to a boolean expression, which can be either true or false.<ul> <li>The \u201cif\u201d statement executes the code block if the condition is true and skips it if the condition is false.</li> </ul> </li> <li>Decision-Making: \u201cif\u201d statements are used for decision-making in programming.<ul> <li>They allow the program to take different actions based on whether a specific condition is met.</li> </ul> </li> <li>Indentation: Proper code indentation within the \u201cif\u201d statement\u2019s block improves code readability.</li> <li>Blocks of Code: Code to be executed when the condition is true should be enclosed within curly braces {}.<ul> <li>If there\u2019s only a single statement to execute, the braces are optional, but it\u2019s recommended to use them for clarity and maintainability.</li> </ul> </li> <li>Execution Flow: The program\u2019s flow of execution is affected by the \u201cif\u201d statement.<ul> <li>If the condition is true, the code inside the \u201cif\u201d block is executed, and then the program continues with the next statement after the \u201cif\u201d statement.</li> <li>If the condition is false, the \u201cif\u201d block is skipped, and the program moves directly to the next statement. <pre><code>int age = 18;\n\nif (age &gt;= 18) {\nSystem.out.println(\"You are eligible to vote.\");\n}\n</code></pre></li> </ul> </li> <li>Logical Operators: Logical operators can be used to create compound conditions in \u201cif\u201d statements.</li> </ol> <pre><code>int age = 25;\n\nif (age &gt;= 18 &amp;&amp; age &lt;= 30) {\nSystem.out.println(\"You are a young adult.\");\n}\n</code></pre> <pre><code>String username = \"user123\";\nString password = \"securePass\";\n\nif (username.equals(\"user123\") &amp;&amp; password.equals(\"securePass\")) {\nSystem.out.println(\"Login successful.\");\n}\n</code></pre> <pre><code>boolean isSunny = true;\nboolean isWeekend = false;\n\nif (isSunny || isWeekend) {\nSystem.out.println(\"Let's go for a picnic!\");\n}\n</code></pre> <pre><code>int grade = 75;\n\nif (grade &gt;= 60 &amp;&amp; !(grade &gt;= 90)) {\nSystem.out.println(\"You passed, but you didn't get an A.\");\n}\n</code></pre> <pre><code>double totalAmount = 120.0;\nboolean isMember = true;\n\nif ((totalAmount &gt;= 100.0 &amp;&amp; totalAmount &lt;= 200.0) || isMember) {\nSystem.out.println(\"You are eligible for a discount.\");\n} else {\nSystem.out.println(\"No discount available.\");\n}\n</code></pre>"},{"location":"CIS-12/week_6L.html#if-else","title":"If-Else","text":"<ol> <li>Purpose of \u201cif-else\u201d: The \u201cif-else\u201d statement is used for decision-making in Java just like the basic if.<ul> <li>It allows the program to execute one block of code if a condition is true (the \u201cif\u201d part) and another block of code if the condition is false (the \u201celse\u201d part).</li> </ul> </li> <li>Basic Syntax:<ul> <li>NOTE the use of curly braces {} to enclose the code blocks. <pre><code>if (condition) {\n// Code to execute if the condition is true\n} else {\n// Code to execute if the condition is false\n}\n</code></pre></li> </ul> </li> <li>Conditions: Just like the basic if, the condition within the parentheses must be a boolean expression.<ul> <li>The code block under if is executed if the condition is true, and the code block under \u201celse\u201d is executed if the condition is false.</li> </ul> </li> <li>Exclusive Execution: In an \u201cif-else\u201d statement, ONLY one of the code blocks (either the \u201cif\u201d block or the \u201celse\u201d block) will be executed, depending on the condition\u2019s outcome.</li> <li>Indentation: Proper code indentation is STILL important for readability and maintainability.<ul> <li>The code inside the \u201cif\u201d and \u201celse\u201d blocks should be indented consistently.</li> </ul> </li> <li>Examples: <pre><code>int score = 85;\n\nif (score &gt;= 60) {\nSystem.out.println(\"You passed the exam.\");\n} else {\nSystem.out.println(\"You failed the exam.\");\n}\ni\n</code></pre></li> </ol>"},{"location":"CIS-12/week_6L.html#if-else-if-else","title":"If-Else If-Else","text":"<ol> <li> <p>These \u201celse if\u201d clauses allow for handling multiple conditions in a cascading manner. </p> </li> <li> <p>If-Else If are checked sequentially until ONLY one of them evaluates to true.</p> </li> <li> <p>Syntax: <pre><code>if (condition1) {\n// Code for condition1 being true\n} else if (condition2) {\n// Code for condition2 being true\n} else {\n// Code if neither condition1 nor condition2 is true\n}\n</code></pre></p> </li> <li>Simple Example: <pre><code>int num = 7;\n\nif (num &gt; 10) {\nSystem.out.println(\"The number is greater than 10.\");\n} else if (num &lt; 10) {\nSystem.out.println(\"The number is less than 10.\");\n} else {\nSystem.out.println(\"The number is equal to 10.\");\n}\n</code></pre></li> <li>Default \u201celse\u201d Block: The \u201celse\u201d block is optional.<ul> <li>If it\u2019s not present, and the \u201cif\u201d condition is false, the program simply moves to the code following the \u201cif-else\u201d statement.</li> </ul> </li> <li>Mutually Exclusive Conditions: The conditions in \u201cif-else if-else\u201d chains should be mutually exclusive.<ul> <li>MEANING only one condition should be true at a time.</li> </ul> </li> <li>Advanced Examples<ul> <li>In this example, the \u201cif-else\u201d statements evaluate the score and assign a grade based on different score ranges. <pre><code>int score = 85;\nchar grade;\n\nif (score &gt;= 90) {\ngrade = 'A';\n} else if (score &gt;= 80) {\ngrade = 'B';\n} else if (score &gt;= 70) {\ngrade = 'C';\n} else if (score &gt;= 60) {\ngrade = 'D';\n} else {\ngrade = 'F';\n}\n\nSystem.out.println(\"Your grade is: \" + grade);\n</code></pre></li> <li>This example checks the lengths of the sides to determine if a triangle is equilateral, isosceles, or scalene. <pre><code>int side1 = 3;\nint side2 = 4;\nint side3 = 5;\nString triangleType;\n\nif (side1 == side2 &amp;&amp; side2 == side3) {\ntriangleType = \"Equilateral\";\n} else if (side1 == side2 || side2 == side3 || side1 == side3) {\ntriangleType = \"Isosceles\";\n} else {\ntriangleType = \"Scalene\";\n}\n\nSystem.out.println(\"The triangle is: \" + triangleType);\n</code></pre></li> <li>This example calculates the ticket price based on age and student status, with different price tiers.  <pre><code>int age = 25;\nboolean isStudent = false;\ndouble ticketPrice;\n\nif (age &lt; 12) {\nticketPrice = 5.0;\n} else if (age &gt;= 12 &amp;&amp; age &lt;= 18) {\nticketPrice = 10.0;\n} else if (isStudent &amp;&amp; age &lt;= 30) {\nticketPrice = 15.0;\n} else {\nticketPrice = 20.0;\n}\n\nSystem.out.println(\"Ticket price: $\" + ticketPrice);\n</code></pre></li> <li>This example calculates a discount for an online shopping cart based on membership status and order subtotal.  <pre><code>double subtotal = 150.0;\nboolean isMember = true;\nboolean isPrimeMember = false;\ndouble discount = 0.0;\n\nif (isMember) {\ndiscount = subtotal * 0.1;\n} else if (isPrimeMember) {\ndiscount = subtotal * 0.15;\n} else if (subtotal &gt;= 100.0) {\ndiscount = subtotal * 0.05;\n}\n\ndouble total = subtotal - discount;\nSystem.out.println(\"Total amount after discount: $\" + total);\n</code></pre></li> </ul> </li> <li> <p>Ordering Conditions: If you have \u201cif-else if\u201d conditions out of order, the program will still compile and run without errors. However, the order of the conditions matters because the program will execute the first \u201cif\u201d or \u201celse if\u201d block whose condition evaluates to true, and then it will skip the rest of the \u201celse if\u201d and \u201celse\u201d blocks.</p> <ul> <li>Consider the following example and what would happen if x is 5. <pre><code>int x = 5;\n\nif (x &gt; 10) {\nSystem.out.println(\"x is greater than 10\");\n} else if (x &gt; 5) {\nSystem.out.println(\"x is greater than 5\");\n} else if (x &gt; 2) {\nSystem.out.println(\"x is greater than 2\");\n} else {\nSystem.out.println(\"x is something else\");\n}\n</code></pre></li> <li>To correct bypassing the x &gt; 2 condition, you can correct the code like so: <pre><code>int x = 5;\n\nif (x &gt; 10) {\nSystem.out.println(\"x is greater than 10\");\n} else if (x &gt; 2) {\nSystem.out.println(\"x is greater than 2\");\n} else {\nSystem.out.println(\"x is something else\");\n}\n</code></pre></li> </ul> </li> </ol>"},{"location":"CIS-12/week_6L.html#nested-conditionals","title":"Nested Conditionals","text":"<ol> <li>It\u2019s possible to place one \u201cif\u201d statement inside another. This is called \u201cnesting\u201d or using nested \u201cif\u201d statements. <ul> <li>A real world example would be Russian nesting dolls (Matryoshka dolls) to help visualize the idea of one condition within another. </li> </ul> </li> <li>Visual of Nesting Conditions:<ul> <li>We start with the \u201cStart\u201d node.</li> <li>We first check the season using the \u201cCheck Season\u201d node.</li> <li>Depending on the season (Spring, Summer, Fall, or Winter), we follow different paths to check the weather conditions using the \u201cCheck Weather\u201d nodes.</li> <li>Based on both the season and weather, we make clothing decisions, and the flowchart ultimately leads to the \u201cEnd\u201d node. graph TD A[Start] --&gt; B[Check Season] B --&gt;|Spring| C[Check Weather] B --&gt;|Summer| D[Check Weather] B --&gt;|Fall| E[Check Weather] B --&gt;|Winter| F[Check Weather] C --&gt;|Sunny| G[Wear a T-shirt and shorts] C --&gt;|Rainy| H[Take an umbrella] D --&gt;|Sunny| I[Wear sunglasses and shorts] D --&gt;|Rainy| J[Wear a raincoat] E --&gt;|Sunny| K[Wear a light jacket] E --&gt;|Rainy| L[Take an umbrella] F --&gt;|Sunny| M[Wear a heavy coat] F --&gt;|Snowy| N[Wear a winter jacket] G --&gt;O[End] H --&gt;O I --&gt;O J --&gt;O K --&gt;O L --&gt;O M --&gt;O N --&gt;O </li> </ul> </li> <li>Consider this simple example in java that has a single level of nesting and checks weather conditions on a day of the week: <pre><code>String dayOfWeek = \"Saturday\";\nString weather = \"Sunny\";\n\nif (dayOfWeek.equals(\"Saturday\")) {\nif (weather.equals(\"Sunny\")) {\nSystem.out.println(\"Let's go to the beach!\");\n} else {\nSystem.out.println(\"It's not sunny, let's do something else.\");\n}\n} else {\nSystem.out.println(\"It's not the weekend, so no beach today.\");\n}\n</code></pre></li> <li>Now let\u2019s take a look at a more advanced example: <pre><code>import java.util.Scanner;\n\npublic class TextAdventureGame {\npublic static void main(String[] args) {\nScanner scanner = new Scanner(System.in);\nString choice;\n\nSystem.out.println(\"Welcome to the Text Adventure Game!\");\nSystem.out.println(\"You are in a dark forest. You come to a fork in the road.\");\nSystem.out.print(\"Do you go left or right? (left/right): \");\nchoice = scanner.nextLine();\n\nif (choice.equals(\"left\")) {\nSystem.out.println(\"You encounter a friendly squirrel.\");\nSystem.out.print(\"Do you want to befriend it? (yes/no): \");\nchoice = scanner.nextLine();\n\nif (choice.equals(\"yes\")) {\nSystem.out.println(\"You and the squirrel become best friends!\");\n} else {\nSystem.out.println(\"You continue on your journey.\");\n}\n} else {\nSystem.out.println(\"You find a treasure chest!\");\nSystem.out.print(\"Do you open it? (yes/no): \");\nchoice = scanner.nextLine();\n\nif (choice.equals(\"yes\")) {\nSystem.out.println(\"Congratulations! You found a valuable treasure!\");\n} else {\nSystem.out.println(\"You decide to leave the treasure and explore further.\");\n}\n}\n\nSystem.out.println(\"Thanks for playing the Text Adventure Game!\");\n}\n}\n</code></pre><ul> <li>The program begins in a dark forest and presents the player with a choice to go left or right.</li> <li>Depending on the choice, the program follows different branches of the decision tree.</li> <li>If the player chooses to befriend the squirrel or open the treasure chest, it leads to different outcomes.</li> <li>The nested conditionals determine the course of the game based on the player\u2019s choices.</li> </ul> </li> <li>Proper indention is even more important for readability and maintainability when dealing with nested conditions.</li> </ol> Nested Excercise <p>Problem: Vacation Planner</p> <p>You are tasked with creating a vacation planner program. The program should ask the user a series of questions to help them plan their vacation. The questions and conditions are as follows:</p> <ol> <li>Ask the user if they want a relaxing vacation or an adventurous vacation.<ul> <li>If they choose \u201crelaxing,\u201d ask if they prefer a beach destination or a spa retreat.<ul> <li>If they choose \u201cbeach,\u201d recommend a tropical beach destination.</li> <li>If they choose \u201cspa,\u201d recommend a luxurious spa resort.</li> </ul> </li> <li>If they choose \u201cadventurous,\u201d ask if they prefer a mountain adventure or a city exploration.<ul> <li>If they choose \u201cmountain,\u201d recommend a hiking trip in the mountains.</li> <li>If they choose \u201ccity,\u201d recommend a cultural city tour.</li> </ul> </li> </ul> </li> <li>Ask the user if they want to go on a solo trip or with family/friends.<ul> <li>If they choose \u201csolo,\u201d recommend a solo-friendly destination based on their previous choice.</li> <li>If they choose \u201cwith family/friends,\u201d recommend a group-friendly destination based on their previous choice.</li> </ul> </li> <li>Ask the user if they have a budget constraint (yes/no).<ul> <li>If they answer \u201cyes,\u201d ask for their budget in dollars.<ul> <li>Recommend a destination that fits their budget and preferences.</li> </ul> </li> <li>If they answer \u201cno,\u201d recommend a destination based on their preferences.</li> </ul> </li> </ol> <p>Ensure that the program guides the user through the decision-making process, taking into account their choices at each step. The program should provide a final recommendation for their vacation destination based on their preferences.</p> <p>Challenge: Implement this vacation planner using nested if-else statements to handle the various combinations of choices and conditions. Make the program user-friendly and informative, providing clear recommendations at each step.</p> Answer <pre><code> import java.util.Scanner;\n\npublic class VacationPlanner {\npublic static void main(String[] args) {\nScanner scanner = new Scanner(System.in);\n\nSystem.out.println(\"Welcome to the Vacation Planner!\");\nSystem.out.print(\"Do you want a relaxing vacation or an adventurous vacation? (relaxing/adventurous): \");\nString vacationType = scanner.nextLine();\n\nif (vacationType.equals(\"relaxing\")) {\nSystem.out.print(\"Do you prefer a beach destination or a spa retreat? (beach/spa): \");\nString relaxationChoice = scanner.nextLine();\nif (relaxationChoice.equals(\"beach\")) {\nSystem.out.println(\"We recommend a tropical beach destination for a relaxing vacation.\");\n} else if (relaxationChoice.equals(\"spa\")) {\nSystem.out.println(\"We recommend a luxurious spa resort for a relaxing vacation.\");\n} else {\nSystem.out.println(\"Invalid choice.\");\n}\n} else if (vacationType.equals(\"adventurous\")) {\nSystem.out.print(\"Do you prefer a mountain adventure or a city exploration? (mountain/city): \");\nString adventureChoice = scanner.nextLine();\nif (adventureChoice.equals(\"mountain\")) {\nSystem.out.println(\"We recommend a hiking trip in the mountains for an adventurous vacation.\");\n} else if (adventureChoice.equals(\"city\")) {\nSystem.out.println(\"We recommend a cultural city tour for an adventurous vacation.\");\n} else {\nSystem.out.println(\"Invalid choice.\");\n}\n} else {\nSystem.out.println(\"Invalid choice.\");\n}\n\nSystem.out.print(\"Do you want to go on a solo trip or with family/friends? (solo/with family or friends): \");\nString travelCompanions = scanner.nextLine();\n\nif (travelCompanions.equals(\"solo\")) {\nSystem.out.println(\"We recommend a solo-friendly destination based on your previous choice.\");\n} else if (travelCompanions.equals(\"with family or friends\")) {\nSystem.out.println(\"We recommend a group-friendly destination based on your previous choice.\");\n} else {\nSystem.out.println(\"Invalid choice.\");\n}\n\nSystem.out.print(\"Do you have a budget constraint? (yes/no): \");\nString budgetConstraint = scanner.nextLine();\n\nif (budgetConstraint.equals(\"yes\")) {\nSystem.out.print(\"Enter your budget in dollars: $\");\ndouble budget = scanner.nextDouble();\n// You can implement budget-based recommendations here.\n}\n\nSystem.out.println(\"Enjoy planning your vacation!\");\n}\n}\n</code></pre>"},{"location":"CIS-12/week_6L.html#java-switch-statements","title":"Java Switch Statements","text":"<ol> <li>Switch statements are control structures in Java that allow you to execute different blocks of code based on the value of an expression. They provide an alternative to long chains of if-else if-else statements, making your code more concise and readable.</li> <li>Syntax: <pre><code>switch (expression) {\ncase value1:\n// Code to execute when expression matches value1\nbreak;\ncase value2:\n// Code to execute when expression matches value2\nbreak;\n// Additional cases...\ndefault:\n// Code to execute when none of the cases match the expression\n}\n</code></pre></li> <li>Let\u2019s see an example. We want to create a program that takes a number from 1 to 7 as input and prints the corresponding day of the week.</li> </ol> Switch Excercise <pre><code>import java.util.Scanner;\n\npublic class DayOfWeek {\npublic static void main(String[] args) {\nScanner scanner = new Scanner(System.in);\nSystem.out.print(\"Enter a number from 1 to 7: \");\nint day = scanner.nextInt();\n\nswitch (day) {\ncase 1:\nSystem.out.println(\"Sunday\");\nbreak;\ncase 2:\nSystem.out.println(\"Monday\");\nbreak;\ncase 3:\nSystem.out.println(\"Tuesday\");\nbreak;\ncase 4:\nSystem.out.println(\"Wednesday\");\nbreak;\ncase 5:\nSystem.out.println(\"Thursday\");\nbreak;\ncase 6:\nSystem.out.println(\"Friday\");\nbreak;\ncase 7:\nSystem.out.println(\"Saturday\");\nbreak;\ndefault:\nSystem.out.println(\"Invalid input. Please enter a number from 1 to 7.\");\n}\n}\n}\n</code></pre> <ul> <li>Now a new Monkey-Wrench, the enhanced switch statement.<ul> <li>Starting from Java 12, you can use enhanced switch statements that simplify the code further. Here\u2019s the same example using an enhanced switch statement: <pre><code> import java.util.Scanner;\n\npublic class EnhancedDayOfWeek {\npublic static void main(String[] args) {\nScanner scanner = new Scanner(System.in);\nSystem.out.print(\"Enter a number from 1 to 7: \");\nint day = scanner.nextInt();\n\nString dayOfWeek = switch (day) {\ncase 1 -&gt; \"Sunday\";\ncase 2 -&gt; \"Monday\";\ncase 3 -&gt; \"Tuesday\";\ncase 4 -&gt; \"Wednesday\";\ncase 5 -&gt; \"Thursday\";\ncase 6 -&gt; \"Friday\";\ncase 7 -&gt; \"Saturday\";\ndefault -&gt; \"Invalid input. Please enter a number from 1 to 7.\";\n};\n\nSystem.out.println(dayOfWeek);\n}\n}\n</code></pre></li> <li>Enhanced switch statements use the -&gt; arrow syntax and allow you to directly assign the result to a variable. This makes the code more concise and readable, especially when dealing with multiple cases.</li> </ul> </li> </ul>"},{"location":"CIS-12/week_6ch5py.html","title":"Week 6 - Conditionals and Recursion","text":""},{"location":"CIS-12/week_6ch5py.html#conditionals-and-recursion-in-python","title":"Conditionals and Recursion in Python","text":""},{"location":"CIS-12/week_6ch5py.html#objective","title":"Objective","text":"<p>By the end of this lesson, you will understand and implement Python conditionals, logical operations, recursion, and error handling. You will be able to: - Apply the modulus operator and boolean expressions - Write programs using <code>if</code>, <code>elif</code>, and <code>else</code> statements - Utilize recursion effectively - Handle basic input and debugging in Python</p>"},{"location":"CIS-12/week_6ch5py.html#integer-division-and-the-modulus-operator","title":"Integer Division and the Modulus Operator","text":""},{"location":"CIS-12/week_6ch5py.html#key-concepts","title":"Key Concepts:","text":"<ul> <li>Integer Division <code>//</code></li> <li>Modulus Operator <code>%</code></li> </ul>"},{"location":"CIS-12/week_6ch5py.html#explanation","title":"Explanation:","text":"<p>Integer division truncates the decimal part of a division, while the modulus operator returns the remainder of a division operation. These concepts can be useful for tasks like:</p> <ul> <li>Converting time formats</li> <li>Checking divisibility</li> <li>Handling clock arithmetic</li> </ul>"},{"location":"CIS-12/week_6ch5py.html#code-example","title":"Code Example:","text":"<pre><code># Example: Converting minutes to hours and minutes\nminutes = 145\nhours = minutes // 60\nremainder = minutes % 60\nprint(f'{hours} hours and {remainder} minutes')\n# Alternatively\nminutes = 145\nhours, remainder = divmod(minutes, 60)  # Built-in Function, so faster!\nprint(f'{hours} hours and {remainder} minutes')\n\n# Clock arithmetic example:\nstart_time = 11  # Start time is 11 AM\nduration = 3     # Duration is 3 hours\nend_time = (start_time + duration) % 12\nprint(f'End time: {end_time} PM')\n</code></pre>"},{"location":"CIS-12/week_6ch5py.html#boolean-expressions-and-logical-operators","title":"Boolean Expressions and Logical Operators","text":""},{"location":"CIS-12/week_6ch5py.html#key-concepts_1","title":"Key Concepts:","text":"<ul> <li>Relational operators: <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code></li> <li>Logical operators: <code>and</code>, <code>or</code>, <code>not</code></li> </ul>"},{"location":"CIS-12/week_6ch5py.html#explanation_1","title":"Explanation:","text":"<p>Boolean expressions result in <code>True</code> or <code>False</code>. Combining these expressions with logical operators allows for more complex decision-making in programs.</p>"},{"location":"CIS-12/week_6ch5py.html#code-example_1","title":"Code Example:","text":"<pre><code># Checking multiple conditions using logical operators\nx = 9\nprint(x &gt; 0 and x &lt; 10)  # True\nprint(x % 2 == 0 or x % 3 == 0)  # True (divisible by 3)\n</code></pre> <p>Boolean expressions that are complex can often be simplified via logic laws, for example:</p>"},{"location":"CIS-12/week_6ch5py.html#code-example_2","title":"Code Example:","text":"<pre><code># Consider the somewhat complex boolean logic below\ndef complex_logic(a, b, c):\n    if not (a or b) and not c:\n        return True\n    else:\n        return False\n\n# Example use\nresult = complex_logic(True, False, False)\nprint(\"Result:\", result)\n</code></pre>"},{"location":"CIS-12/week_6ch5py.html#demorgans-law-states","title":"DeMorgan\u2019s law states:","text":"<ul> <li>not (A or B) is equivalent to not A and not B</li> <li>not (A and B) is equivalent to not A or not B</li> </ul>"},{"location":"CIS-12/week_6ch5py.html#truth-table-for-not-a-or-b-and-not-a-and-not-b","title":"Truth Table for <code>not (A or B)</code> and <code>not A and not B</code>","text":"A B A or B not (A or B) not A not B not A and not B True True True False False False False True False True False False True False False True True False True False False False False False True True True True <p>As you can see, the columns for <code>not (A or B)</code> and <code>not A and not B</code> produce the same values, which proves the equivalence of the first DeMorgan\u2019s law.</p>"},{"location":"CIS-12/week_6ch5py.html#truth-table-for-not-a-and-b-and-not-a-or-not-b","title":"Truth Table for <code>not (A and B)</code> and <code>not A or not B</code>","text":"A B A and B not (A and B) not A not B not A or not B True True True False False False False True False False True False True True False True False True True False True False False False True True True True <p>Here, the columns for <code>not (A and B)</code> and <code>not A or not B</code> also produce identical values, proving the second DeMorgan\u2019s law.</p> <p>So the above example becomes more clear written like so:</p>"},{"location":"CIS-12/week_6ch5py.html#code-example_3","title":"Code Example","text":"<pre><code># Simplified logic using DeMorgan's law\ndef simplified_logic(a, b, c):\n    if (not a and not b) and not c:\n        return True\n    else:\n        return False\n\n# Example use\nresult = simplified_logic(True, False, False)\nprint(\"Result after applying DeMorgan's law:\", result)\n</code></pre>"},{"location":"CIS-12/week_6ch5py.html#truth-table-for-code","title":"Truth Table for Code","text":"<p>We will evaluate the function for all possible combinations of <code>a</code>, <code>b</code>, and <code>c</code> (True and False). Both the original and simplified logic should produce the same results.</p> a b c Original Expression (<code>not (a or b) and not c</code>) Simplified Expression (<code>not a and not b and not c</code>) Equivalent True True True False False Yes True True False False False Yes True False True False False Yes True False False False False Yes False True True False False Yes False True False False False Yes False False True False False Yes False False False True True Yes <p>As shown in the truth table, both the original and simplified logic yield the same results for all possible combinations of <code>a</code>, <code>b</code>, and <code>c</code>. This confirms that applying DeMorgan\u2019s law results in equivalent expressions.</p>"},{"location":"CIS-12/week_6ch5py.html#conditional-statements-if-else-elif","title":"Conditional Statements (<code>if</code>, <code>else</code>, <code>elif</code>)","text":""},{"location":"CIS-12/week_6ch5py.html#key-concepts_2","title":"Key Concepts:","text":"<ul> <li><code>if</code>, <code>else</code>, <code>elif</code> for branching logic</li> </ul>"},{"location":"CIS-12/week_6ch5py.html#explanation_2","title":"Explanation:","text":"<p>Conditional statements let programs decide which code to run based on specific conditions. Branching logic can include multiple possibilities using <code>if</code>, <code>else</code>, and <code>elif</code>.</p>"},{"location":"CIS-12/week_6ch5py.html#code-example_4","title":"Code Example:","text":"<pre><code>x = 5\nif x % 2 == 0:\n    print(f'{x} is even')\nelse:\n    print(f'{x} is odd')\n\n# Chained conditional with elif\nif x &lt; 0:\n    print('x is negative')\nelif x == 0:\n    print('x is zero')\nelse:\n    print('x is positive')\n</code></pre>"},{"location":"CIS-12/week_6ch5py.html#nested-conditionals-and-logical-simplification","title":"Nested Conditionals and Logical Simplification","text":""},{"location":"CIS-12/week_6ch5py.html#key-concepts_3","title":"Key Concepts:","text":"<ul> <li>Nested <code>if</code> statements</li> <li>Simplifying conditionals with logical operators</li> </ul>"},{"location":"CIS-12/week_6ch5py.html#explanation_3","title":"Explanation:","text":"<p>You can nest conditionals inside other conditionals, but this can lead to confusing code. Logical operators like <code>and</code> and <code>or</code> can often simplify these nested conditionals.</p>"},{"location":"CIS-12/week_6ch5py.html#code-example_5","title":"Code Example:","text":"<pre><code># Nested conditionals\nx = 7\nif x &gt; 0:\n    if x &lt; 10:\n        print('x is a positive single-digit number')\n\n# Simplified using and operator\nif x &gt; 0 and x &lt; 10:\n    print('x is a positive single-digit number')\n\n# Simplified even farther with Pythonic syntax\nif 0 &lt; x &lt; 10:\n    print('x is a positive single-digit number')\n</code></pre>"},{"location":"CIS-12/week_6ch5py.html#introduction-to-recursion","title":"Introduction to Recursion","text":""},{"location":"CIS-12/week_6ch5py.html#key-concepts_4","title":"Key Concepts:","text":"<ul> <li>Recursive functions</li> <li>Base case and recursive case</li> </ul>"},{"location":"CIS-12/week_6ch5py.html#explanation_4","title":"Explanation:","text":"<p>A recursive function is a function that calls itself. It MUST have a base case to prevent infinite recursion. Recursion is useful for problems like countdowns, fractals, and some mathematical algorithms.</p>"},{"location":"CIS-12/week_6ch5py.html#code-example_6","title":"Code Example:","text":"<pre><code># Recursive countdown function\ndef countdown(n):\n    if n &lt;= 0:\n        print('Blastoff!')\n    else:\n        print(n)\n        countdown(n-1)\n\ncountdown(5)\n\n# Recursive function to print a string multiple times\ndef print_n_times(string, n):\n    if n &gt; 0:\n        print(string)\n        print_n_times(string, n-1)\n\nprint_n_times('Hello', 3)\n</code></pre> <p>It\u2019s worth noting that recursion is a powerful tool, BUT loops are more efficient.</p>"},{"location":"CIS-12/week_6ch5py.html#debugging-recursive-functions","title":"Debugging Recursive Functions","text":""},{"location":"CIS-12/week_6ch5py.html#key-concepts_5","title":"Key Concepts:","text":"<ul> <li>Understanding recursion errors (e.g., infinite recursion)</li> <li>Stack frames and base cases</li> </ul>"},{"location":"CIS-12/week_6ch5py.html#explanation_5","title":"Explanation:","text":"<p>Recursion without a proper base case leads to infinite recursion and crashes the program. Use print statements and stack diagrams to debug recursive functions. * Remember for Stack Diagrams there\u2019s -&gt; Python Tutor</p>"},{"location":"CIS-12/week_6ch5py.html#code-example_7","title":"Code Example:","text":"<pre><code># Stack diagram and recursion debugging\ndef recurse(n, s):\n    if n == 0:\n        print(s)\n    else:\n        recurse(n-1, n+s)\n\nrecurse(3, 0)  # Stack diagram shows how values change\n</code></pre>"},{"location":"CIS-12/week_6ch5py.html#review-of-handling-user-input","title":"Review of Handling User Input","text":""},{"location":"CIS-12/week_6ch5py.html#key-concepts_6","title":"Key Concepts:","text":"<ul> <li><code>input()</code> function</li> <li>Converting string input to integers, floats, etc.</li> </ul>"},{"location":"CIS-12/week_6ch5py.html#explanation_6","title":"Explanation:","text":"<p>You can prompt the user for input using <code>input()</code>. Always remember to handle the conversion of strings to numbers carefully to avoid errors.</p>"},{"location":"CIS-12/week_6ch5py.html#code-example_8","title":"Code Example:","text":"<pre><code># Prompting for user input\nname = input('What is your name? ')\nprint(f'Hello, {name}!')\n\n# Handling integer input\nwhile True:\n    try:\n        age = int(input('How old are you? '))\n        print(f'{name}, you are {age} years old.')\n        break\n    except ValueError as ve:\n        print(\"That's not a valid age. Please enter an integer!\")\n\nwhile True:\n    try:\n        height = float(input('How tall are you? '))\n        print(f'{name} you are {height} feet tall.')\n        break\n    except ValueError as ve:\n        print(\"That's not a valid height. Please enter float!\")\n</code></pre>"},{"location":"CIS-12/week_6ch5py.html#exercises-and-practice","title":"Exercises and Practice","text":""},{"location":"CIS-12/week_6ch5py.html#practice-exercises","title":"Practice Exercises:","text":"<ol> <li> <p>Exercise 1: Modulus Operator Write a program that checks whether a number is divisible by both 3 and 5.</p> </li> <li> <p>Exercise 2: Recursion Write a recursive function that prints the sum of all integers from 1 to <code>n</code>.</p> </li> <li> <p>Exercise 3: User Input with Error Handling Ask the user for two integers and divide them. Handle errors like division by zero.</p> </li> </ol> Answers <pre><code>#!/usr/bin/env python3\n\ndef three_or_five_div(number):\n    return number % 3 == 0 or number % 5 == 0\n\nprint(three_or_five_div(9))\nprint(three_or_five_div(10))\nprint(three_or_five_div(16))\n\ndef recursive_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n + recursive_sum(n - 1)  # Leap of faith!\n\nprint(recursive_sum(10))\n\ndef get_int_input(message):\n    quit_message = \" Q to cancel:\"\n    while True:\n        try:\n            n1 = input(message + quit_message).strip()\n            if n1.upper() == 'Q':\n                return None\n            return int(n1)\n        except ValueError as ve:\n            print( \"Invalid integer input\" )\n\ndef int_without_div0_error():\n    try:\n        n2 = None if (n1 := get_int_input(\"Enter your first number\")) is None else get_int_input(\"Enter your second number\")\n        # n1 = get_int_input(\"Enter your first number\")\n        # n2 = get_int_input(\"Enter your second number\")\n        return n1 / n2\n    except ZeroDivisionError:\n        print(\"The divisor can not be 0\")\n    except TypeError:\n        print(\"You must enter 2 integers\")\n\nprint(int_without_div0_error())\n</code></pre>"},{"location":"CIS-12/week_6ch6py.html","title":"Week 6 - Return Values","text":""},{"location":"CIS-12/week_6ch6py.html#understanding-return-values-and-functions-in-python","title":"Understanding Return Values and Functions in Python","text":""},{"location":"CIS-12/week_6ch6py.html#overview","title":"Overview","text":"<p>This lesson focuses on teaching return values in Python functions. It explores how functions return values, conditional returns, recursion with return values, input validation, and debugging. By the end of the lesson, you should have a clear understanding of return values and how to apply them effectively.</p>"},{"location":"CIS-12/week_6ch6py.html#objectives","title":"Objectives","text":"<ul> <li>Improve your skill in writing functions that return values.</li> <li>Differentiate between functions that return <code>None</code> and those that return values.</li> <li>Understand how return values work with conditional statements.</li> <li>Explore recursive functions with return values.</li> <li>Apply input validation in functions.</li> <li>Practice incremental development for debugging.</li> </ul>"},{"location":"CIS-12/week_6ch6py.html#introduction-to-return-values","title":"Introduction to Return Values","text":"<p>Concept: As you have probably figured out, a function can return a value that can be assigned to a variable or used in expressions.</p>"},{"location":"CIS-12/week_6ch6py.html#example-code","title":"Example Code:","text":"<pre><code>import math\n\ndef circle_area(radius):\n    area = math.pi * radius ** 2\n    return area\n\n# Using return value\nradius = math.sqrt(42 / math.pi)\narea = circle_area(radius)\n\n# Display result\nprint(f\"Area of circle: {area}\")\n</code></pre> <p>Key Takeaway: Return values allow functions to pass results back to the caller.</p>"},{"location":"CIS-12/week_6ch6py.html#return-values-vs-none","title":"Return Values vs. None","text":"<p>Concept: If a function doesn\u2019t have a <code>return</code> statement, it returns <code>None</code> by default.</p>"},{"location":"CIS-12/week_6ch6py.html#example-code_1","title":"Example Code:","text":"<pre><code>def repeat(word, n):\n    print(word * n)\n\nresult = repeat('Python, ', 3)\nprint(f\"The return value is: {result}\")\n</code></pre>"},{"location":"CIS-12/week_6ch6py.html#improved-version","title":"Improved Version:","text":"<pre><code>def repeat_string(word, n):\n    return word * n\n\nline = repeat_string('Python, ', 3)\nprint(f\"Repeated string: {line}\")\n</code></pre> <p>Key Takeaway: Functions without a <code>return</code> statement return <code>None</code>. Always use <code>return</code> for reusable results.</p>"},{"location":"CIS-12/week_6ch6py.html#return-values-and-conditionals","title":"Return Values and Conditionals","text":"<p>Concept: Conditional statements within a function should ensure EVERY possible execution path has a <code>return</code> statement.</p>"},{"location":"CIS-12/week_6ch6py.html#example-code_2","title":"Example Code:","text":"<pre><code>def absolute_value(x):\n    if x &lt; 0:\n        return -x\n    return x  # NOTE: else is not necessary here, ask yourself why?\n</code></pre>"},{"location":"CIS-12/week_6ch6py.html#incorrect-code-example","title":"Incorrect Code Example:","text":"<pre><code>def absolute_value_wrong(x):\n    if x &lt; 0:\n        return -x\n    if x &gt; 0:\n        return x\n    # No return for x == 0, returns None unintentionally, so would return None!\n</code></pre> <p>Key Takeaway: Make sure every execution path hits a <code>return</code> statement.</p>"},{"location":"CIS-12/week_6ch6py.html#incremental-development","title":"Incremental Development","text":"<p>Concept: Write small, testable functions and build them incrementally.</p>"},{"location":"CIS-12/week_6ch6py.html#example-code_3","title":"Example Code:","text":"<pre><code>def distance(x1, y1, x2, y2):\n    dx = x2 - x1\n    dy = y2 - y1\n    dsquared = dx**2 + dy**2\n    return math.sqrt(dsquared)\n\n# Test the function\nd = distance(1, 2, 4, 6)\nprint(f\"Distance: {d}\")\n</code></pre> <p>Key Takeaway: Build and test small pieces of code to avoid larger debugging issues.</p>"},{"location":"CIS-12/week_6ch6py.html#boolean-functions","title":"Boolean Functions","text":"<p>Concept: Functions can return <code>True</code> or <code>False</code> based on conditions.</p>"},{"location":"CIS-12/week_6ch6py.html#example-code_4","title":"Example Code:","text":"<pre><code>def is_divisible(x, y):\n    return x % y == 0  # NOTE: we can return the \"boolean expression\" without the need for if/else\n\n# Usage\nif is_divisible(10, 5):\n    print(\"10 is divisible by 5\")\n</code></pre> <p>Key Takeaway: Boolean functions simplify complex conditional logic.</p>"},{"location":"CIS-12/week_6ch6py.html#recursion-with-return-values","title":"Recursion with Return Values","text":"<p>Concept: Recursive functions can use return values to build up solutions.</p>"},{"location":"CIS-12/week_6ch6py.html#example-code_5","title":"Example Code:","text":"<pre><code>def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n# Test the function\nprint(f\"Factorial of 5: {factorial(5)}\")\n</code></pre> <p>Key Takeaway: Recursive functions are powerful, but ensure they have valid base cases to terminate.</p>"},{"location":"CIS-12/week_6ch6py.html#input-validation","title":"Input Validation","text":"<p>Concept: Validate inputs to prevent unexpected behavior.</p>"},{"location":"CIS-12/week_6ch6py.html#example-code_6","title":"Example Code:","text":"<pre><code>def factorial(n:int):  # Using type hints for IDE to verify the parameter\n    if not isinstance(n, int) or n &lt; 0:  # Using isinstance to verify the parameter\n        return \"Error: Input must be a non-negative integer.\"\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n\n# Testing input validation\nprint(factorial(3.5))  # Error\nprint(factorial(-2))   # Error\nprint(factorial(5))    # Success\n</code></pre> <p>Key Takeaway: Input validation ensures the function works with expected data types and values.</p>"},{"location":"CIS-12/week_6ch6py.html#debugging-with-scaffolding","title":"Debugging with Scaffolding","text":"<p>Concept: Use print statements to track flow of execution and return values during debugging.</p>"},{"location":"CIS-12/week_6ch6py.html#example-code_7","title":"Example Code:","text":"<pre><code>def factorial(n):\n    space = ' ' * (4 * n)\n    print(space, 'factorial', n)\n\n    if n == 0:\n        print(space, 'returning 1')\n        return 1\n    else:\n        result = n * factorial(n-1)\n        print(space, 'returning', result)\n        return result\n\n# Test with tracing\nprint(f\"Result: {factorial(3)}\")\n</code></pre> <p>Key Takeaway: Use scaffolding to debug complex functions by visualizing intermediate steps.</p>"},{"location":"CIS-12/week_6ch6py.html#exercises","title":"Exercises","text":"<ol> <li>Modify the <code>distance</code> function to calculate the 3D distance between points.</li> <li>Write a function <code>is_prime(n)</code> that returns <code>True</code> if <code>n</code> is prime and <code>False</code> otherwise.<ul> <li>Here\u2019s a basic approach, known as trial division:<ul> <li>If the number n is less than or equal to 1, it is not prime.</li> <li>If n is 2 or 3, it is prime.</li> <li>For any number n greater than 3:<ul> <li>Check divisibility by 2 or 3 (since primes are not divisible by any number other than 1 and themselves).</li> </ul> </li> <li>For other divisors, test up to sqrt(n), because if n is divisible by any number greater than its square root, it must also be divisible by a smaller number.</li> </ul> </li> </ul> </li> </ol> Answers <pre><code>#!/usr/bin/env python3\nfrom math import sqrt\n\ndef distance(x1, y1, z1, x2, y2, z2):\n    dx = x2 - x1\n    dy = y2 - y1\n    dz = z2 - z1\n    dsquared = dx**2 + dy**2 + dz**2\n    return sqrt(dsquared)\n\nprint(distance(0,0,0, 1, 1, 1))\nprint(distance(5,10,11, 2, 9, 8))\n\ndef is_prime(n, divisor=None):\n    if n &lt;= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if divisor is None:\n        divisor = int(sqrt(n))\n    if divisor &lt; 2:\n        return True\n    if n % divisor == 0:\n        return False\n    return is_prime(n, divisor - 1)\n\ndef is_prime_e(n):\n\"\"\" Handling small numbers (less than 4).\n        Checking divisibility by 2 and 3.\n        Using trial division for other divisors, skipping unnecessary checks by incrementing by 6 (since all primes &gt; 3 are of the form 6k\u00b11).\n    \"\"\"\n    if n &lt;= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n\n    # Check divisors up to \u221an\n    for i in range( 5, int( sqrt( n ) ) + 1, 6 ):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\nprint(is_prime(101))\nprint(is_prime(100))\n</code></pre>"},{"location":"CIS-12/week_7.html","title":"Week 7 - Methods Take 2","text":""},{"location":"CIS-12/week_7.html#methods-take-2","title":"Methods Take 2","text":""},{"location":"CIS-12/week_7.html#why-we-create-methods","title":"Why We Create Methods","text":"<ul> <li>Methods are directly related to the actions (VERBS) performed on our classes/OBJECTS (NOUNS)<ul> <li>Class/Object: Car / car1</li> <li>Method: turnCar</li> </ul> </li> <li>Methods allow us to re-use code.<ul> <li>e.g. Scanner let\u2019s us get input of different Data Types (int, double, String), without us having to re-write the data-type conversions or the code to read from InputStreams like stdin (i.e. System.in).</li> </ul> </li> <li>Methods encapsulate complex algorithms so we can ignore the details and simply trust the method to do its job.<ul> <li>e.g Math.toRadians, Math.pow, Math.toDegrees: we trust these static methods to do what they say even though we may not know how to implememnt them ourselves.</li> </ul> </li> <li>Methods allow us to break up bigger problems into smaller, more understandable units (i.e. functional decomposition).<ul> <li>Think about our car action of turn. We could implment it all in 1 method that says:<ol> <li>Driver places hands on wheels</li> <li>Drive turns steering wheel 25 degrees to the left</li> <li>Hydraulic assist system in rack and pinion mechanism takes rotational motion energy and converts it into linear motion energy</li> <li>Linear motion energy is transfered to the wheels</li> <li>wheels turn at an angle proportional to that of the 25 degree turn of the steering wheel</li> </ol> </li> <li>OOORRR, we could acknowledge that each one of these statements is housed within its own Classes (Driver, Steering Wheel, Rack and Pinion, Wheels), and we could divide the actions into methods in each of those classes allowing us to functionally decompose the process of turning.<ul> <li>Driver: movesHands(Position p)           rotatesWheel(SteeringWheel s, Force f, Direction v)</li> <li>SteeringWheel: rotate(Direction rl, Degree d)</li> </ul> </li> </ul> </li> </ul>"},{"location":"CIS-12/week_7.html#review-method-signature--static-vs-public","title":"Review Method Signature / Static VS Public","text":"<ul> <li>Method Signature</li> <li>Criteria for Static</li> <li>Let\u2019s look at Heap / Stack example of a Scanner variable being copied versus a primitive type.</li> </ul> Excercise 1 <p>Create a method called printText which prints the phrase \u201cIn a hole in the ground there lived a [animal]\u201d where [animal] is replaced by a parameter passed in, then a newline is printed.</p> Answer 1 <pre><code>public static void printText(String anmimal) {\nSystem.out.printf(\"In a hole in the ground there lived a %s%n\", animal);\n}\n</code></pre>"},{"location":"CIS-12/week_7.html#method-parameters","title":"Method Parameters","text":"<ul> <li>Information passed to methods</li> </ul> <pre><code>public void rotateWheel(Direction rl, Degrees d) {\n    ....\n}\n</code></pre> <ul> <li>Comes between the open and close parenthesis</li> <li>Multiple parameters are separated by commas</li> <li>Can be basic types, objects, or arrays (think lists) of these things</li> </ul>"},{"location":"CIS-12/week_7.html#return-types","title":"Return Types","text":"<ul> <li>How we get data back out of our methods.</li> </ul> <pre><code>public Position rotateWheel(Direction rl, Degrees d) {\n    ....\n    return new Position(x, y, z);\n}\n</code></pre> <ul> <li>Must return the same datatype noted in the return type of the method signature</li> <li>Return type can be basic types, objects, or arrays of these things</li> <li>You can return null</li> </ul> Excercise 2 <p>Create a method called sum that takes 2 integer parameters and returns their summation.</p> Answer 2 <pre><code>public static int sum(int first, int second) {\nreturn first + second;\n}\n</code></pre> Excercise 3 <p>Create a method called divisibleByThree that takes an integer and returns whether or not it is divisible by three.</p> Answer 3 <pre><code>public static boolean divisibleByThree(int number) {\nreturn ((number % 3) == 0);\n}\n</code></pre>"},{"location":"CIS-12/week_7.html#scope","title":"Scope","text":"<ul> <li>Class scope<ul> <li>Variables and methods in the Class scope will persist as long as the class and or objects of that class persist.</li> <li>They can be masked by Method scoped variables.<ul> <li>Consider constructing a Car object with Field color where the constructor takes a parameter color.</li> </ul> </li> </ul> </li> <li>Method scope<ul> <li>Once you return from a method, any variables locally declared in that method disappear.</li> </ul> </li> </ul> Excercise 4 <p>Consider the following main method and its call to incrementByThree. Will the number variable in main be altered after the incrementByThree method call returns? <pre><code>// main program\npublic static void main(String[] args) {\nint number = 1;\nSystem.out.println(\"The value of the variable 'number' in the main program: \" + number);\nincrementByThree(number);\nSystem.out.println(\"The value of the variable 'number' in the main program: \" + number);\n}\n\n// method\npublic static void incrementByThree(int number) {\nSystem.out.println(\"The value of the method parameter 'number': \" + number);\nnumber = number + 3;\nSystem.out.println(\"The value of the method parameter 'number': \" + number);\n}\n</code></pre></p> Excercise 5 <p>Now consider the following main method and its call to incrementByThree. Will the number variable in main be altered after the incrementByThree method call returns? <pre><code>public class IntegerTests {\n// main program\npublic static void main(String[] args) {\nMyInt number = new MyInt(3);\nSystem.out.println(\"The value of the variable 'number' in the main program: \" + number);\nincrementByThree(number);\nSystem.out.println(\"The value of the variable 'number' in the main program: \" + number);\n}\n\n// method\npublic static void incrementByThree(MyInt number) {\nSystem.out.println(\"The value of the method parameter 'number': \" + number);\nnumber.add(3);\nSystem.out.println(\"The value of the method parameter 'number': \" + number);\n}\n}\n</code></pre></p> Answer 5 <p>Assuming MyInt looks something like below: <pre><code>public class MyInt {\nprivate int value;\n\npublic MyInt(int value) {\nthis.value = value;\n}\n\npublic void add(int value) {\nthis.value += value;\n}\n\npublic int getValue() {\nreturn value;\n}\n\n@Override\npublic String toString() {\nreturn String.valueOf(this.value);\n}\n}\n</code></pre></p> <p>Then the internal non-static field of value will be altered by the incrementByThree method call because the number is an object, and objects get passed by reference. Thus, anything that alters the state of the object, even if in another method, will affect the internal fields of the passed object. Let\u2019s see it in action\u2026</p> Exercise 6 <p>What does the program below print? <pre><code>public static void main(String[] args) {\nint number = 10;\nmodifyNumber(number);\nSystem.out.println(number);\n}\n\npublic static void modifyNumber(int number) {\nnumber = number - 4;\n}\n</code></pre></p> Answer 6 <p>10</p>"},{"location":"CIS-12/week_7.html#overloading-methods","title":"Overloading Methods","text":"<ul> <li>We saw this last week with constructors, but you can overload ANY method.</li> <li>This just means the method name stays the same, but the parameter list changes. <pre><code>public static int greatest(int number1, int number2) {\nreturn (number1 &gt; number2) ? number1 : number2;\n}\n\npublic static double greatest(double number1, double number2) {\nreturn (number1 &gt; number2) ? number1 : number2;\n}\n</code></pre></li> <li>Overloading by w3schools</li> </ul> Exercise 7 <p>Write a method that compares two integers and returns the smallest integer. Then overload the method for two double numbers.</p> Answer 7 <pre><code>public static int smallest(int number1, int number2) {\nreturn (number1 &lt; number2) ? number1 : number2;\n}\n\npublic static double smallest(double number1, double number2) {\nreturn (number1 &lt; number2) ? number1 : number2;\n}\n</code></pre>"},{"location":"CIS-12/week_7py.html","title":"Week 7 - Iteration &amp; Search","text":""},{"location":"CIS-12/week_7py.html#iteration-and-search","title":"Iteration and Search","text":""},{"location":"CIS-12/week_7py.html#objective","title":"Objective:","text":"<ul> <li>Explore techniques for looping, searching, and applying counting operations on strings and files in Python.</li> <li>Practice solving exercises to solidify understanding.</li> </ul>"},{"location":"CIS-12/week_7py.html#loops-and-strings","title":"Loops and Strings","text":"<ul> <li>For Loop Basics:<ul> <li>Review <code>for</code> loops, particularly <code>range</code> for numerical iteration.</li> <li>Example: Loop to display numbers 0 to 2 in one line.    <pre><code>for i in range(3):\n    print(i, end=' ')\n</code></pre></li> </ul> </li> <li>Character Iteration in Strings:<ul> <li>Looping through characters in a string.</li> <li>New Code Example: Using a loop to print only vowels in a word.    <pre><code>word = \"Gadsby\"\nfor letter in word:\n    if letter.lower() in 'aeiou':\n        print(letter, end=' ')\n</code></pre></li> </ul> </li> <li>Checking for Specific Characters:<ul> <li>Demonstrate a function <code>has_letter(word, char)</code> that checks for any character in a word.    <pre><code>def has_letter(word, char):\n    for letter in word:\n        if letter.lower() == char.lower():\n            return True\n    return False\n</code></pre></li> <li>Test <code>has_letter(\"Gadsby\", \"a\")</code> and <code>has_letter(\"Gadsby\", \"e\")</code>.</li> </ul> </li> </ul>"},{"location":"CIS-12/week_7py.html#reading-files-and-word-lists","title":"Reading Files and Word Lists","text":"<ul> <li>Using the <code>open</code> Function:<ul> <li>How to open, read, and loop through each line in a file.</li> </ul> </li> <li>Example Code: Count lines in <code>words.txt</code>.        <pre><code>file_path = 'words.txt'\nwith open(file_path, 'r') as file:\n    line_count = sum(1 for _ in file)\nprint(\"Number of lines:\", line_count)\n</code></pre></li> <li>Using <code>strip()</code> for Clean Data:<ul> <li>Show how <code>strip()</code> removes whitespace, including newlines.</li> </ul> </li> <li>Practice Exercise: Write a function <code>count_words(file_path)</code> that reads each line, strips whitespace, and counts the total words.</li> </ul>"},{"location":"CIS-12/week_7py.html#variable-updating","title":"Variable Updating","text":"<ul> <li>Basic Assignments vs. Updates:<ul> <li>Difference between initializing, updating, and incrementing variables.</li> </ul> </li> <li>Example: Cumulative word length calculator for words with an \u201ce\u201d.        <pre><code>def cumulative_length_e_words(file_path):\n    total_length = 0\n    with open(file_path, 'r') as file:\n        for line in file:\n            word = line.strip()\n            if 'e' in word:\n                total_length += len(word)\n    return total_length\n</code></pre><ul> <li>Test this function with a small word list.</li> </ul> </li> </ul>"},{"location":"CIS-12/week_7py.html#looping-and-counting-patterns","title":"Looping and Counting Patterns","text":"<ul> <li>Counter Variables:<ul> <li>Using counters to count specific conditions within loops.</li> </ul> </li> <li>Code Example: Count words containing at least one vowel.        <pre><code>def count_vowel_words(file_path):\n    count = 0\n    with open(file_path, 'r') as file:\n        for line in file:\n            word = line.strip()\n            if any(vowel in word for vowel in 'aeiou'):\n                count += 1\n    return count\n</code></pre></li> </ul>"},{"location":"CIS-12/week_7py.html#using-the-in-operator","title":"Using the <code>in</code> Operator","text":"<ul> <li>Simplify Checks:<ul> <li>Rewrite <code>has_letter</code> using <code>in</code>.    <pre><code>def has_letter(word, char):\n    return char.lower() in word.lower()\n</code></pre></li> </ul> </li> <li>Practice Excercise: Refactor a function that checks if a word contains any vowels using <code>in</code>.</li> </ul>"},{"location":"CIS-12/week_7py.html#linear-search","title":"Linear Search","text":"<ul> <li>Definition and Practicality:<ul> <li>Introduce linear search as a pattern that sequentially checks elements.</li> </ul> </li> <li>Example: General function <code>contains_any(word, letters)</code> using <code>in</code>.        <pre><code>def contains_any(word, letters):\n    return any(letter in word for letter in letters.lower())\n</code></pre></li> <li>Practice Exercise: Write a function to return all positions of a specified letter in a word.</li> </ul>"},{"location":"CIS-12/week_7py.html#doctest-and-testing-functions","title":"Doctest and Testing Functions","text":"<ul> <li>Introduction to Doctests:<ul> <li>How doctests verify function correctness by embedding test cases in the docstring.</li> </ul> </li> <li>Example Code: Writing a doctest for the <code>contains_any</code> function.        <pre><code>def contains_any(word, letters):\n\"\"\"Checks if a word uses any letters in a given set.\n\n    &gt;&gt;&gt; contains_any('banana', 'aeiou')\n    True\n    &gt;&gt;&gt; contains_any('banana', 'xyz')\n    False\n    \"\"\"\n    return any(letter in word for letter in letters.lower())\n</code></pre></li> <li>Practice Exercise: Write doctests for <code>has_letter</code> and run them.</li> </ul>"},{"location":"CIS-12/week_7py.html#exercises","title":"Exercises","text":""},{"location":"CIS-12/week_7py.html#exercise-1-detect-palindromic-words","title":"Exercise 1: Detect Palindromic Words","text":"<ul> <li>Write a function <code>is_palindromic(word)</code> that returns <code>True</code> if a word reads the same backward.</li> </ul>"},{"location":"CIS-12/week_7py.html#exercise-2-counting-words-by-length","title":"Exercise 2: Counting Words by Length","text":"<ul> <li>Write <code>count_by_length(file_path, n)</code> that counts the number of words with exactly <code>n</code> letters.</li> </ul>"},{"location":"CIS-12/week_7py.html#exercise-3-find-words-with-specific-letter-patterns","title":"Exercise 3: Find Words with Specific Letter Patterns","text":"<ul> <li>Write <code>find_words_with_pattern(file_path, pattern)</code> to count words with a particular letter pattern.</li> </ul>"},{"location":"CIS-12/week_8.html","title":"Week 8 - Loops","text":""},{"location":"CIS-12/week_8.html#repeating-functionality-loops","title":"Repeating Functionality (LOOPS)","text":""},{"location":"CIS-12/week_8.html#learning-objectives","title":"Learning Objectives","text":"<ol> <li>Loop Familiarity and Creation: You possess a solid understanding of loops and can proficiently construct programs that incorporate them.</li> <li>Effective Loop Termination: You can skillfully employ the \u201cbreak\u201d command to gracefully halt the execution of a loop when a certain condition is met.</li> <li>Loop Control with \u201ccontinue\u201d: You have the ability to employ the \u201ccontinue\u201d command to efficiently return to the beginning of a loop and manage the flow of program execution.</li> <li>User Input Handling: You are proficient in developing programs that solicit and process user inputs until a specific predefined input (e.g., \u201c0\u201d or \u201cend\u201d) is provided, after which the program responds appropriately with information about the collected inputs.</li> <li>While Loop Proficiency: You have a strong grasp of the condition used in a while loop and can effectively work with it in your programs.</li> <li>Competence in For Loops: You are proficient in utilizing for loops to control program flow and iteration.</li> <li>Loop Selection Aptitude: You can discern between situations that warrant the use of a while loop and those where a for loop is a more suitable choice, demonstrating a keen understanding of loop selection based on the specific task or problem at hand.</li> </ol>"},{"location":"CIS-12/week_8.html#why-we-use-loops","title":"Why We Use Loops","text":"<ul> <li>Increases flexibility in code (looping mechanisms can be variable)</li> <li>Eliminates repetition in code (no typing the same commands over and over)</li> </ul> Consider this code <p>Read in 5 numbers, sum them, and print the output<pre><code>Scanner scanner = new Scanner(System.in);\nint sum = 0;\n\nSystem.out.println(\"Input a number: \");\nsum = sum + Integer.valueOf(scanner.nextLine());\n\nSystem.out.println(\"Input a number: \");\nsum = sum + Integer.valueOf(scanner.nextLine());\n\nSystem.out.println(\"Input a number: \");\nsum = sum + Integer.valueOf(scanner.nextLine());\n\nSystem.out.println(\"Input a number: \");\nsum = sum + Integer.valueOf(scanner.nextLine());\n\nSystem.out.println(\"Input a number: \");\nsum = sum + Integer.valueOf(scanner.nextLine());\n\nSystem.out.println(\"The sum of the numbers is \" + sum);\n</code></pre> * This is not pretty even though it gets the job done.</p> Now consider this alternative Read in 5 numbers, sum them, and print the output<pre><code>Scanner scanner = new Scanner(System.in);\n\nint numbersRead = 0;\nint sum = 0;\n\nwhile (true) {\nif (numbersRead == 5) {\nbreak;\n}\n\nSystem.out.println(\"Input number\");\nsum = sum + Integer.valueOf(scanner.nextLine());\nnumbersRead = numbersRead + 1;\n}\n\nSystem.out.println(\"The sum of the numbers is \" + sum);\n</code></pre>"},{"location":"CIS-12/week_8.html#what-is-a-loop-and-loop-control","title":"What is a Loop and Loop Control","text":"Info <p>Loops are grouped statements that are repeated until a control expression determines whether or not the loop should stop.</p>"},{"location":"CIS-12/week_8.html#while-loop","title":"While Loop","text":""},{"location":"CIS-12/week_8.html#form","title":"Form","text":"<pre><code>while ( boolean expression ) {\n// code statements we loop over\n}\n</code></pre>"},{"location":"CIS-12/week_8.html#loop-control","title":"Loop Control","text":"<ul> <li>A while loop will continue executing as long as the boolean expression is true.</li> <li>It\u2019s easy to create an infinite loop by makeing the boolean expression always true. <pre><code>while ( true ) {\n// This will never stop.\n}\n</code></pre></li> <li>To stop a while loop, we must either make the boolean expression false, or add another conditional to break from the loop. <pre><code>int number = 1;\n\nwhile (true) {\nSystem.out.println(number);\nif (number &gt;= 5) {\nbreak;\n}\n\nnumber++;\n}\n\nSystem.out.println(\"Ready!\");\n</code></pre></li> </ul> Question <p>Why do we declare the <code>int number = 1</code> outside the while loop?</p> Answer <p>If we didn\u2019t, the local variable number would get redefined on each loop iteration causing it to never increment to 5. Thus, causing an infinite loop.</p> <ul> <li>Let\u2019s look at another way to stop a loop, via user-input: <pre><code>Scanner scanner = new Scanner(System.in);\n\nwhile (true) {\nSystem.out.println(\"Exit? (y or Y exits)\");\nString input = scanner.nextLine();\nif (input.toLowerCase().equals(\"y\")) {\nbreak;\n}\n\nSystem.out.println(\"Ok! Let's carry on!\");\n}\n\nSystem.out.println(\"Left the loop!\");\n</code></pre></li> </ul> Excercise <p>Write a program by using the loop example that asks \u201cShall we carry on?\u201d until the user inputs the string \u201cno\u201d.</p> Answer <pre><code>Scanner s = new Scanner(System.in);\nString input;\nwhile(true) {\nSystem.out.print(\"Shall we carry on? (no exits): \");\ninput = s.nextLine();\nif(input.toLowerCase().equals(\"no\")) {\nbreak;\n}\nSystem.out.println(\"kept going!\");\n}\nSystem.out.println(\"Exited loop!\");\n</code></pre> <ul> <li>Other variables of types of User Input can be used to crontrol loops. Consider the following: <pre><code>Scanner scanner = new Scanner(System.in);\n\nwhile (true) {\nSystem.out.println(\"Input a number, 0 to quit\");\nint command = Integer.valueOf(scanner.nextLine());\nif (command == 0) {\nbreak;\n}\n\nSystem.out.println(\"You input \" + command);\n}\n\nSystem.out.println(\"Done, thank you!\");\n</code></pre></li> <li>Here an integer input by the user is used.</li> </ul>"},{"location":"CIS-12/week_8.html#how-does-a-loop-start-over","title":"How Does a Loop Start Over","text":"<ul> <li>When the execution reaches the end of the loop, the execution starts again from the start of the loop.</li> <li>You can also return to the beginning from other places besides the end with the command continue.<ul> <li>When the computer encounters the continue command, it goes back to the start of the loop in the program.</li> </ul> </li> </ul> Continue Example<pre><code>Scanner scanner = new Scanner(System.in);\n\nwhile (true) {\nSystem.out.println(\"Insert positive integers\");\nint number = Integer.valueOf(scanner.nextLine());\n\nif (number &lt;= 0) {\nSystem.out.println(\"Unfit number! Try again.\");\ncontinue;\n}\n\nSystem.out.println(\"Your input was \" + number);\n}\n</code></pre> Excercise <p>Write a program, according to the preceding example, that asks the user to input values until they input the value 6.</p> Answer <pre><code>Scanner s = new Scanner(System.in);\nint input;\nwhile(true) {\nSystem.out.print(\"Shall we carry on? (6 exits): \");\ninput = Integer.parseInt(s.nextLine());\nif(input == 6) {\nbreak;\n}\nSystem.out.println(\"kept going!\");\n}\nSystem.out.println(\"Exited loop!\");\n</code></pre> Question <p>What is wrong with the above loop?</p> Answer <p>Its INFINITE! There is no break or boolean expression to exit this loop.</p> Excercise <p>What does the program below print? <pre><code>public static void main(String[] args) {\nint number = 0;\n\nwhile (true) {\nnumber = number + 1;\n\nif (number &gt;= 5) {\nbreak;\n}\n\nif (number &lt; 5) {\ncontinue;\n}\n\nSystem.out.print(number + \" \");\n}\n\nSystem.out.print(number + \" \");\n}\n</code></pre></p> Answer <p>5 plus a space so: \u201c5 \u201c</p> Excercise <p>Write a program that asks the user for numbers. If the number is negative (smaller than zero), the program prints for user \u201cUnsuitable number\u201d and asks the user for a new number. If the number is zero, the program exits the loop. If the number is positive, the program prints the number to the power of two.</p> Answer <p><pre><code>Scanner s = new Scanner(System.in);\nint input;\nwhile(true) {\nSystem.out.print(\"Give me numbers: (0 exits): \");\ninput = Integer.parseInt(s.nextLine());\nif(input &lt; 0) {\nSystem.out.println(\"Unsuitable number\");\ncontinue;\n} else if(input == 0) {\nbreak;\n} else {\nSystem.out.println(Math.pow(input, 2));\n}\n}\nSystem.out.println(\"Exited loop!\");\n</code></pre> * Another possible, and MORE CLEAR solution would be: <pre><code>Scanner scanner = new Scanner(System.in);\n\nwhile (true) {\nSystem.out.println(\"Input a number\");\nint number = Integer.valueOf(scanner.nextLine());\n\nif (number == 0) {\nbreak;\n}\n\nif (number &lt; 0) {\nSystem.out.println(\"Unfit number\");\ncontinue;\n}\n\nSystem.out.println(number * number);\n}\n</code></pre> * The second version is more clear because the separated if statements have a clearly defined single purpose. * When combining if/else statements it\u2019s difficult to define a single, clear task for if-else-else-block which makes the code less human readable.</p>"},{"location":"CIS-12/week_8.html#a-common-loop-mistake","title":"A Common Loop Mistake","text":"<ul> <li>Declaring a variable inside the loop: Program to print 1's input by user<pre><code>Scanner scanner = new Scanner(System.in);\n\n// The task is to read an input from the user\nwhile (true) {\n\n// The task is to keep count of number ones\nint ones = 0;\n\nSystem.out.println(\"Input a number (0 exits): \");\n// The task is to read a user inputted number\nint number = Integer.valueOf(scanner.nextLine());\n\n// The task is to exit the loop if the user\n// has inputted zero\nif (number == 0) {\nbreak;\n}\n\n// The task is to increase the amount of ones\n// if the user inputs a number one\nif (number == 1) {\nones = ones + 1;\n}\n}\n\n// The task is to print out the total of ones\n// This doesn't work because the variable ones has been\n// introduced within the loop\nSystem.out.println(\"The total of ones: \" + ones);\n</code></pre></li> <li>The variable ones is introduced within the loop so its value is initialized on each iteration.</li> <li>An attempt is also made to use it after the loop at the end of the program, but by that time the variable is out of scope.</li> </ul> <p>So what\u2019s the fix? Some of you might consider putting the sout in the loop like so: sout in the loop<pre><code>Scanner scanner = new Scanner(System.in);\n\n// The task is to read an input from the user\nwhile (true) {\n\n// The task is to keep count of number ones\nint ones = 0;\n\nSystem.out.println(\"Insert a number (0 exits): \");\n// The task is to read a user inputted number\nint number = Integer.valueOf(scanner.nextLine());\n\n// The task is to exit the loop if the user\n// has inputted zero\nif (number == 0) {\nbreak;\n}\n\n// The task is to increase the amount of ones\n// if the user inputs a number one\nif (number == 1) {\nones = ones + 1;\n}\n\n// The task is to print out the total of ones\nSystem.out.println(\"The total of ones: \" + ones);\n}\n</code></pre></p> <ul> <li>Though this works for the ones variable, we only want it to print once, and this prints on every iteration.</li> <li>The answer is to decalre the variable before the loop so that we don\u2019t re-initialize it on each iteration and so we can use it outside the loop\u2019s scope.</li> </ul> The Right Way<pre><code>Scanner scanner = new Scanner(System.in);\n\n// The task is to keep track of number ones\nint ones = 0;\n\n// The task is to read an input from the user\nwhile (true) {\nSystem.out.println(\"Give a number (end with 0): \");\n// The task is to read a user inputted number\nint number = Integer.valueOf(scanner.nextLine());\n\n// The task is to exit the loop if the user\n// has inputted zero\nif (number == 0) {\nbreak;\n}\n\n// The task is to increase the amount of ones\n// if the user inputs a number one\nif (number == 1) {\nones = ones + 1;\n}\n}\n\n// The task is to print out the total of ones\nSystem.out.println(\"The total of ones: \" + ones);\n</code></pre> Exercise <p>Write a program that reads values from the user until they input a 0. After this, the program prints the total number of inputted values. The zero that\u2019s used to exit the loop should not be included in the total number count.</p> Answer <pre><code>Scanner s = new Scanner(System.in);\nint input;\nint numInputs = 0;\nwhile(true) {\nSystem.out.print(\"Give me numbers: (0 exits): \");\ninput = Integer.parseInt(s.nextLine());\nif(input == 0) {\nbreak;\n}\nnumInputs++;\n}\nSystem.out.printf(\"Read %d inputs!\", numInputs);\n</code></pre>"},{"location":"CIS-12/week_8.html#rewrite-my-loops","title":"Rewrite My Loops","text":"<ul> <li>So far we\u2019ve exited our loops with a separate conditional and with break, but we can use the boolean expression instead.<ul> <li>Consider the last example: <pre><code>Scanner s = new Scanner(System.in);\nint input;\nint numInputs = 0;\nwhile(true) {\nSystem.out.print(\"Give me numbers: (0 exits): \");\ninput = Integer.parseInt(s.nextLine());\nif(input == 0) {\nbreak;\n}\nnumInputs++;\n}\nSystem.out.printf(\"Read %d inputs!\", numInputs);\n</code></pre></li> <li>This can be re-written like so: <pre><code>Scanner s = new Scanner(System.in);\nint input;\nint numInputs = 0;\nSystem.out.print(\"Give me numbers: (0 exits): \");\nwhile((input = Integer.parseInt(s.nextLine())) != 0 ) {;\nnumInputs++;\nSystem.out.print(\"Give me numbers: (0 exits): \");\n}\nSystem.out.printf(\"Read %d inputs!\", numInputs);\n</code></pre></li> </ul> </li> </ul>"},{"location":"CIS-12/week_8.html#for-loops","title":"For Loops","text":"<ul> <li> <p>Consider the following while loop: <pre><code>int i = 0;\nwhile (i &lt; 10) {\nSystem.out.println(i);\ni++;\n}\n</code></pre></p> </li> <li> <p>While this works, its fairly verbose.</p> </li> <li>Let\u2019s introduce a different style of loop to reduce our complexity. <pre><code>for (int i = 0; i &lt; 10; i++) {\nSystem.out.println(i);\n}\n</code></pre></li> </ul>"},{"location":"CIS-12/week_8.html#form-and-parts-of-the-for-loop","title":"Form and Parts of the For Loop","text":"<pre><code>for (*introducing a variable*; *condition*; *increasing the counter*) {\n// Functionality to be executed\n}\n</code></pre> <ol> <li>Introduce Variables</li> <li>Loop Condition</li> <li>Increase, Decrease, or Change loop counter values</li> <li>Body of the loop</li> </ol> <p>Let\u2019s talk about loop execution\u2026</p> Question <p>What would the following program print? <pre><code>int start = 3;\nint end = 7;\nfor (int i = start; i &lt; end; i++) {\nSystem.out.println(i);\n}\n</code></pre></p> Answer <pre><code>3\n4\n5\n6\n</code></pre> Excercise <p>Write a program that reads an integer from the user. Next, the program prints numbers from 0 to the number given by the user with a for loop. You can assume that the user always gives a positive number.</p> Answer <pre><code>Scanner s = new Scanner(System.in);\nSystem.out.print(\"Give me a number: \");\nint input = Integer.parseInt(s.nextLine());\nfor(int i=0; i&lt;=input; i++) {\nSystem.out.println(i);\n}\n</code></pre>"},{"location":"CIS-12/week_8.html#loop-control_1","title":"Loop Control","text":"<ul> <li><code>break</code> and <code>continue</code> work the same way in a for loop as they do in a while loop!!!</li> </ul>"},{"location":"CIS-12/week_8.html#if-time-permits-more-exercises--","title":"If Time Permits More Exercises :-)","text":""},{"location":"CIS-12/week_8ch9py.html","title":"Week 8 - Lists","text":""},{"location":"CIS-12/week_8ch9py.html#lists-in-python","title":"Lists in Python","text":"<p>Lists are similar to Arrays in other languages, but the are dynamic due to the dynamic nature of a Python. We just learned about string sequences, and guess what, lists are also sequences and many of the same operations we could use with strings we can use with lists.</p>"},{"location":"CIS-12/week_8ch9py.html#1-overview-of-lists","title":"1. Overview of Lists","text":"<ul> <li>Definition: A list is a sequence that can store values of any data type, unlike strings that only store characters.</li> <li>Creating Lists: Show examples of lists containing integers, strings, and mixed types.         <pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]\nmixed_list = [\"Python\", 3.14, 42, [\"nested\", \"list\"]]\n</code></pre></li> <li>Empty Lists: Mention that lists can also be empty, which can be useful as placeholders.         <pre><code>empty_list = []\n</code></pre></li> </ul>"},{"location":"CIS-12/week_8ch9py.html#2-accessing-and-modifying-list-elements","title":"2. Accessing and Modifying List Elements","text":"<ul> <li>Indexing: Explain list indexing with examples for positive and negative indices.         <pre><code>items = [10, 20, 30, 40]\nprint(items[0])    # First item\nprint(items[-1])   # Last item\n</code></pre></li> <li>Mutability: Lists are mutable, so elements can be reassigned.         <pre><code>items[1] = 25\nprint(items)       # Output: [10, 25, 30, 40]\n</code></pre></li> <li>Checking Elements with <code>in</code>: Introduce the <code>in</code> operator.         <pre><code>print(30 in items)    # True\nprint(50 in items)    # False\n</code></pre></li> </ul>"},{"location":"CIS-12/week_8ch9py.html#3-list-slicing","title":"3. List Slicing","text":"<ul> <li>Using Slice Syntax: Demonstrate slicing to access sublists.         <pre><code>letters = ['a', 'b', 'c', 'd', 'e']\nprint(letters[1:4])     # ['b', 'c', 'd']\n</code></pre></li> <li>Omitting Indices: Show slicing from the start or to the end of the list.         <pre><code>print(letters[:3])      # ['a', 'b', 'c']\nprint(letters[3:])      # ['d', 'e']\n</code></pre></li> <li>Copying Lists: Explain that omitting both indices creates a copy of the list.         <pre><code>letters_copy = letters[:]\n</code></pre></li> </ul>"},{"location":"CIS-12/week_8ch9py.html#4-list-operations","title":"4. List Operations","text":"<ul> <li>Concatenation with <code>+</code>: Combine two lists using the <code>+</code> operator.         <pre><code>list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\ncombined = list1 + list2\n</code></pre></li> <li>Repetition with <code>*</code>: Use <code>*</code> to repeat elements in a list.         <pre><code>repeated_list = [\"hi\"] * 3\n# Output: ['hi', 'hi', 'hi']\n</code></pre></li> <li>Basic Aggregations: Introduce <code>sum</code>, <code>min</code>, and <code>max</code>.         <pre><code>numbers = [10, 20, 30]\nprint(sum(numbers))  # 60\n</code></pre></li> </ul>"},{"location":"CIS-12/week_8ch9py.html#5-list-methods","title":"5. List Methods","text":"<ul> <li>Adding Elements:</li> <li><code>append()</code>: Adds a single element at the end.           <pre><code>letters.append('f')\n# Output: ['a', 'b', 'c', 'd', 'e', 'f']\n</code></pre></li> <li><code>extend()</code>: Adds multiple elements.           <pre><code>letters.extend(['g', 'h'])\n# Output: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n</code></pre></li> <li>Removing Elements:</li> <li><code>pop()</code>: Removes by index.           <pre><code>letters.pop(2)      # Removes 'c'\n</code></pre></li> <li><code>remove()</code>: Removes by value.           <pre><code>letters.remove('a')\n</code></pre></li> </ul>"},{"location":"CIS-12/week_8ch9py.html#6-working-with-lists-and-strings","title":"6. Working with Lists and Strings","text":"<ul> <li>Converting a String to a List of Characters:         <pre><code>name = \"python\"\nname_list = list(name)\n</code></pre></li> <li>Splitting a String into Words:         <pre><code>sentence = \"Learning Python is fun\"\nwords = sentence.split()\n</code></pre></li> <li>Joining List Elements into a String:         <pre><code>sentence = ' '.join(words)\n</code></pre></li> </ul>"},{"location":"CIS-12/week_8ch9py.html#7-looping-through-lists","title":"7. Looping Through Lists","text":"<ul> <li>Using <code>for</code> Loops: Introduce iterating over a list.         <pre><code>numbers = [1, 2, 3]\nfor number in numbers:\n    print(number)\n</code></pre></li> <li>Looping with Index:         <pre><code>for i in range(len(numbers)):\n    print(f\"Index {i}: {numbers[i]}\")\n</code></pre></li> </ul>"},{"location":"CIS-12/week_8ch9py.html#8-sorting-lists","title":"8. Sorting Lists","text":"<ul> <li><code>sorted()</code> Function: Demonstrate sorting a list and that it does not modify the original.         <pre><code>unsorted_list = [3, 1, 2]\nsorted_list = sorted(unsorted_list)\n</code></pre></li> <li>Using <code>join</code> with <code>sorted()</code>: Combine sorted list items back into a string.         <pre><code>letters = ['d', 'a', 'c']\nsorted_str = ''.join(sorted(letters))\n</code></pre></li> </ul>"},{"location":"CIS-12/week_8ch9py.html#exercises","title":"Exercises","text":"<ol> <li>Combine and Modify</li> <li> <p>Write a function that takes two lists, combines them, and then removes any duplicates. The function should return the modified list.</p> </li> <li> <p>List Reversal Without <code>reverse()</code></p> </li> <li>Write a function that takes a list and returns a new list with the elements in reverse order without using the <code>reverse()</code> method or slicing. Instead, use a loop to achieve the reversal.</li> </ol>"},{"location":"CIS-12/week_8py.html","title":"Week 8 - Strings &amp; Regular Expressions","text":""},{"location":"CIS-12/week_8py.html#strings-and-regular-expressions","title":"Strings and Regular Expressions","text":""},{"location":"CIS-12/week_8py.html#lesson-objectives","title":"Lesson Objectives","text":"<ul> <li>Understand strings as sequences and practice accessing individual characters</li> <li>Learn string slicing and manipulation techniques</li> <li>Recognize the immutability of strings and explore methods for creating modified strings</li> <li>Utilize string comparison operations for alphabetic ordering</li> <li>Implement essential string methods and apply them in reading and writing files</li> <li>Gain familiarity with regular expressions to search, replace, and validate patterns within text</li> </ul>"},{"location":"CIS-12/week_8py.html#1-review-of-strings-are-sequences","title":"1. Review of Strings are Sequences","text":"<p>Explanation: Strings in Python are sequences (specifically a sequence of characters strung together), which means they can be indexed to access individual characters. Unlike integers or booleans, strings can hold multiple characters in a particular order.</p> <p>Code Example: <pre><code>city = \"Eureka\"\nfirst_letter = city[0]  # Accessing first character\nsecond_letter = city[1]  # Accessing second character\nprint(\"First letter:\", first_letter)\nprint(\"Second letter:\", second_letter)\n\n# Negative index\nlast_letter = city[-1]\nprint(\"Last letter:\", last_letter)\n</code></pre></p> <p>NOTE: The [-1] syntax is specific to interpreted languages like Python.</p>"},{"location":"CIS-12/week_8py.html#2-string-slicing","title":"2. String Slicing","text":"<p>Explanation: String slicing enables access to parts of a string. The syntax <code>string[start:end]</code> captures a substring from the starting index up to, but not including, the ending index.</p> <p>Code Example: <pre><code>sentence = \"Programming is fun!\"\nprint(\"First 11 characters:\", sentence[:11])\nprint(\"Characters from index 5 to 9:\", sentence[5:9])\nprint(\"Last 3 characters:\", sentence[-3:])\n</code></pre></p>"},{"location":"CIS-12/week_8py.html#3-string-immutability","title":"3. String Immutability","text":"<p>Explanation: Strings are immutable, meaning that their characters cannot be changed directly. Instead, we create a new string by modifying or combining parts of the original.</p> <p>Code Example: <pre><code>greeting = \"Goodbye\"\n# Attempting to change the first letter results in an error\ngreeting[0] = 'H'\n\n# So the correct way is to create a new string using slicing.\nnew_greeting = \"H\" + greeting[1:]\nprint(\"New greeting:\", new_greeting)\n</code></pre></p>"},{"location":"CIS-12/week_8py.html#4-review-of-string-comparison","title":"4. Review of String Comparison","text":"<p>Explanation: Strings can be compared using relational operators such as <code>&lt;</code>, <code>&gt;</code>, and <code>==</code>. Python uses ASCII values for comparison, which places uppercase letters before lowercase letters.</p> <p>Code Example: <pre><code>def compare_to_word(word):\n    if word &lt; \"apple\":\n        print(f\"{word} comes before apple.\")\n    elif word &gt; \"apple\":\n        print(f\"{word} comes after apple.\")\n    else:\n        print(\"It's apple!\")\n\ncompare_to_word(\"banana\")\ncompare_to_word(\"Apple\")\n</code></pre></p>"},{"location":"CIS-12/week_8py.html#5-review-of-string-methods","title":"5. Review of String Methods","text":"<p>Explanation: Strings come with various built-in methods, including <code>upper()</code>, <code>lower()</code>, <code>find()</code>, and <code>replace()</code>, which allow transformations and searches within strings.</p> <p>Code Example: <pre><code>message = \"Hello, World!\"\nprint(\"Uppercase:\", message.upper())\nprint(\"Lowercase:\", message.lower())\nprint(\"Position of 'World':\", message.find(\"World\"))\nprint(\"Replacing 'World' with 'Universe':\", message.replace(\"World\", \"Universe\"))\n</code></pre></p>"},{"location":"CIS-12/week_8py.html#6-reading-and-writing-files","title":"6. Reading and Writing Files","text":"<p>Explanation: Reading and writing text files involves opening a file, processing its content, and saving any modifications. We often use loops to handle each line of the file.</p> <p>Code Example: <pre><code># Writing to a file\nwith open(\"greeting.txt\", \"w\") as writer:\n    writer.write(\"Hello, World!\\nWelcome to Python programming.\")\n\n# Reading from a file\nwith open(\"greeting.txt\", \"r\") as reader:\n    for line in reader:\n        print(line.strip())\n</code></pre></p>"},{"location":"CIS-12/week_8py.html#7-introduction-to-regular-expressions","title":"7. Introduction to Regular Expressions","text":"<p>Explanation: Regular expressions (regex) are used to identify specific patterns in strings. They enable powerful operations like search and replace for advanced text processing.</p> <p>Code Example: <pre><code>import re\n\ntext = \"Welcome to the world of Python programming!\"\npattern = r\"\\bworld\\b\"  # Matches 'world' as a whole word \\b is a word boundary\nmatch = re.search(pattern, text)\nif match:\n    print(\"Found 'world' at index:\", match.start())\nelse:\n    print(\"'world' not found\")\n</code></pre></p>"},{"location":"CIS-12/week_8py.html#8-string-substitution-with-regex","title":"8. String Substitution with Regex","text":"<p>Explanation: String substitution replaces parts of a string based on a pattern. Regex substitutions use the <code>sub()</code> method to replace matches with a specified replacement.</p> <p>Code Example: <pre><code>text = \"The color of the sky is colorless.\"\npattern = r\"\\bcolor\\b\"\nnew_text = re.sub(pattern, \"colour\", text)\nprint(\"Modified text:\", new_text)\n</code></pre></p>"},{"location":"CIS-12/week_8py.html#exercises","title":"Exercises","text":"<ol> <li> <p>Slice and Reorder:    Write a function <code>half_mirror(str_in)</code> that takes a string input and creates a mirrored version of its first half. If the string has an odd number of characters, consider only the first half (ignoring the middle character). Return the mirrored half as a new string.    Example: Input: \u201cPythonProgramming\u201d, Output: \u201crPnohtyP\u201d</p> </li> <li> <p>Find and Count Patterns:    Create a function <code>count_pattern_occurrences(text, pattern)</code> that counts how many times a specified pattern appears in a given text, using regular expressions. Example: For <code>pattern = r\"\\bthe\\b\"</code>, <code>text = \"The cat chased the mouse.\"</code> should return <code>2</code>.</p> </li> <li> <p>File Content Replacer:    Write a program that reads from a file and replaces all occurrences of a user-specified word with another word. Save the modified text to a new file. Example: Replace <code>\"sky\"</code> with <code>\"ocean\"</code> in a file named <code>nature.txt</code> and save the results in <code>new_nature.txt</code>.</p> </li> </ol>"},{"location":"CIS-12/week_9.html","title":"Week 9 - Recursion","text":""},{"location":"CIS-12/week_9.html#lecture-notes-recursive-methods","title":"Lecture Notes: Recursive Methods","text":""},{"location":"CIS-12/week_9.html#recursive-void-methods","title":"Recursive Void Methods","text":"<ul> <li>Iterative vs. Recursive Methods:<ul> <li>Iterative methods use loops for repetition.</li> <li>Recursive methods invoke themselves to solve smaller versions of the same problem.</li> </ul> </li> </ul> Example: Recursive Countdown Method<pre><code>public static void countdown(int n) {\nif (n == 0) {\nSystem.out.println(\"Blastoff!\");\n} else {\nSystem.out.println(n);\ncountdown(n - 1);\n}\n}\n</code></pre> <ul> <li> <p>The method displays numbers from n to 0, then prints \u201cBlastoff!\u201d.</p> </li> <li> <p>Execution of Recursive Method:</p> <ul> <li>Each invocation creates a new stack frame.</li> <li>Frames are popped when base case is reached.</li> </ul> </li> </ul>"},{"location":"CIS-12/week_9.html#recursive-stack-diagrams","title":"Recursive Stack Diagrams","text":"<ul> <li> <p>Stack Diagrams:</p> <ul> <li>Represent the state of program during method invocation.</li> <li>Base case frame is the last one.</li> </ul> </li> <li> <p>Example: Countdown Stack Diagram:</p> <ul> <li>Imagine we call <code>countdown(3);</code></li> </ul> </li> </ul> <pre><code>main\n  countdown (n=3)\ncountdown (n=2)\ncountdown (n=1)\ncountdown (n=0)  // Base case, method returns\n      countdown (n=1)  // This call returns the result (which is nothing)\ncountdown (n=2)  // This call returns the result (which is nothing)\ncountdown (n=3)  // This call returns the result (which is nothing)\n</code></pre> <ul> <li>Example: nLines Stack Diagram:<ul> <li>Imagine we call <code>nLines(3);</code></li> </ul> </li> </ul> Example: Recursive Number of Newlines Method<pre><code>public static void nLines(int n) {\nif (n &gt; 0) {\nnLines(n - 1);\nSystem.out.println();\n}\n}\n</code></pre> <pre><code>main\n  nLines (n=3)\nnLines (n=2)\nnLines (n=1)\nnLines (n=0)  // Base case, method returns (nothing printed)\nnLines (n=1)  // This call returns (prints a newline)\nnLines (n=2)  // This call returns (prints a newline)\nnLines (n=3)  // This call returns (prints a newline)\n</code></pre> <ol> <li>main: The program starts in the main method.</li> <li>nLines (n=3): The main method calls nLines with n=3.</li> <li>nLines (n=2): The first recursive call to nLines occurs with n=2.</li> <li>nLines (n=1): The method calls itself again with n=1.</li> <li>nLines (n=0): The base case is reached (n &lt;= 0), so the method returns without printing anything.</li> <li>Returning: The calls start returning, each printing a newline as they return:</li> <li>nLines(n=1) prints a newline.</li> <li>nLines(n=2) prints a newline.</li> <li>nLines(n=3) prints a newline.</li> </ol>"},{"location":"CIS-12/week_9.html#stack-overflow","title":"Stack Overflow","text":"<ul> <li>A stack overflow happens in computer programs that use recursion when a program tries to use more memory on the call stack than is available.</li> </ul> Info <p>Imagine a stack of plates at a restaurant. Each plate represents a method call. When a method is called, a new plate (frame) is added on top of the stack. This frame stores information about the method, like its parameters and local variables. In recursion, a method calls itself. This means a new plate gets added on top of the stack for each recursive call. If there are too many method calls (too many plates), the stack will run out of space, and you\u2019ll get a stack overflow error. This is like trying to add too many plates to a real stack - they will all come crashing down!</p> <ul> <li>Stack Overflow Occurs if the base case is never reached, which causes infinite recursion.</li> </ul>"},{"location":"CIS-12/week_9.html#value-returning-recursive-methods","title":"Value-Returning Recursive Methods","text":"Factorial:  Mathematically defined as n! = n * (n - 1)!.<pre><code>public static long factorial(int n) {\nif (n == 0) {\nreturn 1; // Base case: factorial of 0 is 1\n} else {\nreturn n * factorial(n - 1); // Recursive case: n! = n * (n-1)!\n}\n}\n</code></pre> <ol> <li>This method takes an integer n as a parameter.</li> <li>The base case occurs when n is 0. In this scenario, the factorial of 0 is defined as 1, so the method returns 1.</li> <li>If n is greater than 0, the recursive case applies. The method calculates n * factorial(n - 1). This breaks down the factorial of n into the product of n and the factorial of n - 1.</li> <li>The recursive call factorial(n - 1) essentially calculates the factorial of a smaller version of the original problem (n - 1).</li> <li>The result of the recursive call is then multiplied by n and returned as the factorial of the original n.</li> </ol> -warn <p>While this method is elegant and demonstrates recursion, it\u2019s important to be aware that for larger values of n, this approach can lead to stack overflow errors. This is because each recursive call adds a new frame to the stack, and for very large factorials, the stack might not have enough memory to accommodate all the calls. For calculating factorials of larger numbers, an iterative approach is generally preferred.</p>"},{"location":"CIS-12/week_9.html#leap-of-faith","title":"Leap of Faith","text":"<ul> <li>Assume recursive call works correctly.</li> <li>Similar to trusting built-in methods like <code>Math.cos</code>.</li> </ul>"},{"location":"CIS-12/week_9.html#counting-up-recursively","title":"Counting Up Recursively","text":"Reverse output simply by re-ordering recursive call<pre><code>public static void countup(int n) {\nif (n == 0) {\nSystem.out.println(\"Blastoff!\");\n} else {\ncountup(n - 1);\nSystem.out.println(n);\n}\n}\n</code></pre>"},{"location":"CIS-12/week_9.html#recursive-binary-method","title":"Recursive Binary Method","text":"<pre><code>public static void displayBinary(int value) {\nif (value &gt; 0) {\ndisplayBinary(value / 2);\nSystem.out.print(value % 2);\n}\n}\n</code></pre> <ul> <li>Example: displayBinary Stack Diagram:<ul> <li>Imagine we call <code>displayBinary(10);</code></li> </ul> </li> </ul> <pre><code>main\n  displayBinary (value = 10)\ndisplayBinary (value = 5)\ndisplayBinary (value = 2)\ndisplayBinary (value = 1)\ndisplayBinary (value = 0)  // Base case, method returns\n        System.out.print(1 % 2)      // Prints \"1\"\nSystem.out.print(2 % 2)        // Prints \"0\"\nSystem.out.print(5 % 2)          // Prints \"1\"\nSystem.out.print(10 % 2)          // Prints \"0\"\n</code></pre>"},{"location":"CIS-12/week_9ch11py.html","title":"Week 9 - Tuples","text":""},{"location":"CIS-12/week_9ch11py.html#tuples-lists-and-dictionaries---oh-my","title":"Tuples, Lists, and Dictionaries - Oh My!","text":""},{"location":"CIS-12/week_9ch11py.html#objective","title":"Objective:","text":"<ol> <li>Create tuples and use tuple operations.</li> <li>Use tuple assignment and return tuples from functions.</li> <li>Implement tuple packing and unpacking with functions that handle variable-length arguments.</li> <li>Utilize <code>zip</code> to iterate through multiple sequences and combine them.</li> <li>Understand the immutability of tuples and their use as dictionary keys.</li> </ol>"},{"location":"CIS-12/week_9ch11py.html#introduction-to-tuples","title":"Introduction to Tuples","text":"<ul> <li>Concept: Tuples are similar to lists, but they are immutable.</li> <li>Concept: Use tuples instead of lists when you have data that you don\u2019t want changed, this includes when you need a hash-able key for a dictionary.</li> <li>Code Example:      <pre><code>fruits = ('apple', 'banana', 'cherry')\nprint(fruits[1])  # Access tuple element just like a list\n# fruits[1] = 'orange'  # This will raise a TypeError because tuples are immutable\n</code></pre></li> </ul>"},{"location":"CIS-12/week_9ch11py.html#tuple-creation-and-basic-operations","title":"Tuple Creation and Basic Operations","text":"<ul> <li>Concept: How to create tuples, including single element tuples, and common tuple operations like concatenation, slicing, and duplication.</li> <li>Code Example:      <pre><code># Tuple with a single element\none_element_tuple = ('only',)  # NOTE: the ending comma IS necessary to make it a tuple.\nprint(f\"Type of one_element_tuple: {type(one_element_tuple)}\")\n\n# Concatenation and repetition\nnew_tuple = one_element_tuple + ('element',)\nrepeated_tuple = new_tuple * 3\nprint(repeated_tuple)\n</code></pre></li> </ul>"},{"location":"CIS-12/week_9ch11py.html#tuples-as-immutable-objects","title":"Tuples as Immutable Objects","text":"<ul> <li>Concept: Tuples cannot be modified. This immutability allows them to be used as dictionary keys.</li> <li>Code Example:     <pre><code>location_dict = {('Eureka', 'California'): 'Foggy', ('Las Vegas', 'Nevada'): 'Sunny'}\nprint(location_dict[('Eureka', 'California')])  # Using a tuple as a dictionary key\n</code></pre></li> </ul>"},{"location":"CIS-12/week_9ch11py.html#tuple-assignment","title":"Tuple Assignment","text":"<ul> <li>Concept: Using tuple unpacking to assign multiple variables in one step.</li> <li>Code Example:     <pre><code># Swapping values using tuple assignment\nx, y = 5, 10\nx, y = y, x\nprint(f\"x: {x}, y: {y}\")\n</code></pre></li> </ul>"},{"location":"CIS-12/week_9ch11py.html#tuples-as-return-values","title":"Tuples as Return Values","text":"<ul> <li>Concept: Returning multiple values from a function using tuples.</li> <li>Code Example:     <pre><code>def get_min_max(numbers):\n    return min(numbers), max(numbers)\n\nresult = get_min_max([10, 5, 3, 9, 2])\nprint(f\"Min: {result[0]}, Max: {result[1]}\")\n</code></pre></li> </ul>"},{"location":"CIS-12/week_9ch11py.html#packing-and-unpacking-arguments","title":"Packing and Unpacking Arguments","text":"<ul> <li>Concept: Functions can pack multiple arguments into a tuple and unpack them for use.</li> <li>Code Example:     <pre><code>def multiply_all(*numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result\n\nprint(multiply_all(2, 3, 4))  # Unpacking variable arguments\n</code></pre></li> </ul>"},{"location":"CIS-12/week_9ch11py.html#the-zip-function","title":"The <code>zip</code> Function","text":"<ul> <li>Concept: <code>zip</code> allows iterating over multiple sequences simultaneously.</li> <li>Code Example:     <pre><code>names = ['Alice', 'Bob', 'Charlie']\nscores = [85, 90, 78]\n\nfor name, score in zip(names, scores):\n    print(f\"{name} scored {score}\")\n</code></pre></li> </ul>"},{"location":"CIS-12/week_9ch11py.html#comparing-and-sorting-tuples","title":"Comparing and Sorting Tuples","text":"<ul> <li>Concept: Tuples can be compared and sorted based on lexicographical order.</li> <li>Code Example:     <pre><code>students = [('Alice', 85), ('Bob', 90), ('Charlie', 78)]\nsorted_students = sorted(students, key=lambda student: student[1], reverse=True)\nprint(f\"Top student: {sorted_students[0][0]}\")\n</code></pre></li> </ul>"},{"location":"CIS-12/week_9ch11py.html#exercises","title":"Exercises","text":"<ol> <li>Tuple Manipulation<ul> <li>Create a tuple of your favorite foods. Write a function that takes a tuple of foods and returns a new tuple where all items are reversed.</li> <li>Use slicing with tuples to reverse the items.</li> </ul> </li> <li>Using <code>zip</code> with Lists and Dictionaries<ul> <li>Given two lists: <code>keys = ['a', 'b', 'c']</code> and <code>values = [1, 2, 3]</code>, create a dictionary that maps keys to values using <code>zip</code>.</li> </ul> </li> <li>Packing and Unpacking with Functions<ul> <li>Write a function that accepts a variable number of arguments, computes their product, and returns both the product and the number of arguments as a tuple.</li> </ul> </li> </ol>"},{"location":"CIS-12/week_9py.html","title":"Week 9 - Dictionaries","text":""},{"location":"CIS-12/week_9py.html#python-dictionaries","title":"Python Dictionaries","text":""},{"location":"CIS-12/week_9py.html#lesson-objective","title":"Lesson Objective:","text":"<ul> <li>Understand what dictionaries are and how they differ from lists.</li> <li>Create and manipulate dictionaries using keys and values.</li> <li>Utilize dictionary methods and operators.</li> <li>Solve problems involving dictionaries, such as counting unique elements or filtering data.</li> </ul>"},{"location":"CIS-12/week_9py.html#introduction-to-dictionaries","title":"Introduction to Dictionaries","text":"<ul> <li>Key Concept: A dictionary is a collection of key-value pairs where each key is unique.</li> <li>Key Concept: A dictionary is based on a Hash Table datastructure, and therefore the keys must be immutable to ensure key hash-values don\u2019t change.</li> <li>Code Example: Creating a simple dictionary to store information about a student.      <pre><code>student = {\n    'name': 'Alice',\n    'age': 22,\n    'major': 'Computer Science'\n}\nprint(student['name'])  # Outputs: Alice\n</code></pre></li> </ul>"},{"location":"CIS-12/week_9py.html#dictionaries-vs-lists","title":"Dictionaries vs. Lists","text":"<ul> <li>Key Concept: While lists use integer indices to access elements, dictionaries use keys, which can be any immutable type.</li> <li>Code Example: Using a dictionary to map grades to students.      <pre><code>grades = {'Alice': 'A', 'Bob': 'B', 'Charlie': 'C'}\nprint(grades['Bob'])  # Outputs: B\n</code></pre></li> </ul>"},{"location":"CIS-12/week_9py.html#creating-dictionaries","title":"Creating Dictionaries","text":"<ul> <li>Key Concept: Dictionaries can be created directly with key-value pairs or by using the <code>dict()</code> function.</li> <li>Key Concept: The <code>dict()</code> function can also be used to clone a dictionary, though object in the dictionary values of cloned dictionaries could stll be the same.</li> <li>Code Example: Using the <code>dict()</code> constructor to create a dictionary from a list of tuples.      <pre><code>list_of_tuples = [('apple', 3), ('banana', 6), ('cherry', 5)]\nfruit_counts = dict(list_of_tuples)\nprint(fruit_counts)  # Outputs: {'apple': 3, 'banana': 6, 'cherry': 5}\n</code></pre></li> </ul>"},{"location":"CIS-12/week_9py.html#the-in-operator-with-dictionaries","title":"The <code>in</code> Operator with Dictionaries","text":"<ul> <li>Key Concept: Use the <code>in</code> operator to check if a key exists in a dictionary.</li> <li>Code Example: Checking if a key is in a dictionary.      <pre><code>country_codes = {'US': 1, 'IN': 91, 'JP': 81}\nif 'JP' in country_codes:\n    print('Country code for Japan is:', country_codes['JP'])\n</code></pre></li> </ul>"},{"location":"CIS-12/week_9py.html#updating-and-modifying-dictionarie","title":"Updating and Modifying Dictionarie","text":"<ul> <li>Key Concept: Adding, updating, or deleting items from a dictionary.</li> <li>Code Example: Removing an entry and adding a new one.      <pre><code>phone_book = {'Alice': '555-1234', 'Bob': '555-5678'}\ndel phone_book['Alice']  # Removes Alice\nphone_book['Charlie'] = '555-8765'  # Adds Charlie\nprint(phone_book)  # Outputs: {'Bob': '555-5678', 'Charlie': '555-8765'}\n</code></pre></li> </ul>"},{"location":"CIS-12/week_9py.html#looping-through-dictionaries","title":"Looping through Dictionaries","text":"<ul> <li>Key Concept: Use loops to iterate over keys and values.</li> <li>Code Example: Looping over keys and values in a dictionary.      <pre><code>color_codes = {'red': '#FF0000', 'green': '#00FF00', 'blue': '#0000FF'}\nfor color, code in color_codes.items():\n    print(f'{color}: {code}')\n</code></pre></li> </ul>"},{"location":"CIS-12/week_9py.html#counting-items-with-dictionaries","title":"Counting Items with Dictionaries","text":"<ul> <li>Key Concept: Use a dictionary as a counter to count occurrences of elements.</li> <li>Code Example: Counting how many times each character appears in a string.      <pre><code>def count_characters(string):\n    counts = {}\n    for char in string:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    return counts\n\nprint(count_characters('abracadabra'))\n</code></pre></li> </ul>"},{"location":"CIS-12/week_9py.html#using-dictionaries-for-memoization","title":"Using Dictionaries for Memoization","text":"<ul> <li>Key Concept: Store precomputed results in a dictionary to improve performance (e.g., Fibonacci).</li> <li>Code Example: Memoized Fibonacci function.      <pre><code>memo = {0: 0, 1: 1}\n\ndef fibonacci(n):\n    if n in memo:\n        return memo[n]\n    memo[n] = fibonacci(n-1) + fibonacci(n-2)\n    return memo[n]\n\nprint(fibonacci(10))  # Outputs: 55\n</code></pre></li> </ul>"},{"location":"CIS-12/week_9py.html#exercises","title":"Exercises:","text":"<p>Exercise 1: Word Frequency Counter Write a function that takes a sentence as input and returns a dictionary where the keys are words, and the values are the number of times each word appears.</p> <p>Exercise 2: Student Grades Create a dictionary to store the names of students and their grades. Write a function that accepts this dictionary and returns the name of the student with the highest grade.</p> <p>Exercise 3: Filtering Long Words Given a list of words, create a function that returns a dictionary where the keys are the lengths of the words and the values are lists of words of that length.</p>"},{"location":"CIS-18/abstract_factory_java.html","title":"Abstract factory java","text":""},{"location":"CIS-18/abstract_factory_java.html#abstract-factory-java-code","title":"Abstract Factory Java Code","text":""},{"location":"CIS-18/abstract_factory_java.html#abstract-product","title":"Abstract Product","text":"<pre><code>package edu.redwoods.factory.abstract;\n\npublic abstract class Computer {\n\npublic abstract String getRAM();\npublic abstract String getHDD();\npublic abstract String getCPU();\n\n@Override\npublic String toString(){\nreturn \"RAM= \"+this.getRAM()+\", HDD=\"+this.getHDD()+\", CPU=\"+this.getCPU();\n}\n}\n</code></pre>"},{"location":"CIS-18/abstract_factory_java.html#concrete-products","title":"Concrete Products","text":"<pre><code>package edu.redwoods.factory.abstract;\n\npublic class PC extends Computer {\n\nprivate String ram;\nprivate String hdd;\nprivate String cpu;\n\npublic PC(String ram, String hdd, String cpu){\nthis.ram=ram;\nthis.hdd=hdd;\nthis.cpu=cpu;\n}\n@Override\npublic String getRAM() {\nreturn this.ram;\n}\n\n@Override\npublic String getHDD() {\nreturn this.hdd;\n}\n\n@Override\npublic String getCPU() {\nreturn this.cpu;\n}\n\n}\n</code></pre> <pre><code>package edu.redwoods.factory.abstract;\n\npublic class Server extends Computer {\n\nprivate String ram;\nprivate String hdd;\nprivate String cpu;\n\npublic Server(String ram, String hdd, String cpu){\nthis.ram=ram;\nthis.hdd=hdd;\nthis.cpu=cpu;\n}\n@Override\npublic String getRAM() {\nreturn this.ram;\n}\n\n@Override\npublic String getHDD() {\nreturn this.hdd;\n}\n\n@Override\npublic String getCPU() {\nreturn this.cpu;\n}\n\n}\n</code></pre>"},{"location":"CIS-18/abstract_factory_java.html#abstract-factory-interface","title":"Abstract Factory Interface","text":"<pre><code>package edu.redwoods.factory.abstract;\n\nimport edu.redwoods.factory.abstract.model.Computer;\n\npublic interface ComputerAbstractFactory {\n\npublic Computer createComputer();\n\n}\n</code></pre>"},{"location":"CIS-18/abstract_factory_java.html#concrete-factories","title":"Concrete Factories","text":"<pre><code>package edu.redwoods.factory.abstract;\n\nimport edu.redwoods.factory.abstract.model.Computer;\nimport edu.redwoods.factory.abstract.model.PC;\n\npublic class PCFactory implements ComputerAbstractFactory {\n\nprivate String ram;\nprivate String hdd;\nprivate String cpu;\n\npublic PCFactory(String ram, String hdd, String cpu){\nthis.ram=ram;\nthis.hdd=hdd;\nthis.cpu=cpu;\n}\n@Override\npublic Computer createComputer() {\nreturn new PC(ram,hdd,cpu);\n}\n\n}\n</code></pre> <pre><code>package edu.redwoods.factory.abstract;\n\nimport edu.redwoods.factory.abstract.model.Computer;\nimport edu.redwoods.factory.abstract.model.Server;\n\npublic class ServerFactory implements ComputerAbstractFactory {\n\nprivate String ram;\nprivate String hdd;\nprivate String cpu;\n\npublic ServerFactory(String ram, String hdd, String cpu){\nthis.ram=ram;\nthis.hdd=hdd;\nthis.cpu=cpu;\n}\n\n@Override\npublic Computer createComputer() {\nreturn new Server(ram,hdd,cpu);\n}\n\n}\n</code></pre>"},{"location":"CIS-18/abstract_factory_java.html#convenience-consumer-class","title":"Convenience Consumer Class","text":"<pre><code>package edu.redwoods.factory.abstract;\n\nimport edu.redwoods.factory.abstract.model.Computer;\n\npublic class ComputerFactory {\n\npublic static Computer getComputer(ComputerAbstractFactory factory){\nreturn factory.createComputer();\n}\n}\n</code></pre>"},{"location":"CIS-18/abstract_factory_java.html#abstract-factory-client","title":"Abstract Factory Client","text":"<pre><code>package edu.redwoods.factory.abstract;\n\nimport edu.redwoods.factory.abstract.PCFactory;\nimport edu.redwoods.factory.abstract.ServerFactory;\nimport edu.redwoods.factory.abstract.factory.ComputerFactory;\nimport edu.redwoods.factory.abstract.model.Computer;\n\npublic class TestDesignPatterns {\n\npublic static void main(String[] args) {\ntestAbstractFactory();\n}\n\nprivate static void testAbstractFactory() {\nComputer pc = edu.redwoods.factory.abstract.ComputerFactory.getComputer(new PCFactory(\"2 GB\",\"500 GB\",\"2.4 GHz\"));\nComputer server = edu.redwoods.factory.abstract.ComputerFactory.getComputer(new ServerFactory(\"16 GB\",\"1 TB\",\"2.9 GHz\"));\nSystem.out.println(\"AbstractFactory PC Config::\"+pc);\nSystem.out.println(\"AbstractFactory Server Config::\"+server);\n}\n}\n</code></pre>"},{"location":"CIS-18/adapter_java.html","title":"Adapter java","text":""},{"location":"CIS-18/adapter_java.html#example-of-adapter-design-pattern","title":"Example of Adapter Design Pattern","text":""},{"location":"CIS-18/adapter_java.html#client-a-device-that-needs-3v-12v-or-120v","title":"Client (A Device that needs 3v, 12v, or 120v)","text":"<pre><code>package edu.redwoods.adapter;\n\nimport edu.redwoods.adapter.SocketAdapter;\nimport edu.redwoods.adapter.SocketClassAdapterImpl;\nimport edu.redwoods.adapter.SocketObjectAdapterImpl;\nimport edu.redwoods.adapter.Volt;\n\npublic class AdapterPatternTest {\n\npublic static void main(String[] args) {\ntestClassAdapter();\ntestObjectAdapter();\n}\n\nprivate static void testObjectAdapter() {\nSocketAdapter sockAdapter = new SocketObjectAdapterImpl();\nVolt v3 = getVolt(sockAdapter,3);\nVolt v12 = getVolt(sockAdapter,12);\nVolt v120 = getVolt(sockAdapter,120);\nSystem.out.println(\"v3 volts using Object Adapter=\"+v3.getVolts());\nSystem.out.println(\"v12 volts using Object Adapter=\"+v12.getVolts());\nSystem.out.println(\"v120 volts using Object Adapter=\"+v120.getVolts());\n}\n\nprivate static void testClassAdapter() {\nSocketAdapter sockAdapter = new SocketClassAdapterImpl();\nVolt v3 = getVolt(sockAdapter,3);\nVolt v12 = getVolt(sockAdapter,12);\nVolt v120 = getVolt(sockAdapter,120);\nSystem.out.println(\"v3 volts using Class Adapter=\"+v3.getVolts());\nSystem.out.println(\"v12 volts using Class Adapter=\"+v12.getVolts());\nSystem.out.println(\"v120 volts using Class Adapter=\"+v120.getVolts());\n}\n\nprivate static Volt getVolt(SocketAdapter sockAdapter, int i) {\nswitch (i){\ncase 3: return sockAdapter.get3Volt();\ncase 12: return sockAdapter.get12Volt();\ncase 120: return sockAdapter.get120Volt();\ndefault: return sockAdapter.get120Volt();\n}\n}\n}\n</code></pre>"},{"location":"CIS-18/adapter_java.html#target-interface","title":"Target Interface","text":"<pre><code>package edu.redwoods.adapter;\n\npublic interface SocketAdapter {\n\npublic Volt get120Volt();\n\npublic Volt get12Volt();\n\npublic Volt get3Volt();\n}\n</code></pre>"},{"location":"CIS-18/adapter_java.html#class-adapter","title":"Class Adapter","text":"<pre><code>package edu.redwoods.adapter;\n\n//Using inheritance for adapter pattern\npublic class SocketClassAdapterImpl extends Socket implements SocketAdapter{\n\n@Override\npublic Volt get120Volt() {\nreturn getVolt();\n}\n\n@Override\npublic Volt get12Volt() {\nVolt v= getVolt();\nreturn convertVolt(v,10);\n}\n\n@Override\npublic Volt get3Volt() {\nVolt v= getVolt();\nreturn convertVolt(v,40);\n}\n\nprivate Volt convertVolt(Volt v, int i) {\nreturn new Volt(v.getVolts()/i);\n}\n\n}\n</code></pre>"},{"location":"CIS-18/adapter_java.html#object-adapter","title":"Object Adapter","text":"<pre><code>package edu.redwoods.adapter;\n\npublic class SocketObjectAdapterImpl implements SocketAdapter{\n\n//Using Composition for adapter pattern\nprivate Socket sock = new Socket();\n\n@Override\npublic Volt get120Volt() {\nreturn sock.getVolt();\n}\n\n@Override\npublic Volt get12Volt() {\nVolt v= sock.getVolt();\nreturn convertVolt(v,10);\n}\n\n@Override\npublic Volt get3Volt() {\nVolt v= sock.getVolt();\nreturn convertVolt(v,40);\n}\n\nprivate Volt convertVolt(Volt v, int i) {\nreturn new Volt(v.getVolts()/i);\n}\n}\n</code></pre>"},{"location":"CIS-18/adapter_java.html#adaptee","title":"Adaptee","text":"<pre><code>package edu.redwoods.adapter;\n\npublic class Socket {\n\npublic Volt getVolt(){\nreturn new Volt(120);\n}\n}\n</code></pre>"},{"location":"CIS-18/adapter_java.html#subject-of-adaptation","title":"Subject of Adaptation","text":"<pre><code>package edu.redwoods.adapter;\n\npublic class Volt {\n\nprivate int volts;\n\npublic Volt(int v){\nthis.volts=v;\n}\n\npublic int getVolts() {\nreturn volts;\n}\n\npublic void setVolts(int volts) {\nthis.volts = volts;\n}\n\n}\n</code></pre>"},{"location":"CIS-18/command_java.html","title":"Command java","text":""},{"location":"CIS-18/command_java.html#examples-of-command-design-pattern","title":"Examples of Command Design Pattern","text":""},{"location":"CIS-18/command_java.html#command-pattern-receivers","title":"Command Pattern Receivers","text":"<pre><code>package edu.redwoods.command;\n\npublic interface FileSystemReceiver {\n\nvoid openFile();\nvoid writeFile();\nvoid closeFile();\n}\n</code></pre> <pre><code>package edu.redwoods.command;\n\npublic class UnixFileSystemReceiver implements FileSystemReceiver {\n\n@Override\npublic void openFile() {\nSystem.out.println(\"Opening file in unix OS\");\n}\n\n@Override\npublic void writeFile() {\nSystem.out.println(\"Writing file in unix OS\");\n}\n\n@Override\npublic void closeFile() {\nSystem.out.println(\"Closing file in unix OS\");\n}\n\n}\n</code></pre> <pre><code>package edu.redwoods.command;\n\npublic class WindowsFileSystemReceiver implements FileSystemReceiver {\n\n@Override\npublic void openFile() {\nSystem.out.println(\"Opening file in Windows OS\");\n\n}\n\n@Override\npublic void writeFile() {\nSystem.out.println(\"Writing file in Windows OS\");\n}\n\n@Override\npublic void closeFile() {\nSystem.out.println(\"Closing file in Windows OS\");\n}\n\n}\n</code></pre>"},{"location":"CIS-18/command_java.html#command-pattern-interface-and-concrete-implementations","title":"Command Pattern Interface and Concrete Implementations","text":"<pre><code>package edu.redwoods.command;\n\npublic interface Command {\n\nvoid execute();\n}\n</code></pre> <pre><code>package edu.redwoods.command;\n\npublic class OpenFileCommand implements Command {\n\nprivate FileSystemReceiver fileSystem;\n\npublic OpenFileCommand(FileSystemReceiver fs){\nthis.fileSystem=fs;\n}\n@Override\npublic void execute() {\n//open command is forwarding request to openFile method\nthis.fileSystem.openFile();\n}\n\n}\n</code></pre> <pre><code>package edu.redwoods.command;\n\npublic class CloseFileCommand implements Command {\n\nprivate FileSystemReceiver fileSystem;\n\npublic CloseFileCommand(FileSystemReceiver fs){\nthis.fileSystem=fs;\n}\n@Override\npublic void execute() {\nthis.fileSystem.closeFile();\n}\n\n}\n</code></pre> <pre><code>package edu.redwoods.command;\n\npublic class WriteFileCommand implements Command {\n\nprivate FileSystemReceiver fileSystem;\n\npublic WriteFileCommand(FileSystemReceiver fs){\nthis.fileSystem=fs;\n}\n@Override\npublic void execute() {\nthis.fileSystem.writeFile();\n}\n\n}\n</code></pre>"},{"location":"CIS-18/command_java.html#command-pattern-invoker","title":"Command Pattern Invoker","text":"<pre><code>package edu.redwoods.command;\n\npublic class FileInvoker {\n\npublic Command command;\n\npublic FileInvoker(Command c){\nthis.command=c;\n}\n\npublic void execute(){\nthis.command.execute();\n}\n}\n</code></pre>"},{"location":"CIS-18/command_java.html#utility-to-determine-proper-os-factory-method-anyone","title":"Utility to Determine Proper OS (Factory Method Anyone!?!)","text":"<pre><code>package edu.redwoods.command;\n\npublic class FileSystemReceiverUtil {\n\npublic static FileSystemReceiver getUnderlyingFileSystem(){\nString osName = System.getProperty(\"os.name\");\nSystem.out.println(\"Underlying OS is:\"+osName);\nif(osName.contains(\"Windows\")){\nreturn new WindowsFileSystemReceiver();\n}else{\nreturn new UnixFileSystemReceiver();\n}\n}\n\n}\n</code></pre>"},{"location":"CIS-18/command_java.html#client-for-command-design-pattern","title":"Client for Command Design Pattern","text":"<pre><code>package edu.redwoods.command;\n\npublic class FileSystemClient {\n\npublic static void main(String[] args) {\n//Creating the receiver object\nFileSystemReceiver fs = FileSystemReceiverUtil.getUnderlyingFileSystem();\n\n//creating command and associating with receiver\nOpenFileCommand openFileCommand = new OpenFileCommand(fs);\n\n//Creating invoker and associating with Command\nFileInvoker file = new FileInvoker(openFileCommand);\n\n//perform action on invoker object\nfile.execute();\n\nWriteFileCommand writeFileCommand = new WriteFileCommand(fs);\nfile = new FileInvoker(writeFileCommand);\nfile.execute();\n\nCloseFileCommand closeFileCommand = new CloseFileCommand(fs);\nfile = new FileInvoker(closeFileCommand);\nfile.execute();\n}\n\n}\n</code></pre>"},{"location":"CIS-18/composite_java.html","title":"Composite java","text":""},{"location":"CIS-18/composite_java.html#composite-design-pattern","title":"Composite Design Pattern","text":""},{"location":"CIS-18/composite_java.html#client","title":"Client","text":"<pre><code>package edu.redwoods.client;\n\nimport edu.redwoods.composite.Circle;\nimport edu.redwoods.composite.Drawing;\nimport edu.redwoods.composite.Shape;\nimport edu.redwoods.composite.Triangle;\n\npublic class Client {\n\npublic static void main(String[] args) {\nShape tri = new Triangle();\nShape tri1 = new Triangle();\nShape cir = new Circle();\n\nDrawing drawing = new Drawing();\ndrawing.add(tri1);\ndrawing.add(tri1);\ndrawing.add(cir);\n\ndrawing.draw(\"Red\");\n\ndrawing.clear();\n\ndrawing.add(tri);\ndrawing.add(cir);\ndrawing.draw(\"Green\");\n}\n\n}\n</code></pre>"},{"location":"CIS-18/composite_java.html#component","title":"Component","text":"<pre><code>package edu.redwoods.composite;\n\npublic interface Shape {\n\npublic void draw(String fillColor);\n}\n</code></pre>"},{"location":"CIS-18/composite_java.html#leaf-component","title":"Leaf Component","text":"<pre><code>package edu.redwoods.composite;\n\npublic class Triangle implements Shape {\n\n@Override\npublic void draw(String fillColor) {\nSystem.out.println(\"Drawing Triangle with color \"+fillColor);\n}\n\n}\n</code></pre> <pre><code>package edu.redwoods.composite;\n\npublic class Circle implements Shape {\n\n@Override\npublic void draw(String fillColor) {\nSystem.out.println(\"Drawing Circle with color \"+fillColor);\n}\n\n}\n</code></pre>"},{"location":"CIS-18/composite_java.html#composite-component","title":"Composite Component","text":"<pre><code>package edu.redwoods.composite;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Drawing implements Shape{\n\n//collection of Shapes\nprivate List&lt;Shape&gt; shapes = new ArrayList&lt;Shape&gt;();\n\n@Override\npublic void draw(String fillColor) {\nfor(Shape sh : shapes)\n{\nsh.draw(fillColor);\n}\n}\n\n//adding shape to drawing\npublic void add(Shape s){\nthis.shapes.add(s);\n}\n\n//removing shape from drawing\npublic void remove(Shape s){\nshapes.remove(s);\n}\n\n//removing all the shapes\npublic void clear(){\nSystem.out.println(\"Clearing all the shapes from drawing\");\nthis.shapes.clear();\n}\n}\n</code></pre>"},{"location":"CIS-18/conversion.html","title":"Python to Java Cheatsheet","text":""},{"location":"CIS-18/conversion.html#python-to-java-cheatsheet","title":"Python to Java Cheatsheet","text":"Python to Java Syntax Cheatsheet Python to Java Syntax Cheatsheet Python Java <pre><code># Variable Declaration and Assignment\nx = 10\ny = 5.5\nz = \"Hello\"</code></pre> <pre><code>int x = 10;\ndouble y = 5.5;\nString z = \"Hello\";</code></pre> <pre><code># Function Definition\ndef add(a, b):\n    return a + b</code></pre> <pre><code>public int add(int a, int b) {\n    return a + b;\n}</code></pre> <pre><code># Function Calling\nprint(add(3, 5))</code></pre> <pre><code>System.out.println(add(3, 5));</code></pre> <pre><code># Comments and Docstrings\n# Single-line comment\n\"\"\"\nMulti-line\ndocstring\n\"\"\"</code></pre> <pre><code>// Single-line comment\n/*\nMulti-line\ncomment\n*/\n/**\nMulti-line\nJavaDoc comment\n@param annotations_can_be_used\n*/</code></pre> <pre><code># Conditionals\nif x &gt; 10:\n    print(\"x is large\")\nelif x == 10:\n    print(\"x is ten\")\nelse:\n    print(\"x is small\")</code></pre> <pre><code>if (x &gt; 10) {\n    System.out.println(\"x is large\");\n} else if (x == 10) {\n    System.out.println(\"x is ten\");\n} else {\n    System.out.println(\"x is small\");\n}</code></pre> <pre><code># Recursion\ndef factorial(n):\n    if n == 1:\n        return 1\n    return n * factorial(n - 1)</code></pre> <pre><code>public int factorial(int n) {\n    if (n == 1) return 1;\n    return n * factorial(n - 1);\n}</code></pre> <pre><code># For loop\nfor i in range(5):\n    print(i)\n\n# While loop\nn = 0\nwhile n &lt; 5:\n    print(n)\n    n += 1</code></pre> <pre><code>// For loop\nfor (int i = 0; i &lt; 5; i++) {\n    System.out.println(i);\n}\n\n// While loop\nint n = 0;\nwhile (n &lt; 5) {\n    System.out.println(n);\n    n++;\n}</code></pre> <pre><code># List declaration\nmy_list = [1, 2, 3, 4]\n\n# Adding to a list\nmy_list.append(5)\n\n# Accessing elements\nfirst = my_list[0]\nlast = my_list[-1]</code></pre> <pre><code>// List declaration\nimport java.util.ArrayList;\nimport java.util.List;\n\nList myList = new ArrayList&lt;&gt;();\nmyList.add(1);\nmyList.add(2);\nmyList.add(3);\nmyList.add(4);\n\n// Adding to a list\nmyList.add(5);\n\n// Accessing elements\nint first = myList.get(0);\nint last = myList.get(myList.size() - 1);\n            <pre><code># Dictionary declaration\nmy_dict = {\"a\": 1, \"b\": 2, \"c\": 3}\n\n# Adding a key-value pair\nmy_dict[\"d\"] = 4\n\n# Accessing values\nvalue = my_dict[\"a\"]\n\n# Iterating through keys and values\nfor key, val in my_dict.items():\n    print(f\"{key}: {val}\")</code></pre>\n          <pre><code>// Dictionary declaration\nimport java.util.HashMap;\nimport java.util.Map;\n\nMap myDict = new HashMap&lt;&gt;();\nmyDict.put(\"a\", 1);\nmyDict.put(\"b\", 2);\nmyDict.put(\"c\", 3);\n\n// Adding a key-value pair\nmyDict.put(\"d\", 4);\n\n// Accessing values\nint value = myDict.get(\"a\");\n\n// Iterating through keys and values\nfor (Map.Entry entry : myDict.entrySet()) {\n    System.out.println(entry.getKey() + \": \" + entry.getValue());\n}\n          <pre><code># Tuple declaration\nmy_tuple = (1, 2, 3)\n\n# Accessing elements\nfirst = my_tuple[0]\nlast = my_tuple[-1]</code></pre>\n          <pre><code>// Tuple equivalent (use a class or array)\nclass Tuple {\n    int first, second, third;\n\n    Tuple(int first, int second, int third) {\n        this.first = first;\n        this.second = second;\n        this.third = third;\n    }\n}\n\n// Creating and accessing a tuple\nTuple myTuple = new Tuple(1, 2, 3);\nint first = myTuple.first;\nint last = myTuple.third;</code></pre>\n          <pre><code># Static method in Python\nclass MyClass:\n    @staticmethod\n    def static_method():\n        return \"This is a static method\"\n\n# Calling the static method\nresult = MyClass.static_method()</code></pre>\n    <pre><code>// Static method in Java\nclass MyClass {\n    public static String staticMethod() {\n        return \"This is a static method\";\n    }\n}\n\n// Calling the static method\nString result = MyClass.staticMethod();</code></pre>\n    <pre><code># Instance method in Python\nclass MyClass:\n    def __init__(self, value):\n        self.value = value\n\n    def instance_method(self):\n        return f\"The value is {self.value}\"\n\n# Creating an instance and calling the instance method\nobj = MyClass(42)\nresult = obj.instance_method()</code></pre>\n    <pre><code>// Instance method in Java\nclass MyClass {\n    private int value;\n\n    public MyClass(int value) {\n        this.value = value;\n    }\n\n    public String instanceMethod() {\n        return \"The value is \" + value;\n    }\n}\n\n// Creating an instance and calling the instance method\nMyClass obj = new MyClass(42);\nString result = obj.instanceMethod();</code></pre>\n    <pre><code># Input and Output in Python\nname = input(\"Enter your name: \")\nprint(f\"Hello, {name}!\")</code></pre>\n    <pre><code>// Input and Output in Java\nimport java.util.Scanner;\n\nScanner scanner = new Scanner(System.in);\nSystem.out.print(\"Enter your name: \");\nString name = scanner.nextLine();\nSystem.out.println(\"Hello, \" + name + \"!\");\nscanner.close();</code></pre>\n    <pre><code># File Input and Output in Python\n# Writing to a file\nwith open(\"example.txt\", \"w\") as file:\n    file.write(\"Hello, World!\")\n\n# Reading from a file\nwith open(\"example.txt\", \"r\") as file:\n    content = file.read()\n    print(content)</code></pre>\n    <pre><code>// File Input and Output in Java\nimport java.io.*;\n\ntry (BufferedWriter writer = new BufferedWriter(new FileWriter(\"example.txt\"))) {\n    writer.write(\"Hello, World!\");\n}\n\ntry (BufferedReader reader = new BufferedReader(new FileReader(\"example.txt\"))) {\n    String content = reader.readLine();\n    System.out.println(content);\n}</code></pre>\n    <pre><code># Randomizing in Python\nimport random\n\n# Random integer\nrand_int = random.randint(1, 10)\n\n# Random float\nrand_float = random.random()\n\nprint(f\"Random int: {rand_int}, Random float: {rand_float}\")</code></pre>\n    <pre><code>// Randomizing in Java\nimport java.util.Random;\n\nRandom random = new Random();\n\n// Random integer\nint randInt = random.nextInt(10) + 1;\n\n// Random float\nfloat randFloat = random.nextFloat();\n\nSystem.out.println(\"Random int: \" + randInt + \", Random float: \" + randFloat);</code></pre>\n    <pre><code># Regular Expressions in Python\nimport re\n\ntext = \"Hello, 123 World!\"\npattern = r\"\\d+\"\nmatches = re.findall(pattern, text)\nprint(matches)</code></pre>\n    <pre><code>// Regular Expressions in Java\nimport java.util.regex.*;\nimport java.util.ArrayList;\n\nString text = \"Hello, 123 World!\";\nString pattern = \"\\\\d+\";\nPattern regex = Pattern.compile(pattern);\nMatcher matcher = regex.matcher(text);\n\nArrayList matches = new ArrayList&lt;&gt;();\nwhile (matcher.find()) {\n    matches.add(matcher.group());\n}\nSystem.out.println(matches);\n    <pre><code># f-string formatting in Python\nname = \"Alice\"\nage = 30\nformatted = f\"My name is {name} and I am {age} years old.\"\nprint(formatted)</code></pre>\n    <pre><code>// String formatting in Java\nString name = \"Alice\";\nint age = 30;\nString formatted = String.format(\"My name is %s and I am %d years old.\", name, age);\nSystem.out.println(formatted);</code></pre>\n    <pre><code># Special methods in Python\nclass MyClass:\n    def __init__(self, value):\n        self.value = value\n\n    def __str__(self):\n        return f\"MyClass with value {self.value}\"\n\n    def __eq__(self, other):\n        if isinstance(other, MyClass):\n            return self.value == other.value\n        return False\n\n# Creating instances\nobj1 = MyClass(42)\nobj2 = MyClass(42)\n\n# Using special methods\nprint(obj1)                # Calls __str__\nis_equal = obj1 == obj2    # Calls __eq__</code></pre>\n    <pre><code>// Equivalent in Java (toString and equals)\nclass MyClass {\n    private int value;\n\n    public MyClass(int value) {\n        this.value = value;\n    }\n\n    @Override\n    public String toString() {\n        return \"MyClass with value \" + value;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) return true;\n        if (obj == null || getClass() != obj.getClass()) return false;\n        MyClass myClass = (MyClass) obj;\n        return value == myClass.value;\n    }\n}\n\n// Creating instances\nMyClass obj1 = new MyClass(42);\nMyClass obj2 = new MyClass(42);\n\n// Using methods\nSystem.out.println(obj1);             // Calls toString\nboolean isEqual = obj1.equals(obj2);  // Calls equals</code></pre>\n    <pre><code># Object Composition in Python\nclass Engine:\n    def start(self):\n        return \"Engine started\"\n\nclass Car:\n    def __init__(self, engine):\n        self.engine = engine\n\n    def drive(self):\n        return self.engine.start() + \" and driving\"\n\nengine = Engine()\ncar = Car(engine)\nprint(car.drive())</code></pre>\n    <pre><code>// Object Composition in Java\nclass Engine {\n    public String start() {\n        return \"Engine started\";\n    }\n}\n\nclass Car {\n    private Engine engine;\n\n    public Car(Engine engine) {\n        this.engine = engine;\n    }\n\n    public String drive() {\n        return engine.start() + \" and driving\";\n    }\n}\n\nEngine engine = new Engine();\nCar car = new Car(engine);\nSystem.out.println(car.drive());</code></pre>\n    <pre><code># Interfaces in Python\nfrom abc import ABC, abstractmethod\n\nclass Animal(ABC):\n    @abstractmethod\n    def speak(self):\n        pass\n\nclass Dog(Animal):\n    def speak(self):\n        return \"Woof\"</code></pre>\n            <pre><code>// Interfaces in Java\ninterface Animal {\n    String speak();\n}\n\nclass Dog implements Animal {\n    @Override\n    public String speak() {\n        return \"Woof\";\n    }\n}</code></pre>\n            <pre><code># Abstract Classes in Python\nfrom abc import ABC, abstractmethod\n\nclass Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\n\nclass Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def area(self):\n        return self.width * self.height</code></pre>\n            <pre><code>// Abstract Classes in Java\nabstract class Shape {\n    abstract double area();\n}\n\nclass Rectangle extends Shape {\n    private double width, height;\n\n    Rectangle(double width, double height) {\n        this.width = width;\n        this.height = height;\n    }\n\n    @Override\n    public double area() {\n        return width * height;\n    }\n}</code></pre>\n            <pre><code># Polymorphism in Python\nclass Animal:\n    def speak(self):\n        return \"Some sound\"\n\nclass Dog(Animal):\n    def speak(self):\n        return \"Woof\"\n\nanimals = [Animal(), Dog()]\nfor animal in animals:\n    print(animal.speak())</code></pre>\n            <pre><code>// Polymorphism in Java\nclass Animal {\n    String speak() {\n        return \"Some sound\";\n    }\n}\n\nclass Dog extends Animal {\n    @Override\n    String speak() {\n        return \"Woof\";\n    }\n}\n\nAnimal[] animals = { new Animal(), new Dog() };\nfor (Animal animal : animals) {\n    System.out.println(animal.speak());\n}</code></pre>\n            Features in Python not in Java\n        <ul>\n                    <li>Dynamic typing</li>\n                    <li>List comprehensions</li>\n                    <li>Duck typing</li>\n                    <li>Built-in(s): slicing, defaultdict, etc.</li>\n                    <li>Decorators</li>\n                </ul>\n            Features in Java not in Python\n        <ul>\n                    <li>Static typing</li>\n                    <li>Generics</li>\n                    <li>Checked exceptions</li>\n                    <li>Concurrency utilities (e.g., Executors)</li>\n                    <li>Annotations</li>\n                </ul>"},{"location":"CIS-18/decorator_java.html","title":"Decorator java","text":""},{"location":"CIS-18/decorator_java.html#example-java-decorator-design-pattern-source-code","title":"Example Java Decorator Design Pattern Source Code","text":""},{"location":"CIS-18/decorator_java.html#component-interface","title":"Component Interface","text":"<pre><code>package edu.redwoods.decorator;\n\npublic interface Car {\n\npublic void assemble();\n}\n</code></pre>"},{"location":"CIS-18/decorator_java.html#concrete-component","title":"Concrete Component","text":"<pre><code>package edu.redwoods.decorator;\n\npublic class BasicCar implements Car {\n\n@Override\npublic void assemble() {\nSystem.out.print(\"Basic Car.\");\n}\n\n}\n</code></pre>"},{"location":"CIS-18/decorator_java.html#component-decorator","title":"Component Decorator","text":"<pre><code>package edu.redwoods.decorator;\n\npublic class CarDecorator implements Car {\n\nprotected Car car;\n\npublic CarDecorator(Car c){\nthis.car=c;\n}\n\n@Override\npublic void assemble() {\nthis.car.assemble();\n}\n\n}\n</code></pre>"},{"location":"CIS-18/decorator_java.html#concrete-decorators","title":"Concrete Decorators","text":"<pre><code>package edu.redwoods.decorator;\n\npublic class SportsCar extends CarDecorator {\n\npublic SportsCar(Car c) {\nsuper(c);\n}\n\n@Override\npublic void assemble(){\nsuper.assemble();\nSystem.out.print(\" Adding features of Sports Car.\");\n}\n}\n</code></pre> <pre><code>package edu.redwoods.decorator;\n\npublic class LuxuryCar extends CarDecorator {\n\npublic LuxuryCar(Car c) {\nsuper(c);\n}\n\n@Override\npublic void assemble(){\nsuper.assemble();\nSystem.out.print(\" Adding features of Luxury Car.\");\n}\n}\n</code></pre>"},{"location":"CIS-18/exam1_study.html","title":"Exam 1","text":""},{"location":"CIS-18/exam1_study.html#pattern-quiz","title":"Pattern Quiz","text":"Problem 1 <p>Imagine you are developing a drawing application that allows users to create various shapes, such as circles, rectangles, and triangles. Each shape has its own unique properties and behaviors. You want to design a system that can create these shapes dynamically based on user input. However, you don\u2019t want the application to be tightly coupled to specific shape classes, as you may want to add new shapes in the future without modifying existing code.</p> Answer 1 <p>In this scenario, the Factory Method Pattern can be used to create a factory for each type of shape (e.g., CircleFactory, RectangleFactory, TriangleFactory), and each factory will have a method for creating the respective shape. This way, when the user selects a shape to create, the application can use the appropriate factory to create the shape object without needing to know the exact class of the object beforehand. This decouples the creation of shapes from the rest of the application and makes it easier to extend the system with new shape types in the future.</p> classDiagram   class Shape {     + draw(): void   }    class Circle {     + draw(): void   }    class Rectangle {     + draw(): void   }    class Triangle {     + draw(): void   }    abstract class ShapeFactory {     + createShape(): Shape   }    class CircleFactory {     + createShape(): Circle   }    class RectangleFactory {     + createShape(): Rectangle   }    class TriangleFactory {     + createShape(): Triangle   }    Shape &lt;|.. Circle   Shape &lt;|.. Rectangle   Shape &lt;|.. Triangle    ShapeFactory &lt;|-- CircleFactory   ShapeFactory &lt;|-- RectangleFactory   ShapeFactory &lt;|-- TriangleFactory  <ul> <li>Shape is the abstract product class representing a generic shape with a draw() method.</li> <li>Circle, Rectangle, and Triangle are concrete product classes representing specific shapes, each with its own draw() method.</li> <li>ShapeFactory is the abstract factory interface that declares a createShape() method for creating shapes.</li> <li>CircleFactory, RectangleFactory, and TriangleFactory are concrete factory classes that implement ShapeFactory and provide specific implementations for creating circles, rectangles, and triangles, respectively.</li> </ul> Problem 2 <p>You are developing a text editor application, and you want to provide users with the ability to apply various text formatting options to their documents. These formatting options include features like font styles (bold, italic, underline), text color, and highlighting. Additionally, you want to allow users to mix and combine these formatting options in a flexible and extensible manner.</p> Answer 2 <p>In this scenario, the Decorator Design Pattern can be used effectively. You can define a base TextComponent class that represents the basic text content. Then, you can create decorator classes for each formatting option (e.g., BoldDecorator, ItalicDecorator, ColorDecorator) that inherit from the TextComponent class and add specific formatting behavior. These decorator classes can be stacked or combined in various ways to apply multiple formatting options to a text component.</p> <p>For instance, to make a text bold and red, you can create a BoldDecorator and a ColorDecorator (for red) and stack them onto the base text component. This allows you to dynamically add or remove formatting options without modifying the underlying text content or the decorators themselves. The Decorator Pattern provides a flexible and reusable way to extend the behavior of individual text components while keeping the system open for future formatting options.</p> classDiagram   class TextComponent {     + display(): void   }    class ConcreteTextComponent {     + display(): void   }    class TextDecorator {     - component: TextComponent     + display(): void   }    TextComponent &lt;|-- ConcreteTextComponent   TextComponent &lt;|-- TextDecorator   TextDecorator o-- TextComponent : contains    class BoldDecorator {     + display(): void   }    class ItalicDecorator {     + display(): void   }    class ColorDecorator {     - color: string     + display(): void   }    TextDecorator &lt;|-- BoldDecorator   TextDecorator &lt;|-- ItalicDecorator   TextDecorator &lt;|-- ColorDecorator  <ul> <li>TextComponent is the base class representing the basic text content.</li> <li>ConcreteTextComponent is a concrete implementation of TextComponent.</li> <li>TextDecorator is the abstract decorator class that contains a reference to a TextComponent and adds formatting behavior.</li> <li>BoldDecorator, ItalicDecorator, and ColorDecorator are concrete decorator classes that inherit from TextDecorator and provide specific formatting options.</li> </ul> Problem 3 <p>You are developing a software application for a car manufacturing company that produces both electric and hybrid vehicles. Each type of vehicle (electric and hybrid) consists of multiple components, including an engine, battery, and charging system for electric vehicles and an engine, battery, and regenerative braking system for hybrid vehicles. Additionally, the company plans to expand its product line to include more vehicle types in the future, such as gasoline-powered and hydrogen fuel cell vehicles.</p> Answer 3 <p>In this scenario, you need a design pattern that allows you to create families of related components (e.g., engines, batteries) for each type of vehicle (electric, hybrid, future vehicle types) without specifying the concrete classes of these components. The Abstract Factory Pattern can be used to define abstract factory interfaces for creating these components, and concrete implementations of these factory interfaces (e.g., ElectricVehicleFactory, HybridVehicleFactory) would provide specific component implementations for each type of vehicle. This way, when the car manufacturing company adds new vehicle types, they can simply create new concrete factory implementations without modifying existing code, ensuring that the system remains extensible and easily adaptable to changing requirements.</p> classDiagram   class VehicleFactory {     + createEngine(): Engine     + createBattery(): Battery     + createBrakingSystem(): BrakingSystem   }    class Engine {     + start(): void   }    class Battery {     + charge(): void   }    class BrakingSystem {     + applyBrakes(): void   }    VehicleFactory &lt;|-- ElectricVehicleFactory   VehicleFactory &lt;|-- HybridVehicleFactory    Engine &lt;|.. ElectricEngine   Engine &lt;|.. HybridEngine    Battery &lt;|.. ElectricBattery   Battery &lt;|.. HybridBattery    BrakingSystem &lt;|.. ElectricBrakingSystem   BrakingSystem &lt;|.. HybridBrakingSystem  <ul> <li>VehicleFactory is the abstract factory interface that declares methods for creating components like engines, batteries, and braking systems.</li> <li>Engine, Battery, and BrakingSystem are product interfaces representing different vehicle components.</li> <li>ElectricVehicleFactory and HybridVehicleFactory are concrete factory classes that implement VehicleFactory and provide specific implementations for creating components for electric and hybrid vehicles.</li> <li>ElectricEngine, HybridEngine, ElectricBattery, HybridBattery, ElectricBrakingSystem, and HybridBrakingSystem are concrete product classes representing components specific to electric and hybrid vehicles.</li> </ul> Problem 4 <p>You are developing a stock trading platform that allows users to track the performance of various stocks in real-time. Users can create watch-lists of stocks they are interested in, and they want to receive immediate notifications whenever the price of a stock on their watch-list crosses a certain threshold, such as a predefined buy or sell price. Additionally, you want to allow users to customize these notifications based on their preferences.</p> Answer 4 <p>In this scenario, the Observer Design Pattern can be highly beneficial. You can implement a system where each stock is an observable subject, and users\u2019 watch-lists are the observers. When the price of a stock changes, it notifies all users who are observing that stock. Users can set their desired price thresholds and notification preferences when adding stocks to their watch-lists. This way, when a stock\u2019s price crosses a threshold, the relevant users can be notified in real-time. The Observer Pattern helps keep the stock monitoring system flexible and extensible, allowing users to customize their watch-lists and notifications without modifying the core trading platform code.</p> classDiagram   class Stock {     + price: float     + addSubscriber(observer: Subscriber): void     + removeSubscriber(observer: Subscriber): void     + notifySubscribers(): void     + updatePrice(newPrice: float): void   }    class Subscriber {     + name: string     + thresholdPrice: float     + notificationMethod: NotificationMethod     + update(stock: Stock): void   }    abstract class NotificationMethod {     + notify(user: Subscriber, stock: Stock): void   }    class EmailNotification {     + notify(user: Subscriber, stock: Stock): void   }    class SMSNotification {     + notify(user: Subscriber, stock: Stock): void   }    Stock \"1\" --&gt; \"*\" Subscriber : has subscribers   Subscriber --&gt; NotificationMethod : uses   NotificationMethod &lt;|-- EmailNotification   NotificationMethod &lt;|-- SMSNotification  <ul> <li>Stock represents a stock with a price that can change over time. It maintains a list of subscribers (users) who want to be notified when the stock price crosses a certain threshold.</li> <li>Subscriber represents a user who is interested in a particular stock and has a thresholdPrice at which they want to be notified. Users can choose a notificationMethod (e.g., email or SMS) for receiving notifications.</li> <li>NotificationMethod is an abstract class representing different notification methods. It has concrete implementations like EmailNotification and SMSNotification.</li> <li>The associations between Stock and Subscriber represent that a stock can have multiple subscribers, and each subscriber can be interested in multiple stocks.</li> <li>The associations between Subscriber and NotificationMethod represent that each subscriber uses a notification method.</li> </ul> Problem 5 <p>You are designing a simulation software for testing and evaluating the safety measures in extreme weather conditions, such as hurricanes and blizzards. The software needs to generate realistic environmental conditions for testing various safety equipment and procedures. This includes simulating wind speed, temperature, humidity, precipitation, and visibility in a highly customizable manner.</p> Answer 5 <p>In this unique scenario, the Abstract Factory Pattern is the best choice. You can create an abstract factory, EnvironmentalConditionsFactory, with methods for creating different aspects of environmental conditions, such as WindFactory, TemperatureFactory, HumidityFactory, PrecipitationFactory, and VisibilityFactory. Each concrete factory (e.g., ExtremeWindFactory, BlizzardTemperatureFactory, HeavyRainfallFactory) provides specific implementations of these aspects based on the chosen simulation scenario.</p> <p>By using the Abstract Factory Pattern, you can ensure that the simulation software can generate a wide range of extreme weather conditions with varying parameters while maintaining a consistent interface for creating and configuring these conditions. This approach allows researchers and safety experts to evaluate equipment and procedures under various extreme conditions without needing to rewrite or modify the core simulation code for each scenario.</p> classDiagram   class EnvironmentalConditionsFactory {     + createWind(): Wind     + createTemperature(): Temperature     + createHumidity(): Humidity     + createPrecipitation(): Precipitation     + createVisibility(): Visibility   }    class Wind {     + generateWindSpeed(): number   }    class Temperature {     + generateTemperature(): number   }    class Humidity {     + generateHumidity(): number   }    class Precipitation {     + generatePrecipitationRate(): number   }    class Visibility {     + generateVisibilityDistance(): number   }    EnvironmentalConditionsFactory &lt;|-- ExtremeWeatherFactory   EnvironmentalConditionsFactory &lt;|-- BlizzardFactory   EnvironmentalConditionsFactory &lt;|-- HurricaneFactory    Wind &lt;|.. ExtremeWind   Temperature &lt;|.. BlizzardTemperature   Humidity &lt;|.. BlizzardHumidity   Precipitation &lt;|.. BlizzardPrecipitation   Visibility &lt;|.. BlizzardVisibility    Wind &lt;|.. HurricaneWind   Temperature &lt;|.. HurricaneTemperature   Humidity &lt;|.. HurricaneHumidity   Precipitation &lt;|.. HurricanePrecipitation   Visibility &lt;|.. HurricaneVisibility  <ul> <li>EnvironmentalConditionsFactory is the abstract factory interface with methods for creating various aspects of environmental conditions.</li> <li>Wind, Temperature, Humidity, Precipitation, and Visibility are abstract product classes representing different aspects of environmental conditions.</li> <li>ExtremeWeatherFactory, BlizzardFactory, and HurricaneFactory are concrete factory classes that implement EnvironmentalConditionsFactory and provide specific implementations for creating environmental conditions for extreme weather scenarios.</li> <li>ExtremeWind, BlizzardTemperature, BlizzardHumidity, BlizzardPrecipitation, BlizzardVisibility, HurricaneWind, HurricaneTemperature, HurricaneHumidity, HurricanePrecipitation, and HurricaneVisibility are concrete product classes representing specific environmental conditions for extreme weather scenarios.</li> </ul> Problem 6 <p>You are developing a highly specialized application for generating custom mathematical visualizations used in advanced scientific research. Researchers need the ability to create complex mathematical plots and graphs with intricate notations, annotations, and dynamic data overlays. However, they require the capability to modify and extend the visualizations in real-time, adding new elements, calculations, or annotations on top of existing ones, without affecting the underlying data or calculations.</p> Answer 6 <p>In this unique scenario, the Decorator Design Pattern can be a powerful solution. You can design a base class MathVisualization representing the core functionality for creating mathematical visualizations. Then, you can implement a set of concrete decorator classes (e.g., NotationDecorator, AnnotationDecorator, OverlayDecorator) that inherit from MathVisualization and add specific visualization elements and behaviors. Researchers can apply these decorators to their mathematical plots in a modular and customizable way, stacking and combining them to create intricate and highly specialized visualizations. This approach ensures that the visualization system remains exceptionally flexible and adaptable to the complex and evolving needs of advanced scientific research, even though it is a relatively rare use case.</p> classDiagram   class MathVisualization {     + render(): void   }    class ConcreteMathVisualization {     + render(): void   }    class MathVisualizationDecorator {     - visualization: MathVisualization     + render(): void   }    class NotationDecorator {     - visualization: MathVisualization     + render(): void   }    class AnnotationDecorator {     - visualization: MathVisualization     + render(): void   }    class OverlayDecorator {     - visualization: MathVisualization     + render(): void   }    MathVisualization &lt;|-- ConcreteMathVisualization   MathVisualization &lt;|-- MathVisualizationDecorator   MathVisualizationDecorator &lt;|-- NotationDecorator   MathVisualizationDecorator &lt;|-- AnnotationDecorator   MathVisualizationDecorator &lt;|-- OverlayDecorator    ConcreteMathVisualization --&gt; MathVisualization : contains  <ul> <li>MathVisualization is the base class representing the core functionality for creating mathematical visualizations with a render() method.</li> <li>MathVisualizationDecorator is the abstract decorator class that inherits from MathVisualization and has a reference to a MathVisualization object, allowing it to stack multiple decorators and apply them in sequence.</li> <li>ConcreteMathVisualization is a concrete visualization class that inherits from MathVisualization.</li> <li>NotationDecorator, AnnotationDecorator, and OverlayDecorator are concrete decorator classes that inherit from MathVisualizationDecorator and provide specific visualization elements and behaviors.</li> </ul> Problem 7 <p>You are developing a smart agricultural system that monitors and manages a large greenhouse with various crops. The greenhouse environment, including temperature, humidity, and light levels, needs to be constantly monitored to ensure optimal growing conditions for different plant species. When environmental parameters fall outside predefined ranges, corrective actions, such as adjusting heating or irrigation systems, need to be taken immediately to prevent crop damage.</p> Answer 7 <p>In this scenario, the Observer Design Pattern is an ideal solution. Each environmental sensor (temperature sensor, humidity sensor, light sensor) acts as a subject (observable) that notifies a set of controllers (observers) responsible for making real-time adjustments. Controllers can be responsible for specific aspects like heating, irrigation, and ventilation. When sensor readings indicate a need for action, the sensors notify the appropriate controllers, which then take corrective measures to maintain the greenhouse environment within the desired parameters. This design ensures that the agricultural system can respond promptly to changing conditions and maintain optimal growing conditions for different plant species.</p> classDiagram   interface Subject {     + attach(observer: Observer): void     + detach(observer: Observer): void     + notify(): void   }    interface Observer {     + update(sensor: Sensor): void   }    class Sensor {     + readData(): void   }    class TemperatureSensor {     + readData(): void   }    class HumiditySensor {     + readData(): void   }    class LightSensor {     + readData(): void   }    class Controller {     + controlEnvironment(sensor: Sensor): void   }    Subject &lt;|.. Sensor   Subject &lt;|.. Controller    Observer &lt;|.. Controller    Sensor --&gt; Subject : (attaches/detaches)   Controller --&gt; Subject : (notifies)   <ul> <li>Subject is the interface representing the subject (observable) with methods for attaching, detaching, and notifying observers.</li> <li>Observer is the interface representing the observer with an update method to receive updates from sensors.</li> <li>Sensor is the base class for environmental sensors, and it implements the Subject interface. Each sensor can attach multiple controllers as observers.</li> <li>TemperatureSensor, HumiditySensor, and LightSensor are concrete sensor classes.</li> <li>Controller is the class representing controllers responsible for taking corrective actions. It implements the Observer interface and can be notified by sensors when environmental conditions change.</li> </ul> Problem 8 <p>You are designing a graphical user interface (GUI) framework for a software development toolkit. This framework needs to support multiple operating systems (e.g., Windows, macOS, Linux) and multiple UI toolkits (e.g., WinForms for Windows, Cocoa for macOS, GTK for Linux) to provide a consistent and native look and feel on each platform. Each combination of operating system and UI toolkit has its own set of UI components (e.g., buttons, text fields, windows) with distinct behaviors and appearances.</p> Answer 8 <p>In this complex scenario, you need a design pattern that allows you to create families of UI components for different combinations of operating systems and UI toolkits without tightly coupling the application code to specific GUI libraries. The Abstract Factory Pattern can be instrumental in achieving this. You can define abstract factory interfaces for creating UI components (e.g., ButtonFactory, TextFieldFactory) and provide concrete factory implementations for each combination (e.g., WindowsWinFormsFactory, macOSCocoaFactory, LinuxGTKFactory).</p> <p>By using the Abstract Factory Pattern, your GUI framework can dynamically select the appropriate factory at runtime based on the target operating system and UI toolkit, ensuring that the correct UI components are created without introducing conditional statements or platform-specific code throughout the application. This results in a highly modular and maintainable system capable of supporting a wide range of platform combinations without code duplication.</p> classDiagram   class GUIFactory {     + createButton(): Button     + createTextField(): TextField     + createWindow(): Window   }    class Button {     + render(): void   }    class TextField {     + render(): void   }    class Window {     + render(): void   }    GUIFactory &lt;|-- WinFormsFactory   GUIFactory &lt;|-- CocoaFactory   GUIFactory &lt;|-- GTKFactory    Button &lt;|.. WinFormsButton   Button &lt;|.. CocoaButton   Button &lt;|.. GTKButton    TextField &lt;|.. WinFormsTextField   TextField &lt;|.. CocoaTextField   TextField &lt;|.. GTKTextField    Window &lt;|.. WinFormsWindow   Window &lt;|.. CocoaWindow   Window &lt;|.. GTKWindow  <ul> <li>GUIFactory is the abstract factory interface that declares methods for creating GUI components like buttons, text fields, and windows.</li> <li>Button, TextField, and Window are product interfaces representing different GUI components.</li> <li>WinFormsFactory, CocoaFactory, and GTKFactory are concrete factory classes that implement GUIFactory and provide specific implementations for creating GUI components for different operating systems and UI toolkits.</li> <li>WinFormsButton, CocoaButton, GTKButton, WinFormsTextField, CocoaTextField, GTKTextField, WinFormsWindow, CocoaWindow, and GTKWindow are concrete product classes representing GUI components specific to each combination of operating system and UI toolkit.</li> </ul> Problem 9 <p>You are developing an e-commerce platform that offers various payment methods to customers, including credit cards, digital wallets, and bank transfers. Each payment method has its own unique authentication process and transaction handling requirements. Additionally, you want to allow customers to switch between different payment methods during the checkout process seamlessly.</p> Answer 9 <p>In this scenario, the Strategy Design Pattern is an excellent choice. You can define a common payment interface and create multiple concrete payment strategy classes (e.g., CreditCardPaymentStrategy, WalletPaymentStrategy, BankTransferPaymentStrategy) that implement this interface. Each strategy encapsulates the specific behavior required for authentication and processing transactions for a particular payment method.</p> <p>During the checkout process, the e-commerce platform can dynamically switch between payment strategies based on the customer\u2019s choice, ensuring that the correct payment method\u2019s behavior is executed without the need for complex conditional statements or code duplication. This design allows for easy extensibility, as new payment methods can be added by creating new strategy classes without modifying the existing payment processing code.</p> classDiagram   class PaymentStrategy {     + processPayment(amount: number): void     + authenticatePayment(): void   }    class CreditCardPaymentStrategy {     + processPayment(amount: number): void     + authenticatePayment(): void   }    class WalletPaymentStrategy {     + processPayment(amount: number): void     + authenticatePayment(): void   }    class BankTransferPaymentStrategy {     + processPayment(amount: number): void     + authenticatePayment(): void   }    class ShoppingCart {     + setPaymentStrategy(strategy: PaymentStrategy): void     + checkout(amount: number): void   }    PaymentStrategy &lt;|.. CreditCardPaymentStrategy   PaymentStrategy &lt;|.. WalletPaymentStrategy   PaymentStrategy &lt;|.. BankTransferPaymentStrategy    PaymentStrategy &lt;|-- ShoppingCart : uses  <ul> <li>PaymentStrategy is the interface representing the common payment strategy with methods for processing payments and authenticating payments.</li> <li>CreditCardPaymentStrategy, WalletPaymentStrategy, and BankTransferPaymentStrategy are concrete strategy classes that implement the PaymentStrategy interface, each providing specific behavior for their respective payment methods.</li> <li>ShoppingCart is a class representing the e-commerce shopping cart. It can be configured with a payment strategy using setPaymentStrategy, and the checkout method initiates the payment processing using the selected strategy.</li> </ul> Problem 10 <p>You are developing a graphic design software that allows users to create and edit images. Users can apply various filters and effects to images, such as blurring, sharpening, color correction, and text overlay. However, you want to provide users with the ability to apply multiple filters and effects in a flexible and customizable way, allowing them to combine and reorder these transformations easily.</p> Answer 10 <p>In this scenario, the Decorator Design Pattern is an excellent choice. You can create a base ImageFilter class representing the core image processing functionality. Then, you can implement a set of concrete decorator classes (e.g., BlurFilter, SharpenFilter, ColorCorrectionFilter, TextOverlayFilter) that inherit from ImageFilter and add specific image processing behaviors. Users can apply multiple filters to an image and customize their order, stacking and combining them to achieve the desired visual effects. This design ensures that the image processing system remains highly extensible and allows users to experiment with various combinations of filters and effects to achieve their creative goals.</p> classDiagram   class Image {     + apply(): void   }    class ImageFilter {     - image: Image     + apply(): void   }    class ConcreteImage {     + apply(): void   }    class BlurFilter {     - image: Image     + apply(): void   }    class SharpenFilter {     - image: Image     + apply(): void   }    class ColorCorrectionFilter {     - image: Image     + apply(): void   }    class TextOverlayFilter {     - image: Image     + apply(): void   }    Image &lt;|-- ImageFilter   ImageFilter &lt;|-- ConcreteImage   ImageFilter &lt;|-- BlurFilter   ImageFilter &lt;|-- SharpenFilter   ImageFilter &lt;|-- ColorCorrectionFilter   ImageFilter &lt;|-- TextOverlayFilter    ConcreteImage --&gt; Image : contains  <ul> <li>Image is the base class representing the core image functionality, with an apply() method.</li> <li>ImageFilter is the abstract decorator class that inherits from Image and has a reference to an Image object, allowing it to stack multiple filters and apply them in sequence.</li> <li>ConcreteImage is a concrete image class that inherits from Image.</li> <li>BlurFilter, SharpenFilter, ColorCorrectionFilter, and TextOverlayFilter are concrete decorator classes that inherit from ImageFilter and provide specific image processing behaviors.</li> </ul> Problem 11 <p>You are developing a smart home automation system that controls various devices, including lights, thermostats, and security cameras. Users can create automation rules to trigger actions based on specific events, such as motion detection, temperature changes, or manual input. Users want to receive real-time updates and notifications whenever these events occur, and they want the flexibility to create complex automation scenarios without tightly coupling the devices and rules.</p> Answer 11 <p>In this scenario, the Observer Design Pattern is exceptionally well-suited. Each device, such as a motion sensor or thermostat, can act as a subject (observable) that notifies all registered automation rules (observers) when relevant events occur. Users can define custom automation rules that observe these devices and take actions like turning on lights or adjusting the thermostat when specific events are detected. This approach ensures that users can easily create and manage automation scenarios while keeping the automation system flexible and extensible. The Observer Pattern allows for real-time event-driven updates and notifications without creating complex interdependencies between devices and rules.</p> classDiagram   class Device {     + name: string     + observers: Observer[]     + attach(observer: Observer): void     + detach(observer: Observer): void     + notify(): void     + getState(): string     + setState(state: string): void   }    class Observer {     + name: string     + update(device: Device): void   }    class AutomationRule {     + name: string     + condition: string     + action: string     + applyRule(device: Device): void   }    Device --&gt; Observer : 0..* observes   Device &lt;|-- MotionSensor : detects   Device &lt;|-- Thermostat : controls   Device &lt;|-- Light : controls    Observer --&gt; Device : observes   Observer &lt;|-- AutomationRule : triggers    class MotionSensor {     + detectMotion(): void   }    class Thermostat {     + setTemperature(temperature: number): void   }    class Light {     + turnOn(): void     + turnOff(): void   }  <ul> <li>Device is the subject (observable) class representing various smart home devices. It maintains a list of observers (automation rules) that need to be notified when specific events occur.</li> <li>Observer is the observer interface that defines the update method, which is called when a device\u2019s state changes.</li> <li>AutomationRule represents automation rules created by users. These rules specify conditions and actions to be taken based on device events.</li> <li>MotionSensor, Thermostat, and Light are concrete device classes that inherit from Device. Each device can be observed by multiple automation rules.</li> </ul> Problem 12 <p>You are developing a video game where players can choose different character classes, such as warriors, mages, and archers. Each character class has its own unique abilities, stats, and equipment. Players can switch between character classes during the game or create new characters of the same class. You want to implement a flexible system for creating characters without tightly coupling the game logic to specific character class implementations.</p> Answer 12 <p>In this scenario, the Factory Method Pattern can be employed to create character objects. Each character class (e.g., Warrior, Mage, Archer) would have its own factory (e.g., WarriorFactory, MageFactory, ArcherFactory) responsible for creating instances of that specific class. When a player wants to create or switch to a character, you can use the appropriate factory to generate the character object, ensuring that the game\u2019s core logic doesn\u2019t need to be modified every time a new character class is added. This allows for easy expansion of the game with additional character classes while maintaining code flexibility and scalability.</p> classDiagram   class Character {     + attack(): void     + defend(): void   }    class Warrior {     + attack(): void     + defend(): void   }    class Mage {     + attack(): void     + defend(): void   }    class Archer {     + attack(): void     + defend(): void   }    abstract class CharacterFactory {     + createCharacter(): Character   }    class WarriorFactory {     + createCharacter(): Warrior   }    class MageFactory {     + createCharacter(): Mage   }    class ArcherFactory {     + createCharacter(): Archer   }    Character &lt;|.. Warrior   Character &lt;|.. Mage   Character &lt;|.. Archer    CharacterFactory &lt;|-- WarriorFactory   CharacterFactory &lt;|-- MageFactory   CharacterFactory &lt;|-- ArcherFactory  <ul> <li>Character is the abstract product class representing a generic character in the game with attack() and defend() methods.</li> <li>Warrior, Mage, and Archer are concrete product classes representing specific character classes, each with its own attack() and defend() methods.</li> <li>CharacterFactory is the abstract factory interface that declares a createCharacter() method for creating characters.</li> <li>WarriorFactory, MageFactory, and ArcherFactory are concrete factory classes that implement CharacterFactory and provide specific implementations for creating warrior, mage, and archer characters, respectively.</li> </ul>"},{"location":"CIS-18/exam2_study.html","title":"Exam 2","text":""},{"location":"CIS-18/exam2_study.html#exam-2-study-sheet","title":"Exam 2 Study Sheet","text":"Problem 1 <p>You are developing a mobile application that needs to integrate with multiple third-party APIs for various services, such as weather information, maps, and social media. Each of these APIs has its own unique interface, data format, and authentication mechanism.</p> <p>The challenge is to create a unified interface for your mobile application to interact with these third-party APIs. You want to ensure that your application can seamlessly integrate with these services, even though they have different protocols, request structures, and response formats. It\u2019s important to make the integration process as smooth and consistent as possible.</p> Answer 1 <p>The Adapter Design Pattern can be used to create adapters for each of the third-party APIs, making them compatible with your mobile application\u2019s unified interface. Here\u2019s a textual representation of the solution:</p> <pre><code>classDiagram\n  class MobileApplication {\n+ getWeatherInfo(): WeatherData\n    + displayMap(location: string): void\n    + postToSocialMedia(message: string): boolean\n  }\n\nclass WeatherAPI {\n+ fetchWeather(location: string): WeatherInfo\n  }\n\nclass MapsAPI {\n+ showMap(location: string): void\n  }\n\nclass SocialMediaAPI {\n+ sharePost(message: string): boolean\n  }\n\ninterface ThirdPartyAPI {\n+ getWeatherInfo(): WeatherData\n    + displayMap(location: string): void\n    + postToSocialMedia(message: string): boolean\n  }\n\nclass WeatherAPIAdapter {\n- weatherAPI: WeatherAPI\n    + getWeatherInfo(): WeatherData\n    + displayMap(location: string): void\n    + postToSocialMedia(message: string): boolean\n  }\n\nclass MapsAPIAdapter {\n- mapsAPI: MapsAPI\n    + getWeatherInfo(): WeatherData\n    + displayMap(location: string): void\n    + postToSocialMedia(message: string): boolean\n  }\n\nclass SocialMediaAPIAdapter {\n- socialMediaAPI: SocialMediaAPI\n    + getWeatherInfo(): WeatherData\n    + displayMap(location: string): void\n    + postToSocialMedia(message: string): boolean\n  }\n\nMobileApplication --|&gt; ThirdPartyAPI : Uses\n  WeatherAPIAdapter --&gt; WeatherAPI : Adapts\n  MapsAPIAdapter --&gt; MapsAPI : Adapts\n  SocialMediaAPIAdapter --&gt; SocialMediaAPI : Adapts\n</code></pre> <ul> <li>MobileApplication represents your mobile application, which has a unified interface for getting weather information, displaying maps, and posting to social media.</li> <li>WeatherAPI, MapsAPI, and SocialMediaAPI represent the different third-party APIs with their unique methods and interfaces.</li> <li>ThirdPartyAPI is an interface representing the unified interface expected by your mobile application.</li> <li>WeatherAPIAdapter, MapsAPIAdapter, and SocialMediaAPIAdapter are adapter classes that bridge the gap between your mobile application and the respective third-party APIs. They adapt the methods and interfaces of the third-party APIs to match the ThirdPartyAPI interface used by your application.</li> </ul> <p>Here we create individual adapter classes for each third-party API, such as WeatherAPIAdapter, MapsAPIAdapter, and SocialMediaAPIAdapter.</p> <p>Each adapter should implement a common interface, such as ThirdPartyAPI, that your mobile application expects. This interface should include methods like getWeatherInfo(), displayMap(), and postToSocialMedia().</p> <p>Inside each adapter, you will interact with the respective third-party API, translating the requests and responses to match your unified interface.</p> <p>Your mobile application can then communicate with the adapters, which in turn communicate with the third-party APIs. This allows your application to access various services using a consistent and familiar interface.</p> <p>By implementing the Adapter Design Pattern in this scenario, you can achieve seamless integration with multiple third-party APIs, even if they have different interfaces and communication protocols. The adapters act as intermediaries that adapt the third-party APIs to your application\u2019s needs, making the integration process straightforward and consistent.</p> Problem 2 <p>Imagine you are developing a software application that needs to access a configuration manager to store and retrieve application settings and configurations. These settings might include database connection details, logging preferences, user preferences, and other global configuration options.</p> <p>The challenge is to ensure that there\u2019s only one instance of the configuration manager throughout the application, so all components can access and modify these configurations consistently. You need to make sure that multiple instances of the configuration manager don\u2019t exist, as this could lead to inconsistencies and conflicts in your application settings.</p> Answer 2 <p>The Singleton design pattern ensures that a class has only one instance and provides a global point of access to that instance. In this scenario, you can create a Configuration Manager class as a Singleton to guarantee that there\u2019s only one instance of the manager in your application.</p> <p>By implementing the Singleton design pattern for the Configuration Manager class, you ensure that there is only one instance of the configuration manager throughout your application. This allows all components to access and modify application settings in a consistent and reliable manner, avoiding conflicts and inconsistencies in the configuration data. <pre><code>classDiagram\n    class ConfigurationManager {\n- static _instance: ConfigurationManager\n        + getInstance(): ConfigurationManager\n        + getSetting(key: string): string\n        + setSetting(key: string, value: string): void\n        # constructor()\n}\n\nConfigurationManager --&gt; ConfigurationManager : &lt;&lt;singleton&gt;&gt;\n</code></pre> * ConfigurationManager: is the class responsible for managing configuration settings. * _instance: is a static variable that holds the single instance of the ConfigurationManager. * getInstance(): is a static method that returns the single instance of the ConfigurationManager. * getSetting(key: string) and setSetting(key: string, value: string): are methods for accessing and modifying configuration settings. * The &lt;&gt; stereotype indicates that the ConfigurationManager class follows the Singleton design pattern. Problem 3 <p>You are working on a new e-commerce platform, and you need to integrate a legacy payment gateway system that uses an outdated API. This legacy system has its own way of processing payments and retrieving transaction data, which doesn\u2019t align with the modern RESTful API standards your platform follows.</p> <p>The challenge is to make the legacy payment gateway system compatible with your new e-commerce platform without making significant changes to the existing codebase. You want to create classes that allow your platform to communicate with the legacy payment gateway seamlessly, even though they have different interfaces and communication protocols.</p> Answer 3 <p>The Adapter Design Pattern can be used to bridge the gap between your new e-commerce platform and the legacy payment gateway with different interfaces. Here\u2019s a textual representation of the solution:</p> <pre><code>classDiagram\n  class ECommercePlatform {\n+ processPayment(paymentInfo: PaymentInfo): boolean\n    + fetchTransaction(transactionID: string): Transaction\n  }\n\nclass LegacyPaymentGateway {\n+ makePayment(account: string, amount: number): boolean\n    + checkTransactionDetails(receipt: string): Transaction\n  }\n\ninterface PaymentInfo {\naccount: string\n    amount: number\n  }\n\nclass Transaction {\n- transactionID: string\n    - status: string\n    + getTransactionID(): string\n    + getStatus(): string\n  }\n\nclass PaymentGatewayAdapter {\n- legacyGateway: LegacyPaymentGateway\n    + processPayment(paymentInfo: PaymentInfo): boolean\n    + fetchTransaction(transactionID: string): Transaction\n  }\n\nECommercePlatform --|&gt; PaymentGatewayAdapter : Uses\n  PaymentGatewayAdapter --&gt; LegacyPaymentGateway : Adapts\n  PaymentGatewayAdapter ..|&gt; PaymentInfo : Adapts\n  PaymentGatewayAdapter ..|&gt; Transaction : Adapts\n</code></pre> <ul> <li>ECommercePlatform represents your new e-commerce platform that expects specific methods for processing payments and fetching transaction details.</li> <li>LegacyPaymentGateway represents the legacy payment gateway with its own methods for making payments and checking transaction details.</li> <li>PaymentInfo is an interface representing the payment information required by the adapter.</li> <li>Transaction is a class representing transaction details.</li> </ul> <p>Here we create a PaymentGatewayAdapter class that acts as an adapter between your platform and the legacy payment gateway.</p> <p>The PaymentGatewayAdapter class should implement the interface expected by your platform, providing methods like processPayment() and getTransactionDetails().</p> <p>Within the adapter, you\u2019ll interact with the legacy payment gateway using its existing methods and translate the requests and responses to match your platform\u2019s expectations.</p> <p>The adapter acts as a wrapper around the legacy system, ensuring that your platform can communicate with it as if it were a native component.</p> <p>By implementing the Adapter Design Pattern in this scenario, you can seamlessly integrate the legacy payment gateway into your new e-commerce platform without the need for extensive modifications to either system. The adapter acts as a bridge that translates between the old and new interfaces, making the integration process smooth and maintaining the separation of concerns between your platform and the legacy system.</p> Problem 4 <p>You are designing a remote control system for a smart home, where you can control various devices like lights, thermostats, and smart locks. Each device has multiple functionalities (e.g., turning lights on/off, adjusting thermostat temperature, locking/unlocking doors), and these devices might use different communication protocols and APIs.</p> <p>The challenge is to create a flexible and extensible remote control system that allows users to control devices with ease, irrespective of the device type and communication methods. You want to enable users to issue instructions (e.g., \u201cturn on lights,\u201d \u201cset thermostat to 72\u00b0F,\u201d \u201clock the front door\u201d) and have the system interpret and execute these commands correctly.</p> Answer 4 <p>The Command Design Pattern can be used to create a remote control system that encapsulates commands as objects. Each command represents an action that the user wants to perform, and the remote control system acts as an invoker that can execute these commands. Here\u2019s a textual representation of the solution:</p> <p>Define a set of command classes, such as TurnOnLightsCommand, SetThermostatCommand, and LockDoorCommand. Each command class should encapsulate the logic for a specific action.</p> <p>Create a common interface for these command classes, e.g., Command, which should have an execute() method.</p> <p>Implement concrete command classes that implement the Command interface and encapsulate specific actions for each device.</p> <p>Use a remote control to map user actions to concrete command objects. For instance, when a user says, \u201cturn on lights,\u201d the remote control system should map this command to an instance of TurnOnLightsCommand.</p> <p>The remote control system can maintain a list of commands in a queue, allowing users to issue multiple commands and schedule their execution.</p> <p>When a command is executed, it communicates with the appropriate smart home device, translating the high-level command into device-specific actions.</p> <p>Here\u2019s a Mermaid diagram for this solution:</p> <pre><code>classDiagram\n  class RemoteControl {\n+ setCommand(command: Command): void\n    + pressButton(): void\n  }\n\nclass Command {\n+ execute(): void\n  }\n\nclass TurnOnLightsCommand {\n- lightDevice: LightDevice\n    + execute(): void\n  }\n\nclass SetThermostatCommand {\n- thermostatDevice: ThermostatDevice\n    + execute(): void\n  }\n\nclass LockDoorCommand {\n- doorDevice: DoorDevice\n    + execute(): void\n  }\n\nclass LightDevice {\n+ turnOn(): void\n    + turnOff(): void\n  }\n\nclass ThermostatDevice {\n+ setTemperature(temperature: number): void\n  }\n\nclass DoorDevice {\n+ lock(): void\n    + unlock(): void\n  }\n\nRemoteControl --|&gt; Command : Uses\n  TurnOnLightsCommand --&gt; LightDevice : Controls\n  SetThermostatCommand --&gt; ThermostatDevice : Controls\n  LockDoorCommand --&gt; DoorDevice : Controls\n</code></pre> <ul> <li>RemoteControl acts as the invoker and allows users to press buttons to execute commands.</li> <li>Command is the common interface for all concrete command classes, providing the execute() method.</li> <li>Concrete command classes, such as TurnOnLightsCommand, SetThermostatCommand, and LockDoorCommand, encapsulate specific actions to control devices.</li> <li>LightDevice, ThermostatDevice, and DoorDevice represent the smart home devices that can be controlled by the commands.</li> </ul> <p>The Command Design Pattern provides a flexible and extensible solution for managing commands and controlling smart home devices through a remote control system. It allows users to issue high-level commands while encapsulating device-specific details in command objects.</p> Problem 5 <p>You are tasked with designing software for a space mission control center. The control center needs to monitor and control a complex network of satellites, space probes, and ground stations that communicate with them. Each spacecraft has its own communication protocols, telemetry data formats, and operational procedures.</p> <p>The challenge is to create a simplified, unified interface for the mission control center operators to monitor and control the entire space mission. You want to provide a centralized dashboard where operators can easily track the status of all space assets, send commands to spacecraft, and receive telemetry data without dealing with the technical intricacies of each individual spacecraft\u2019s communication protocols.</p> Answer 5 <p>The Facade Design Pattern can be used to create a Space Mission Control Center facade that acts as a unified control interface for operators. Here\u2019s a textual representation of the solution:</p> <p>Define a MissionControlCenterFacade class, which provides high-level methods for tracking and controlling spacecraft.</p> <p>The facade should include methods like trackSpacecraft(), sendCommand(), and receiveTelemetryData(), which encapsulate complex interactions with individual spacecraft.</p> <p>Behind the scenes, the facade communicates with the various spacecraft and ground stations using their specific communication protocols and data formats.</p> <p>Operators can use the facade through a centralized dashboard, allowing them to monitor and control the entire space mission without needing to understand the technical details of individual spacecraft operations.</p> <p>Here\u2019s the mermaid diagram for this solution:</p> <pre><code>classDiagram\n  class MissionControlCenterFacade {\n+ trackSpacecraft(spacecraftID: string): void\n    + sendCommand(spacecraftID: string, command: string): void\n    + receiveTelemetryData(spacecraftID: string): TelemetryData\n  }\n\nclass SpacecraftCommunicationManager {\n+ establishConnection(spacecraftID: string): void\n    + sendCommand(spacecraftID: string, command: string): void\n    + receiveTelemetryData(spacecraftID: string): TelemetryData\n  }\n\nclass TelemetryData {\n- data: string\n    + getData(): string\n  }\n\nMissionControlCenterFacade --|&gt; SpacecraftCommunicationManager : Uses\n  MissionControlCenterFacade --|&gt; TelemetryData : Uses\n</code></pre> <ul> <li>MissionControlCenterFacade represents the facade class responsible for providing a simplified interface to monitor and control spacecraft.</li> <li>SpacecraftCommunicationManager is a class responsible for managing the communication and data exchange with individual spacecraft, abstracting their complexities.</li> <li>The MissionControlCenterFacade uses the SpacecraftCommunicationManager to provide operators with a unified and user-friendly interface for space mission control.</li> </ul> <p>The Facade Design Pattern simplifies space mission control for operators by providing a centralized and easy-to-use interface while abstracting the complexities of individual spacecraft communication protocols and data formats.</p> Problem 6 <p>You are developing a web application that needs to interact with a database. To optimize performance and resource utilization, you want to implement a connection pool for database connections. A connection pool allows you to reuse and manage a limited number of database connections efficiently.</p> <p>The challenge is to ensure that there is only one centralized connection pool that all parts of your application can access. If multiple connection pool instances are created, it could lead to resource wastage and inefficient handling of database connections.</p> Answer 6 <p>To address this problem, you can implement a Connection Pool Manager as a Singleton. The Singleton design pattern ensures that there\u2019s only one instance of the Connection Pool Manager in your application, which will manage the database connections. Here\u2019s a textual representation of the class diagram for the Singleton Connection Pool Manager:</p> <pre><code>classDiagram\n    class ConnectionPoolManager {\n- static _instance: ConnectionPoolManager\n        + getInstance(): ConnectionPoolManager\n        + getConnection(): DatabaseConnection\n        + returnConnection(connection: DatabaseConnection): void\n        # constructor()\n}\n\nclass DatabaseConnection {\n- connectionInfo: string\n        + query(sql: string): Result\n        + close(): void\n    }\n\nConnectionPoolManager --&gt; ConnectionPoolManager : &lt;&lt;singleton&gt;&gt;\n    ConnectionPoolManager -- DatabaseConnection : Manages\n</code></pre> <ul> <li>ConnectionPoolManager is the class responsible for managing the database connection pool.</li> <li>_instance is a static variable that holds the single instance of the ConnectionPoolManager.</li> <li>getInstance() is a static method that returns the single instance of the ConnectionPoolManager.</li> <li>getConnection() is a method to request a database connection from the pool.</li> <li>returnConnection(connection: DatabaseConnection) is a method to return a database connection to the pool for reuse.</li> <li>DatabaseConnection represents individual database connections that can execute SQL queries and be returned to the pool.</li> </ul> <p>By implementing the Connection Pool Manager as a Singleton, you ensure that there is only one centralized instance managing the database connections, preventing resource wastage and ensuring efficient handling of connections throughout your application.</p> Problem 7 <p>You are developing a task scheduling and execution system for a server that manages various background tasks. These tasks include data processing, file synchronization, and system maintenance. The server needs a flexible way to schedule and execute these tasks at different times, with the ability to monitor their progress and provide error handling.</p> <p>The challenge is to create a system that allows users to schedule and manage tasks dynamically. Users should be able to add, remove, and reschedule tasks at runtime without affecting the server\u2019s core functionality. Additionally, the system should provide detailed logs and error handling for each task.</p> Answer 7 <p>The Command Design Pattern can be used to create a system that represents tasks as objects with a unified interface for scheduling, executing, monitoring, and handling errors. Here\u2019s a textual representation of the solution:</p> <p>Define a Task interface that includes methods like execute(), cancel(), and logErrors(). Each task object implements this interface.</p> <p>Create concrete task classes, such as DataProcessingTask, FileSynchronizationTask, and SystemMaintenanceTask, each implementing the Task interface.</p> <p>Implement a Task Scheduler that maintains a queue of task objects. Users can add, remove, and reschedule tasks through the scheduler.</p> <p>Use a Command Pattern to encapsulate task execution. Create TaskExecutionCommand classes that wrap task objects and execute them when invoked.</p> <p>The scheduler schedules tasks and uses the Command Pattern to execute them at the specified times. It logs task progress and handles errors by invoking appropriate methods on task objects.</p> <p>Here\u2019s the textual representation for this solution:</p> <pre><code>classDiagram\n  class Task {\n+ execute(): void\n    + cancel(): void\n    + logErrors(): void\n  }\n\nclass DataProcessingTask {\n+ execute(): void\n    + cancel(): void\n    + logErrors(): void\n  }\n\nclass FileSynchronizationTask {\n+ execute(): void\n    + cancel(): void\n    + logErrors(): void\n  }\n\nclass SystemMaintenanceTask {\n+ execute(): void\n    + cancel(): void\n    + logErrors(): void\n  }\n\nclass TaskScheduler {\n+ scheduleTask(task: Task, executionTime: DateTime): void\n    + rescheduleTask(task: Task, newExecutionTime: DateTime): void\n    + removeTask(task: Task): void\n  }\n\nclass TaskExecutionCommand {\n+ execute(): void\n  }\n\nTask &lt;-- DataProcessingTask : Implements\n  Task &lt;-- FileSynchronizationTask : Implements\n  Task &lt;-- SystemMaintenanceTask : Implements\n  TaskScheduler --|&gt; Task : Manages\n  TaskExecutionCommand --|&gt; Task : Wraps\n</code></pre> <p>Task is the interface that represents common task functionality, such as execution, cancellation, and error handling.</p> <p>DataProcessingTask, FileSynchronizationTask, and SystemMaintenanceTask are concrete task classes implementing the Task interface, representing different types of tasks.</p> <p>TaskScheduler is responsible for scheduling, rescheduling, and removing tasks.</p> <p>TaskExecutionCommand is a command object that wraps task objects and is responsible for executing them at the specified times.</p> <p>The Command Design Pattern provides a flexible and extensible solution for managing and executing tasks in a dynamic scheduling environment, allowing users to control tasks at runtime without affecting the server\u2019s core functionality. It also ensures proper logging and error handling for each task.</p> Problem 8 <p>You are developing software for a medical facility that has a variety of complex medical equipment, including ventilators, heart monitors, infusion pumps, and more. Each of these devices comes from different manufacturers and operates using distinct communication protocols, alarms, and status updates.</p> <p>The challenge is to create a unified and user-friendly interface for medical staff to monitor and control all the medical equipment in the facility. This interface should provide real-time monitoring of vital signs, allow staff to set alarms, and provide emergency shut-off controls, all without needing to understand the technical details of each device\u2019s operation.</p> Answer 8 <p>The Facade Design Pattern can be used to create a Medical Equipment Monitoring System that acts as a unified control interface for medical staff. Here\u2019s a textual representation of the solution:</p> <p>Define a MedicalEquipmentMonitoringFacade class that provides high-level methods for monitoring and controlling medical equipment.</p> <p>The facade should include methods like monitorVitalSigns(), setAlarmThreshold(), and emergencyShutdown(), which encapsulate complex interactions with individual medical devices.</p> <p>Behind the scenes, the facade communicates with the different medical equipment using their specific communication protocols and translates data to provide a unified and consistent interface.</p> <p>Medical staff can use the facade through a centralized monitoring station, simplifying the process of tracking vital signs, managing alarms, and controlling equipment without requiring in-depth technical knowledge of each device.</p> <p>Here\u2019s the mermaid diagram for this solution:</p> <pre><code>classDiagram\n  class MedicalEquipmentMonitoringFacade {\n+ monitorVitalSigns(deviceID: string): VitalSignsData\n    + setAlarmThreshold(deviceID: string, parameter: string, threshold: number): void\n    + emergencyShutdown(deviceID: string): void\n  }\n\nclass MedicalDeviceManager {\n+ connectToDevice(deviceID: string): void\n    + getVitalSigns(deviceID: string): VitalSignsData\n    + setAlarmThreshold(deviceID: string, parameter: string, threshold: number): void\n    + initiateEmergencyShutdown(deviceID: string): void\n  }\n\nclass VitalSignsData {\n- data: string\n    + getData(): string\n  }\n\nMedicalEquipmentMonitoringFacade --|&gt; MedicalDeviceManager : Uses\n  MedicalEquipmentMonitoringFacade --|&gt; VitalSignsData : Uses\n</code></pre> <ul> <li>MedicalEquipmentMonitoringFacade represents the facade class responsible for providing a simplified interface to monitor and control medical equipment.</li> <li>MedicalDeviceManager is a class responsible for managing the communication and data exchange with individual medical devices, abstracting their complexities.</li> <li>The MedicalEquipmentMonitoringFacade uses the MedicalDeviceManager to provide medical staff with a unified and user-friendly interface for monitoring and controlling medical equipment.</li> </ul> <p>The Facade Design Pattern simplifies medical equipment monitoring and control for healthcare professionals by providing a centralized and easy-to-use interface while abstracting the complexities of various medical device communication protocols and data formats.</p> Problem 9 <p>You are developing a software application that assists job seekers in creating customized resumes. Users can select from various themes and provide their personal information, educational background, work experience, and skills. However, users have different preferences for the format and content of their resumes, which can be highly personalized.</p> <p>The challenge is to create a flexible resume generation system that allows users to customize their resumes while maintaining a consistent structure and design. You want to enable users to choose from various themes and easily add, modify, or remove sections as per their preferences.</p> Answer 9 <p>The Template Method Design Pattern can be used to create a resume generation system that provides a flexible structure for users to customize their resumes while adhering to a common format. Here\u2019s a textual representation of the solution:</p> <p>Define an abstract ResumeTemplate class that serves as a template for generating resumes. It should contain common sections like \u201cContact Information,\u201d \u201cObjective,\u201d \u201cEducation,\u201d \u201cWork Experience,\u201d and \u201cSkills.\u201d</p> <p>Implement concrete resume classes, such as StandardResume and CreativeResume, which inherit from the ResumeTemplate class. Each concrete class represents a different resume style.</p> <p>In each concrete resume class, provide default implementations for the common sections. However, allow users to override or extend these sections based on their customization needs.</p> <p>Users can select a template and customize their resume by adding, modifying, or removing sections as required. The template method pattern ensures that the overall structure and formatting are consistent across all resumes.</p> <p>Here\u2019s the textual representation for this solution: <pre><code>classDiagram\n  class ResumeTemplate {\n+ generateResume(): string\n    # formatContactInfo(): string\n# formatObjective(): string\n# formatEducation(): string\n# formatWorkExperience(): string\n# formatSkills(): string\n}\n\nclass StandardResume {\n+ generateResume(): string\n  }\n\nclass CreativeResume {\n+ generateResume(): string\n  }\n\nResumeTemplate &lt;|-- StandardResume\n  ResumeTemplate &lt;|-- CreativeResume\n</code></pre> * ResumeTemplate is an abstract class that serves as the template for generating resumes. It defines a template method generateResume() and several protected methods for formatting different sections of the resume. * StandardResume and CreativeResume are concrete classes that inherit from ResumeTemplate and provide specific implementations for the generateResume() method.</p> <p>The Template Method Design Pattern allows users to customize their resumes while maintaining a consistent structure and design. Users can select different resume styles and customize their content according to their preferences, without the need to start from scratch or worry about the overall formatting.</p> Problem 10 <p>You are working on a data processing system that needs to perform a series of data transformation and analysis tasks on a large dataset. These tasks include data cleaning, filtering, transformation, and statistical analysis. Each task is independent, and the order of execution may vary based on the specific data processing requirements.</p> <p>The challenge is to create an efficient and flexible data processing system that can handle complex data flows. You want to ensure that data can flow seamlessly, with the ability to add, remove, or rearrange processing steps without affecting the core functionality.</p> Answer 10 <p>The Pipeline Design Pattern can be used to create a data processing system that consists of a series of interconnected data processing stages. Here\u2019s a textual representation of the solution:</p> <p>Define a set of processing stages, such as DataCleaningStage, DataFilteringStage, DataTransformationStage, and DataAnalysisStage. Each stage should have a standardized input and output interface.</p> <p>Create a pipeline controller that manages the order of execution and the flow of data between processing stages. The controller organizes the stages into a pipeline and ensures data flows sequentially through them.</p> <p>Data enters the pipeline at the beginning and flows through each stage in the defined order. Each stage processes the data as required and passes the results to the next stage.</p> <p>Users can easily customize the pipeline by adding, removing, or rearranging stages based on the specific data processing requirements.</p> <p>The pipeline controller ensures that data flows seamlessly through the stages, and the order of execution can be flexibly adjusted.</p> <p>Here\u2019s a mermaid representation for this solution:</p> <p><pre><code>classDiagram\n  class DataProcessingPipeline {\n+ addStage(stage: DataProcessingStage): void\n    + removeStage(stage: DataProcessingStage): void\n    + process(data: Data): Data\n  }\n\ninterface Data {\n- data: string\n    + getData(): string\n  }\n\ninterface DataProcessingStage {\n+ process(data: Data): Data\n  }\n\nclass DataCleaningStage {\n+ process(data: Data): Data\n  }\n\nclass DataFilteringStage {\n+ process(data: Data): Data\n  }\n\nclass DataTransformationStage {\n+ process(data: Data): Data\n  }\n\nclass DataAnalysisStage {\n+ process(data: Data): Data\n  }\n\nDataProcessingPipeline --&gt; DataProcessingStage : Contains\n  DataProcessingPipeline ..|&gt; Data : Uses\n  DataProcessingStage --&gt; Data : Uses\n  DataCleaningStage --&gt; DataProcessingStage : Next\n  DataFilteringStage --&gt; DataProcessingStage : Next\n  DataTransformationStage --&gt; DataProcessingStage : Next\n  DataAnalysisStage --&gt; DataProcessingStage : Next\n</code></pre> * DataProcessingPipeline represents the pipeline controller that manages the order of execution and data flow through the processing stages. * DataProcessingStage is an interface that defines the common processing stage methods. * DataCleaningStage, DataFilteringStage, DataTransformationStage, and DataAnalysisStage are concrete processing stages with specific implementations for data processing.</p> <p>The Pipeline Design Pattern provides an efficient and flexible solution for data processing, allowing users to create complex data pipelines and adjust the order of execution without impacting the core functionality.</p> Problem 11 <p>You are developing an online learning platform with various courses. Each course contains different types of assessments, such as quizzes, assignments, and exams. The assessments share some common functionalities like setting deadlines, grading, and feedback distribution, but they also have unique features specific to their type.</p> <p>The challenge is to create a flexible assessment system that allows course instructors to define and manage assessments for their courses. Instructors should be able to specify different assessment types, grading criteria, and feedback mechanisms while ensuring a consistent process for deadline management and result distribution.</p> Answer 11 <p>The Template Method Design Pattern can be used to create a flexible assessment system for online courses. Here\u2019s a textual representation of the solution:</p> <p>Define an abstract AssessmentTemplate class that serves as a template for creating assessments. It should contain common methods for setting deadlines, grading, and distributing feedback.</p> <p>Implement concrete assessment classes, such as QuizAssessment, AssignmentAssessment, and ExamAssessment, which inherit from the AssessmentTemplate class. Each concrete class represents a specific type of assessment.</p> <p>In each concrete assessment class, provide default implementations for common assessment tasks, such as setting deadlines and grading. However, allow course instructors to customize unique features for each assessment type.</p> <p>Course instructors can create assessments by selecting a type and customizing their parameters. The template method pattern ensures that the overall assessment process, including deadline management and feedback distribution, remains consistent.</p> <p>Here\u2019s the textual representation for this solution:</p> <p><pre><code>classDiagram\n  class AssessmentTemplate {\n+ createAssessment(): void\n    # setDeadline(date: DateTime): void\n# gradeAssessment(): void\n# distributeFeedback(): void\n}\n\nclass QuizAssessment {\n+ createAssessment(): void\n  }\n\nclass AssignmentAssessment {\n+ createAssessment(): void\n  }\n\nclass ExamAssessment {\n+ createAssessment(): void\n  }\n\nAssessmentTemplate &lt;|-- QuizAssessment\n  AssessmentTemplate &lt;|-- AssignmentAssessment\n  AssessmentTemplate &lt;|-- ExamAssessment\n</code></pre> * AssessmentTemplate is an abstract class that serves as the template for creating assessments. It defines a template method createAssessment() and several protected methods for common assessment tasks. * QuizAssessment, AssignmentAssessment, and ExamAssessment are concrete classes that inherit from AssessmentTemplate and provide specific implementations for the createAssessment() method.</p> <p>The Template Method Design Pattern allows course instructors to create and manage various assessment types while maintaining a consistent process for setting deadlines, grading, and distributing feedback. It offers flexibility for customization while ensuring that common assessment tasks follow a predefined structure.</p>"},{"location":"CIS-18/facade_java.html","title":"Facade java","text":""},{"location":"CIS-18/facade_java.html#example-of-facade-design-pattern","title":"Example of Facade Design Pattern","text":""},{"location":"CIS-18/facade_java.html#facade-demonstration-client","title":"Facade Demonstration Client","text":"<pre><code>package edu.redwoods.facade;\n\nimport java.sql.Connection;\n\nimport edu.redwoods.facade.HelperFacade;\nimport edu.redwoods.facade.MySqlHelper;\nimport edu.redwoods.facade.OracleHelper;\n\npublic class FacadePatternTest {\n\npublic static void main(String[] args) {\nString tableName=\"Employee\";\n\n// Generating MySql HTML report and Oracle PDF report without using Facade\nConnection con = MySqlHelper.getMySqlDBConnection();\nMySqlHelper mySqlHelper = new MySqlHelper();\nmySqlHelper.generateMySqlHTMLReport(tableName, con);\n\nConnection con1 = OracleHelper.getOracleDBConnection();\nOracleHelper oracleHelper = new OracleHelper();\noracleHelper.generateOraclePDFReport(tableName, con1);\n\n// Generating MySql HTML report and Oracle PDF report using Facade\nHelperFacade.generateReport(HelperFacade.DBTypes.MYSQL, HelperFacade.ReportTypes.HTML, tableName);\nHelperFacade.generateReport(HelperFacade.DBTypes.ORACLE, HelperFacade.ReportTypes.PDF, tableName);\n}\n\n}\n</code></pre>"},{"location":"CIS-18/facade_java.html#facade-interface","title":"Facade Interface","text":"<pre><code>package edu.redwoods.facade;\n\nimport java.sql.Connection;\n\npublic class HelperFacade {\n\npublic static void generateReport(DBTypes dbType, ReportTypes reportType, String tableName){\nConnection con = null;\nswitch (dbType){\ncase MYSQL: con = MySqlHelper.getMySqlDBConnection();\nMySqlHelper mySqlHelper = new MySqlHelper();\nswitch(reportType){\ncase HTML:\nmySqlHelper.generateMySqlHTMLReport(tableName, con);\nbreak;\ncase PDF:\nmySqlHelper.generateMySqlPDFReport(tableName, con);\nbreak;\n}\nbreak;\ncase ORACLE: con = OracleHelper.getOracleDBConnection();\nOracleHelper oracleHelper = new OracleHelper();\nswitch(reportType){\ncase HTML:\noracleHelper.generateOracleHTMLReport(tableName, con);\nbreak;\ncase PDF:\noracleHelper.generateOraclePDFReport(tableName, con);\nbreak;\n}\nbreak;\n}\n\n}\n\npublic static enum DBTypes{\nMYSQL,ORACLE;\n}\n\npublic static enum ReportTypes{\nHTML,PDF;\n}\n}\n</code></pre>"},{"location":"CIS-18/facade_java.html#facade-sub-system-classes","title":"Facade Sub-System Classes","text":"<pre><code>package edu.redwoods.facade;\n\niimport java.sql.Connection;\n\npublic class MySqlHelper {\n\npublic static Connection getMySqlDBConnection(){\n//get MySql DB connection using connection parameters\nreturn null;\n}\n\npublic void generateMySqlPDFReport(String tableName, Connection con){\n//get data from table and generate pdf report\n}\n\npublic void generateMySqlHTMLReport(String tableName, Connection con){\n//get data from table and generate pdf report\n}\n}\n</code></pre> <pre><code>package edu.redwoods.facade;\n\nimport java.sql.Connection;\n\npublic class OracleHelper {\n\npublic static Connection getOracleDBConnection(){\n//get Oracle DB connection using connection parameters\nreturn null;\n}\n\npublic void generateOraclePDFReport(String tableName, Connection con){\n//get data from table and generate pdf report\n}\n\npublic void generateOracleHTMLReport(String tableName, Connection con){\n//get data from table and generate pdf report\n}\n\n}\n</code></pre>"},{"location":"CIS-18/factory_method_java.html","title":"Factory method java","text":""},{"location":"CIS-18/factory_method_java.html#factory-method-in-java","title":"Factory Method in Java","text":""},{"location":"CIS-18/factory_method_java.html#abstract-product-interface","title":"Abstract Product Interface","text":"<pre><code>package edu.redwoods.factory.method;\n\npublic abstract class Computer {\n\npublic abstract String getRAM();\npublic abstract String getHDD();\npublic abstract String getCPU();\n\n@Override\npublic String toString(){\nreturn \"RAM= \"+this.getRAM()+\", HDD=\"+this.getHDD()+\", CPU=\"+this.getCPU();\n}\n}\n</code></pre>"},{"location":"CIS-18/factory_method_java.html#concrete-products","title":"Concrete Products","text":"<pre><code>package edu.redwoods.factory.method;\n\npublic class PC extends Computer {\n\nprivate String ram;\nprivate String hdd;\nprivate String cpu;\n\npublic PC(String ram, String hdd, String cpu){\nthis.ram=ram;\nthis.hdd=hdd;\nthis.cpu=cpu;\n}\n@Override\npublic String getRAM() {\nreturn this.ram;\n}\n\n@Override\npublic String getHDD() {\nreturn this.hdd;\n}\n\n@Override\npublic String getCPU() {\nreturn this.cpu;\n}\n\n}\n</code></pre> <pre><code>package edu.redwoods.factory.method;\n\npublic class Server extends Computer {\n\nprivate String ram;\nprivate String hdd;\nprivate String cpu;\n\npublic Server(String ram, String hdd, String cpu){\nthis.ram=ram;\nthis.hdd=hdd;\nthis.cpu=cpu;\n}\n@Override\npublic String getRAM() {\nreturn this.ram;\n}\n\n@Override\npublic String getHDD() {\nreturn this.hdd;\n}\n\n@Override\npublic String getCPU() {\nreturn this.cpu;\n}\n\n}\n</code></pre>"},{"location":"CIS-18/factory_method_java.html#concrete-creator","title":"Concrete Creator","text":"<pre><code>package edu.redwoods.factory.method;\n\nimport edu.redwoods.factory.method.model.Computer;\nimport edu.redwoods.factory.method.model.PC;\nimport edu.redwoods.factory.method.model.Server;\n\npublic class ComputerFactory {\n\npublic static Computer getComputer(String type, String ram, String hdd, String cpu){\nif(\"PC\".equalsIgnoreCase(type)) return new PC(ram, hdd, cpu);\nelse if(\"Server\".equalsIgnoreCase(type)) return new Server(ram, hdd, cpu);\n\nreturn null;\n}\n}\n</code></pre>"},{"location":"CIS-18/factory_method_java.html#simple-client-for-factory-method-above","title":"Simple Client for Factory Method Above","text":"<pre><code>import edu.redwoods.factory.method.ComputerFactory;\nimport edu.redwoods.factory.method.model.Computer;\n\npublic class TestFactory {\n\npublic static void main(String[] args) {\nComputer pc = ComputerFactory.getComputer(\"pc\",\"2 GB\",\"500 GB\",\"2.4 GHz\");\nComputer server = ComputerFactory.getComputer(\"server\",\"16 GB\",\"1 TB\",\"2.9 GHz\");\nSystem.out.println(\"Factory PC Config::\"+pc);\nSystem.out.println(\"Factory Server Config::\"+server);\n}\n\n}\n</code></pre>"},{"location":"CIS-18/iterator_java.html","title":"Iterator java","text":""},{"location":"CIS-18/iterator_java.html#iterator-design-pattern","title":"Iterator Design Pattern","text":""},{"location":"CIS-18/iterator_java.html#client-code","title":"Client Code","text":"<pre><code>package edu.redwoods.iterator;\n\npublic class Client {\n\npublic static void main(String[] args) {\nChannelCollection channels = populateChannels();\nChannelIterator baseIterator = channels.iterator(ChannelTypeEnum.ALL);\nwhile (baseIterator.hasNext()) {\nChannel c = baseIterator.next();\nSystem.out.println(c.toString());\n}\nSystem.out.println(\"******\");\n// Channel Type Iterator\nChannelIterator englishIterator = channels.iterator(ChannelTypeEnum.ENGLISH);\nwhile (englishIterator.hasNext()) {\nChannel c = englishIterator.next();\nSystem.out.println(c.toString());\n}\n}\n\nprivate static ChannelCollection populateChannels() {\nChannelCollection channels = new ChannelCollectionImpl();\nchannels.addChannel(new Channel(98.5, ChannelTypeEnum.ENGLISH));\nchannels.addChannel(new Channel(99.5, ChannelTypeEnum.HINDI));\nchannels.addChannel(new Channel(100.5, ChannelTypeEnum.FRENCH));\nchannels.addChannel(new Channel(101.5, ChannelTypeEnum.ENGLISH));\nchannels.addChannel(new Channel(102.5, ChannelTypeEnum.HINDI));\nchannels.addChannel(new Channel(103.5, ChannelTypeEnum.FRENCH));\nchannels.addChannel(new Channel(104.5, ChannelTypeEnum.ENGLISH));\nchannels.addChannel(new Channel(105.5, ChannelTypeEnum.HINDI));\nchannels.addChannel(new Channel(106.5, ChannelTypeEnum.FRENCH));\nreturn channels;\n}\n\n}\n</code></pre> <pre><code>package edu.redwoods.iterator;\n\npublic enum ChannelTypeEnum {\nENGLISH, CHINESE, FRENCH, ALL;\n}\n</code></pre> <pre><code>package edu.redwoods.iterator;\n\npublic class Channel {\n\nprivate double frequency;\nprivate ChannelTypeEnum TYPE;\n\npublic Channel(double freq, ChannelTypeEnum type){\nthis.frequency=freq;\nthis.TYPE=type;\n}\n\npublic double getFrequency() {\nreturn frequency;\n}\n\npublic ChannelTypeEnum getTYPE() {\nreturn TYPE;\n}\n\n@Override\npublic String toString(){\nreturn \"Frequency=\"+this.frequency+\", Type=\"+this.TYPE;\n}\n\n}\n</code></pre>"},{"location":"CIS-18/iterator_java.html#iterator-interface","title":"Iterator Interface","text":"<pre><code>package edu.redwoods.iterator;\n\npublic interface ChannelIterator {\n\npublic boolean hasNext();\npublic Channel next();\n}\n</code></pre>"},{"location":"CIS-18/iterator_java.html#aggregate-interface","title":"Aggregate Interface","text":"<pre><code>package edu.redwoods.iterator;\n\npublic interface ChannelCollection {\n\npublic void addChannel(Channel c);\n\npublic void removeChannel(Channel c);\n\npublic ChannelIterator iterator(ChannelTypeEnum type);\n\n}\n</code></pre>"},{"location":"CIS-18/iterator_java.html#concrete-aggregate","title":"Concrete Aggregate","text":"<pre><code>package edu.redwoods.iterator;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ChannelCollectionImpl implements ChannelCollection {\n\nprivate List&lt;Channel&gt; channelsList;\n\npublic ChannelCollectionImpl() {\nchannelsList = new ArrayList&lt;&gt;();\n}\n\npublic void addChannel(Channel c) {\nthis.channelsList.add(c);\n}\n\npublic void removeChannel(Channel c) {\nthis.channelsList.remove(c);\n}\n\n@Override\npublic ChannelIterator iterator(ChannelTypeEnum type) {\nreturn new ChannelIteratorImpl(type, this.channelsList);\n}\n\nprivate class ChannelIteratorImpl implements ChannelIterator {\n\nprivate ChannelTypeEnum type;\nprivate List&lt;Channel&gt; channels;\nprivate int position;\n\npublic ChannelIteratorImpl(ChannelTypeEnum ty,\nList&lt;Channel&gt; channelsList) {\nthis.type = ty;\nthis.channels = channelsList;\n}\n\n@Override\npublic boolean hasNext() {\nwhile (position &lt; channels.size()) {\nChannel c = channels.get(position);\nif (c.getTYPE().equals(type) || type.equals(ChannelTypeEnum.ALL)) {\nreturn true;\n} else\nposition++;\n}\nreturn false;\n}\n\n@Override\npublic Channel next() {\nChannel c = channels.get(position);\nposition++;\nreturn c;\n}\n\n}\n}\n</code></pre> Note <p>Note the private nested class ChannelIteratorImpl. Could this be the Concrete Iterator?</p>"},{"location":"CIS-18/observer_java.html","title":"Observer java","text":""},{"location":"CIS-18/observer_java.html#example-java-observer-design-pattern-source-code","title":"Example Java Observer Design Pattern Source Code","text":""},{"location":"CIS-18/observer_java.html#subject-interface","title":"Subject Interface","text":"<pre><code>package edu.redwoods.design.observer;\n\npublic interface Subject {\n\n//methods to register and unregister observers\npublic void register(Observer obj);\npublic void unregister(Observer obj);\n\n//method to notify observers of change\npublic void notifyObservers();\n\n//method to get updates from subject\npublic Object getUpdate(Observer obj);\n\n}\n</code></pre>"},{"location":"CIS-18/observer_java.html#observer-interface","title":"Observer Interface","text":"<pre><code>package edu.redwoods.design.observer;\n\npublic interface Observer {\n\n//method to update the observer, used by subject\npublic void update();\n\n//attach with subject to observe\npublic void setSubject(Subject sub);\n}\n</code></pre>"},{"location":"CIS-18/observer_java.html#concrete-subject","title":"Concrete Subject","text":"<pre><code>package edu.redwoods.design.observer;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class MyTopic implements Subject {\n\nprivate List&lt;Observer&gt; observers;\nprivate String message;\nprivate boolean changed;\nprivate final Object MUTEX = new Object();\n\npublic MyTopic(){\nthis.observers=new ArrayList&lt;&gt;();\n}\n@Override\npublic void register(Observer obj) {\nif(obj == null) throw new NullPointerException(\"Null Observer\");\nsynchronized (MUTEX) {\nif(!observers.contains(obj)) observers.add(obj);\n}\n}\n\n@Override\npublic void unregister(Observer obj) {\nsynchronized (MUTEX) {\nobservers.remove(obj);\n}\n}\n\n@Override\npublic void notifyObservers() {\nList&lt;Observer&gt; observersLocal = null;\n//synchronization is used to make sure any observer registered after message is received is not notified\nsynchronized (MUTEX) {\nif (!changed)\nreturn;\nobserversLocal = new ArrayList&lt;&gt;(this.observers);\nthis.changed=false;\n}\nfor (Observer obj : observersLocal) {\nobj.update();\n}\n\n}\n\n@Override\npublic Object getUpdate(Observer obj) {\nreturn this.message;\n}\n\n//method to post message to the topic\npublic void postMessage(String msg){\nSystem.out.println(\"Message Posted to Topic:\"+msg);\nthis.message=msg;\nthis.changed=true;\nnotifyObservers();\n}\n\n}\n</code></pre>"},{"location":"CIS-18/observer_java.html#concrete-observer","title":"Concrete Observer","text":"<pre><code>package edu.redwoods.design.observer;\n\npublic class MyTopicSubscriber implements Observer {\n\nprivate String name;\nprivate Subject topic;\n\npublic MyTopicSubscriber(String nm){\nthis.name=nm;\n}\n@Override\npublic void update() {\nString msg = (String) topic.getUpdate(this);\nif(msg == null){\nSystem.out.println(name+\":: No new message\");\n}else\nSystem.out.println(name+\":: Consuming message::\"+msg);\n}\n\n@Override\npublic void setSubject(Subject sub) {\nthis.topic=sub;\n}\n\n}\n</code></pre>"},{"location":"CIS-18/observer_java.html#client-of-observer-pattern","title":"Client of Observer Pattern","text":"<pre><code>package edu.redwoods.design.observer;\n\npublic class ObserverPatternTest {\n\npublic static void main(String[] args) {\n//create subject\nMyTopic topic = new MyTopic();\n\n//create observers\nObserver obj1 = new MyTopicSubscriber(\"Obj1\");\nObserver obj2 = new MyTopicSubscriber(\"Obj2\");\nObserver obj3 = new MyTopicSubscriber(\"Obj3\");\n\n//register observers to the subject\ntopic.register(obj1);\ntopic.register(obj2);\ntopic.register(obj3);\n\n//attach observer to subject\nobj1.setSubject(topic);\nobj2.setSubject(topic);\nobj3.setSubject(topic);\n\n//check if any update is available\nobj1.update();\n\n//now send message to subject\ntopic.postMessage(\"New Message\");\n}\n\n}\n</code></pre>"},{"location":"CIS-18/oo_principles.html","title":"Key OO Principles","text":""},{"location":"CIS-18/oo_principles.html#key-oop-principles","title":"Key OOP Principles","text":""},{"location":"CIS-18/oo_principles.html#encapsulate-what-varies","title":"Encapsulate what varies","text":"<ul> <li>Definition: Identify the aspects of your applications that vary and separate them from what stays the same. If a component or module in your application is bound to change frequently, then it\u2019s a good practice to separate this part of code from the stable ones so that later we can extend or alter the part that varies without affecting those that don\u2019t vary.</li> <li>Example: In the code below, the pet type varies, and the pet sound is a detail/functionality that varies from pet to pet or even owner to owner as is the pet type itself. Hence we encapsulate the varying details into classes or methods, which allows changing code Block 1 into code Block 2, the speak method encapsulates the varying pet types and sounds:</li> </ul> <pre><code>// Block 1\nif (pet.type() == dog) {\npet.bark();\n} else if (pet.type() == cat) {\npet.meow();\n} else if (pet.type() == duck) {\npet.quack()\n}\n</code></pre> <pre><code>// Block 2\npet.speak();\n</code></pre>"},{"location":"CIS-18/oo_principles.html#favor-composition-over-inheritance","title":"Favor composition over inheritance","text":"<ul> <li>Definition: Favor has-a relationships, Composition, over is-a relationships, Inheritance. Inheritance can make code more rigid and less extensible when overused, especially with Java\u2019s single inheritance. Class explosion due to needing to represent composite classes will arise unless composition is used instead (Composite and Builder patterns come to mind).</li> <li>Example: Consider shape classes like Square, Rectangle, Circle inheriting from a Shape class. If we want to make a new shape combining rectangle and square we\u2019d need a RectSquare or a SquareRect class using inheritance, but if we use composition instead, we could make a single CompositeShape class which would be composed of a list of other Shape.</li> </ul>"},{"location":"CIS-18/oo_principles.html#program-to-interfaces-not-implementations","title":"Program to interfaces, not implementations","text":"<ul> <li>Definition: Program to a super type like an interface or abstract class, not a concrete class.</li> <li>Example 1: Polymorphism, we rely on an interface to allow us to treat different objects that perform similar actions in the same way.</li> <li>Example 2: Assume a database access layer in your application which is used to perform CRUD operations on your DB. Let\u2019s consider that we implement a Service class which calls the DatabaseClient class (However practically we should have a DataAccessor class between Service and DatabaseClient). The DatabaseClient is concrete class programmed to access postgres DB. The DatabaseClient is a heavy duty class with all helper methods required to access the DB. Assume that the client decides to switch to a NoSQL database like MongoDB or add it as a secondary database for some specific purposes. This would lead to rewriting the DatabaseClient which would complicate things.</li> </ul>"},{"location":"CIS-18/oo_principles.html#strive-for-loosely-coupled-designs-between-objects-that-interact","title":"Strive for loosely coupled designs between objects that interact","text":"<ul> <li>Definition: A loosely coupled design is one in which classes are weakly associated with each other, and thus changes in one class least affect existence or function of another class.</li> <li>Example: Observer Design Pattern\u2019s Subject knows nothing about Observer implementations waiting for its notifications, just that they implement the Observer interface.</li> </ul>"},{"location":"CIS-18/oo_principles.html#open-closed-principle","title":"Open Closed Principle","text":"<ul> <li>The goal is to allow classes to be easily extended to incorporate new behavior without modifying existing code. If we are successful in accomplishing this, designs are resilient to change and flexible enough to take on new functionality and meet changing requirements.</li> <li>Open for extension, but the original code is closed for modification</li> </ul>"},{"location":"CIS-18/oo_principles.html#dependency-inversion-principle","title":"Dependency Inversion Principle","text":"<ul> <li>Depend on abstractions. Do not depend on concrete classes.</li> </ul>"},{"location":"CIS-18/oo_principles.html#principle-of-least-knowledge","title":"Principle of Least Knowledge","text":"<ul> <li>Talk only to your immediate friends.</li> <li>When you are designing a system, for any object, be careful of the number of classes it interacts with and also how it comes to interact with those classes.</li> <li>This principle prevents us from creating designs that have a large number of classes coupled together so that changes in one part of the system cascade to other parts.</li> <li>When you build a lot of dependencies between many classes, you are building a fragile system that will be costly to maintain and complex for others to understand.</li> </ul>"},{"location":"CIS-18/oo_principles.html#how-to-follow-principle-of-least-knowledge","title":"How to follow Principle of Least Knowledge","text":"<ul> <li>Invoke only methods that belong to:<ul> <li>The object itself</li> <li>Objects passed in as a parameter to the method</li> <li>Any object the method creates or instantiates</li> <li>Any components of the object</li> </ul> </li> </ul>"},{"location":"CIS-18/oo_principles.html#hollywood-principle","title":"Hollywood Principle","text":"<ul> <li>Don\u2019t call us, we\u2019ll call you.</li> <li>Guides us to put decision making in high-level modules that can decide how and when to call low-level modules.</li> </ul>"},{"location":"CIS-18/oo_principles.html#single-responsibility","title":"Single Responsibility","text":"<ul> <li>A class should have only one reason to change.</li> <li>Consider that Collections shouldn\u2019t both manage the collection and have the responsibility of traversing that collection.</li> </ul>"},{"location":"CIS-18/singleton_java.html","title":"Singleton java","text":""},{"location":"CIS-18/singleton_java.html#examples-of-different-singleton-design-pattern","title":"Examples of DIFFERENT Singleton Design Pattern","text":""},{"location":"CIS-18/singleton_java.html#eager-initialization","title":"Eager Initialization","text":"<pre><code>package edu.redwoods.singleton;\n\npublic class EagerInitializedSingleton {\n\nprivate static final EagerInitializedSingleton instance = new EagerInitializedSingleton();\n\n// private constructor to avoid client applications using the constructor\nprivate EagerInitializedSingleton(){}\n\npublic static EagerInitializedSingleton getInstance() {\nreturn instance;\n}\n}\n</code></pre>"},{"location":"CIS-18/singleton_java.html#pros","title":"Pros","text":"<ul> <li>Useful if Singleton utilizes minimal resources.</li> </ul>"},{"location":"CIS-18/singleton_java.html#cons","title":"Cons","text":"<ul> <li>Object is created even if client doesn\u2019t use it.</li> <li>No ability to handle exceptions.</li> <li>Reflection can destroy this Singleton implementation.</li> </ul>"},{"location":"CIS-18/singleton_java.html#static-block-initialization","title":"Static Block Initialization","text":"<pre><code>package edu.redwoods.singleton;\n\npublic class StaticBlockSingleton {\n\nprivate static StaticBlockSingleton instance;\n\nprivate StaticBlockSingleton(){}\n\n// static block initialization for exception handling\nstatic {\ntry {\ninstance = new StaticBlockSingleton();\n} catch (Exception e) {\nthrow new RuntimeException(\"Exception occurred in creating singleton instance\");\n}\n}\n\npublic static StaticBlockSingleton getInstance() {\nreturn instance;\n}\n}\n</code></pre>"},{"location":"CIS-18/singleton_java.html#pros_1","title":"Pros","text":"<ul> <li>Useful if Singleton utilizes minimal resources.</li> <li>Allows for exception handling.</li> </ul>"},{"location":"CIS-18/singleton_java.html#cons_1","title":"Cons","text":"<ul> <li>Object is created even if client doesn\u2019t use it.</li> <li>Reflection can destroy this Singleton implementation.</li> </ul>"},{"location":"CIS-18/singleton_java.html#lazy-initialization","title":"Lazy Initialization","text":"<pre><code>package edu.redwoods.singleton;\n\npublic class LazyInitializedSingleton {\n\nprivate static LazyInitializedSingleton instance;\n\nprivate LazyInitializedSingleton(){}\n\npublic static LazyInitializedSingleton getInstance() {\nif (instance == null) {\ninstance = new LazyInitializedSingleton();\n}\nreturn instance;\n}\n}\n</code></pre>"},{"location":"CIS-18/singleton_java.html#pros_2","title":"Pros","text":"<ul> <li>Initialized only when needed.</li> <li>Allows for exception handling.</li> </ul>"},{"location":"CIS-18/singleton_java.html#cons_2","title":"Cons","text":"<ul> <li>Not Thread-safe (i.e. would fail in multi-threaded code).</li> <li>Reflection can destroy this Singleton implementation.</li> </ul>"},{"location":"CIS-18/singleton_java.html#thread-safe-lazy-singleton","title":"Thread-Safe Lazy Singleton","text":"<pre><code>package edu.redwoods.singleton;\n\npublic class ThreadSafeSingleton {\n\nprivate static ThreadSafeSingleton instance;\n\nprivate ThreadSafeSingleton(){}\n\npublic static synchronized ThreadSafeSingleton getInstance() {\nif (instance == null) {\ninstance = new ThreadSafeSingleton();\n}\nreturn instance;\n}\n\n}\n</code></pre>"},{"location":"CIS-18/singleton_java.html#pros_3","title":"Pros","text":"<ul> <li>Initialized only when needed.</li> <li>Allows for exception handling.</li> <li>Thread-Safe</li> </ul>"},{"location":"CIS-18/singleton_java.html#cons_3","title":"Cons","text":"<ul> <li>Reduced performance in synchronization.</li> <li>Fails in Java 5 in certain scenarios where too many threads tried to get the instance of the singleton class simultaneously due to OLD Java memory model.</li> <li>Reflection can destroy this Singleton implementation.</li> </ul>"},{"location":"CIS-18/singleton_java.html#thread-safe-lazy-double-checked-locking-singleton","title":"Thread-Safe Lazy Double-Checked Locking Singleton","text":"<pre><code>package edu.redwoods.singleton;\n\npublic class ThreadSafeSingleton {\n\nprivate static ThreadSafeSingleton instance;\n\nprivate ThreadSafeSingleton(){}\n\npublic static ThreadSafeSingleton getInstance() {\nif (instance == null) {\nsynchronized (ThreadSafeSingleton.class) {\nif (instance == null) {\ninstance = new ThreadSafeSingleton();\n}\n}\n}\nreturn instance;\n}\n\n}\n</code></pre>"},{"location":"CIS-18/singleton_java.html#pros_4","title":"Pros","text":"<ul> <li>Initialized only when needed.</li> <li>Allows for exception handling.</li> <li>Thread-Safe</li> </ul>"},{"location":"CIS-18/singleton_java.html#cons_4","title":"Cons","text":"<ul> <li>Fails in Java 5 in certain scenarios where too many threads tried to get the instance of the singleton class simultaneously due to OLD Java memory model.</li> <li>Reflection can destroy this Singleton implementation.</li> </ul>"},{"location":"CIS-18/singleton_java.html#bill-pugh-singleton-implementation","title":"Bill Pugh Singleton Implementation","text":"<pre><code>package edu.redwoods.singleton;\n\npublic class BillPughSingleton {\n\nprivate BillPughSingleton(){}\n\nprivate static class SingletonHelper {\nprivate static final BillPughSingleton INSTANCE = new BillPughSingleton();\n}\n\npublic static BillPughSingleton getInstance() {\nreturn SingletonHelper.INSTANCE;\n}\n}\n</code></pre>"},{"location":"CIS-18/singleton_java.html#pros_5","title":"Pros","text":"<ul> <li>Initialized only when needed.</li> <li>Allows for exception handling.</li> <li>Thread-Safe</li> <li>Works well even in Java 5</li> </ul>"},{"location":"CIS-18/singleton_java.html#cons_5","title":"Cons","text":"<ul> <li>Reflection can destroy this Singleton implementation.</li> </ul>"},{"location":"CIS-18/singleton_java.html#enum-singleton","title":"Enum Singleton","text":"<pre><code>package edu.redwoods.singleton;\n\npublic enum EnumSingleton {\n\nINSTANCE;\n\npublic static void doSomething() {\n// do something\n}\n}\n</code></pre>"},{"location":"CIS-18/singleton_java.html#pros_6","title":"Pros","text":"<ul> <li>Enum guarantees single instantiation and global access.</li> <li>Thread-Safe</li> <li>Reflection CANNOT destroy this Singleton implementation.</li> </ul>"},{"location":"CIS-18/singleton_java.html#cons_6","title":"Cons","text":"<ul> <li>Created even if client doesn\u2019t use it.</li> </ul>"},{"location":"CIS-18/singleton_java.html#how-reflection-destroys-most-singleton-implementations","title":"How Reflection Destroys Most Singleton Implementations!","text":"<pre><code>ipackage edu.redwoods.singleton;\n\nimport java.lang.reflect.Constructor;\n\npublic class ReflectionSingletonTest {\n\npublic static void main(String[] args) {\nEagerInitializedSingleton instanceOne = EagerInitializedSingleton.getInstance();\nEagerInitializedSingleton instanceTwo = null;\ntry {\nConstructor[] constructors = EagerInitializedSingleton.class.getDeclaredConstructors();\nfor (Constructor constructor : constructors) {\n// This code will destroy the singleton pattern\nconstructor.setAccessible(true);\ninstanceTwo = (EagerInitializedSingleton) constructor.newInstance();\nbreak;\n}\n} catch (Exception e) {\ne.printStackTrace();\n}\nSystem.out.println(instanceOne.hashCode());\nSystem.out.println(instanceTwo.hashCode());\n}\n\n}\n</code></pre>"},{"location":"CIS-18/singleton_java.html#issues-with-serialization","title":"Issues with Serialization","text":"<ul> <li>Serialization is when we need to store an object to the file-system, or other storage media, for later retrieval.</li> <li>The de-serialization of the stored object creates a new instance, however. This defeats the idea of a Singleton.</li> </ul>"},{"location":"CIS-18/singleton_java.html#example-of-defeating-singleton-with-de-serialization","title":"Example of Defeating Singleton with De-serialization","text":"<pre><code>package edu.redwoods.singleton;\n\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.ObjectInput;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutput;\nimport java.io.ObjectOutputStream;\n\npublic class SingletonSerializedTest {\n\npublic static void main(String[] args) throws FileNotFoundException, IOException, ClassNotFoundException {\nSerializedSingleton instanceOne = SerializedSingleton.getInstance();\nObjectOutput out = new ObjectOutputStream(new FileOutputStream(\n\"filename.ser\"));\nout.writeObject(instanceOne);\nout.close();\n\n// de-serialize from file to object\nObjectInput in = new ObjectInputStream(new FileInputStream(\n\"filename.ser\"));\nSerializedSingleton instanceTwo = (SerializedSingleton) in.readObject();\nin.close();\n\nSystem.out.println(\"instanceOne hashCode=\"+instanceOne.hashCode());\nSystem.out.println(\"instanceTwo hashCode=\"+instanceTwo.hashCode());\n\n}\n\n}\n</code></pre>"},{"location":"CIS-18/singleton_java.html#how-to-fix-serialization-issue","title":"How to fix Serialization Issue","text":"<ul> <li>Add an override of readResolve method to your Singleton</li> </ul> <pre><code>protected Object readResolve() {\nreturn getInstance();\n}\n</code></pre>"},{"location":"CIS-18/sprint.html","title":"Sprint Planning","text":""},{"location":"CIS-18/sprint.html#agile-development","title":"Agile Development","text":""},{"location":"CIS-18/sprint.html#scrum-meetings","title":"Scrum Meetings!","text":""},{"location":"CIS-18/sprint.html#sprint-planning","title":"Sprint Planning","text":"<ul> <li>Frequency: 2 Week Development Cycle</li> </ul> Goal of Sprint Planning Meeting <ol> <li>Set expectations.</li> <li>Review the backlog, and cover upcoming tasks for the 2-week sprint.</li> <li>Teams should highlight any potential roadblocks that could delay progress. </li> </ol> Minimum set of Sprint Planning Questions <ul> <li>What did we learn at sprint review and sprint retrospective that needs to be considered in our planning conversations today?</li> <li>What is at the top of the product backlog?</li> <li>What do we need to know about these backlog items in order to fully commit to getting them done in the upcoming sprint?</li> <li>How much of the product backlog do we think we can complete in the upcoming sprint?</li> <li>Do we need more clarification on this feature?</li> <li>What is our confidence level regarding this (sprint backlog) as a reasonable plan for this sprint?</li> <li>How is this yet-to-build backlog item similar/relative to other known/completed work we have done in the past? How does this comparison help us estimate the relative size of the new work?</li> <li>What outside help will we need to succeed with our plans?</li> <li>What\u2019s the biggest risk that may prevent us from completing this sprint? </li> <li>Who is taking time off during the next sprint? How should we plan differently given the team\u2019s (adjusted) capacity?</li> </ul>"},{"location":"CIS-18/sprint.html#daily-stand-up","title":"Daily Stand-Up","text":"<ul> <li>Frequency: Daily Development Work</li> </ul> Goal of Daily Stand-Up Meeting <ol> <li>Each team member shares what they are working on and how it contributes to sprint goals</li> <li>Set the expectations for what will be worked on and if there is overlap</li> <li>Allows team members to request and get help on blockers</li> </ol> Minimum set of Daily Stand-Up Questions <ul> <li>Are we on track with the sprint goal?</li> <li>Are we working on the most important items?</li> <li>Do we have any new requests?</li> <li>What do we still need to learn in this sprint?</li> <li>Have we identified any new risks?</li> <li>Who would benefit from another pair of eyes on something?</li> <li>Who could use some help? </li> <li>Who has some time available to help?</li> </ul>"},{"location":"CIS-18/sprint.html#sprint-review","title":"Sprint Review","text":"<ul> <li>Frequency: End of 2 Week Sprint</li> </ul> Goal of Sprint Review Meeting <ol> <li>Discuss what the team has accomplished</li> <li>Collect actionable feedback to improve next sprints</li> </ol> Minimum set of Sprint Review Questions <ul> <li>What questions do you have? </li> <li>How would you use this product?</li> <li>What excites you about the product increment we reviewed? Why is that?</li> <li>How do you feel about the product increment we reviewed? Why is that?</li> <li>If you could change one thing about the product we\u2019ve built, what would you change? Why is that?</li> <li>Let\u2019s say one feature should be eliminated. Which feature gets your vote? Why did you choose this one?</li> <li>What\u2019s your favorite feature or characteristic about this product? Why is it your favorite?</li> <li>What do you really hate about this product? Why is that?</li> <li>What other product on the market should we learn from? Why is that?</li> <li>How can we improve future sprint reviews?</li> </ul>"},{"location":"CIS-18/sprint.html#sprint-retrospective","title":"Sprint Retrospective","text":"<ul> <li>Frequency: End of 2 Week Sprint, after Sprint Review</li> </ul> Goal of Sprint Retrospective Meeting <ol> <li>How the team accomplished sprint items (i.e. what worked, what didn\u2019t)</li> <li>Improve future sprint planning and process using sprint review feedback</li> </ol> Minimum set of Sprint Retrospective Questions <ul> <li>What did we do well\u2014that if we don\u2019t discuss we might forget?</li> <li>What didn\u2019t go so well?</li> <li>What are we feeling about the upcoming sprint now that we have identified these issues?</li> <li>What have we learned?</li> <li>What still puzzles us?</li> <li>What are the most important things we learned today?</li> <li>Does anyone have an \u201cappreciation\u201d to share with another team member?</li> <li>Where are we confused or unclear on any of the items we discussed today?</li> <li>Are we in agreement on what action item(s) we will take from this sprint retrospective into the upcoming sprint planning?</li> </ul>"},{"location":"CIS-18/sprint.html#example-14-day-sprint-diagram","title":"Example 14 Day Sprint Diagram","text":""},{"location":"CIS-18/state_java.html","title":"State java","text":""},{"location":"CIS-18/state_java.html#the-state-design-pattern","title":"The State Design Pattern","text":""},{"location":"CIS-18/state_java.html#client","title":"Client","text":"<pre><code>package edu.redwoods.state;\n\npublic class TVRemote {\n\npublic static void main(String[] args) {\n// State client 1 completely decoupled from states.\nTVContext context1 = new TVContext(true);\ncontext1.doAction(); // State transition 1\ncontext1.doAction(); // State transition 2, polymorphic behavior!!!\n\n// State client 2 where the client controls the states and transitions!\nState tvStartState = new TVStartState();\nState tvStopState = new TVStopState();\nTVContext context2 = new TVContext();\n\ncontext2.setState(tvStartState);\ncontext2.doAction();\ncontext2.setState(tvStopState);\ncontext2.doAction();\n\n// State client 3 where client sets up transitions, but they are automatic\nTVContext context3 = new TVContext();\nState tvStartState2 = new TVStartState(context3);\nState tvStopState2 = new TVStopState(context3, tvStartState2);\ncontext3.setState(tvStopState2);\ntvStartState2.setTransition(tvStopState2);\n\ncontext3.doAction();\ncontext3.doAction();\n}\n}\n</code></pre>"},{"location":"CIS-18/state_java.html#state-interface","title":"State Interface","text":"<pre><code>package edu.redwoods.state;\n\npublic interface State {\npublic void doAction();\npublic void setTransition(State state);\npublic void setContext(TVContext context);\npublic void transition();\n}\n</code></pre>"},{"location":"CIS-18/state_java.html#concrete-state","title":"Concrete State","text":"<pre><code>package edu.redwoods.state;\n\npublic class TVStartState implements State {\nprivate TVContext context;\nprivate State transition;\n\npublic TVStartState() {\nthis(null, null);\n}\n\npublic TVStartState(TVContext context) {\nthis(context, null);\n}\n\npublic TVStartState(TVContext context, State transition) {\nthis.transition = transition;\nthis.context = context;\n}\n\n@Override\npublic void doAction() {\nSystem.out.println(\"TV is turned ON\");\ntransition();\n}\n\n@Override\npublic void setTransition(State next) {\nthis.transition = next;\n}\n\n@Override\npublic void setContext(TVContext context) {\nthis.context = context;\n}\n\n@Override\npublic void transition() {\nif(this.context != null &amp;&amp; this.transition != null) {\nthis.context.setState(transition);\n}\n}\n}\n</code></pre> <pre><code>package edu.redwoods.state;\n\npublic class TVStopState implements State {\nprivate TVContext context;\nprivate State transition;\n\npublic TVStopState() {\nthis(null, null);\n}\n\npublic TVStopState(TVContext context) {\nthis(context, null);\n}\n\npublic TVStopState(TVContext context, State transition) {\nthis.transition = transition;\nthis.context = context;\n}\n\n@Override\npublic void doAction() {\nSystem.out.println(\"TV is turned OFF\");\ntransition();\n}\n\n@Override\npublic void setTransition(State next) {\nthis.transition = next;\n}\n\n@Override\npublic void setContext(TVContext context) {\nthis.context = context;\n}\n\n@Override\npublic void transition() {\nif(this.context != null &amp;&amp; this.transition != null) {\nthis.context.setState(transition);\n}\n}\n}\n</code></pre>"},{"location":"CIS-18/state_java.html#context","title":"Context","text":"<pre><code>package edu.redwoods.state;\n\npublic class TVContext {\nprivate State tvState;\npublic TVContext(boolean fullService) {\nState tvStartState = new TVStartState(this);\nState tvStopState = new TVStopState(this, tvStartState);\ntvStartState.setTransition(tvStopState);\nthis.tvState = tvStopState;\n}\npublic TVContext() {}\n\npublic TVContext(State initial) {\nthis.tvState = initial;\n}\n\npublic void setState(State state) {\nthis.tvState=state;\n}\n\npublic State getState() {\nreturn this.tvState;\n}\n\npublic void doAction() {\nthis.tvState.doAction();\n}\n}\n</code></pre>"},{"location":"CIS-18/template_method_java.html","title":"Template method java","text":""},{"location":"CIS-18/template_method_java.html#example-of-template-method-design-pattern","title":"Example of Template Method Design Pattern","text":""},{"location":"CIS-18/template_method_java.html#template-method-client","title":"Template Method Client","text":"<pre><code>package edu.redwoods.template;\n\npublic class HousingClient {\n\npublic static void main(String[] args) {\n\nHouseTemplate houseType = new WoodenHouse();\n\n//using template method\nhouseType.buildHouse();\nSystem.out.println(\"************\");\n\nhouseType = new GlassHouse();\n\nhouseType.buildHouse();\n}\n\n}\n</code></pre>"},{"location":"CIS-18/template_method_java.html#abstract-super-class","title":"Abstract Super Class","text":"<pre><code>package edu.redwoods.template;\n\npublic abstract class HouseTemplate {\n\n// Template method (i.e. the algorithm), **final** so subclasses can't override\npublic final void buildHouse(){\nbuildFoundation();\nbuildPillars();\nbuildWalls();\nbuildWindows();\nSystem.out.println(\"House is built.\");\n}\n\n// Default implementation (AKA **Hook** Methods!)\nprivate void buildWindows() {\nSystem.out.println(\"Building Glass Windows\");\n}\n\n// Parts of the algorithm that vary, so methods are implemented by sub-classes\npublic abstract void buildWalls();\npublic abstract void buildPillars();\n\nprivate void buildFoundation() {\nSystem.out.println(\"Building foundation with cement,iron rods and sand\");\n}\n}\n</code></pre>"},{"location":"CIS-18/template_method_java.html#template-method-sub-classes","title":"Template Method Sub-Classes","text":"<pre><code>package edu.redwoods.template;\n\npublic class WoodenHouse extends HouseTemplate {\n\n@Override\npublic void buildWalls() {\nSystem.out.println(\"Building Wooden Walls\");\n}\n\n@Override\npublic void buildPillars() {\nSystem.out.println(\"Building Pillars with Wood coating\");\n}\n\n}\n</code></pre> <pre><code>package edu.redwoods.template;\n\npublic class GlassHouse extends HouseTemplate {\n\n@Override\npublic void buildWalls() {\nSystem.out.println(\"Building Glass Walls\");\n}\n\n@Override\npublic void buildPillars() {\nSystem.out.println(\"Building Pillars with glass coating\");\n}\n\n}\n</code></pre>"},{"location":"CIS-18/user_story_intro.html","title":"User Story Intro","text":""},{"location":"CIS-18/user_story_intro.html#agile-development","title":"Agile Development","text":""},{"location":"CIS-18/user_story_intro.html#user-stories","title":"User Stories","text":""},{"location":"CIS-18/user_story_intro.html#qualities-of-a-good-user-story","title":"Qualities of a Good User Story","text":"<ol> <li>Independent<ul> <li>If they are independent, we can work on them without concern for story order.</li> <li>Not always possible</li> </ul> </li> <li>Negotiable<ul> <li>A good story must be able to change or adapt</li> <li>Used as an initial summary that can trigger new discussion, and should capture new information.</li> </ul> </li> <li>Valuable<ul> <li>User should perceive the user story as something important to the application.</li> <li>Helps establish story priority</li> </ul> </li> <li>Estimable<ul> <li>Must be able to estimate Time or Effort</li> <li>Depends on collaboration, skill and knowledge on the team</li> <li>Priority should be based on Value and Effort</li> <li>Effort estimation should be based on past user stories<ul> <li>e.g. If it took 2 weeks and 3 developers to create Login Feature</li> <li>Role Based Security, which is more difficult, can be estimated at 4 weeks<ul> <li>Anything longer than 2 weeks should be split into smaller stories</li> </ul> </li> </ul> </li> </ul> </li> <li>Small<ul> <li>Must fit in a 2 week sprint</li> <li>Easier to estimate time/effort</li> <li>Reduces risk</li> <li>Psychological impact of finishing something</li> </ul> </li> <li>Testable<ul> <li>Makes sure product matches promised deliverable.</li> <li>Adds 2 parts to User Story Template (Acceptance Criteria, Definition of Done)</li> </ul> </li> </ol>"},{"location":"CIS-18/user_story_intro.html#template","title":"Template:","text":"<ol> <li>As a (who wants to accomplish something)</li> <li>I want to (what they want to accomplish)</li> <li>So that (why they want to accomplish that thing)</li> <li>Acceptance Criteria - Metric of Story Progress<ul> <li>List of requirements at user or system level</li> <li>May also include system flow diagrams or sequence diagrams here.</li> <li>Must be specific to the User Story</li> <li>Must be met to ensure store is complete.</li> </ul> </li> <li>Definition of Done - Metric of Sprint Progress<ul> <li>List of criteria for ALL User Stories</li> <li>Sprint work only complete once all criteria are met</li> </ul> </li> </ol>"},{"location":"CIS-18/user_story_intro.html#example","title":"Example:","text":"<ol> <li>As a bank customer</li> <li>I want to withdraw money from an ATM</li> <li>So that I\u2019m not constrained by opening hours or lines at the teller\u2019s</li> <li>Acceptance Criteria<ul> <li>Pre-Condition: the user is a bank customer</li> <li>Pre-Condition: the user has an active ATM card and PIN</li> <li>The user can access the ATM with their ATM card and PIN</li> <li>If the user enters the wrong PIN.</li> <li>Then the user\u2019s card is rejected and returned.</li> <li>The user can enter how much money to withdraw</li> <li>The user takes cash and gets their card back</li> </ul> </li> <li>Definition of Done<ul> <li>ATM code is documented in UML diagrams</li> <li>ATM withdraw feature passes regression testing</li> <li>Help documentation is written</li> </ul> </li> </ol>"},{"location":"CIS-18/user_story_lesson.html","title":"User Story Lesson","text":""},{"location":"CIS-18/user_story_lesson.html#writing-effective-user-stories","title":"Writing Effective User Stories","text":""},{"location":"CIS-18/user_story_lesson.html#intro","title":"Intro","text":"Software Design <p>Breaking down what you want to build is incredibly important when it comes to software. Too often, we decide that we\u2019re going to build an application that does something specific without much upfront planning. This is where we can utilize writing stories to help us know what building blocks we\u2019ll need to create in order to accomplish our final end goal.</p>"},{"location":"CIS-18/user_story_lesson.html#learning-objectives","title":"Learning Objectives","text":"<ul> <li>Be able to describe app functionality with user stories</li> <li>Improve current and future project boards</li> <li>Define acceptance criteria for marking a user story complete</li> <li>Start aligning current workflow to professional dev workflows</li> </ul>"},{"location":"CIS-18/user_story_lesson.html#vocabulary","title":"Vocabulary","text":"<ul> <li>Agile workflow - a mode project management that uses short \u201csprints\u201d, flexibility, multidisciplinary teams, and rapid delivery to build a product</li> <li>Project board - organizes user stories, chores, and bugs showing at a glance where in its evolution a project/product is</li> <li>Features - overarching pieces of functionality</li> <li>User story - description of a single user flow in the application</li> <li>Chores - developer tasks that are not user stories (i.e. \u201cUpdate README\u201d, \u201cWrite documentation\u201d, etc) that get added as cards in the project board toward the end of a sprint</li> <li>Bugs - as bugs are found, new project board cards should be created in the project board to track them</li> <li>Sprint - a set and consistent period of time (usually two weeks) of concentrated and focused work with set goals</li> <li>Acceptance criteria - the predefined requirements that must be met in order to mark a user story complete</li> </ul>"},{"location":"CIS-18/user_story_lesson.html#what-is-a-user-story","title":"What is a user story?","text":"Start by telling a story <p>Once upon a time \u2026 With your project partners, choose a project from the list of projects proposed in class</p> <p>As a group, try to describe every possible action a user could take in this app/project!</p> <ul> <li>What is the action? (ex: logging in)</li> <li>What steps go into accomplishing this action? (ex: finding and clicking an input field, typing into it, etc)</li> <li>Why would the user want to do this? (ex: to view their personalized profile)</li> <li>Does this action allow them to take any other actions? (ex: go view their saved favorite items)</li> </ul> <p>Congrats! You just described several user flows through the application!</p> <p>We\u2019re going to spend the rest of the lesson learning to turn these user flows into an important tool: user stories.</p> <p>A user story describes a single user flow, including not just the steps that need to be taken, but also the motivation a user might have for pursuing that flow, as well as the expected results that tell the developer when the user story has been successfully accomplished.</p>"},{"location":"CIS-18/user_story_lesson.html#anatomy","title":"Anatomy","text":"<p>A good user story: * Is written in a consistent format * Exhibits a tiny chunk of functionality * Can be clearly demonstrated/verified * Represents 1/2 a work day of labor or less</p> <p>Here are two examples of ways to write a user story:</p> <ul> <li> <p>Template 1 (Simple) <pre><code>As a &lt;type of user&gt;, I want to &lt;execute some goal&gt; so that &lt;some reason&gt;\n</code></pre></p> </li> <li> <p>Template 2 (More complete) <pre><code>As a(n) [user type]\nIn order to [extract business value]\nWhen I [take some action]\n  (and [take some other action])\nThen I [observe an outcome]\n  (and I [observe another outcome])\n</code></pre></p> </li> </ul> <p>In a moment, we\u2019ll dive further into this. But let\u2019s take a moment and zoom out: why are we even talking about this?</p>"},{"location":"CIS-18/user_story_lesson.html#whats-the-point","title":"What\u2019s the point?","text":"<p>We\u2019re going over user stories for a few reasons:</p> <ol> <li>Most professional dev teams which use agile practices use project boards filled with user stories to build an application</li> <li>Clear user stories will help you begin to estimate the speed of your own work</li> <li>Reflecting on your user stories can help expose the biases you may have about your imagined users</li> <li>Strong user stories can help clarify and define what you need to test</li> </ol>"},{"location":"CIS-18/user_story_lesson.html#user-stories-in-the-real-world","title":"User stories in the real world","text":"<p>You\u2019ve probably heard about agile workflow. Agile could be an entire lesson unto itself, but for now, know these key points:</p> <ul> <li>Agile is defined by work completed in short sprints</li> <li>Progress and end goals are evaluated at the end of each sprint so work can pivot if necessary</li> <li>Rather than building an entire app and then delivering it, an app is built and delivered feature by feature (ideally most critical to least critical) and is continually under review and improvement</li> <li>Project boards are heavily used, with app features broken down into individual user stories</li> <li>Work for each sprint is divided up amongst a team through various means (assignment by ticket, tickets being given \u201cpoints\u201d according to estimated time for completion, etc)</li> </ul> <p>Out there in the real world, it\u2019s important to be familiar with user stories because they are a key part of how many teams assign work.</p>"},{"location":"CIS-18/user_story_lesson.html#writing-user-stories","title":"Writing user stories","text":""},{"location":"CIS-18/user_story_lesson.html#questions-to-ask-while-writing-user-stories","title":"Questions to ask while writing user stories","text":"<ul> <li>Who is the user you are focusing on? This should be defined</li> <li>What is the goal of the user in this story?</li> <li>What should happen when the user is successful in their goal?</li> <li>What should happen when the user isn\u2019t successful in their goal?</li> <li>What is the acceptance criteria for your user story?</li> </ul>"},{"location":"CIS-18/user_story_lesson.html#user-story-titles","title":"User story titles","text":"<p>Similar to writing a commit message, a user story title is a concise description of the user flow.</p> <p>The titles of your user stories should convey what is being worked on and what the user will be able to do once it has been accomplished. For example:</p> <ul> <li>As a user, I can visit the homepage</li> <li>As a user, I can view a movie\u2019s details</li> <li>As a user, I can update my profile information</li> </ul>"},{"location":"CIS-18/user_story_lesson.html#story-details","title":"Story details","text":"<p>In addition to a title, every single user story should include a description! The description will be detailed and include several items:</p> <ul> <li>The entire workflow of the user when attempting to accomplish the story\u2019s task</li> <li>Any additional resources that would clarify the user story (wireframes, etc)</li> <li>As much context as is needed so a developer could begin working on a random user story without needing to ask additional questions</li> </ul> Add Details to User Flows <p>Take the user story examples from above:</p> <ul> <li>As a user, I can visit the homepage</li> <li>As a user, I can view a movie\u2019s details</li> <li>As a user, I can update my profile information</li> </ul> <p>and flesh them out with additional information!</p> <ol> <li>What steps need to be taken to accomplish this task</li> <li>When the task is executed, what happens? What does the user see?</li> <li>How will a developer know when the user story has been successfully accomplished?</li> </ol>"},{"location":"CIS-18/user_story_lesson.html#acceptance-criteria","title":"Acceptance criteria","text":"<p>That final piece of information from the previous exercise can be hard to conceptualize! It\u2019s known as the acceptance criteria. It lets a developer know when that particular user story can be considered \u201ccompleted\u201d and finished.</p> User Story Full Template <ul> <li>The user story is a goal of the user.</li> <li>The acceptance criteria actually describe the steps the user would take to accomplish their goal.</li> <li>Acceptance criteria should read a lot like our descriptions when we TEST things. Keep this in mind for testing!!!</li> </ul>"},{"location":"CIS-18/user_story_lesson.html#user-story","title":"User Story","text":"<p>As a product manager, I want to score potential ideas, So that I can decide what to include on my product roadmap.</p>"},{"location":"CIS-18/user_story_lesson.html#acceptance-criteria_1","title":"Acceptance criteria","text":"<p>Scenario: The product manager adds potential ideas and ranks the best ideas based on benefit versus cost. Given that I have added two or more ideas and scored them using the Benefit vs Cost scoring model When I click the Rank button Then ideas are sorted with the top-scoring ideas at the top.</p>"},{"location":"CIS-18/week_08.html","title":"Week 8a - Pipeline Design Pattern","text":""},{"location":"CIS-18/week_08.html#the-pipeline-design-pattern","title":"The Pipeline Design Pattern","text":""},{"location":"CIS-18/week_08.html#classification","title":"Classification","text":"<ul> <li>Structural Design Pattern: Patterns that ease the design by identifying a simple way to realize relationships among entities.</li> </ul>"},{"location":"CIS-18/week_08.html#pattern-definition","title":"Pattern Definition","text":""},{"location":"CIS-18/week_08.html#pipeline-design-pattern","title":"Pipeline Design Pattern","text":"<ul> <li>Hard Definition: A linear, one-directional flow of payloads between a chain of processing elements arranged so that the output of each element is the input of the next.</li> <li>Easy Definition: A chain of Stages where the output of each Stage is the input to the next modifying the payload object at each stage.</li> </ul>"},{"location":"CIS-18/week_08.html#representations","title":"Representations","text":""},{"location":"CIS-18/week_08.html#mermaid-graph---pipeline-pattern","title":"Mermaid Graph - Pipeline Pattern","text":"<pre><code>classDiagram\nPipelineExClient --&gt; PipelineInterface\nStageInterface &lt;|-- PipelineInterface : extends\nPipelineInterface &lt;|-- Pipeline : implements\nProcessorInterface &lt;|-- ProcessorType : implements\nStageInterface &lt;|-- Stage1 : implements\nStageInterface &lt;|-- Stage2 : implements\nStageInterface --* Pipeline : Composition\nProcessorInterface --* Pipeline : Composition\nPipeline ..&gt; Payload : Dependency\nProcessorType ..&gt; Payload : Dependency\nStage1 ..&gt; Payload : Dependency\nStage2 ..&gt; Payload : Dependency\nclass StageInterface {\n&lt;&lt;interface&gt;&gt;\n        +apply(Payload payload) Payload\n}\nclass Stage1 {\n+apply(Payload payload) Payload\n}\nclass Stage2 {\n+apply(Payload payload) Payload\n}    class PipelineInterface {\n&lt;&lt;interface&gt;&gt;\n        +pipe(StageInterface stage) PipelineInterface\n+process(Payload payload) : Payload\n}\nclass Pipeline {\n-List&lt;StageInterface&gt; stages\n-ProcessorInterface processor\n+Pipeline(ProcessorInterface processor, List&lt;StageInterface&gt; stages)\n+pipe(StageInterface stage) PipelineInterface\n+process(Payload payload) : Payload\n+apply(Payload payload) Payload\n}\nclass ProcessorInterface {\n&lt;&lt;interface&gt;&gt;\n        +process(Payload payload, List&lt;StageInterface&gt; stages) : Payload\n}  class ProcessorType {\n+process(Payload payload, List&lt;StageInterface&gt; stages) : Payload\n}\nclass Payload {\n+Payload(Class&lt;T&gt; desiredType, Object result)\n+getResult(Class&lt;T&gt; desiredType) : &lt;T&gt; T\n+setResult(Class&lt;T&gt; desiredType, Object result)\n}\nclass PipelineExClient {\n}\n</code></pre>"},{"location":"CIS-18/week_08.html#mermaid-graph---pipeline-pattern-with-builder-pattern","title":"Mermaid Graph - Pipeline Pattern with Builder Pattern","text":"<pre><code>classDiagram\nPipelineExClient --&gt; PipelineInterface\nStageInterface &lt;|-- PipelineInterface : extends\nPipelineInterface &lt;|-- Pipeline : implements\nProcessorInterface &lt;|-- ProcessorType : implements\nStageInterface &lt;|-- Stage1 : implements\nStageInterface &lt;|-- Stage2 : implements\nStageInterface --* Pipeline : Composition\nProcessorInterface --* Pipeline : Composition\nPipeline ..&gt; Payload : Dependency\nProcessorType ..&gt; Payload : Dependency\nStage1 ..&gt; Payload : Dependency\nStage2 ..&gt; Payload : Dependency\nPipelineBuilderInterface &lt;|-- PipelineBuilder : implements\nStageInterface --* PipelineBuilder : Composition\nPipelineBuilder ..&gt; Pipeline\nclass StageInterface {\n&lt;&lt;interface&gt;&gt;\n        +apply(Payload payload) Payload\n}\nclass Stage1 {\n+apply(Payload payload) Payload\n}\nclass Stage2 {\n+apply(Payload payload) Payload\n}    class PipelineInterface {\n&lt;&lt;interface&gt;&gt;\n        +pipe(StageInterface stage) PipelineInterface\n+process(Payload payload) : Payload\n}\nclass Pipeline {\n-List&lt;StageInterface&gt; stages\n-ProcessorInterface processor\n+Pipeline(ProcessorInterface processor, List&lt;StageInterface&gt; stages)\n+pipe(StageInterface stage) PipelineInterface\n+process(Payload payload) : Payload\n+apply(Payload payload) Payload\n}\nclass ProcessorInterface {\n&lt;&lt;interface&gt;&gt;\n        +process(Payload payload, List&lt;StageInterface&gt; stages) : Payload\n}  class ProcessorType {\n+process(Payload payload, List&lt;StageInterface&gt; stages) : Payload\n}\nclass Payload {\n+Payload(Class&lt;T&gt; desiredType, Object result)\n+getResult(Class&lt;T&gt; desiredType) : &lt;T&gt; T\n+setResult(Class&lt;T&gt; desiredType, Object result)\n}\nclass PipelineExClient {\n}\nclass PipelineBuilderInterface {\n&lt;&lt;interface&gt;&gt;\n        +add(StageInterface stage) : PipelineBuilderInterface\n+build(ProcessorInterface) : PipelineInterface\n}\nclass PipelineBuilder {\n+add(StageInterface stage) : PipelineBuilderInterface\n+build(ProcessorInterface) : PipelineInterface\n}\n</code></pre>"},{"location":"CIS-18/week_08.html#uml","title":"UML","text":""},{"location":"CIS-18/week_08.html#pipeline-pattern","title":"Pipeline Pattern","text":""},{"location":"CIS-18/week_08.html#pipeline-pattern-with-builder-pattern","title":"Pipeline Pattern with Builder Pattern","text":""},{"location":"CIS-18/week_08.html#real-world-usages","title":"Real World Usages","text":""},{"location":"CIS-18/week_08.html#pipeline-pattern_1","title":"Pipeline Pattern","text":"<ul> <li>UNIX/Linux/Windows shells: Think command pipes!</li> <li>Data processing pipelines like Talend and SSIS</li> <li>Render farms for video processing.</li> <li>Map/Reduce is an fine-tuned application of this pattern.</li> </ul>"},{"location":"CIS-18/week_08.html#ideas-for-use","title":"Ideas for Use","text":"<ul> <li>Making API requests and parsing the result (JSON, XML, etc).</li> <li>Conversion tools translating CSV | JSON | SQL Query, etc.</li> <li>MP3 channel | MIDI | Device channel</li> <li>Host Scan (Result) | Vulnerability Map | Pen Test</li> <li>DB Query | JSON | Message Q | API Job</li> <li>Port Scan Job | Parallel Scan | Aggregator</li> </ul>"},{"location":"CIS-18/week_08.html#java-code-example","title":"Java Code Example","text":"<ul> <li>The Pattern Implemented</li> </ul>"},{"location":"CIS-18/week_08.html#main-take-aways-from-me","title":"Main Take-Aways from ME","text":"<ul> <li>Think of the Pipeline Pattern like an assembly line that takes a payload object, modifies it, and passes it onto the next Stage.<ul> <li>The Payload object is the one primary constant in all Stages.</li> <li>The payload is passed to each Stage of the Pipeline process until it complete or errors.</li> </ul> </li> <li>Stages could also be called Filters in the wild.</li> <li>The Pipeline pattern increases readability. ```java \u201cConsider a bunch of this\u2026\u201d \u2026 if(order.getStatus().equals(\u201csuccess\u201d)) {     this.getVendorAdapter().sendOrder(order); } \u2026 <pre><code>```java \"Versus\"\nPipelineInterface pipeline = new Pipeline()\n        .pipe(new CreateOrder())\n        .pipe(new ProcessPayment())\n        .pipe(new SendInvoice())\n        .pipe(new ExportOrder());\npipeline.process(order);\n</code></pre></li> <li>The Pipeline pattern increases testability</li> <li>The Pipeline patterns allow Pipeline Re-Use</li> <li>Handling Exceptions is trivial</li> <li>Single responsibility per stage making code re-use and modular code simpler.</li> <li>Adding a Builder Pattern allows for conditional Pipelines.</li> <li>Use this code when solving multi-stage problems.</li> </ul>"},{"location":"CIS-18/week_08.html#main-oop-principles-of-pipeline-pattern","title":"Main OOP Principles of Pipeline Pattern","text":"<ul> <li>Single Responsibility: Since each Stage does one and only one specific thing, this adheres to the rule of Single Responsibility in the strictest sense.</li> <li>Favors composition over inheritance: The Pipeline is composed of its Stage list and Pipeline processor rather than inheriting from them.</li> <li>Program to interfaces not Implementations: All of the concrete classes are dependent on implementing interfaces instead of inheritance. In addition, because the Pipeline class is also a StageInterface, built pipelines can be handed as Stages to other pipelines as re-usable pipelines.</li> </ul>"},{"location":"CIS-18/week_1.html","title":"Week 1 - Review","text":""},{"location":"CIS-18/week_1.html#how-do-you-learn","title":"How do you learn?","text":"<p>Learning Styles</p>"},{"location":"CIS-18/week_1.html#cis-12-review","title":"CIS-12 Review","text":""},{"location":"CIS-18/week_1.html#classes-vs-objects","title":"Classes VS Objects","text":"<ul> <li>A Class is a blueprint of an Object</li> <li>One Class can create MANY Objects via its Constructor(s) </li> <li>Constructor is a special method of a class that is (usually) public, has no return type, and named the same as the Class.</li> <li>Each Object has unique values assigned to NON-Static class attributes/fields/data members </li> <li>NON-Static Class methods are Instance or Object methods</li> <li>Static Class methods are class methods and are called by Class name and dot notation </li> <li>this is a keyword that refers to an object of type Class when inside a NON-static instance method of a class.</li> </ul>"},{"location":"CIS-18/week_1.html#packages","title":"Packages","text":"<ul> <li>A Package is just a fancy way of saying, Group of Related Classes</li> <li>Often thought of as a folder hierarchy and used to avoid naming conflicts<ul> <li>i.e. com.domain1.Box can be a different class than com.domain2.Box even though they have the same name because they have different package hierarchies/namespaces com.domain1 and com.domain2</li> </ul> </li> <li>Packages are often packaged as .jar files, which are really just zip files with some metadata.</li> <li>Classes in packages can be imported via the Java import statement.</li> <li>You can import a single class or multiple classes at the same time via import.</li> </ul>"},{"location":"CIS-18/week_1.html#diagrams","title":"Diagrams","text":""},{"location":"CIS-18/week_1.html#uml-unified-modeling-language","title":"UML (Unified Modeling Language)","text":"<ul> <li>Standardized modeling languages consisting of set of diagrams.</li> <li>Helps specify, visualize, and document software.</li> <li>Facilitates planning, communication, and sharing on dev teams.</li> <li>Represents best engineering practices.</li> <li>Mermaid.Live is a good free diagram tool.</li> </ul>"},{"location":"CIS-18/week_1.html#class-diagram-example","title":"Class Diagram Example","text":"classDiagram class WeatherStation WeatherStation : -URL url WeatherStation : -List~Display~ displays WeatherStation : -Gson gson WeatherStation : -float temperature WeatherStation : -float humidity WeatherStation : -float pressure WeatherStation : +WeatherStation() WeatherStation : +registerDisplay(display) WeatherStation : +removeDisplay(display) WeatherStation : +notifyDisplays() WeatherStation : +getTemperature() float WeatherStation : +getHumidity() float WeatherStation : +getPressure() float WeatherStation : +measure() class Display Display: -WeatherStation ws Display : update() Display : display() class CurrentConditions CurrentConditions: -WeatherStation ws CurrentConditions : -float temperature CurrentConditions : -float humidity CurrentConditions : +CurrentConditions(weatherstation) CurrentConditions : update() CurrentConditions : display() class StatisticsDisplay StatisticsDisplay: -WeatherStation ws StatisticsDisplay : -float temperatureMin StatisticsDisplay : -float temperatureMax StatisticsDisplay : -float temperatureTotal StatisticsDisplay : -int numReadings StatisticsDisplay : +StatisticsDisplay(weatherstation) StatisticsDisplay : update() StatisticsDisplay : display() class ForecastDisplay ForecastDisplay: -WeatherStation ws ForecastDisplay : -float currentPressure ForecastDisplay : -float lastPressure ForecastDisplay : +ForecastDisplay(weatherstation) ForecastDisplay : update() ForecastDisplay : display() class Client Client: -WeatherStation ws Client: -Display currentConditions Client: -Display statisticsDisplay Client: -Display forecastDisplay Client: +main(args) Display &lt;|.. CurrentConditions Display &lt;|.. StatisticsDisplay Display &lt;|.. ForecastDisplay Display --* WeatherStation Client --&gt; WeatherStation Client --&gt; Display"},{"location":"CIS-18/week_1.html#sequence-diagram-example","title":"Sequence Diagram Example","text":"<ul> <li>The Sequence Diagram models the interaction of objects, or services, based on a time sequence.</li> <li>Typically isolate these to a particular scenario.</li> <li>Use Cases or User Stories often translate directly to sequence diagrams.</li> </ul> sequenceDiagram     participant Client     participant Server     Note right of Server: Listen     Note left of Client: Connect     Client--&gt;&gt;+Server: SYN SENT - SYN K     Server--&gt;&gt;+Client: SYN RCVD SYN K, ACK J+1     Client--&gt;&gt;+Server: ESTABLISHED ACK K+1     Note right of Server: ESTABLISHED"},{"location":"CIS-18/week_1.html#gitgithub-workflows","title":"Git/GitHub Workflows","text":"<ul> <li>Review Git Workflow</li> <li>GitHub Actions<ul> <li>.github folder and workflows</li> <li>YAML</li> <li>Build System (Maven, Gradle)</li> <li>Variables / Secrets</li> </ul> </li> <li>GitHub Projects<ul> <li>Why projects exists Agile Development</li> <li>Custom Labels</li> <li>Issue Templates</li> </ul> </li> </ul>"},{"location":"CIS-18/week_1.html#references","title":"References","text":"<p>Overview of UML</p>"},{"location":"CIS-18/week_10.html","title":"Week 10 - Template Method Design Pattern","text":""},{"location":"CIS-18/week_10.html#the-template-method-design-pattern","title":"The Template Method Design Pattern","text":""},{"location":"CIS-18/week_10.html#classification","title":"Classification","text":"<ul> <li>Behavioral Design Pattern</li> </ul>"},{"location":"CIS-18/week_10.html#pattern-definition","title":"Pattern Definition","text":"<ul> <li>Hard Definition: Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm\u2019s structure.</li> <li>Easy Definition: Abstract Super class controls the algorithm, but delegates unique parts of the algorithm to sub-classes.</li> </ul>"},{"location":"CIS-18/week_10.html#representations","title":"Representations","text":""},{"location":"CIS-18/week_10.html#mermaid-graph---template-method-pattern","title":"Mermaid Graph - Template Method Pattern","text":"<pre><code>classDiagram\nClient --&gt; SuperClass\nSuperClass &lt;|-- ConcreteSubClass1\nSuperClass &lt;|-- ConcreteSubClass2\nclass Client {\n-SuperClass sc1\n}\nclass SuperClass {\n&lt;&lt;abstract&gt;&gt;\n+final templateMethod()\n+primitiveOperation1()\n+primitiveOperation2()\n+subclassOperation1()*\n+subclassOperation2()*\n+hook1()\n+hook2()\n}\nclass ConcreteSubClass1 {\n+subclassOperation1()\n+subclassOperation2()\n+primitiveOperation2()\n}\nclass ConcreteSubClass2 {\n+subclassOperation1()\n+subclassOperation2()\n+hook1()\n}\n</code></pre>"},{"location":"CIS-18/week_10.html#uml","title":"UML","text":""},{"location":"CIS-18/week_10.html#real-world-usages","title":"Real World Usages","text":"<ul> <li>Order processing algorithms: Consider a Brick-n-Mortar Store VS an Online Store<ul> <li>The basic order processing algorithm is: Select Items, Checkout, Pay, and Delivery, but how you select items, checkout, pay and deliver varies depending on the store type and its options.</li> </ul> </li> <li>All non-abstract methods of java.io.InputStream, java.io.OutputStream, java.io.Reader and java.io.Writer.</li> <li>All non-abstract methods of java.util.AbstractList, java.util.AbstractSet and java.util.AbstractMap.<ul> <li>Remember from the book, get and size are the abstract methods that need to be overridden for the template methods like contains.</li> </ul> </li> </ul>"},{"location":"CIS-18/week_10.html#java-code-example","title":"Java Code Example","text":"<ul> <li>Template Method Design Pattern</li> </ul>"},{"location":"CIS-18/week_10.html#main-take-aways-from-the-textbook","title":"Main Take-Aways from the textbook","text":"<ul> <li>A template method defines the steps of an algorithm, deferring to subclasses for the implementation of those steps.</li> <li>The Template Method Pattern gives us an important technique for code reuse.</li> <li>The template method\u2019s abstract class may define concrete methods, abstract methods, and hooks.</li> <li>Abstract methods are implemented by subclasses.</li> <li>Hooks are methods that do nothing or default behavior in the abstract class, but may be overridden in the subclass.</li> <li>To prevent subclasses from changing the algorithm in the template method, declare the template method as final.</li> <li>The Hollywood Principle guides us to put decision making in high- level modules that can decide how and when to call low-level modules.</li> <li>You\u2019ll see lots of uses of the Template Method Pattern in real-world code, but (as with any pattern) don\u2019t expect it all to be designed \u201cby the book.\u201d</li> <li>The Strategy and Template Method Patterns both encapsulate algorithms, the first by composition and the other by inheritance.</li> <li>Factory Method is a specialization of Template Method.</li> </ul>"},{"location":"CIS-18/week_10.html#main-oo-principles-of-template-method-pattern","title":"Main OO Principles of Template Method Pattern","text":"<ul> <li>Hollywood Principle: The Super-class calls the methods of its concrete subclasses. The Super-class decides the algorithm order, but the sub-classes decide how to fulfill the steps.</li> <li>Encapsulate what Varies: Encapsulate overall algorithms in superclass and the varying part of the algorithm in sub-classes..</li> <li>Program to Interfaces not Implementations: The super-class is an abstract class with abstract methods and hooks that need or can be implemented by its subclasses. Thus, the Super-class adheres to this principle and is used like an interface in the client.</li> <li>Open Closed Principle: HOOKS!!! They allow the sub-classes to modify the existing algorithm without changing the Super-class code.</li> </ul> Note <p>Violates the principle of Favor Composition over Inheritance, but it does it for a good reason, to control the algorithm, and provide code reuse.</p>"},{"location":"CIS-18/week_12.html","title":"Week 12 - Iterator and Composite Design Patterns","text":""},{"location":"CIS-18/week_12.html#the-iterator--composite-design-pattern","title":"The Iterator &amp; Composite Design Pattern","text":""},{"location":"CIS-18/week_12.html#classification","title":"Classification","text":""},{"location":"CIS-18/week_12.html#iterator-design-pattern","title":"Iterator Design Pattern","text":"<ul> <li>Behavioral Design Pattern</li> </ul>"},{"location":"CIS-18/week_12.html#composite-design-pattern","title":"Composite Design Pattern","text":"<ul> <li>Structural Design Pattern</li> </ul>"},{"location":"CIS-18/week_12.html#pattern-definition","title":"Pattern Definition","text":""},{"location":"CIS-18/week_12.html#iterator-design-pattern_1","title":"Iterator Design Pattern","text":"<ul> <li>Hard Definition: Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.</li> <li>Easy Definition: Traverses elements of a collection and removes that responsibility from the collection itself.</li> </ul>"},{"location":"CIS-18/week_12.html#composite-design-pattern_1","title":"Composite Design Pattern","text":"<ul> <li>Hard Definition: Compose object into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly.</li> <li>Easy Definition: Represents data relationships in an upside down tree (i.e. part-whole hierarchy)</li> </ul>"},{"location":"CIS-18/week_12.html#representations","title":"Representations","text":""},{"location":"CIS-18/week_12.html#mermaid-graph-iterator-design-pattern","title":"Mermaid Graph Iterator Design Pattern","text":"<pre><code>classDiagram\nIterator &lt;-- Client\nIterator &lt;|.. ConcreteIterator\nAggregate &lt;-- Client\nAggregate &lt;|.. ConcreteAggregate\nConcreteIterator &lt;-- ConcreteAggregate\nclass Client{\n}\nclass Iterator{\n&lt;&lt;interface&gt;&gt;\n        +hasNext()\n+next()\n+remove()\n}\nclass ConcreteIterator{\n+bool is_wild\n+run()\n}\nclass Aggregate{\n&lt;&lt;interface&gt;&gt;\n        +createIterator()\n}\nclass ConcreteAggregate{\n+createIterator()\n}\n</code></pre>"},{"location":"CIS-18/week_12.html#mermaid-graph-composite-design-pattern","title":"Mermaid Graph Composite Design Pattern","text":"<pre><code>classDiagram\nComponent &lt;-- Client\nComponent &lt;|-- Leaf\nComponent &lt;|-- Composite\nComposite *-- Component\nclass Client{\n}\nclass Component{\n&lt;&lt;abstract&gt;&gt;\n+operation()\n+add(Component)\n+remove(Component)\n+getChild(int)\n}\nclass Leaf{\n+operation()\n}\nclass Composite{\n+operation() : \"for(Component c : children) c.operation\"\n+add(Component)\n+remove(Component)\n+getChild(int)\n}\n</code></pre>"},{"location":"CIS-18/week_12.html#uml-iterator-design-pattern","title":"UML Iterator Design Pattern","text":""},{"location":"CIS-18/week_12.html#uml-composite-design-pattern","title":"UML Composite Design Pattern","text":""},{"location":"CIS-18/week_12.html#real-world-usages","title":"Real World Usages","text":""},{"location":"CIS-18/week_12.html#iterator","title":"Iterator","text":"<ul> <li>Of course the Java Collections framework!!!</li> <li>Scanner class!!! &lt;- WHAT!?! Wow, that makes sense!</li> </ul>"},{"location":"CIS-18/week_12.html#composite","title":"Composite","text":"<ul> <li>Document Object Model! Yes, the DOM of most documents and browsers use this design pattern!<ul> <li>HTML Elements are the leaf components!</li> <li>Document is like a Composite component! </li> </ul> </li> </ul>"},{"location":"CIS-18/week_12.html#java-code-example","title":"Java Code Example","text":"<ul> <li>Iterator Design Pattern</li> <li>Composite Design Pattern</li> </ul>"},{"location":"CIS-18/week_12.html#main-take-aways-from-the-textbook","title":"Main Take-Aways from the textbook","text":""},{"location":"CIS-18/week_12.html#iterator-design-pattern_2","title":"Iterator Design Pattern","text":"<ul> <li>An Iterator allows access to an aggregate\u2019s elements without exposing its internal structure.</li> <li>An Iterator takes the job of iterating over an aggregate and encapsulates it in another object.</li> <li>When using an Iterator, we relieve the aggregate of the responsibility of supporting operations for traversing its data.</li> <li>An Iterator provides a common interface for traversing the items of an aggregate, allowing you to use polymorphism when writing code that makes use of the items of the aggregate.</li> <li>The Iterable interface provides a means of getting an iterator and enables Java\u2019s enhanced for loop. Java Collections inherit from Iterable and most Java data-structures implement the Collection interface</li> </ul>"},{"location":"CIS-18/week_12.html#composite-design-pattern_2","title":"Composite Design Pattern","text":"<ul> <li>We should strive to assign only one responsibility to each class.</li> <li>The Composite Pattern allows clients to treat composites and individual objects uniformly.</li> <li>A Component is any object in a Composite structure. Components may be other composites or leaves.</li> <li>There are many design trade-offs in implementing Composite. You need to balance transparency and safety with your needs.</li> </ul>"},{"location":"CIS-18/week_12.html#main-oop-principles-of-iterator--composite-pattern","title":"Main OOP Principles of Iterator &amp; Composite Pattern","text":""},{"location":"CIS-18/week_12.html#iterator-design-pattern_3","title":"Iterator Design Pattern","text":"<ul> <li>Programs to the Interface, not the implementation. Client only needs to know that it has a Collection and can get an Iterator.</li> <li>Encapsulates what varies by encapsulating the iteration itself.</li> <li>Loosely Coupled design since it decouples the client from the implementation of the collection.</li> <li>Single Responsibility. The collection has only one reason to change because it doesn\u2019t have to support iteration internally, it just manages the collection.</li> <li>Polymorphism! Client iterates over different collections as if they are the same even though the underlying iteration implementations are significantly different.</li> <li>Open Closed Principle because the iterator allows the Collection code to be closed to modification, but open to adding iteration.</li> </ul>"},{"location":"CIS-18/week_12.html#composite-design-pattern_3","title":"Composite Design Pattern","text":"<ul> <li>Loosely Coupled design since it decouples the client from both the leaf and composite structure and provides a uniform way to traverse and access both.</li> <li>Programs to the Interface, not the implementation. Both the Leaf and Composite structures inherit or implement the common abstract class or interface.</li> <li>Favors Composition Over Inheritance because the Composite is literally composed of other Components to accomplish the uniform treatment of hierarchy elements.</li> </ul>"},{"location":"CIS-18/week_13.html","title":"Week 13 - State Design Pattern","text":""},{"location":"CIS-18/week_13.html#the-state-design-pattern","title":"The State Design Pattern","text":""},{"location":"CIS-18/week_13.html#classification","title":"Classification","text":"<ul> <li>Behavioral Design Pattern</li> </ul>"},{"location":"CIS-18/week_13.html#pattern-definition","title":"Pattern Definition","text":"<ul> <li>Hard Definition: Allow an Object to alter its behavior when its internal state changes. The object will appear to change its class.</li> <li>Easy Definition: Allows an Object to change its behavior via a state object.</li> </ul>"},{"location":"CIS-18/week_13.html#representations","title":"Representations","text":""},{"location":"CIS-18/week_13.html#mermaid-graph---state-pattern","title":"Mermaid Graph - State Pattern","text":"<pre><code>classDiagram\nState &lt;|.. ConcreteStateA\nState &lt;|.. ConcreteStateB\nState --* Context\nClient --&gt; Context\nclass State {\n&lt;&lt;interface&gt;&gt;\n        +handle()\n}\nclass ConcreteStateA{\n-Context context\n+handle()\n}\nclass ConcreteStateB {\n-Context context\n+handle()\n}\nclass Context{\n-State state\n+request(): \"state.handle()\"\n}\nclass Client {\n-Context context\n}\n</code></pre>"},{"location":"CIS-18/week_13.html#uml","title":"UML","text":""},{"location":"CIS-18/week_13.html#when-to-use","title":"When to use","text":"<ul> <li>You have an object that needs to have different behavior depending on its current state. Use it when the number of states is enormous, and your code frequently changes depending on the state.</li> <li>You can use the State pattern when you have a class filled with many conditions that control or alter how the class behaves according to the current values of the class fields. How you refactor to the State pattern is that you extract conditional branches into separate state classes. By doing that, you can separate the state-specific code from the main class.</li> <li>You can also use the State pattern if you have a lot of transitions between different classes\u2019 states</li> </ul>"},{"location":"CIS-18/week_13.html#real-world-usages","title":"Real World Usages","text":"<ul> <li>TCP/IP Connection: The TCP Connection can be in one of several states, TCP Established, TCP Listen, TCP Closed, etc. Thus, the State Pattern is used to transition and report the state of the connection.</li> <li>Other Stateful protocols.</li> </ul>"},{"location":"CIS-18/week_13.html#java-code-example","title":"Java Code Example","text":"<ul> <li>State Design Pattern</li> </ul>"},{"location":"CIS-18/week_13.html#main-take-aways-from-the-textbook","title":"Main Take-Aways from the textbook","text":"<ul> <li>The State Pattern allows an object to have many different behaviors that are based on its internal state (Polymorphism).</li> <li>Unlike a procedural state machine, the State Pattern represents each state as a full-blown class.</li> <li>The Context gets its behavior by delegating to the current state object it is composed with.</li> <li>By encapsulating each state into a class, we localize any changes that will need to be made.</li> <li>The State and Strategy Patterns have the same class diagram, but they differ in intent.</li> <li>The Strategy Pattern typically configures Context classes with a behavior or algorithm.</li> <li>The State Pattern allows Context to change its behavior as the state of the Context changes.</li> <li>State transitions can be controlled by the State classes or by the Context classes.</li> <li>Using the State Pattern will typically result in a greater number of classes in your design.</li> <li>State classes may be shared among Context instances.</li> </ul>"},{"location":"CIS-18/week_13.html#main-oo-principles-of-state-pattern","title":"Main OO Principles of State Pattern","text":"<ul> <li>Encapsulate What Varies States that vary often are encapsulated.</li> <li>Favor Composition over Inheritance The Context class composes States.</li> <li>Loosely Coupled: Context class separates the client from the State by relaying requests to the current concrete State and updating its own internal/composed state object.</li> </ul>"},{"location":"CIS-18/week_14.html","title":"Week 14 - Proxy Design Pattern","text":""},{"location":"CIS-18/week_14.html#the-proxy-design-pattern","title":"The Proxy Design Pattern","text":""},{"location":"CIS-18/week_14.html#classification","title":"Classification","text":"<ul> <li>Structural Design Pattern:<ul> <li>WHY?: Even though it changes the behavior as well, it fits more into the structural category because its intent is to structurally modify how objects are accessed, not how they behave.</li> </ul> </li> </ul>"},{"location":"CIS-18/week_14.html#pattern-definition","title":"Pattern Definition","text":"<ul> <li>Hard Definition: Provide a surrogate or placeholder for another object to control access to it.</li> <li>Easy Definition: Control access to an actual object where the real functionality lies.</li> </ul>"},{"location":"CIS-18/week_14.html#representations","title":"Representations","text":""},{"location":"CIS-18/week_14.html#mermaid-graph---state-pattern","title":"Mermaid Graph - State Pattern","text":""},{"location":"CIS-18/week_14.html#basic-proxy-pattern","title":"Basic Proxy Pattern","text":"<pre><code>classDiagram\nClient --&gt; Subject\nSubject &lt;|-- RealSubject\nSubject &lt;|-- Proxy\nProxy --&gt; RealSubject\nclass Client {\n\n}\nclass Subject {\n&lt;&lt;interface&gt;&gt;\n        +request1()\n+request2()\n}\nclass RealSubject {\n+request1()\n+request2()\n}\nclass Proxy {\n+request1() \"realSubject.request1();\"\n+request2() \"reqlSubject.request2();\"\n}\n</code></pre>"},{"location":"CIS-18/week_14.html#virtual-proxy-pattern--java-dynamic-proxy","title":"Virtual Proxy Pattern / Java Dynamic Proxy","text":"<pre><code>classDiagram\nClient --&gt; Subject\nSubject &lt;|-- RealSubject\nSubject &lt;|-- Proxy\nInvocationHandler &lt;|-- RealInvoicationHandler\nProxy --&gt; RealInvoicationHandler\nRealInvoicationHandler --&gt; RealSubject\nclass Client {\n}\nclass Subject {\n&lt;&lt;interface&gt;&gt;\n        +request1()\n+request2()\n}\nclass RealSubject {\n+request1()\n+request2()\n}\nclass Proxy {\n+request1() \"handler.invoke(Object proxy, Method method, Object[] args);\"\n+request2()\n}\nclass InvocationHandler {\n&lt;&lt;interface&gt;&gt;\n        +invoke() Object\n}\nclass RealInvoicationHandler {\n+invoke() Object \"realSubject.request?()\"\n}    </code></pre>"},{"location":"CIS-18/week_14.html#uml","title":"UML","text":""},{"location":"CIS-18/week_14.html#basic-proxy-uml","title":"Basic Proxy UML","text":""},{"location":"CIS-18/week_14.html#virtual-proxy--java-dynamic-proxy","title":"Virtual Proxy / Java Dynamic Proxy","text":""},{"location":"CIS-18/week_14.html#when-to-use","title":"When to use","text":"<ul> <li>When you want to treat remote objects as if they are local (Remote Proxy).<ul> <li>RMI, stubs hide communication between remote objects.</li> </ul> </li> <li>When you want to control access to a particular object or objects (Protection Proxy).<ul> <li>Check access permissions before allowing access.</li> </ul> </li> <li>When you want to delay or control how and when a large object gets created (Virtual Proxy).<ul> <li>Lazy-load / Lazy-instantiation</li> </ul> </li> <li>In ALL cases the proxy pattern serves as a placeholder for a real class/object.</li> </ul>"},{"location":"CIS-18/week_14.html#real-world-usages","title":"Real World Usages","text":"<ul> <li>Caching proxies like: HTML Cache, Squid, Silverpeak network cache.</li> <li>Remote proxies: Compute engines, Web Services built with GSON/Jackson, XML-RPC, etc.</li> <li>Virtual Proxy: Hibernate ORM with <code>@ManyToOne(fetch = FetchType.LAZY)</code> on it.</li> </ul>"},{"location":"CIS-18/week_14.html#java-code-example","title":"Java Code Example","text":"<ul> <li>Remote Proxy Design Pattern</li> <li>Virtual Proxy Design Pattern</li> <li>Protection Proxy Design Pattern</li> </ul>"},{"location":"CIS-18/week_14.html#main-take-aways-from-the-textbook","title":"Main Take-Aways from the textbook","text":"<ul> <li>The Proxy Pattern provides a representative for another object in order to control the client\u2019s access to it. There are a number of ways it can manage that access.</li> <li>A Remote Proxy manages interaction between a client and a remote object.</li> <li>A Virtual Proxy controls access to an object that is expensive to instantiate.</li> <li>A Protection Proxy controls access to the methods of an object based on the caller.</li> <li>Many other variants of the Proxy Pattern exist including caching proxies, synchronization proxies, firewall proxies, copy-on-write proxies, and so on.</li> <li>Proxy is structurally similar to Decorator, but the two patterns differ in their purpose.</li> <li>The Decorator Pattern adds behavior to an object, while Proxy controls access.</li> <li>Java\u2019s built in support for Proxy can build a dynamic proxy class on demand and dispatch all calls on it to a handler of your choosing.</li> <li>Like any wrapper, proxies will increase the number of classes and objects in your designs.</li> </ul>"},{"location":"CIS-18/week_14.html#main-oop-principles-of-state-pattern","title":"Main OOP Principles of State Pattern","text":"<ul> <li>Dependency Inversion Principle The stub  classes in the RMI remote proxy are examples of abstractions for the real-world object.</li> <li>Program to interfaces, not Implementations The Subject and Proxy implement a shared interface, thus making it so the client doesn\u2019t need to distinguish between them.</li> <li>Loosely Coupled: Client is oblivious to the fact that it is not interacting with the real object or how that communication takes place.</li> </ul>"},{"location":"CIS-18/week_15.html","title":"Week 15 - Compound Design Patterns","text":""},{"location":"CIS-18/week_15.html#compound-design-pattern","title":"Compound Design Pattern","text":""},{"location":"CIS-18/week_15.html#classification","title":"Classification","text":"<ul> <li>Compound: Multiple design patterns working together to solve a common problem.</li> </ul>"},{"location":"CIS-18/week_15.html#pattern-definition","title":"Pattern Definition","text":"<ul> <li>Definition: Multiple smaller design patterns working together to solve a common problem. It is only a compound design pattern if it has been used to solve multiple problems, not just because it uses multiple design patterns.</li> </ul>"},{"location":"CIS-18/week_15.html#representations","title":"Representations","text":"<ul> <li>MVC is a Combination of:<ul> <li>Composite: View -&gt; UI Composite Components (e.g. JavaFX Layouts) and UI Leaf Components (e.g. JavaFX button, labels, etc.)</li> <li>Strategy: View -&gt; Controller</li> <li>Observer: Model -&gt; Controller or View</li> </ul> </li> </ul>"},{"location":"CIS-18/week_15.html#strategy-review","title":"Strategy Review","text":"<p>The Strategy design pattern is a behavioral pattern that enables selecting an algorithm\u2019s behavior at runtime. It defines a family of algorithms, encapsulates each one in a class, and makes them interchangeable. This pattern allows the algorithm to vary independently from the clients that use it.</p>"},{"location":"CIS-18/week_15.html#key-components","title":"Key Components","text":"<ul> <li>Strategy Interface: Defines a common interface for all supported algorithms. Each concrete strategy implements this interface.</li> <li>Concrete Strategies: Encapsulates and implements the algorithm using the Strategy interface.</li> <li>Context: Composes a Strategy object and delegates calling strategy algorithm defined by a ConcreteStrategy.</li> </ul>"},{"location":"CIS-18/week_15.html#intent","title":"Intent","text":"<ul> <li>Encapsulate Algorithms: Encapsulate a family of algorithms, making them interchangeable.</li> <li>Runtime Selection: Allows the client to choose the appropriate algorithm at runtime.</li> <li>Separation of Concerns: Separate the algorithm\u2019s implementation from the client that uses it, promoting flexibility and reusability.</li> </ul> <p>The Strategy pattern allows you to easily switch between different algorithms or behaviors without altering the client code that uses them. Thus, making the system more flexible and easier to maintain.</p>"},{"location":"CIS-18/week_15.html#uml","title":"UML","text":"<pre><code>classDiagram\n    class Context {\n        - Strategy strategy\n        + setStrategy(Strategy strategy) void\n        + doSomething(data) void\n    }\n\n    class Strategy {\n        &lt;&lt;interface&gt;&gt;\n        + execute(data) void\n    }\n\n    class ConcreteStrategyA {\n        + execute(data) void\n    }\n\n    class ConcreteStrategyB {\n        + execute(data) void\n    }\n\n    class Client {\n        + createStrategies() void\n        + executeContext() void\n    }\n\n    Context *--&gt; Strategy : delegates execute()\n    Strategy &lt;|-- ConcreteStrategyA\n    Strategy &lt;|-- ConcreteStrategyB\n    Client --&gt; Context : creates and sets strategy\n    Client ..&gt; ConcreteStrategyA : creates\n    Client ..&gt; ConcreteStrategyB : creates\n</code></pre>"},{"location":"CIS-18/week_15.html#composite-review","title":"Composite Review","text":"<p>The Composite design pattern is a structural pattern that allows you to treat individual objects and compositions of objects uniformly. It creates an upside-down tree structure of leaf and composite objects, enabling clients to interact with both types of objects in the same way.</p>"},{"location":"CIS-18/week_15.html#key-components_1","title":"Key Components","text":"<ul> <li>Component: Defines the default behavior for the interface for all objects in the composition. It declares the interface for objects in the composition and (optionally) defines an interface for accessing a component\u2019s parent in the recursive structure, allowing it to be managed uniformly.</li> <li>Leaf: Represents the end objects of the composition. A leaf has no children and defines behavior for primitive objects in the composition.</li> <li>Composite: Defines behavior for components having children and implements child-related operations in the Component interface. It stores child components and implements operations that involve traversing or manipulating its children.</li> <li>Client: Manipulates objects in the composition through the Component interface.</li> </ul>"},{"location":"CIS-18/week_15.html#intent_1","title":"Intent","text":"<ul> <li>Uniform Interface: Provide a uniform interface for individual objects and compositions of objects.</li> <li>Tree Structure: Create a tree structure of objects where individual objects and compositions of objects are treated uniformly.</li> <li>Simplify Client Code: Allow clients to treat individual objects and compositions of objects consistently, simplifying the client code.</li> </ul> <p>The Composite pattern allows you to build complex hierarchies of objects while keeping the client code simple and flexible. This pattern is particularly useful when dealing with hierarchical/trees or recursive data structures, such as file systems, GUIs, and org-charts.</p>"},{"location":"CIS-18/week_15.html#uml_1","title":"UML","text":"<pre><code>classDiagram\n    class Component {\n        &lt;&lt;interface&gt;&gt;\n        + execute(): void\n    }\n\n    class Leaf {\n        + execute(): void\n    }\n\n    class Composite {\n        - List&lt;Component&gt; children\n        + execute(): void : \"for each child c c.execute()\"\n        + add(Component component): void\n        + remove(Component component): void\n        + getChildren(): List&lt;Component&gt;\n    }\n\n    class Client {\n        + useComposite(): void\n    }\n\n    Component &lt;|-- Leaf : implements\n    Component &lt;|-- Composite : implements\n    Composite o--&gt; Component : contains\n    Client --&gt; Component : creates\n</code></pre>"},{"location":"CIS-18/week_15.html#observer-review","title":"Observer Review","text":"<p>The Observer design pattern is a behavioral pattern that defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically. This pattern is also known as the Publish-Subscribe pattern.</p>"},{"location":"CIS-18/week_15.html#key-components_2","title":"Key Components","text":"<ul> <li>Subject (AKA Observable): Knows its observers and provides an interface for attaching and detaching Observer objects. It maintains a list of its observers and notifies them of any state changes.</li> <li>Observer: Defines an updating interface for objects that should be notified of changes in a subject. It provides an update method that is called when the Subject\u2019s state changes.</li> <li>ConcreteSubject: Stores the state of interest to ConcreteObserver and sends a notification to its observers when its state changes.</li> <li>ConcreteObserver: Maintains a reference to a ConcreteSubject object, stores state that should stay consistent with the Subject\u2019s, and implements the Observer updating interface to keep its state consistent with the Subject\u2019s.</li> </ul>"},{"location":"CIS-18/week_15.html#intent_2","title":"Intent","text":"<ul> <li>Decouple Subject and Observers: Establish a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.</li> <li>Dynamic Dependencies: Allow an object (i.e. Subject) to dynamically maintain a list of Observers that should be notified of any state changes.</li> <li>Loose Coupling: Promote loose coupling between the Subject and its Observers, making the system more flexible and easier to maintain.</li> </ul> <p>With the Observer pattern, you can create a system where objects can dynamically register to be notified of changes in other objects, enabling a more modular and decoupled design. This pattern is commonly used in event handling systems, model-view-controller (MVC) architectures, and other scenarios where objects need to stay synchronized with each other.</p>"},{"location":"CIS-18/week_15.html#uml_2","title":"UML","text":"<pre><code>classDiagram\n    class Subject {\n        &lt;&lt;interface&gt;&gt;\n        + register(Observer observer): void\n        + unregister(Observer observer): void\n        + notify(): void\n        + getState(): Object\n        + setState(Object state): void\n    }\n\n    class Observer {\n        &lt;&lt;interface&gt;&gt;\n        + update(): void\n        + setSubject(Subject subject): void\n    }\n\n    class ConcreteSubject {\n        - List~Observer~ observers\n        - Object state\n        + register(Observer observer): void\n        + unregister(Observer observer): void\n        + notify(): void \"for each Observer o o.update()\"\n        + getState(): Object\n        + setState(Object state): void\n    }\n\n    class ConcreteObserverA {\n        - Subject subject\n        + update(): void \"subject.getState(); doSomething()\"\n        + setSubject(Subject subject): void\n    }\n\n    class ConcreteObserverB {\n        - Subject subject\n        + update(): void\n        + setSubject(Subject subject): void\n    }\n\n    class Client {\n        - Subject subject\n                + main(): void \"o = new ConcreteObserverA();subject.register(o)\"\n    }\n\n    Subject &lt;|-- ConcreteSubject\n    Observer &lt;|-- ConcreteObserverA\n    Observer &lt;|-- ConcreteObserverB\n    ConcreteSubject o--&gt; Observer : maintains list\n    Client --&gt; Subject : creates\n    Client ..&gt; Observer : create and registers\n</code></pre>"},{"location":"CIS-18/week_15.html#bringing-it-all-together","title":"Bringing it all Together","text":"<ul> <li>Observer Pattern<ul> <li>Subject Interface: Represents the Model in MVC.</li> <li>ConcreteSubject: A specific Model implementation.</li> <li>Observer Interface: Represents the Views in MVC.</li> <li>ConcreteObserver: Specific Views that respond to changes in the Model.</li> </ul> </li> <li>Strategy Pattern<ul> <li>ViewStrategy Interface: Defines how Views are rendered.</li> <li>Concrete Strategies: Implement rendering logic (e.g., HTML, JSON).</li> </ul> </li> <li>Composite Pattern<ul> <li>Component Interface: Represents a generic View element.</li> <li>Leaf: Simple View components (e.g., a text field or button).</li> <li>Composite: Complex Views containing nested components.</li> </ul> </li> <li>Client: Routes requests, invokes the appropriate Controller, selects a ViewStrategy, and triggers the rendering pipeline.</li> </ul>"},{"location":"CIS-18/week_15.html#mermaid-graph---mvc-pattern","title":"Mermaid Graph - MVC Pattern","text":"<pre><code>classDiagram\n    class Subject {\n        &lt;&lt;interface&gt;&gt; ObserverPattern\n        + register(Observer observer): void\n        + unregister(Observer observer): void\n        + notifyObservers(): void\n        + getState(): Object\n        + setState(Object state): void\n    }\n\n    class ConcreteSubject {\n        &lt;&lt;ObserverPattern&gt;&gt;\n        - List~Observer~ observers\n        - Object state\n        + register(Observer observer): void\n        + unregister(Observer observer): void\n        + notifyObservers(): void\n        + getState(): Object\n        + setState(Object state): void\n    }\n\n    class Observer {\n        &lt;&lt;interface&gt;&gt; ObserverPattern\n        + update(): void\n        + setSubject(Subject subject): void\n    }\n\n    class ConcreteObserver {\n        &lt;&lt;ObserverPattern&gt;&gt;\n        - Subject subject\n        - Component viewRoot\n        + update(): void\n        + setSubject(Subject subject): void\n        + renderView(): void\n    }\n\n    class Component {\n        &lt;&lt;interface&gt;&gt; CompositePattern\n        + render(ViewStrategy strategy, HttpResponse response): void\n    }\n\n    class Leaf {\n        &lt;&lt;CompositePattern&gt;&gt;\n        + render(ViewStrategy strategy, HttpResponse response): void\n    }\n\n    class Composite {\n        &lt;&lt;CompositePattern&gt;&gt;\n        - List~Component~ children\n        + add(Component component): void\n        + remove(Component component): void\n        + getChildren(): List~Component~\n        + render(ViewStrategy strategy, HttpResponse response): void\n    }\n\n    class ViewStrategy {\n        &lt;&lt;interface&gt;&gt; StrategyPattern\n        + renderLeaf(String content, HttpResponse response): void\n        + renderCompositeStart(HttpResponse response): void\n        + renderCompositeEnd(HttpResponse response): void\n    }\n\n    class HTMLViewStrategy {\n        &lt;&lt;StrategyPattern&gt;&gt;\n        + renderLeaf(String content, HttpResponse response): void\n        + renderCompositeStart(HttpResponse response): void\n        + renderCompositeEnd(HttpResponse response): void\n    }\n\n    class JSONViewStrategy {\n        &lt;&lt;StrategyPattern&gt;&gt;\n        + renderLeaf(String content, HttpResponse response): void\n        + renderCompositeStart(HttpResponse response): void\n        + renderCompositeEnd(HttpResponse response): void\n    }\n\n    class Router {\n        + routeRequest(HttpRequest request, HttpResponse response): void\n    }\n\n    class Controller {\n        + setViewStrategy(ViewStrategy strategy): void\n        + renderView(Component view, HttpResponse response): void\n    }\n\n    Subject &lt;|-- ConcreteSubject\n    Observer &lt;|-- ConcreteObserver\n    Composite o-- Component : \"children\"\n    Component &lt;|-- Composite\n    Component &lt;|-- Leaf\n    ViewStrategy &lt;|-- HTMLViewStrategy\n    ViewStrategy &lt;|-- JSONViewStrategy\n    ConcreteObserver --&gt; Component : \"viewRoot\"\n</code></pre>"},{"location":"CIS-18/week_15.html#mvc-usage","title":"MVC Usage","text":"<ul> <li>View object is responsible for user input and output/presentation.</li> <li>The controller object implements the logic for the allowable transactions that can be performed on the model.</li> <li>The model object encapsulates the fine-grained business logic and data then notifies view/controller of updates.</li> </ul>"},{"location":"CIS-18/week_15.html#mvc-sequence-diagram","title":"MVC Sequence Diagram","text":"<pre><code>sequenceDiagram\nWeb User-&gt;&gt;+View: 1. Need some information\nView-&gt;&gt;+Controller: 2. Handle Event/User Request\nController-&gt;&gt;+Model: 3. Query Information\nModel--&gt;&gt;-Controller: 4. Result Set/Model Data\nController-&gt;&gt;+Controller: 5. Validation\nController--&gt;&gt;-View: 6. Update the View\nView--&gt;&gt;-Web User: 7. Notify User\n</code></pre>"},{"location":"CIS-18/week_15.html#real-world-usages","title":"Real World Usages","text":"<ul> <li>ASP.Net MVC</li> <li>Django</li> <li>Magento</li> <li>Spring </li> </ul>"},{"location":"CIS-18/week_15.html#java-code-example","title":"Java Code Example","text":"<ul> <li>MVC Example Design Pattern</li> </ul>"},{"location":"CIS-18/week_15.html#main-take-aways-from-the-textbook","title":"Main Take-Aways from the textbook","text":"<ul> <li>The Model View Controller (MVC) Pattern is a compound pattern consisting of the Observer, Strategy, and Composite Patterns.</li> <li>The model makes use of the Observer Pattern so that it can keep observers updated yet stay decoupled from them.</li> <li>The controller is the Strategy for the view. The view can use different implementations of the controller to get different behavior.</li> <li>The view uses the Composite Pattern to implement the user interface, which usually consists of nested components like panels, frames, and buttons.</li> <li>These patterns work together to decouple the three players in the MVC model, which keeps designs clear and flexible.</li> <li>The Adapter Pattern can be used to adapt a new model to an existing view and controller.</li> <li>MVC has been adapted to the web.</li> <li>There are many web MVC frameworks with various adaptations of the MVC pattern to fit the client/server application structure.</li> </ul>"},{"location":"CIS-18/week_15.html#main-oop-principles-of-state-pattern","title":"Main OOP Principles of State Pattern","text":"<ul> <li>All principles that apply to Strategy, Composite, and Observer Design Patterns. </li> <li>Loosely Coupled: Separation of concerns, the controller decouples the view from the model and vice versa.</li> </ul>"},{"location":"CIS-18/week_2.html","title":"Week 2 - Fundamental OOP Principles","text":""},{"location":"CIS-18/week_2.html#fundamental-object-oriented-principles","title":"Fundamental Object Oriented Principles","text":"The Beginning <ul> <li>Encapsulation</li> <li>Inheritance</li> <li>Abstraction</li> <li>Polymorphism</li> </ul>"},{"location":"CIS-18/week_2.html#encapsulation","title":"Encapsulation","text":"Definitions <p>Encapsulation: Group single responsibilities and make sure sensitive data is hidden from users.</p> <p>Below are the important things to remember about encapsulation:</p> <ul> <li>Private access modifiers should be used to protect instance variables you don\u2019t wish to change outside the class</li> <li>Getters and Setters should be used to protect how objects interact with sensitive data and variables.</li> <li>Encapsulation provides access control like R, W, or RW</li> <li>Flexible: Proper encapsulation means developers won\u2019t inadvertently change encapsulated code while working on another piece of code that utilizes it.</li> </ul>"},{"location":"CIS-18/week_2.html#inheritance","title":"Inheritance","text":"Definitions <p>Inheritance: Share/inherit instance variables/attributes/fields and methods from superclass (parent) to subclass (child). The child inherits attributes and methods from the parent.</p> <p>Below are the important things to remember about inheritance:</p> <ul> <li>Every Java class extends the class Object<ul> <li>Which means that every class we create inherits all the methods defined in the Object class (e.g. equals, hashCode, \u2026)</li> </ul> </li> </ul> -note <p>Here are all the methods that a Java class inherits from the Object class, which is the ROOT object hierarchy:</p> <ol> <li><code>public final native Class&lt;?&gt; getClass()</code>: Returns the runtime class of this Object.</li> <li><code>public native int hashCode()</code>: Returns a hash code value for the object.</li> <li><code>public boolean equals(Object obj)</code>: Indicates whether some other object is \u201cequal to\u201d this one.</li> <li><code>protected native Object clone() throws CloneNotSupportedException</code>: Creates and returns a copy of this object.</li> <li><code>public String toString()</code>: Returns a string representation of the object.</li> <li><code>public final native void notify()</code>: Wakes up a single thread that is waiting on this object\u2019s monitor.</li> <li><code>public final native void notifyAll()</code>: Wakes up all threads that are waiting on this object\u2019s monitor.</li> <li><code>public final native void wait(long timeout) throws InterruptedException</code>: Causes the current thread to wait until either another thread invokes the <code>notify()</code> method or the <code>notifyAll()</code> method for this object, or a specified amount of time has elapsed.</li> <li><code>public final void wait(long timeout, int nanos) throws InterruptedException</code>: Causes the current thread to wait until another thread invokes the <code>notify()</code> method or the <code>notifyAll()</code> method for this object, or a specified amount of time has elapsed.</li> <li><code>public final void wait() throws InterruptedException</code>: Causes the current thread to wait until another thread invokes the <code>notify()</code> method or the <code>notifyAll()</code> method for this object.</li> <li><code>protected void finalize() throws Throwable</code>: Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.</li> <li><code>public boolean equals(Object obj)</code>: Compares this object to the specified object. The default implementation is based on reference equality (<code>==</code>).</li> </ol> <ul> <li>To inherit from a class, you must extend it (i.e. <code>public class Engine extends Part</code>).</li> <li>Java can only inherit/extend a single parent (i.e. no multiple inheritance).</li> <li>Only public and protected methods can be inherited.<ul> <li>So if a method should be private but inheritable, it should be protected</li> </ul> </li> <li>To change inherited methods, they must be overridden by defining a new implementation in the child/subclass</li> <li>Mark a class final (i.e. <code>final class SomeClass { ... }</code>) if you don\u2019t want it to be inherited.</li> <li>Actual type of an object/instance dictates which method is executed (Show display from week 1 again).</li> <li>If the class to be created is a special case of an existing class, inheritance is OK</li> <li>If you notice that inheriting adds more responsibilities to a class, you should form multiple classes of the class. There should only be one reason for each class to change (Single Responsibility Principle).</li> </ul> <pre><code>// Example parent/super-class\npublic class Superclass {\n\nprivate String objectVariable; // Not visible to child/subclass\nprotected String objectName; // Visible to child/subclass, but not visible outside class.\n\npublic Superclass() {\nthis(\"Example\");  // Example of calling its own overloaded contructor\n}\n\npublic Superclass(String value) {\nthis.objectVariable = value;\n}\n\npublic String toString() {\nreturn this.objectVariable;\n}\n}\n</code></pre> <pre><code>// Example child/subclass\npublic class Subclass extends Superclass {\n\npublic Subclass() {\nsuper(\"Subclass\"); // Example of calling parent/super class constructor\n}\n\n@Override\npublic String toString() {\nreturn super.toString() + \"\\n  from the child!\";\n}\n}\n</code></pre>"},{"location":"CIS-18/week_2.html#abstraction","title":"Abstraction","text":"Definitions <p>Abstraction: The process of hiding certain details and showing only essential information to the user.</p> <p>We\u2019ve already talked about using methods to encapsulate and abstract algorithms, but abstraction in OOP is more broad, and can be accomplished with two different Java constructs: Abstract classes and Interfaces.</p> <p>Abstraction should be used frequently in APIs and libraries to hide implementation details that would only create complexity for the consumers of the API or library or to achieve class security by hiding instance variables or methods that the API/library designers know changing would change or alter desired functionality.</p>"},{"location":"CIS-18/week_2.html#abstract-class","title":"Abstract Class","text":"Definitions <p>Abstract class: A class that cannot be used to create objects because only some of the instance methods are implemented (i.e. not empty).</p> <p>Below are the important things to remember about Abstract Classes:</p> <ul> <li>They are defined by public abstract class \u2026</li> <li>Useful when there exists a clear concept, but that concept is not a good candidate for an object in itself.</li> <li>They can contain normal implemented methods (usually methods common to concept).</li> <li>Abstract methods are defined public abstract void methodName();</li> <li>They must be inherited from another class, and the abstract methods (i.e. empty methods / method signatures)  must be implemented to create objects.</li> <li>Inheritance is used to implement Abstract classes.</li> <li>Unlike Interfaces, Abstract Classes can contain Object/Instance variables and Constructors</li> </ul> <pre><code>// Example Abstract Class\npublic abstract class Operation {\n\nprivate String name;\n\npublic Operation(String name) {\nthis.name = name;\n}\n\npublic String getName() {\nreturn this.name;\n}\n\npublic abstract void execute(Scanner scanner);\n}\n</code></pre> <pre><code>// Example Inheriting from Abstract Class\npublic class PlusOperation extends Operation {\n\npublic PlusOperation() {\nsuper(\"PlusOperation\");\n}\n\n@Override\npublic void execute(Scanner scanner) {\nSystem.out.print(\"First number: \");\nint first = Integer.valueOf(scanner.nextLine());\nSystem.out.print(\"Second number: \");\nint second = Integer.valueOf(scanner.nextLine());\n\nSystem.out.println(\"The sum of the numbers is \" + (first + second));\n}\n}\n</code></pre>"},{"location":"CIS-18/week_2.html#interface","title":"Interface","text":"Definitions <p>Interface: A completely abstract class, meaning all method bodies are empty (i.e. not implemented). Interfaces define behavior (i.e. actions, verbs, methods) that are required from a class without implementing those behaviors (i.e. methods). </p> <p>Below are the important things to remember about Interfaces:</p> <ul> <li>They\u2019re defined the same way that regular Java classes are, but public interface \u2026 is used instead of public class \u2026</li> <li>An Interface Is a Contract of behavior (i.e. methods)<ul> <li>Interfaces define behavior through method names and their return values (AKA method signatures). </li> </ul> </li> <li>Interfaces are always abstract and public, so access modifiers are sometimes omitted. </li> <li>Interface attributes/fields are by default public, static and final</li> <li>An interface cannot contain a constructor because it cannot be used to create objects</li> <li>Interfaces must be implemented (kinda like inherited), but uses implements instead of extends. <ul> <li>On implementation of an interface, you must override all of its methods.</li> <li>You can implement multiple interfaces in one class.</li> </ul> </li> </ul> <pre><code>// Example Interface Declaration\npublic interface Readable {\nString read();\n}\n</code></pre> <pre><code>// Example Interface Implementation\npublic class TextMessage implements Readable {\nprivate String sender;\nprivate String content;\n\npublic TextMessage(String sender, String content) {\nthis.sender = sender;\nthis.content = content;\n}\n\npublic String getSender() {\nreturn this.sender;\n}\n\npublic String read() {\nreturn this.content;\n}\n}\n</code></pre> <pre><code>// Another Example Interface Implementation\npublic class Ebook implements Readable {\nprivate String name;\nprivate ArrayList&lt;String&gt; pages;\nprivate int pageNumber;\n\npublic Ebook(String name, ArrayList&lt;String&gt; pages) {\nthis.name = name;\nthis.pages = pages;\nthis.pageNumber = 0;\n}\n\npublic String getName() {\nreturn this.name;\n}\n\npublic int pages() {\nreturn this.pages.size();\n}\n\npublic String read() {\nString page = this.pages.get(this.pageNumber);\nnextPage();\nreturn page;\n}\n\nprivate void nextPage() {\nthis.pageNumber = this.pageNumber + 1;\nif(this.pageNumber % this.pages.size() == 0) {\nthis.pageNumber = 0;\n}\n}\n}\n</code></pre>"},{"location":"CIS-18/week_2.html#polymorphism","title":"Polymorphism","text":"Definitions <p>Polymorphism: The concept that many related classes can perform a single action in many different ways.</p> <p>Regardless of the type of the variable, the method that is executed is always chosen based on the actual type of the object. Objects are polymorphic, which means that they can be used via many different variable types (i.e. Dog -&gt; Animal -&gt; Object). The executed method always relates to the actual type of the object. This phenomenon is called polymorphism.</p> <p>Below are the important things to remember about Polymorphism:</p> <ul> <li>Polymorphism arises through inheritance when multiple related classes share common actions/methods, but those methods do different things. </li> <li>It is useful for code reuse of existing class methods and attributes.</li> <li>Objects/instances can be represented through all of its actual types.</li> </ul> <pre><code>class Animal {\npublic void animalSound() {\nSystem.out.println(\"The animal makes a sound\");\n}\n}\n\nclass Pig extends Animal {\npublic void animalSound() {\nSystem.out.println(\"The pig says: wee wee\");\n}\n}\n\nclass Dog extends Animal {\npublic void animalSound() {\nSystem.out.println(\"The dog says: bow wow\");\n}\n}\n\nclass Main {\npublic static void main(String[] args) {\n// Animal, Dog, and Pig are all treated the same\nAnimal[] animals = {new Animal(), new Pig(), new Dog()};\nfor( Animal animal : animals) {\n// But animalSound performs a different action\nanimal.animalSound();\n}\n}\n}\n</code></pre>"},{"location":"CIS-18/week_2.html#example-of-polymorphism-actual-type-dictates-action","title":"Example of Polymorphism: Actual Type Dictates Action","text":"<pre><code>import java.util.ArrayList;\nclass Main {\npublic static void main(String[] args) {\nArrayList&lt;Point&gt; points = new ArrayList&lt;&gt;();\npoints.add(new Point(4, 8));\npoints.add(new ColorPoint(1, 1, \"green\"));\npoints.add(new ColorPoint(2, 5, \"blue\"));\npoints.add(new Point3D(5, 2, 8));\npoints.add(new Point(0, 0));\n\nfor (Point p: points) {\nSystem.out.println(p);\n}\n}\n}\n</code></pre> <pre><code>// Point type in 2D coordinate system\npublic class Point {\n\nprivate int x;\nprivate int y;\n\npublic Point(int x, int y) {\nthis.x = x;\nthis.y = y;\n}\n\n// Distance between two points if you can only travel in the direction of the coordinate axes.\npublic int manhattanDistanceFromOrigin() {\nreturn Math.abs(x) + Math.abs(y);\n}\n\nprotected String location(){\nreturn x + \", \" + y;\n}\n\n@Override\npublic String toString() {\nreturn \"(\" + this.location() + \") distance \" + this.manhattanDistanceFromOrigin();\n}\n}\n</code></pre> <pre><code>// ColorPoint is identical to Point, but also has color\npublic class ColorPoint extends Point {\n\nprivate String color;\n\npublic ColorPoint(int x, int y, String color) {\nsuper(x, y);\nthis.color = color;\n}\n\n@Override\npublic String toString() {\nreturn super.toString() + \" color: \" + color;\n}\n}\n</code></pre> <pre><code>// Point3D has no color but can be derived from a 2D Point\npublic class Point3D extends Point {\n\nprivate int z;\n\npublic Point3D(int x, int y, int z) {\nsuper(x, y);\nthis.z = z;\n}\n\n@Override\nprotected String location() {\nreturn super.location() + \", \" + z;\n}\n\n// Distance between two points if you can only travel in the direction of the coordinate axes.\n@Override\npublic int manhattanDistanceFromOrigin() {\nreturn super.manhattanDistanceFromOrigin() + Math.abs(z);\n}\n}\n</code></pre> Walkthrough of Actual object Type Affecting Action (i.e. Polymorphism) <ol> <li>A call of toString in the class Point3D does not exist, so the superclass is next to be examined.</li> <li>A call of toString in the superclass point is found, so the code inside the implementation of that method is executed<ul> <li>So the exact code to be executed is <code>return \"(\"+this.location()+\") distance \"+this.manhattanDistanceFromOrigin();</code></li> <li>The method <code>location</code> is executed first</li> <li>Look for a definition of <code>location</code> in the class Point3D. It can be found, so its code is executed.</li> <li>This <code>location</code> calls the <code>location</code> of the superclass to calculate the result.</li> <li>Next we look for a definition of <code>manhattanDistanceFromOrigin</code> in the Point3D class. It\u2019s found and its code is then executed.</li> <li>Again, the method calls the similarly named method of the superclass during its execution.</li> </ul> </li> </ol>"},{"location":"CIS-18/week_3.html","title":"Week 3 - Observer Design Pattern","text":""},{"location":"CIS-18/week_3.html#the-observer-design-pattern","title":"The Observer Design Pattern","text":""},{"location":"CIS-18/week_3.html#classification","title":"Classification","text":"<ul> <li>Behavioral Design Pattern</li> </ul>"},{"location":"CIS-18/week_3.html#pattern-definition","title":"Pattern Definition","text":"<ul> <li>Define a one-to-many dependency between object so that when one object changes state, all its dependents are notified and updated automatically.</li> <li>In the observer pattern, the objects that watch on the state of another object are called Observers and the object that is being watched is called the Subject.</li> </ul>"},{"location":"CIS-18/week_3.html#representations","title":"Representations","text":""},{"location":"CIS-18/week_3.html#mermaid-graph","title":"Mermaid Graph","text":"<pre><code>classDiagram\nSubject &lt;|.. ConcreteSubject: implements\nObserver &lt;|.. ConcreteObserver: implements\nConcreteSubject \"0\" --&gt; \"*\" Observer : Association\nConcreteObserver \"0\" --&gt; \"*\" Subject : Association\nclass Observer{\n&lt;&lt;interface&gt;&gt;\n        +update(): void\n+setSubject(Subject): void\n}\nclass ConcreteObserver{\n+update(): void\n+setSubject(Subject): void\n}\nclass Subject{\n&lt;&lt;interface&gt;&gt;\n        +registerObserver(Observer):void\n+unregisterObserver(Observer):void\n+notifyObservers():void\n+getState():Object\n+setState(Object):void\n}\nclass ConcreteSubject{\n+registerObserver(Observer):void\n+unregisterObserver(Observer):void\n+notifyObservers():void\n+getState():Object\n+setState(Object):void\n}\n</code></pre>"},{"location":"CIS-18/week_3.html#uml","title":"UML","text":""},{"location":"CIS-18/week_3.html#usage","title":"Usage","text":"<ul> <li>Useful when you are interested in the state of an object and want to get notified whenever there is any change.</li> </ul>"},{"location":"CIS-18/week_3.html#real-world-usages","title":"Real World Usages","text":"<ul> <li>Model-View-Controller (MVC) frameworks use Observer: Model is the Subject and Views are Observers that can register to get notified of any change to the model. </li> <li>Java Message Service (JMS) uses Observer+Mediator: To allow applications to subscribe and publish data to other applications.</li> <li>Javascript Events use Observer: inputs as Subjects with functions as Listeners.</li> <li>Many GUI libraries including Swing and JavaFX use Observer: Components are the Subject allowing add/remove listeners, which are the Observers.</li> </ul>"},{"location":"CIS-18/week_3.html#application-to-my-real-world-application","title":"Application to my Real World Application","text":"<ul> <li>Application: ETL Pipeline</li> <li>Pattern Application: Observe the progress if the Payload through the Stages of a Pipeline</li> <li>Breakdown: Subject is the Pipeline that will notify Progress observers at the beginning or ending of each stage. Progress observers will be notified of the input or output at each stage and be able to: Report statistical progress, Trigger other pipelines with observed output at a particular stage, thus allowing for threaded Pipeline runs.</li> </ul>"},{"location":"CIS-18/week_3.html#java-code-example","title":"Java Code Example","text":"<p>Observer Design Pattern</p>"},{"location":"CIS-18/week_3.html#main-take-aways-from-the-textbook","title":"Main Take-Aways from the textbook","text":"<ul> <li>The Observer Pattern defines a one-to-many relationship between objects.</li> <li>Subjects update Observers using a common interface.</li> <li>Observers of any concrete type can participate in the pattern as long as they implement the Observer interface.</li> <li>Observers are loosely coupled in that the Subject knows nothing about them, other than that they implement the Observer interface.</li> <li>You can push or pull data from the Subject when using the pattern (pull is considered more \u201ccorrect\u201d).</li> <li>The Observer Pattern is related to the Publish/Subscribe Pattern, which is for more complex situations with multiple Subjects and/or multiple message types.</li> <li>The Observer Pattern is a commonly used pattern, and we\u2019ll see it again when we learn about Model-View-Controller.</li> </ul>"},{"location":"CIS-18/week_3.html#main-oo-principles-of-observer-pattern","title":"Main OO Principles of Observer Pattern","text":"<ul> <li>Strive for loosely coupled designs<ul> <li>Subject knows very little about observers relying on its data.</li> </ul> </li> <li>Encapsulate what Varies<ul> <li>The state of the Subject and number/type of Observers vary, and both are encapsulated in separate classes.</li> <li>We can add Observers dependent on the Subject without having to change the subject.</li> </ul> </li> <li>Program to an Interface not an Implementation<ul> <li>Both Subject and Observer use interfaces allowing both to keep generic references in our concrete implementations. This lends to loose coupling.</li> </ul> </li> <li>Favor composition over inheritance<ul> <li>The Subject maintains a List, which is composition, and the Observers maintain a reference to the Subject, which is also composition. No inheritance hierarchy exists."},{"location":"CIS-18/week_4.html","title":"Week 4 - Decorator Design Pattern","text":""},{"location":"CIS-18/week_4.html#the-decorator-design-pattern","title":"The Decorator Design Pattern","text":""},{"location":"CIS-18/week_4.html#classification","title":"Classification","text":"<ul> <li>Structural Design Pattern</li> </ul>"},{"location":"CIS-18/week_4.html#pattern-definition","title":"Pattern Definition","text":"<ul> <li>Attach additional responsibilities to an object dynamically.<ul> <li>Think of a decorator WRAPPING around some other object or method.</li> </ul> </li> <li>Decorators provide a flexible alternative to sub-classing for extending functionality.</li> <li>Open/Close Principle: Open for extension and closed to modification.<ul> <li>Decorator allows for this seemingly contradictory goals, but be CHOOSY when you use it because it can lead to costly, hard-to-understand code.</li> </ul> </li> <li>The decorator adds its own behavior before and/or after delegating to the object it decorates to do the rest of the job.</li> </ul>"},{"location":"CIS-18/week_4.html#representations","title":"Representations","text":""},{"location":"CIS-18/week_4.html#mermaid-graph","title":"Mermaid Graph","text":"<pre><code>classDiagram\nConcreateComponent ..|&gt; Component : implements\nComponentDecorator ..|&gt; Component : implements\nConcreteDecoratorA --|&gt; ComponentDecorator : extends\nConcreteDecoratorB --|&gt; ComponentDecorator : extends\nComponentDecorator *-- Component : composition\nclass Component{\n&lt;&lt;interface&gt;&gt;\n        +methodA()\n+methodB()\n}\nclass ConcreateComponent{\n+ConcreateComponent()\n+methodA()\n+methodB()\n}\nclass ComponentDecorator{\nComponent wrappedComponent\nComponentDecorator(Component)\n+methodA()\n+methodB()\n}\nclass ConcreteDecoratorA{\n+ConcreteDecoratorA(Component)\n+methodA()\n+methodB()\n+newBehavior()\n}\nclass ConcreteDecoratorB{\nObject newState\n+ConcreteDecoratorB(Component)\n+methodA()\n+methodB()\n}\n</code></pre>"},{"location":"CIS-18/week_4.html#uml","title":"UML","text":"<ul> <li>Decorated class can be interface, abstract, or a regular class</li> <li>Inheritance is used, but only for type matching if its an abstract or regular class</li> <li>New behavior is gained through composition, not inheritance.</li> <li>New behavior can be added before, or after in decorated objects methods.</li> </ul>"},{"location":"CIS-18/week_4.html#usage","title":"Usage","text":"<ul> <li>Useful when you need to add functionality to another class or object but you can\u2019t, or don\u2019t want to, modify the code of the existing object.</li> <li>When you need an object where functionality needs to be added or removed whimsically (licensed versus unlicensed features, perhaps!).</li> <li>To avoid subclass explosion if a large number of independent features need to be supported and sub-classing to support every combination would lead to class explosion.</li> </ul>"},{"location":"CIS-18/week_4.html#real-world-usages","title":"Real World Usages","text":"<ul> <li>java.io package uses decorators to decorate streams of data. Book example, ZipInputStream(BufferedInputStream(FileInputStream))<ul> <li>FileInputStream, StringBufferInputStream, ByteArrayInputStream are the concrete components of the Inputstream interface.</li> <li>ZipInputStream, BufferedInputStream are the concrete decorators of the FilterInputStream, which is the component decorator.</li> </ul> </li> <li>Adding authentication and authorization to a method or object is a great use for a decorator.</li> <li>Adding encryption and decryption to existing code</li> <li>Adding logging/auditing to existing code</li> <li>Adding a testing framework to existing code for pre and post conditions.</li> <li>Map/Reduce decorators to map and reduce a stream of input for data analytics.</li> </ul>"},{"location":"CIS-18/week_4.html#application-to-my-real-world-application","title":"Application to my Real World Application","text":""},{"location":"CIS-18/week_4.html#java-code-example","title":"Java Code Example","text":"<p>Decorator Design Pattern</p>"},{"location":"CIS-18/week_4.html#main-take-aways-from-the-textbook","title":"Main Take-Aways from the textbook","text":"<ul> <li>Inheritance is usually NOT the best way to extend design.</li> <li>Build code that can be expanded, but without modifying existing code.</li> <li>Composition and delegation is a great way to add new runtime behavior.</li> <li>Avoid subclass explosion with the Decorator Pattern when you have many new features you need to add.</li> <li>Because decorators implement or inherit the base type, you can wrap as many as you want around each-other.</li> <li>Overuse of decorators can make code more cumbersome.</li> </ul>"},{"location":"CIS-18/week_4.html#main-oop-principles-of-observer-pattern","title":"Main OOP Principles of Observer Pattern","text":"<ul> <li>Open-Closed Principle<ul> <li>Open for extension and closed for modification.</li> </ul> </li> </ul>"},{"location":"CIS-18/week_5.html","title":"Week 5 - Factory Design Pattern","text":""},{"location":"CIS-18/week_5.html#the-factory-design-pattern","title":"The Factory Design Pattern","text":""},{"location":"CIS-18/week_5.html#classification","title":"Classification","text":"<ul> <li>Creational Design Pattern</li> </ul>"},{"location":"CIS-18/week_5.html#pattern-definition","title":"Pattern Definition","text":""},{"location":"CIS-18/week_5.html#factory-method","title":"Factory Method","text":"<ul> <li>Define an interface for creating an object, but let sub-classes decide which class to instantiate. Factory Method lets a class defer instantiation to sub-classes.</li> </ul>"},{"location":"CIS-18/week_5.html#abstract-factory","title":"Abstract Factory","text":"<ul> <li>Provide an interface for creating families of related or dependent objects without specifying their concrete classes.</li> </ul>"},{"location":"CIS-18/week_5.html#representations","title":"Representations","text":""},{"location":"CIS-18/week_5.html#mermaid-graph","title":"Mermaid Graph","text":""},{"location":"CIS-18/week_5.html#factory-method_1","title":"Factory Method","text":"<pre><code>classDiagram\nProduct &lt;|-- ConcreteProduct : implements\nCreator &lt;|-- ConcreteCreator : extends\nConcreteCreator --&gt; ConcreteProduct\nclass Product{\n&lt;&lt;interface&gt;&gt;\n    }\n    class ConcreteProduct{\n}    class Creator{\n&lt;&lt;abstract&gt;&gt;\n+factoryMethod(): Product\n+otherOperations(): void\n}\nclass ConcreteCreator{\n+factoryMethod(): ConcreteProduct\n}\n</code></pre>"},{"location":"CIS-18/week_5.html#abstract-factory_1","title":"Abstract Factory","text":"<pre><code>classDiagram\nAbstractProductA &lt;|-- ConcreteProductA1 : implements\nAbstractProductA &lt;|-- ConcreteProductA2 : implements\nAbstractProductB &lt;|-- ConcreteProductB1 : implements\nAbstractProductB &lt;|-- ConcreteProductB2 : implements\nAbstractFactory &lt;|-- ConcreteFactory1 : implements\nAbstractFactory &lt;|-- ConcreteFactory2 : implements\nClient --&gt; AbstractFactory\nClient --&gt; AbstractProductA\nClient --&gt; AbstractProductB\nConcreteFactory1 --&gt; ConcreteProductA1\nConcreteFactory1 --&gt; ConcreteProductB1\nConcreteFactory2 --&gt; ConcreteProductA2\nConcreteFactory2 --&gt; ConcreteProductB2    class AbstractProductA{\n&lt;&lt;interface&gt;&gt;\n    }\n    class ConcreteProductA1{ }\nclass ConcreteProductA2{ }\nclass AbstractProductB{\n&lt;&lt;interface&gt;&gt;\n    }\n    class ConcreteProductB1{\n}\nclass ConcreteProductB2{  }    class AbstractFactory{\n&lt;&lt;interface&gt;&gt;\n      +createProductA(): AbstractProductA\n+createProductB(): AbstractProductB\n}\nclass ConcreteFactory1{\n+createProductA(): ConcreteProductA1\n+createProductB(): ConcreteProductB1\n}\nclass ConcreteFactory2{\n+createProductA(): ConcreteProductA2\n+createProductB(): ConcreteProductB2\n}\n</code></pre>"},{"location":"CIS-18/week_5.html#uml","title":"UML","text":""},{"location":"CIS-18/week_5.html#factory-method_2","title":"Factory Method","text":""},{"location":"CIS-18/week_5.html#abstract-factory_2","title":"Abstract Factory","text":""},{"location":"CIS-18/week_5.html#usage","title":"Usage","text":""},{"location":"CIS-18/week_5.html#factory-method_3","title":"Factory Method","text":"<ul> <li>The factory method design pattern is used when we have a superclass with multiple sub-classes and based on input, we need to return one of the sub-class. This pattern takes out the responsibility of the instantiation of a class from the client program to the factory class.</li> <li>Super class in factory design pattern can be an interface, abstract class or a normal java class</li> </ul>"},{"location":"CIS-18/week_5.html#abstract-factory_3","title":"Abstract Factory","text":"<ul> <li>Similar to the Factory Method pattern, BUT the Abstract Factory pattern, gets rid of the factory method\u2019s switch/if-else block and uses a class for each product sub-class. Then an Abstract Factory class that will return the sub-class based on the input factory class. </li> </ul>"},{"location":"CIS-18/week_5.html#real-world-usages","title":"Real World Usages","text":"<ul> <li>Nearly all frameworks that allow you to do things like swap out the database, cache, or other backend being used for data storage and retrieval. Spring, laravel, etc.</li> </ul>"},{"location":"CIS-18/week_5.html#application-to-my-real-world-application","title":"Application to my Real World Application","text":"<ul> <li>Use a factory method pattern to build different processors for my pipelines depending on user input. Maybe I want a stateless pipeline, or maybe I want a stateful pipeline. Maybe I\u2019d like a pipeline that gets interrupted if an error occurs (Interruptable pipeline).</li> </ul>"},{"location":"CIS-18/week_5.html#java-code-example","title":"Java Code Example","text":"<ul> <li>Factory Method Design Pattern</li> <li>Abstract Factory Design Pattern</li> </ul>"},{"location":"CIS-18/week_5.html#main-take-aways-from-the-textbook","title":"Main Take-Aways from the textbook","text":"<ul> <li>All factory patterns promote loose coupling by reducing the dependency of your application on concrete classes.</li> <li>The intent of Factory Method is to allow a class to defer instantiation to its subclasses.</li> <li>The intent of Abstract Factory is to create families of related objects without having to depend on their concrete classes.</li> <li>Factories are a powerful technique for coding to abstractions, not concrete classes.</li> <li>The Dependency Inversion Principle guides us to avoid dependencies on concrete types and to strive for abstractions.</li> </ul>"},{"location":"CIS-18/week_5.html#main-oo-principles-of-factory-pattern","title":"Main OO Principles of Factory Pattern","text":""},{"location":"CIS-18/week_5.html#factory-method_4","title":"Factory Method","text":"<ul> <li>Encapsulates Object Creation</li> <li>Removes the instantiation of actual implementation classes from client code.</li> <li>Provides an approach to code for interface rather than implementation.</li> <li>Makes our code more robust with loose coupling. Thus easier to extend classes.</li> <li>Provides abstraction between implementation and client classes through inheritance.</li> </ul>"},{"location":"CIS-18/week_5.html#abstract-factory_4","title":"Abstract Factory","text":"<ul> <li>Is robust and avoids conditional logic of Factory Method pattern via composition (object creation is implemented in exposed methods of factory interface).</li> <li>Encapsulates Object Creation</li> <li>Decouples clients from concrete classes</li> <li>Provides an approach to code for interface rather than implementation.</li> <li>Makes our code more robust with loose coupling</li> <li>AKA the factory of factories and can be easily extended to accommodate more products.</li> </ul>"},{"location":"CIS-18/week_7.html","title":"Week 7 - Singleton Design Pattern","text":""},{"location":"CIS-18/week_7.html#the-singleton-design-pattern","title":"The Singleton Design Pattern","text":""},{"location":"CIS-18/week_7.html#classification","title":"Classification","text":"<ul> <li>Creational Design Pattern</li> </ul>"},{"location":"CIS-18/week_7.html#pattern-definition","title":"Pattern Definition","text":"<ul> <li>Ensure a class only has one instance, and provide a global point of access to it.</li> </ul>"},{"location":"CIS-18/week_7.html#common-to-all-singleton-implementations","title":"Common to all Singleton Implementations","text":"<ul> <li>Private constructor to restrict instantiation of the class from other classes.</li> <li>Private static variable of the same class that is the only instance of the class.</li> <li>Public static method that returns the instance of the class, this is the global access point for the outer world to get the instance of the singleton class.</li> </ul>"},{"location":"CIS-18/week_7.html#representations","title":"Representations","text":""},{"location":"CIS-18/week_7.html#mermaid-graph","title":"Mermaid Graph","text":""},{"location":"CIS-18/week_7.html#lazy-initialization-singleton","title":"Lazy Initialization Singleton","text":"<pre><code>classDiagram\nclass Singleton {\n-Singleton uniqueInstance$\n-Singleton()\n+getInstance()$: Singleton\n}\n</code></pre>"},{"location":"CIS-18/week_7.html#bill-pugh-singleton","title":"Bill Pugh Singleton","text":"<pre><code>classDiagram\nSingleton --&gt; SingletonHelper : Contains\nclass Singleton {\n-class SingletonHelper$\n-Singleton()\n+getInstance()$: Singleton\n}\nclass SingletonHelper {\n-Singleton INSTANCE$\n}\n</code></pre>"},{"location":"CIS-18/week_7.html#uml","title":"UML","text":""},{"location":"CIS-18/week_7.html#singleton","title":"Singleton","text":""},{"location":"CIS-18/week_7.html#bill-pugh-singleton_1","title":"Bill Pugh Singleton","text":""},{"location":"CIS-18/week_7.html#usage","title":"Usage","text":"<ul> <li>The singleton pattern is used anywhere you need One-and-Only-One copy of an object. Interacting with files, databases, logging, caching, and or system drivers are all areas where singleton objects are necessary to control access to a single object.</li> </ul>"},{"location":"CIS-18/week_7.html#real-world-usages","title":"Real World Usages","text":"<ul> <li>Database and File System Connections</li> <li>Serializing logging.</li> <li>Singular access to device drivers</li> <li>Singular access to cache store/retrieval</li> <li>Thread Pools</li> </ul>"},{"location":"CIS-18/week_7.html#application-to-my-real-world-application","title":"Application to my Real World Application","text":"<ul> <li>I have a DAOStage class that implements Stage and contains a Singleton for various database connections. The Singleton class is called Database and its getInstance method returns a concrete Database connection from its Nested class that uses a Factory Method to decide the database type to connect to, and sets the Singleton object to it at runtime.</li> </ul>"},{"location":"CIS-18/week_7.html#java-code-example","title":"Java Code Example","text":"<ul> <li>Singleton Design Pattern</li> </ul>"},{"location":"CIS-18/week_7.html#main-take-aways-from-the-textbook","title":"Main Take-Aways from the textbook","text":"<ul> <li>Examine your performance and resource constraints and carefully choose an appropriate Singleton implementation for multithreaded applications (and we should consider all applications multithreaded!).</li> <li>Beware of the double- checked locking implementation; it isn\u2019t thread safe in versions before Java 5.</li> <li>Be careful if you are using multiple class loaders; this could defeat the Singleton implementation and result in multiple instances.</li> <li>You can use Java\u2019s enums to simplify your Singleton implementation.</li> </ul>"},{"location":"CIS-18/week_7.html#main-oo-principles-of-singleton-pattern","title":"Main OO Principles of Singleton Pattern","text":"<ul> <li>None this week! The Singleton stands alone!</li> </ul>"},{"location":"CIS-18/week_8.html","title":"Week 8b - Command Design Pattern","text":""},{"location":"CIS-18/week_8.html#the-command-design-pattern","title":"The Command Design Pattern","text":""},{"location":"CIS-18/week_8.html#classification","title":"Classification","text":"<ul> <li>Behavioral Design Pattern</li> </ul>"},{"location":"CIS-18/week_8.html#pattern-definition","title":"Pattern Definition","text":"<ul> <li>Hard Definition: Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.</li> <li>Easy Definition: Implements loose coupling in a request response model.</li> </ul>"},{"location":"CIS-18/week_8.html#representations","title":"Representations","text":""},{"location":"CIS-18/week_8.html#mermaid-graph","title":"Mermaid Graph","text":"<pre><code>classDiagram\nConcreteCommand ..|&gt; Command\nConcreteCommand *-- Receiver\nConcreteCommand --&gt; Receiver\nInvoker *-- Command\nInvoker --&gt; Command\nClient --&gt; Receiver\nClient --&gt; ConcreteCommand\nClient --&gt; Invoker\nclass Command{\n&lt;&lt;interface&gt;&gt;\n        +execute() : void\n+undo()\n}\nclass ConcreteCommand{\n-Receiver receiver\n+ConcreteCommand(Receiver receiver)\n+execute(): void \"receiver.action()\"\n+undo()\n}\nclass Receiver {\n+action()\n}\nclass Invoker {\n-Command command\n+Invoker(Command command)\n+setCommand()\n}\nclass Client{\n-Receiver r\n-Command concreteCommand\n-Invoker i\n}\n</code></pre>"},{"location":"CIS-18/week_8.html#uml","title":"UML","text":""},{"location":"CIS-18/week_8.html#command-pattern","title":"Command Pattern","text":""},{"location":"CIS-18/week_8.html#usage-notes","title":"Usage Notes","text":"<ul> <li>Command is the core of command design pattern that defines the contract for implementation.</li> <li>Receiver implementation is separate from command implementation.</li> <li>Command implementation classes chose the method to invoke on receiver object, for every method in receiver there will be a command implementation. It works as a bridge between receiver and action methods.</li> <li>Invoker class just forward the request from client to the command object.</li> <li>Client is responsible to instantiate appropriate command and receiver implementation and then associate them together.</li> <li>Client is also responsible for instantiating invoker object and associating command object with it and execute the action method.</li> <li>Command design pattern is easily extendible, we can add new action methods in receivers and create new Command implementations without changing the client code.</li> <li>The drawback with Command design pattern is that the code gets huge and confusing with high number of action methods and because of so many associations.</li> </ul>"},{"location":"CIS-18/week_8.html#real-world-usages","title":"Real World Usages","text":"<ul> <li>Runnable Interface</li> <li>JavaFX ActionEvent</li> </ul>"},{"location":"CIS-18/week_8.html#java-code-example","title":"Java Code Example","text":"<ul> <li>Command Design Pattern</li> </ul>"},{"location":"CIS-18/week_8.html#main-take-aways-from-the-textbook","title":"Main Take-Aways from the textbook","text":"<ul> <li>The Command Pattern decouples an object making a request from the one that knows how to perform it.</li> <li>A Command object is at the center of this decoupling and encapsulates a receiver with an action (or set of actions).</li> <li>An invoker makes a request of a Command object by calling its execute() method, which invokes those actions on the receiver.</li> <li>Invokers can be parameterized with Commands, even dynamically at runtime.</li> <li>Commands may support undo by implementing an undo() method that restores the object to its previous state before the execute() method was last called.</li> <li>MacroCommands are a simple extension of the Command Pattern that allow multiple commands to be invoked. Likewise, MacroCommands can easily support undo().</li> <li>In practice, it\u2019s not uncommon for \u201csmart\u201d Command objects to implement the request themselves rather than delegating to a receiver.</li> <li>Commands may also be used to implement logging and transactional systems.</li> </ul>"},{"location":"CIS-18/week_8.html#main-oop-principles-of-command-pattern","title":"Main OOP Principles of Command Pattern","text":"<ul> <li>Loosely coupled: The receiver is decoupled from the Invoker.</li> <li>Encapsulate what varies: The Receiver encapsulates the knowledge of the command and the Command encapsulates the receiver.</li> </ul>"},{"location":"CIS-18/week_9.html","title":"Week 9 - Adapter & Facade Design Patterns","text":""},{"location":"CIS-18/week_9.html#the-adapter-and-facade-design-patterns","title":"The Adapter and Facade Design Patterns","text":""},{"location":"CIS-18/week_9.html#classification","title":"Classification","text":"<ul> <li>Structural Design Pattern</li> </ul>"},{"location":"CIS-18/week_9.html#pattern-definition","title":"Pattern Definition","text":""},{"location":"CIS-18/week_9.html#adapter-design-pattern","title":"Adapter Design Pattern","text":"<ul> <li>Hard Definition: Converts the interface of a class into another interface the clients expect. Adapter lets classes work together that couldn\u2019t otherwise because of incompatible interfaces.</li> <li>Easy Definition: Allow two unrelated interfaces work together.</li> </ul>"},{"location":"CIS-18/week_9.html#facade-design-pattern","title":"Facade Design Pattern","text":"<ul> <li>Hard Definition: Provide a unified interface to a set of interfaces in a subsystem. Facade Pattern defines a higher-level interface that makes the subsystem easier to use.</li> <li>Easy Definition: A facade \u201cwraps\u201d a set of objects to simplify interacting with them.</li> </ul>"},{"location":"CIS-18/week_9.html#representations","title":"Representations","text":""},{"location":"CIS-18/week_9.html#mermaid-graph---object-adapter","title":"Mermaid Graph - Object Adapter","text":"<pre><code>classDiagram\nClient --&gt; Target\nTarget &lt;|.. Adapter\nAdaptee --* Adapter\nclass Client {\n\n}\nclass Target {\n&lt;&lt;interface&gt;&gt;\n        +request()\n}\nclass Adapter {\n+request()\n}\nclass Adaptee {\n+specificRequest()\n}\n</code></pre>"},{"location":"CIS-18/week_9.html#mermaid-graph---class-adapter","title":"Mermaid Graph - Class Adapter","text":"<pre><code>classDiagram\nClient --&gt; Target\nTarget &lt;|.. Adapter\nAdaptee &lt;|-- Adapter\nclass Client {\n\n}\nclass Target {\n&lt;&lt;interface&gt;&gt;\n        +request()\n}\nclass Adapter {\n+request()\n}\nclass Adaptee {\n+specificRequest()\n}\n</code></pre>"},{"location":"CIS-18/week_9.html#mermaid-graph---facade","title":"Mermaid Graph - Facade","text":"<pre><code>classDiagram\nClient --&gt; Facade\nFacade *-- ComplexSubClass1\nFacade *-- ComplexSubClass2\nFacade *-- ComplexSubClass3\nComplexSubClass1 --&gt; ComplexSubClass2\nComplexSubClass1 --&gt; ComplexSubClass3\nComplexSubClass2 --&gt; ComplexSubClass3\nComplexSubClass3 --&gt; ComplexSubClass1\nclass Client {\n\n}\nclass Facade {\n+SimplerActions()\n}\nclass ComplexSubClass1 {\n}\nclass ComplexSubClass2 {\n}\nclass ComplexSubClass3 {\n}   </code></pre>"},{"location":"CIS-18/week_9.html#uml","title":"UML","text":""},{"location":"CIS-18/week_9.html#object-adapter","title":"Object Adapter","text":""},{"location":"CIS-18/week_9.html#class-adapter","title":"Class Adapter","text":""},{"location":"CIS-18/week_9.html#facade","title":"Facade","text":""},{"location":"CIS-18/week_9.html#real-world-usages","title":"Real World Usages","text":""},{"location":"CIS-18/week_9.html#adapter","title":"Adapter","text":"<ul> <li>Converting Enumerators to Iterators and vice versa.</li> <li>java.io classes InputStreamReader and OutputStreamWriter adapts an InputStream into a Reader and adapts an OutputStream into a Writer</li> <li>java.util classes such as array with methods like asList converts an Array into a List.</li> </ul>"},{"location":"CIS-18/week_9.html#facade_1","title":"Facade","text":"<ul> <li>JDBC Driver Manager</li> </ul>"},{"location":"CIS-18/week_9.html#java-code-example","title":"Java Code Example","text":"<ul> <li>Class/Object Adapter Design Pattern</li> <li>Facade Design Pattern</li> </ul>"},{"location":"CIS-18/week_9.html#main-take-aways-from-the-textbook","title":"Main Take-Aways from the textbook","text":"<ul> <li>When you need to use an existing class and its interface is not the one you need, use an adapter.</li> <li>When you need to simplify and unify a large interface or complex set of interfaces, use a facade.</li> <li>An adapter changes an interface into one a client expects.</li> <li>A facade decouples a client from a complex subsystem.</li> <li>Implementing an adapter may require little work or a great deal of work depending on the size and complexity of the target interface.</li> <li>Implementing a facade requires that we compose the facade with its subsystem and use delegation to perform the work of the facade.</li> <li>There are two forms of the Adapter Pattern: object and class adapters.</li> <li>You can implement more than one facade for a subsystem.</li> <li>An adapter wraps an object to change its interface, a decorator wraps an object to add new behaviors and responsibilities, and a facade \u201cwraps\u201d a set of objects to simplify.</li> <li>Facade design pattern can be applied at any point of development, usually when the number of interfaces grow and system gets complex.</li> <li>Facade design pattern should be applied for similar kind of interfaces, its purpose is to provide a single interface rather than multiple interfaces that does the similar kind of jobs.</li> </ul>"},{"location":"CIS-18/week_9.html#main-oo-principles-of-adapter-pattern","title":"Main OO Principles of Adapter Pattern","text":"<ul> <li>Favors composition over inheritance: Object Adapters are preferred!</li> </ul>"},{"location":"CIS-18/week_9.html#main-oo-principles-of-facade-pattern","title":"Main OO Principles of Facade Pattern","text":"<ul> <li>Principle of Least Knowledge: Talk only to your immediate friends.</li> <li>Loosely Coupled: Facade decouples clients from complexities of sub-systems. Subsystem interfaces are not aware of Facade.</li> </ul>"},{"location":"CIS-50/Chapter_1.html","title":"Database Systems","text":""},{"location":"CIS-50/Chapter_1.html#database-systems","title":"Database Systems","text":""},{"location":"CIS-50/Chapter_1.html#data-vs-information","title":"Data Vs Information","text":"<ul> <li>Data is raw facts, the building blocks of info</li> <li>Information is processing raw data for meaning<ul> <li>Accurate, contextual, and timely information is key to good decision making.</li> </ul> </li> <li>Other Relevant terms:<ul> <li>knowledge: The body of information and facts about a specific subject. Knowledge implies familiarity, awareness, and understanding of information as it applies to an environment. A key characteristic is that new knowledge can be derived from old knowledge.</li> <li>data management: A process that focuses on data collection, storage, and retrieval. Common data management functions include addition, deletion, modification, and listing.</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_1.html#what-is-a-database","title":"What is a Database","text":"<ul> <li>database: A shared, integrated computer structure that houses a collection of related data. A database contains two types of data: end-user data (raw facts) and metadata.</li> <li>metadata: Data about data.<ul> <li>Relationships</li> <li>Data characteristics (names, types, null, etc.)</li> </ul> </li> <li> <p>Database management system (DBMS): The collection of programs that manages the database structure and controls access to the data stored in the database.</p> </li> <li> <p>A database provides:</p> <ul> <li>Improved data sharing</li> <li>Improved data security</li> <li>Better data integration</li> <li>Minimized data inconsistency</li> <li>Improved data access</li> <li>Improved decision making</li> <li>Increased end-user productivity</li> </ul> </li> <li> <p>DB Types and Classifications</p> <ul> <li>User Classification<ul> <li>Single User/Desktop: 1 user on a dekstop</li> <li>Multiuser/Workgroup: 50 or less users supported</li> <li>Enterprise: Supports hundreds of thousands of users</li> </ul> </li> <li>Location Classification <ul> <li>Centralized: single site, multi-user</li> <li>Distributed: 2 or more independent sites with related data, multi-user</li> <li>Cloud Database: Maintained by cloud providers, unknown hardware, but known performance</li> </ul> </li> <li>Data Classification (i.e. type of data stored)<ul> <li>General-Purpose: wide variety of data used by multiple disciplines</li> <li>Discipline-Specific: Focused on specific subjects.</li> </ul> </li> <li>Data Structure Classification<ul> <li>Unstructured data: original raw data</li> <li>structured data: formatted, and stored to aid storage and retrieval</li> <li>Semi-Structured data: Partially structured.<ul> <li>XML Database: an example of a semi-structured DB.</li> </ul> </li> </ul> </li> <li>Usage Classification (Most common today)<ul> <li>Operational: Designed to support day-to-day operations</li> <li>OLTP (Online Transaction Processing): Same as Operational</li> <li>Transactional: Same as Operational</li> <li>Production: Same as Operational</li> <li>Analytical: Tactical / Strategic decision usage</li> <li>Data warehouse: historical data optimized for decision support<ul> <li>Warehouse data from Operational DB + Other Sources</li> <li>OLAP: Frontend tools used to model data on warehouse</li> <li>BI: Comprehensive set of tools used to make business decisions on warehouse</li> </ul> </li> </ul> </li> <li>NoSQL (Not Just SQL)<ul> <li>Not a traditional RDBMS</li> <li>built to handle: volume, variety, and velocity of data of new business demands from social medai</li> </ul> </li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_1.html#why-design-a-database","title":"Why Design a Database","text":"<ul> <li>To make data atomic</li> <li>Avoid repetetive data</li> <li>Optimize storage, avoid unnecessary nulls</li> <li>Optimize retrieval via indexing and views</li> </ul>"},{"location":"CIS-50/Chapter_1.html#database-evolution","title":"Database Evolution","text":"<ul> <li>DP Problems: data inconsistency, data anomaly, data dependence, and structural dependence<ul> <li>Lengthy development times</li> <li>Difficulty getting quick answers</li> <li>Complex to manage and administrate - Data Redundancy, islands of info, no data integrity</li> <li>Lacked security and data sharing</li> <li>Difficult to change - Structural dependence</li> <li>Data type change leads to program change - Data dependence</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_1.html#database-components","title":"Database Components","text":"<ul> <li>Hardware: servers, workstations, switches, physical storage devices</li> <li>Software:<ul> <li>Operating System: Linux, MacOS Unix, Windows</li> <li>DBMS Software: MySQL, SQL Server, Oracle, DB2, PostgreSQL</li> <li>Applications: DBBeaver, SQL Studio</li> </ul> </li> <li>People: Sys Admins, DBAs, DB Architects, Developers, End Users</li> <li>Procedures: Audits, monitoring, standards of business.</li> <li>Data: set of facts enetered into DB. </li> </ul>"},{"location":"CIS-50/Chapter_1.html#main-functions-of-rdbms","title":"Main Functions of RDBMS","text":"<ul> <li>Data Dictionary Mgmt: schema, metadata, removes structural and data dependence from DBMS</li> <li>Data Storage Mgmt: Manages complex structures required for storage and retrieval. Important for DB Perf. Tuning. </li> <li>Data Transformation and Presentation: Coerces data into required formats. Relieves you from chore of distinguishing between logical data and physical data format (think date formatting VS how its stored).</li> <li>Security Mgmt: User level security, CRUD ACLs, query and report access</li> <li>Multiuser access control: Multi-CRUD operations without violating DB integrity</li> <li>Backup and recovery Mgmt: Just what it sounds like</li> <li>Data Integrity Mgmt: Integrity rules to reduce redundancy and maximize data consistency. Relationships are used to enforce data integrity</li> <li>Database Acess Languages and APIs: query lang (SQL), APIs to Java, C, C#, Python, etc.</li> <li>Database Comm Interface: Direct connect to websites, email apps, etc.</li> </ul>"},{"location":"CIS-50/Chapter_11.html","title":"Database Performance Tuning and Query Optimization","text":""},{"location":"CIS-50/Chapter_11.html#database-performance-tuning-and-query-optimization","title":"Database Performance Tuning and Query Optimization","text":""},{"location":"CIS-50/Chapter_11.html#performance-tuning-concepts","title":"Performance Tuning Concepts","text":"<ul> <li>database performance tuning: A set of activities and procedures designed to reduce the response time of a database system that is, to ensure that an end user query is processed by the DBMS in the minimum amount of time.</li> </ul>"},{"location":"CIS-50/Chapter_11.html#performance-tuning-client-and-server","title":"Performance Tuning Client and Server","text":"<ul> <li>Most performance tuning focuses on minimizing I/O operations.</li> </ul>"},{"location":"CIS-50/Chapter_11.html#client-side","title":"Client Side","text":"<ul> <li>SQL Performance Tuning: Generate optimal SQL queries to get the correct answer in least amount of time using the minimum server resources.</li> </ul>"},{"location":"CIS-50/Chapter_11.html#server-side","title":"Server Side","text":"<ul> <li>DBMS Performance Tuning: Address client requests as quickly as possible while optimizing compute resources.</li> </ul>"},{"location":"CIS-50/Chapter_11.html#dbms-architecture","title":"DBMS Architecture","text":"<ul> <li>Data Files: One of, generally, several files in a DBMS that stores a databases data: rows, tables, indexes, etc.</li> <li>Extent: Predefined data-file expansion increment.</li> <li>Table Space/File Group: Logically grouped data files. Common table spaces are: System (i.e. data-dictionary), user data, indexes, temporary (sorts &amp; grouping).</li> <li>data cache/buffer cache: Reserved memory area caching sys-catalog, indexes, and read/write data.</li> <li>SQL cache/Procedure cache: Reserved memory area storing processed recent SQL queries, stored procedures, triggers, and functions.</li> <li>I/O Request: Reads/Writes data from data-cache to physical device in blocks of powers of 2. </li> <li>Listener: Handles processing of client requests.</li> <li>User: User process per client.</li> <li>Scheduler: Organizes concurrent requests.</li> <li>Optimizer: Analyzes SQL and optimizes data access.</li> </ul>"},{"location":"CIS-50/Chapter_11.html#database-query-optimization-modes","title":"Database Query Optimization Modes","text":""},{"location":"CIS-50/Chapter_11.html#2-principles-of-query-optimization","title":"2 Principles of Query Optimization","text":"<ul> <li>Optimum execution order for fastest exec time</li> <li>Optimum site selection to minimize I/O and communication time.</li> </ul>"},{"location":"CIS-50/Chapter_11.html#classification-of-query-optimization-algorithmsmodes","title":"Classification of Query Optimization Algorithms/Modes","text":"<ul> <li>Classification by Order:<ul> <li>Automatic Query Optimization: DBMS finds most efficient access path (favored, but at the expense of CPU usage).</li> <li>Manual query Optimization: End user finds most efficient access path</li> </ul> </li> <li>Classification by Timing of Optimizations<ul> <li>Static Query Optimization: Access path is predetermined at compile time (i.e. in code like C#)</li> <li>Dynamic Query Optimization: Access path is determined at run-time using most up-to-data info about the RDBMS.</li> </ul> </li> <li>Classification by Info Type<ul> <li>Statistically Based Query Optimization: Statistically info about database is used to determine access path.<ul> <li>Dynamic Statistical Generation Mode: DBMS automatically updates database access and statistics.</li> <li>Manual Statistical Generation Mode: DBA must periodically run a routine to generate data access statistics.</li> </ul> </li> <li>Rule-Based Query Optimization: Preset rules by DBA or End-User dictate access path.</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_11.html#database-statistics","title":"Database Statistics","text":"<ul> <li>Include statistics on: # CPUs, CPU Speed, Temp Space Avail., # rows, # disk blocks used, Max/Avg row length, # Cols/Row,  </li> <li>Provides a snapshot of DB characteristics.</li> <li>Can be gathered manually or automatically (ANALYZE command gathers stats)<ul> <li>Oracle: ANALYZE  object_name COMPUTE STATISTICS; <li>MySQL: ANALYZE TABLE ; <li>DB2: RUNSTATS</li> <li>SQL Server: UPDATE STATISTICS  []"},{"location":"CIS-50/Chapter_11.html#query-processing","title":"Query Processing","text":""},{"location":"CIS-50/Chapter_11.html#3-phases-of-query-processing","title":"3 Phases of Query Processing","text":"<ol> <li>Parsing: Parses SQL and chooses most efficient execution plan.</li> <li>Execution: Executes query based on chosen plan.</li> <li>Fetching: Fetches data and returns result set.</li> </ol> Note <p>Processing DDL (Create, etc.) is different then processing DML (SELECT, INSERT, UPDATE, DELETE as DML deals with user data while DDL changes the schema/system catalog.</p>"},{"location":"CIS-50/Chapter_11.html#sql-parsing-phase","title":"SQL Parsing Phase","text":"<ul> <li>Query Optimizer: DBMS process that parses query and optimizes data access path.<ul> <li>Steps of Query Optimizer:<ul> <li>Validate SQL syntax</li> <li>Validate SQL against Data Dictionary for table/column objects</li> <li>Validate User Access Rights via Data Dictionary</li> <li>Break SQL into atomic parts.</li> <li>Optimize SQL to equivalent faster query</li> <li>Prepare SQL for execution with efficient access plan</li> </ul> </li> </ul> </li> <li>Access/Execution Plan: Compilation time plan that determines how an application query will access the database at run-time<ul> <li>If the Access Plan exists in SQL Cache, DBMS will re-use plan to save time.</li> <li>If not in cache, optimizer will:<ul> <li>Evaluate plans and pick indexes for optimal join operations</li> <li>Places the chosen plan into the SQL Cache</li> </ul> </li> <li></li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_11.html#sql-execution-phase","title":"SQL Execution Phase","text":"<ul> <li>All I/O operations in Execution Plan are executed, and proper locks are acquired for data access.</li> <li>Resulting data is stored in the DBMS data cache<ul> <li>Rows matching conditions, order bys, grouping are completed</li> </ul> </li> <li>Transaction commands are completed during SQL Parsing Phase and SQL Execution Phase.</li> </ul>"},{"location":"CIS-50/Chapter_11.html#sql-fetching-phase","title":"SQL Fetching Phase","text":"<ul> <li>Facilitates migrating data from server cache to client cache.</li> <li>Temporary table space may be used to allow clients to fetch data in batches.</li> </ul>"},{"location":"CIS-50/Chapter_11.html#query-processing-bottlenecks","title":"Query Processing Bottlenecks","text":"<ul> <li>The more complex a query, the higher chance of a query processing bottleneck</li> <li>The more complex a system and the tighter coupled components, the higher chance of a component bottleneck</li> </ul>"},{"location":"CIS-50/Chapter_11.html#typical-bottlenecks-and-performance-recommendations","title":"Typical Bottlenecks and Performance Recommendations","text":"<ol> <li>CPU: Match CPU to workload<ul> <li>High CPU utilization could mean a mismatch between CPU and workload</li> <li>Could also mean not enough of another component like RAM (swapping?).</li> </ul> </li> <li>RAM: SQL Cache, Data Cache, DBMS processes, and OS compete for RAM, so it should be right-sized dependent on system and database purpose.</li> <li>Hard Disks: Slow disks can bottleneck performance, so match HD Speed and I/O transfer rates to desired workload performance.<ul> <li>Faster Disks, such as SSDs, can offset some of the RAM bottlenecks via Virtual Memory</li> </ul> </li> <li>Network: Network congestion (i.e. network demand exceeds capacity) can cause bottlenecks.<ul> <li>Use QoS to grant application priority.</li> <li>Limit the number of clients on the network.</li> <li>Limit the network to just qualified applications.</li> </ul> </li> <li>Application Code: Poorly designed DBs and Poorly designed code often cause bottlenecks.<ul> <li>Write applications that Lazy load data</li> <li>Optimize or eliminate AdHoc Queries</li> <li>Apply code optimization techniques.</li> <li>Redesign poorly architected databases</li> </ul> </li> </ol>"},{"location":"CIS-50/Chapter_11.html#indexes-and-query-optimization","title":"Indexes and Query Optimization","text":"Note <p>The purpose of indexes is to speed up access to specific rows in large tables. So why not index everything? First, indexes also consume space, so space constraints can limit index usage. Further, indexing every column can harm the query optimizer performance by forcing it to analyze more index options while building its query plan. Third, low Data Sparsity, which refers to the range of values in a column, can make indexes moot since they contain a relatively small number of keys to a large subset of rows. High Data Sparsity columns, on the other hand, are ideal candidates for indexes.</p> <p></p>"},{"location":"CIS-50/Chapter_11.html#index-data-structures","title":"Index Data Structures","text":"<ul> <li>Hash Index: Simple and fast lookups via a key that is hashed into a value that points to matching database rows. Great for indexes hitting equality conditions.</li> <li>B-tree Index: Auto-balancing data-structure, where the leaf nodes contain pointers to the data rows. Most common index, and is great for high sparsity data.</li> <li>Bitmap Index: Index suited best for low sparsity data, and is represented by BIT Arrays, where each BIT represents if the row pointed to meets a condition. Very low space usage.</li> </ul>"},{"location":"CIS-50/Chapter_11.html#optimizer-choices","title":"Optimizer Choices","text":"Note <p>SQL Parsing is performed by a query optimizer and decides which indexes to use, the order of table joins, how to perform those joins, and more.</p>"},{"location":"CIS-50/Chapter_11.html#optimizer-algorithms","title":"Optimizer Algorithms","text":"<ul> <li>Rule-based Optimizer: Decides how to execute a query by assigning fixed costs via preset rules (e.g. costs are based off of full-table-scans, PK/Index matches, etc.)</li> <li>Cost-based Optimizer: Decides query execution through algorithmic analysis of statistics about various DB objects (e.g. num-rows, num-columns, I/O speed, RAM, etc.)</li> </ul>"},{"location":"CIS-50/Chapter_11.html#optimizer-hints","title":"Optimizer Hints","text":"<ul> <li>Optimizer Hints: Are special instructions end-users can add to SQL queries to alter how the query optimizer decides to execute a query.</li> </ul>"},{"location":"CIS-50/Chapter_11.html#sql-performance-tuning","title":"SQL Performance Tuning","text":"Note <p>Most current RDBMS already do a solid job of query optimization, but its still a good idea to help it out and limit the server-side processing. With that said, most techniques are RDBMS specific.</p>"},{"location":"CIS-50/Chapter_11.html#index-selectivity","title":"Index Selectivity","text":"<ul> <li>Using indexes is the #1 step in performance optimization.</li> <li>Most useful for culling a small subset of rows from a large table.</li> <li>Too many indexes slow down INSERT, UPDATE, and DELETE operations.</li> <li>So when are they used?<ol> <li>When an Indexed column appears alone in WHERE or HAVING clause.</li> <li>When an Indexed column appears alone in GROUP BY or ORDER BY clause.</li> <li>When a MAX/MIN function wraps and Indexed column.</li> <li>When an Indexed column has high data sparsity</li> </ol> </li> <li>So how do we increase the likelihood of index use (i.e. HIGH Index Selectivity)<ol> <li>Create indexes for each single attribute commonly used in a WHERE, HAVING, GROUP BY, or ORDER BY clause.</li> <li>Avoid indexes on small tables or tables with low data sparsity.</li> <li>Always declare PK and FK to coerce join operations to use Indexes</li> <li>Create indexes on non-PK/FK columns commonly used in joins</li> <li>When the RDBMS supports it (Oracle, SQL Server, DB2) use function-based indexes (i.e. indexes on derived types or types with functions in them) that are commonly used in reports.</li> </ol> </li> </ul>"},{"location":"CIS-50/Chapter_11.html#conditional-expressions","title":"Conditional Expressions","text":"<ul> <li>Typically in the WHERE or HAVING clauses.</li> <li>So how can we format conditional expressions to help the query optimizer?<ol> <li>Use simple columns or literals as operands in a conditional expression.</li> <li>Numeric field comparisons are faster than character, date, and NULL comparisons.</li> <li>Equality comparisons are generally faster than inequality comparisons.</li> <li>Whenever possible, transform conditional expressions to use literals (i.e. remove/simplify Math or derived parts of query if possible)</li> <li>When using multiple conditional expressions, write the \u201c=\u201d conditions first.</li> <li>Short Circuit Logic Conditions:<ul> <li>If you use multiple AND conditions, write the condition most likely to be false first.</li> <li>When using multiple OR conditions, put the condition most likely to be true first.</li> </ul> </li> <li>Whenever possible, try to avoid the use of the NOT logical operator.</li> </ol> </li> </ul>"},{"location":"CIS-50/Chapter_11.html#query-formulation","title":"Query Formulation","text":"<ul> <li>Step to Formulate our Queries<ol> <li>Identify columns and computations required<ul> <li>Simple expressions?</li> <li>Aggregate functions?</li> <li>Granularity? (i.e. should you use sub-queries and or views)</li> </ul> </li> <li>Identify Source Tables</li> <li>Determine PK/FK or other attribute table joins.</li> <li>Determine criteria<ul> <li>Simple WHERE?</li> <li>Compared to a list of values? (i.e. IN is needed)</li> <li>Nested comparisons?</li> <li>Grouped Data?</li> </ul> </li> <li>Determine order</li> </ol> </li> </ul>"},{"location":"CIS-50/Chapter_11.html#dbms-performance-tuning","title":"DBMS Performance Tuning","text":""},{"location":"CIS-50/Chapter_11.html#server-side-tuning","title":"Server Side Tuning","text":"<p>(See above for what\u2019s stored in each Cache)</p> <ul> <li>Size the data cache appropriately</li> <li>Size the SQL Cache appropriately</li> <li>Size the sort/ordering cache</li> <li>Decide which Optimizer mode is best suited Rule or Cost.</li> <li>Store as much of DB in primary memory as possible to minimize I/O<ul> <li>Some DBs are fully In-Memory Databases</li> </ul> </li> <li>Use I/O Accelerators<ul> <li>SSD drives</li> <li>RAID sets (Redundant Array of Independent Disks)</li> <li>Minimize Disk Contention<ul> <li>Put Sys-Tables on own volume</li> <li>Balance performance and usability by splitting up User Data Table Spaces<ul> <li>Put high-usage tables on own volume.</li> </ul> </li> <li>Create unique Index Table Space per application or user group.<ul> <li>Put on own volumes if possible</li> </ul> </li> <li>Create unique Temporary Table Space per application or user group.<ul> <li>Put on own volumes if possible</li> </ul> </li> <li>Use Oracle Index-organized tables or SQL Server Clustered Index Tables to help organize table spaces.</li> <li>Use Table Partitioning by attribute if available.</li> </ul> </li> <li>Denormalize, but only when appropriate.</li> <li>Store derived columns in tables when appropriate.</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_13.html","title":"Business Intelligence and Data Warehouses","text":""},{"location":"CIS-50/Chapter_13.html#business-intelligence-and-data-warehouses","title":"Business Intelligence and Data Warehouses","text":""},{"location":"CIS-50/Chapter_13.html#objectives","title":"Objectives","text":"<ul> <li>Describe the role of business intelligence in providing comprehensive business decision support</li> <li>Describe the architecture, reporting styles, evolution, and benefits of business intelligence</li> <li>Differentiate between operational data and decision support data</li> <li>Identify the purpose, characteristics, and components of a data warehouse</li> <li>Develop star and snowflake schemas for decision-making purposes</li> <li>Describe the characteristics and capabilities of online analytical processing (OLAP)</li> <li>Describe the role and functions of data analytics and data mining</li> <li>Explain how SQL analytic functions are used to support data analytics</li> <li>Define data visualization and explain how it supports business intelligence</li> </ul>"},{"location":"CIS-50/Chapter_13.html#need-for-data-analysis","title":"Need for Data Analysis","text":"<ul> <li>Organizations tend to grow and prosper as they gain a better understanding of their environment<ul> <li>Evaluate through tracking daily transactions and analyzing company data</li> </ul> </li> <li>Organizations are always looking for a competitive advantage <ul> <li>Product development, market positioning, sales promotions, and customer service</li> </ul> </li> <li>Companies and software vendors addressed these multilevel decision support needs by creating autonomous applications for particular groups of users<ul> <li>This more comprehensive and integrated decision support framework within organizations became known as business intelligence</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_13.html#business-intelligence","title":"Business Intelligence","text":"<ul> <li>Comprehensive, cohesive, integrated set of tools and processes<ul> <li>Captures, collects, integrates, stores, and analyzes data</li> <li>Generates and presents information to support business decision making</li> </ul> </li> <li>Allows transformation <ul> <li>Data into information</li> <li>Information into knowledge</li> <li>Knowledge into wisdom</li> </ul> </li> <li>Concepts, practices, tools and techniques to help business <ul> <li>Understand core capabilities</li> <li>Provide snapshots of the company situation</li> <li>Identify key opportunities to create a competitive advantage</li> </ul> </li> <li>Provides a framework <ul> <li>Collecting and storing operational data and aggregating it into decision support data</li> <li>Analyzing decision support data and presenting generated information to end users to support business decisions</li> <li>Making business decisions which generate more data</li> <li>Monitoring results to evaluate outcomes and predicting future outcomes with a high degree of accuracy</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_13.html#bi-architecture","title":"BI Architecture","text":"<ul> <li>ETL tools: Data extraction, transformation, and loading (ETL ) tools collect, filter, integrate, and aggregate internal and external data to be saved into a data store optimized for decision support.</li> <li>Data store: The data store is optimized for decision support and is generally represented by a data warehouse or a data mart. The data is stored in structures that are optimized for data analysis and query speed.</li> <li>Query and reporting: This component performs data selection and retrieval, and it is used by the data analyst to create queries that access the database and create the required reports.</li> <li>Data visualization: This component presents data to the end user in a variety of meaningful and innovative ways. This tool helps the end user select the most appropriate presentation format, such as summary reports, maps, pie or bar graphs, mixed graphs, and static or interactive dashboards.</li> <li>Data monitoring and alerting: This component allows real-time monitoring of business activities. The BI system will present concise information in a single integrated view. This integrated view could include specific metrics about the system performance or activities, such as number of orders placed in the last four hours, number of customer complaints by product by month, and total revenue by region. Alerts can be placed on a given metric; once the value of a metric goes below or above a certain baseline, the system will perform a given action, such as emailing shop floor managers, presenting visual alerts, or starting an application.</li> <li>Data analytics: This component performs data analysis and data-mining tasks using the data in the data store. This tool advises the user as to which data analysis tool to select and how to build a reliable business data model. Business models are generated by special algorithms that identify and enhance the understanding of business situations and problems.</li> </ul>"},{"location":"CIS-50/Chapter_13.html#practices-to-manage-data","title":"Practices to Manage Data","text":"<ul> <li>Master data management (MDM): collection of concepts, techniques, and processes for identification, definition, and management of data elements</li> <li>Governance: method of government for controlling business health and for consistent decision making</li> <li>Key performance indicators (KPI): numeric or scale-based measurements that assess company\u2019s effectiveness in reaching its goals<ul> <li>General</li> <li>Finance </li> <li>Human resources</li> <li>Education </li> </ul> </li> <li>Modern BI reporting styles<ul> <li>Advanced reporting</li> <li>Monitoring and alerting</li> <li>Advanced data analytics</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_13.html#bi-benefits","title":"BI Benefits","text":"<ul> <li>Improved decision making is the main goal of BI, but BI provides other benefits<ul> <li>Integrating architecture</li> <li>Common user interface for data reporting and analysis</li> <li>Common data repository fosters single version of company data</li> <li>Improved organizational performance</li> </ul> </li> <li>Achieving all these benefits takes a lot of human, financial, technological resources, and time<ul> <li>BI benefits are not achieved overnight; are the result of a focused company-wide effort that could take a long time (6 months to 3+ years)</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_13.html#bi-evolution","title":"BI Evolution","text":"<ul> <li>Decision support system (DSS) is an arrangement of computerized tools used to assist managerial decision making<ul> <li>Typically has a much narrower focus and reach than a BI solution</li> </ul> </li> <li>BI information technology has evolved from centralized reporting styles to the current, mobile BI and Big Data analytics style in the span of just a few years<ul> <li>The rate of technological change is not slowing down; technology advancements are accelerating the adoption of BI to new levels</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_13.html#bi-technology-trends","title":"BI Technology Trends","text":"<ul> <li>Several technological advances are driving the growth of business intelligence technologies<ul> <li>Data storage improvements</li> <li>Business intelligence appliances</li> <li>Business intelligence as a service</li> <li>Big Data analytics</li> <li>Personal analytics</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_13.html#decision-support-data-vs-operational-data","title":"Decision Support Data VS Operational Data","text":"Note <p>Although BI is used at the strategic and tactical managerial levels within organizations, its effectiveness depends on the quality of data gathered at the operational level * Operational data is seldom well suited to decision support tasks</p> <ul> <li>Operational data and decision support data serve different purposes<ul> <li>Operational data is useful for capturing daily business transactions</li> <li>Decision support data gives tactical and strategic business meaning to the operational data</li> </ul> </li> <li>Decision support data differs from operational data in three main areas<ul> <li>Time span</li> <li>Granularity (level of aggregation)</li> <li>Dimensionality</li> </ul> </li> </ul> <p></p> <p></p>"},{"location":"CIS-50/Chapter_13.html#dss-db-requirements","title":"DSS DB Requirements","text":"<ul> <li>Database schema<ul> <li>Must support complex, non-normalized data representations</li> <li>Data must be aggregated and summarized</li> <li>Queries must be able to extract multidimensional time slices</li> </ul> </li> <li>Data extraction and filtering <ul> <li>Allow batch and scheduled data extraction</li> <li>Support different data sources and check for inconsistent data or data validation rules</li> <li>Encourage advanced integration, aggregation, and classification</li> </ul> </li> <li>Database size <ul> <li>Very large databases (VLDBs)</li> <li>Advanced storage technologies</li> <li>Multiple-processor technologies</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_13.html#data-warehouse","title":"Data Warehouse","text":"Note <p>Collection of data that provides support for decision making within a component framework that is: Integrated, subject-oriented, time-variant, and nonvolatile.  </p>"},{"location":"CIS-50/Chapter_13.html#12-data-warehouse-rules","title":"12 Data Warehouse Rules","text":"<ol> <li>The data warehouse and operational environments are separated.</li> <li>The data warehouse data is integrated.</li> <li>The data warehouse contains historical data over a long time.</li> <li>The data warehouse data is snapshot data captured at a given point in time.</li> <li>The data warehouse data is subject oriented.</li> <li>The data warehouse data is mainly read-only with periodic batch updates from operational data. No online updates are allowed.</li> <li>The data warehouse development life cycle differs from classical systems development. Data warehouse development is data driven (DW); the classical approach is process driven (Classical).</li> <li>The data warehouse contains data with several levels of detail: current detail data, old detail data, lightly summarized data, and highly summarized data.</li> <li>The data warehouse environment is characterized by read-only transactions to very large data sets. The operational environment is characterized by numerous update transactions to a few data entities at a time.</li> <li>The data warehouse environment has a system that traces data sources, transformations, and storage.</li> <li>The data warehouse\u2019s metadata is a critical component of this environment. The metadata identifies and defines all data elements. The metadata provides the source, transformation, integration, storage, usage, relationships, and history of each data element.</li> <li>The data warehouse contains a chargeback mechanism for resource usage that enforces optimal use of the data by end users.</li> </ol>"},{"location":"CIS-50/Chapter_13.html#data-mart","title":"Data Mart","text":"<ul> <li>Small, single-subject data warehouse subset<ul> <li>Provides decision support to a small group of people</li> </ul> </li> <li>Benefits over data warehouses<ul> <li>Lower cost and shorter implementation time </li> <li>Technologically advanced</li> <li>Inevitable \u201cpeople issues\u201d</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_13.html#star-schemas","title":"Star Schemas","text":"<ul> <li>Data modeling technique that:<ul> <li>Maps multidimensional decision support data into a relational database</li> <li>Creates the near equivalent of multidimensional database schema from existing relational database</li> <li>Yields an easily implemented model for multidimensional data analysis </li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_13.html#basic-star-schema-components","title":"Basic Star Schema Components","text":"<ul> <li>Facts: numeric values that represent a specific business aspect<ul> <li>Dimensions: qualifying characteristics that provide additional perspectives to a given fact</li> <li>Attributes: used to search, filter, and classify facts<ul> <li>Slice and dice: ability to focus on slices of the data cube for more detailed analysis</li> </ul> </li> <li>Attribute hierarchies: provide a top-down data organization<ul> <li>Aggregation and drill-down/roll-up data analysis</li> </ul> </li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_13.html#star-schema-representation","title":"Star Schema Representation","text":"<ul> <li>Facts and dimensions represented by physical tables in data warehouse database</li> <li>Many-to-one (M:1) relationship between fact table and each dimension table</li> </ul>"},{"location":"CIS-50/Chapter_13.html#fact-and-dimension-tables","title":"Fact and Dimension Tables","text":"<ul> <li>Related by foreign keys</li> <li>Subject to primary and foreign key constraints</li> <li>Primary key of a fact table <ul> <li>Composite primary key because the fact table is related to many dimension tables</li> <li>Always formed by combining the foreign keys pointing to the related dimension tables </li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_13.html#performance-improving-techniques-for-the-star-schema","title":"Performance Improving Techniques for the Star Schema","text":"<ul> <li>Normalizing dimensional tables<ul> <li>Snowflake schema: dimension tables can have their own dimension tables</li> </ul> </li> <li>Maintaining multiple fact tables to represent different aggregation levels<ul> <li>Save processor cycles at run time, thereby speeding up data analysis</li> </ul> </li> <li>Denormalizing fact tables<ul> <li>Improves data access performance and saves data storage space</li> </ul> </li> <li>Partitioning and replicating tables<ul> <li>Partitioning: splits tables into subsets of rows or columns and places them close to the client computer </li> <li>Replication: makes copy of table and places it in a different location</li> <li>Periodicity: provides information about the time span of the data stored in the table</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_13.html#online-analytical-processing-olap","title":"Online Analytical Processing (OLAP)","text":"<ul> <li>Online analytical processing (OLAP) is a BI style whose systems share three main characteristics<ul> <li>Multidimensional data analysis techniques</li> <li>Advanced database support</li> <li>Easy-to-use end-user interfaces</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_13.html#multidimensional-data-analysis-techniques","title":"Multidimensional Data Analysis Techniques","text":"<ul> <li>Data are processed and viewed as part of a multidimensional structure<ul> <li>Particularly attractive to business decision makers who tend to view business data as being related to other business data</li> </ul> </li> <li>Augmented advanced functions<ul> <li>Data presentation </li> <li>Data aggregation, consolidation, and classification </li> <li>Computational </li> <li>Data-modeling</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_13.html#advanced-database-support","title":"Advanced Database Support","text":"<ul> <li>OLAP tools must have the following features to deliver efficient decision support:<ul> <li>Access to many different kinds of DBMSs, flat files, and internal and external data sources</li> <li>Access to aggregated data warehouse data and operational database detail data</li> <li>Advanced data navigation features</li> <li>Rapid and consistent query response times</li> <li>Ability to map end-user requests</li> <li>Support for very large databases</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_13.html#easy-to-use-end-user-interface","title":"Easy-to-Use End-User Interface","text":"<ul> <li>When proper implementation leads to simple navigation and accelerated decision making or data analysis<ul> <li>Advanced OLAP features are more useful when access is kept simple</li> <li>Many interface features are borrowed from previous generations of data analysis tools </li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_13.html#relational-olap","title":"Relational OLAP","text":"<ul> <li>Relational online analytical processing (ROLAP)<ul> <li>Provides OLAP functionality using relational databases and familiar relational tools to store and analyze multidimensional data</li> </ul> </li> <li>Extensions added to traditional RDBMS technology<ul> <li>Multidimensional data schema support within the RDBMS</li> <li>Data access language and query performance optimized for multidimensional data</li> <li>Support for very large databases (VLDBs)</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_13.html#multidimensional-olap","title":"Multidimensional OLAP","text":"<ul> <li>Extends OLAP functionality to multidimensional database management systems (MDBMSs)<ul> <li>MDBMS uses proprietary techniques store data in matrix like N-dimensional arrays</li> <li>End users visualize stored data as a 3D data cubes<ul> <li>Grow to N number dimensions, thus becoming hypercubes</li> <li>Held in memory in a cube cache to speed access</li> </ul> </li> </ul> </li> <li>Sparsity: measures density of data held in the data cube</li> </ul>"},{"location":"CIS-50/Chapter_13.html#comparison-of-rolap-vs-molap","title":"Comparison of ROLAP vs MOLAP","text":""},{"location":"CIS-50/Chapter_13.html#data-analytics","title":"Data Analytics","text":"<ul> <li>Subset of business intelligence (BI) functionality that encompasses a wide range of mathematical, statistical, and modeling techniques with the purpose of extracting knowledge from data<ul> <li>Explanatory analytics: focuses on discovering and explaining data characteristics and relationships based on existing data</li> <li>Predictive analytics: focuses on predicting future data outcomes with a high degree of accuracy<ul> <li>Employs mathematical and statistical algorithms, neural networks, artificial intelligence, and other advanced modeling tools to create actionable predictive models based on available data</li> <li>Used in areas such as customer relationships, customer service, customer retention, fraud detection, targeted marketing, and optimized pricing</li> </ul> </li> </ul> </li> <li>Data mining focuses on the discovery and explanation stages of knowledge acquisition<ul> <li>Analyzing massive amounts of data to uncover hidden trends, patterns, and relationships; to form computer models to simulate and explain the findings; and to use such models to support business decision making</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_13.html#sql-analytic-functions","title":"SQL Analytic Functions","text":"<ul> <li>The ROLLUP extension<ul> <li>Used with GROUP BY clause to generate aggregates by different dimensions</li> <li>Enables subtotal for each column listed except for the last one, which gets a grand total</li> </ul> </li> <li>The CUBE extension<ul> <li>Used with GROUP BY clause to generate aggregates by the listed columns</li> <li>Enables you to get a subtotal for each column listed in the expression, in addition to a grand total for the last column listed</li> </ul> </li> <li>Materialized views<ul> <li>Dynamic table that contains SQL query command to generate rows and stores the actual rows<ul> <li>Created the first time query is run and summary rows are stored in the table</li> <li>Automatically updated when base tables are updated</li> <li>Requires specified privileges</li> </ul> </li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_13.html#data-visualization","title":"Data Visualization","text":"<ul> <li>Process of abstracting data to provide a visual data representation that enhances the user\u2019s ability to comprehend the meaning of the data<ul> <li>Goal is to allow the user to quickly and efficiently see the data\u2019s big picture by identifying trends, patterns, and relationships</li> </ul> </li> <li>The need for data visualization<ul> <li>Ability to zoom in and out, drill down and up, filter, etc. is one of the many advantages of current breed of data visualization tools</li> <li>Makes it easier to understand data\u2014in particular, large amounts of data</li> </ul> </li> <li>The science of data visualization<ul> <li>Roots in cognitive sciences: how the human brain receives, interprets, organizes, and processes information<ul> <li>Pattern recognition </li> <li>Spatial awareness </li> <li>Aesthetics </li> </ul> </li> </ul> </li> <li>Understanding the data<ul> <li>The same data can be presented in multiple ways</li> </ul> </li> <li>In general, there are two types of data:<ul> <li>Qualitative: describes qualities of the data<ul> <li>Nominal or ordinal </li> </ul> </li> <li>Quantitative: describes numeric facts or measures of the data</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_14.html","title":"Big Data and NoSQL","text":""},{"location":"CIS-50/Chapter_14.html#big-data-and-nosql","title":"Big Data and NoSQL","text":"<ul> <li> <p>Learning Objectives</p> </li> <li> <p>Explain the role of Big Data in modern business</p> </li> <li>Describe the primary characteristics of Big Data and how these go beyond the traditional \u201c3 Vs\u201d</li> <li>Explain how the core components of the Hadoop framework operate</li> <li>Identify the major components of the Hadoop ecosystem</li> <li>Summarize the four major approaches of the NoSQL data model and how they differ from the relational model</li> <li>Describe the characteristics of NewSQL databases</li> <li>Understand how to work with document databases using MongoDB</li> <li>Understand how to work with graph databases using Neo4j</li> </ul>"},{"location":"CIS-50/Chapter_14.html#big-data","title":"Big Data","text":"<ul> <li>Volume: quantity of data to be stored<ul> <li>Scaling up: keeping the same number of systems but migrating each one to a larger system</li> <li>Scaling out: when the workload exceeds server capacity, it is spread out across a number of servers</li> </ul> </li> <li>Velocity: speed at which data is entered into system and must be processed<ul> <li>Stream processing: focuses on input processing and requires analysis of data stream as it enters the system</li> <li>Feedback loop processing: analysis of data to produce actionable results</li> </ul> </li> <li>Variety: variations in the structure of data to be stored<ul> <li>Structured data: fits into a predefined data model</li> <li>Unstructured data: does not fit into a predefined model</li> </ul> </li> <li></li> <li></li> <li>Other characteristics<ul> <li>Variability: changes in meaning of data based on context</li> <li>Sentimental analysis: attempts to determine if a statement conveys a positive, negative, or neutral attitude about a topic</li> <li>Veracity: trustworthiness of data</li> <li>Value: degree data can be analyzed for meaningful insight</li> <li>Visualization: ability to graphically resent data to make it understandable</li> </ul> </li> <li>Relational databases are not necessarily the best for storing and managing all organizational data<ul> <li>Polyglot persistence: coexistence of a variety of data storage and management technologies within an organization\u2019s infrastructure</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_14.html#hadoop","title":"Hadoop","text":"<ul> <li>De facto standard for most Big Data storage and processing<ul> <li>Java-based framework for distributing and processing very large data sets across clusters of computers</li> </ul> </li> <li>Important components<ul> <li>Hadoop Distributed File System (HDFS): low-level distributed file processing system that can be used directly for data storage</li> <li>MapReduce: programming model that supports processing large data sets</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_14.html#hadoop-components","title":"Hadoop Components","text":"<ul> <li> <p>Hadoop Distributed File System (HDFS)</p> <ul> <li>Based on several key assumptions<ul> <li>High volume: default block sizes is 64 MB and can be configured to even larger values</li> <li>Write-once, read-many: model simplifies concurrency issues and improves data throughput</li> <li>Streaming access: optimized for batch processing of entire files as a continuous stream of data</li> <li>Fault tolerance: designed to replicate data across many different devices so that when one fails, data is still available from another device</li> </ul> </li> </ul> </li> <li> <p>Hadoop uses several types of nodes; computers that perform one or more types of tasks within the system</p> <ul> <li>Data node store the actual file data</li> <li>Name node contains file system metadata</li> <li>Client node makes requests to the file system as needed to support user applications</li> <li>Data node communicates with name node and sends back block reports and heartbeats*</li> </ul> </li> <li> <p></p> </li> <li> <p>MapReduce</p> <ul> <li>Framework used to process large data sets across clusters<ul> <li>Breaks down complex tasks into smaller subtasks, performing the subtasks, and producing a final result</li> <li>Map function takes a collection of data and sorts and filters it into a set of key-value pairs<ul> <li>Mapper program performs the map function</li> </ul> </li> <li>Reduce summaries results of map function produce a single result<ul> <li>Reducer program performs the reduce function</li> </ul> </li> </ul> </li> <li>Implementation complements HDFS structure<ul> <li>Job tracker: central control program</li> <li>Task tracker: reduces tasks on a node</li> <li>Batch processing: runs tasks from beginning to end with no user interaction</li> </ul> </li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_14.html#hadoop-ecosystem","title":"Hadoop ecosystem","text":"<ul> <li>Most organizations that use Hadoop also use a set of other related products that interact and complement each other to produce an entire ecosystem of applications and tools</li> <li> <p>Like any ecosystem, the interconnected pieces are constantly evolving and their relationships are changing, so it is a rather fluid situation</p> </li> <li> <p></p> </li> <li>Map reduce simplification applications<ul> <li>Hive: data warehousing system that sites on top of HDFS and supports its own SQL-like language</li> <li>Pig: tool that compiles a high-level scripting language, named Pig Latin, into MapReduce jobs for executing in Hadoop</li> </ul> </li> <li>Data ingestion applications<ul> <li>Flume: component for ingesting data in Hadoop</li> <li>Sqoop: tool for converting data back and forth between a relational database and the HDFS</li> </ul> </li> <li>Direct query applications<ul> <li>Hbase: column-oriented NoSQL database designed to sit on top of the HDFS that quickly processes sparse datasets</li> <li>Impala: the first SQL on Hadoop application</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_14.html#nosql","title":"NoSQL","text":"<ul> <li>Nosql: non-relational database technologies developed to address Big Data challenges<ul> <li>Name does not describe what the NoSQL technologies are, but rather what they are not (poor job of that as well)</li> </ul> </li> <li>Key-value (KV) databases: conceptually the simplest of the NoSQL data models<ul> <li>Store data as a collection of key-value pairs organized as buckets which are the equivalent of tables</li> </ul> </li> <li>Document databases: similar to key-value databases and can almost be considered a subtype of KV databases<ul> <li>Store data in key-value pairs in which the value components are encoded documents grouped into large groups called collections</li> </ul> </li> <li></li> <li></li> <li>Column-oriented databases refers to two technologies<ul> <li>Column-centric storage: data stored in blocks which hold data from a single column across many rows</li> <li>Row-centric storage: data stored in block which hold data from all columns of a given set of rows</li> <li></li> </ul> </li> <li>Graph databases store data on relationship-rich data as a collection of nodes and edges<ul> <li>Properties: like attributes; they are the data that we need to store about the node</li> <li>Traversal: query in a graph database</li> <li></li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_14.html#aggregate-awareness","title":"Aggregate awareness","text":"<pre><code>* Data is collected or aggregated around a central topic or entity\n* Aggregate aware database models achieve clustering efficiency by making each piece of data relatively independent\n* Graph databases, like relational databases, are aggregate ignorant\n    * Do not organize the data into collections based on a central entity\n</code></pre>"},{"location":"CIS-50/Chapter_14.html#newsql-databases","title":"NewSQL Databases","text":"<ul> <li>Database model that attempts to provide ACID-compliant transactions across a highly distributed infrastructure<ul> <li>ACID<ul> <li>Fully transactional</li> <li>Data is validated before written to DB</li> <li>All or nothing write rules</li> </ul> </li> <li>Latest technologies to appear in the data management area to address Big Data problems</li> <li>No proven track record</li> <li>Have been adopted by relatively few organizations</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_14.html#newsql-databases-support","title":"NewSQL databases support:","text":"<ul> <li>SQL as the primary interface</li> <li>ACID-compliant transactions</li> <li>Similar to NoSQL, NewSQL databases also support:<ul> <li>Highly distributed clusters</li> <li>Key-value or column-oriented data stores</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_14.html#working-with-document-databases-using-mongodb","title":"Working with Document Databases Using MongoDB","text":"<ul> <li>Popular document database<ul> <li>Among the NoSQL databases currently available, MongoDB has been one of the most successful in penetrating the database market</li> </ul> </li> <li>MongoDB, comes from the word humongous as its developers intended their new product to support extremely large data sets<ul> <li>High availability</li> <li>High scalability</li> <li>High performance</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_14.html#importing-documents-in-mongodb","title":"Importing Documents in MongoDB","text":"<ul> <li>Refer to the text for an importation example and considerations </li> </ul>"},{"location":"CIS-50/Chapter_14.html#example-of-a-mongodb-query-using-find","title":"Example of a MongoDB Query Using find()","text":"<ul> <li>Methods are programed functions to manipulate objects<ul> <li>Find() method retrieves objects from a collection that match the restrictions provided</li> <li>Pretty() method is used to improve readability of the documents by placing key:value pairs on separate lines</li> </ul> </li> <li>Refer to the text for a query example</li> </ul>"},{"location":"CIS-50/Chapter_14.html#working-with-graph-databases-using-neo4j","title":"Working with Graph Databases Using Neo4j","text":"<ul> <li>Even though Neo4j is not yet as widely adopted as MongoDB, it has been one of the fastest growing NoSQL databases<ul> <li>Graph databases still work with concepts similar to entities and relationships<ul> <li>Focus is on the relationships</li> </ul> </li> <li>Graph databases are used in environments with complex relationships among entities<ul> <li>Heavily reliant on interdependence among their data</li> </ul> </li> <li>Neo4j provides several interface options<ul> <li>Designed with Java programming in mind</li> </ul> </li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_14.html#creating-nodes-in-neo4j","title":"Creating nodes in Neo4j","text":"<ul> <li>Nodes in a graph database correspond to entity instances in a relational database</li> <li>Cypher is the interactive, declarative query language in Neo4j </li> <li>Nodes and relationships are created using a CREATE command</li> <li>Refer to the text for examples <ul> <li>Using the CREATE command to create a member node</li> <li>Retrieving node data with MATCH and WHERE</li> <li>Retrieving relationship data with MATCH and WHERE</li> </ul> </li> <li></li> </ul>"},{"location":"CIS-50/Chapter_15.html","title":"Database Connectivity and Web Technologies","text":""},{"location":"CIS-50/Chapter_15.html#database-connectivity-and-web-technologies","title":"Database Connectivity and Web Technologies","text":""},{"location":"CIS-50/Chapter_15.html#objectives","title":"Objectives","text":"<ul> <li>Explain the purpose of standard database connectivity interfaces</li> <li>Describe the functionality and features of various database connectivity technologies: ODBC, OLE, ADO.NET, and JDBC</li> <li>Describe how web-to-database middleware is used to integrate databases with the Internet</li> <li>Identify the services provided by web application servers</li> <li>Explain how Extensible Markup Language (XML) is used for web database development</li> <li>Describe the advantages and disadvantages of using cloud computing for the database-as-a-service model</li> </ul>"},{"location":"CIS-50/Chapter_15.html#database-connectivity","title":"Database Connectivity","text":"<ul> <li>Mechanisms through which application programs connect and communicate with data repositories<ul> <li>Database middleware: provides an interface between the application program and the database</li> <li>Data repository: data management application used to store data generated by an application program</li> <li>Universal Data Access (UDA): collection of technologies used to access any type of data source and manage the data through a common interface</li> <li>ODBC, OLE-DB, and ADO.NET form the backbone of MS UDA architecture</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_15.html#native-sql-connectivity","title":"Native SQL Connectivity","text":"<ul> <li>Connection interface provided by database vendors, which is unique to each vendor<ul> <li>Interfaces are optimized for particular vendor\u2019s DBMS</li> <li>Maintenance is a burden for the programmer</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_15.html#odbc-dao-and-rdo","title":"ODBC, DAO, and RDO","text":"<ul> <li>Open Database Connectivity (ODBC): Microsoft\u2019s implementation of a superset of SQL Access Group Call Level Interface (CLI) standard for database access<ul> <li>Widely supported database connectivity interface</li> <li>Allows Windows application to access relational data sources by using SQL via standard application programming interface (API)</li> </ul> </li> <li>Data Access Objects (DAO): object-oriented API used to access desktop databases such as MS Access and FileMaker Pro<ul> <li>Provides an optimized interface that expose functionality of Jet data engine to programmers</li> </ul> </li> <li>Remote Data Objects (RDO): higher-level object-oriented application interface used to access remote database servers<ul> <li>Optimized to deal with server-based databases</li> </ul> </li> <li>Dynamic-link libraries (DLLs): implements ODBC, DAO, and RDO as shared code that is dynamically linked to the Windows operating environment</li> </ul>"},{"location":"CIS-50/Chapter_15.html#components-of-odbc-architecture","title":"Components of ODBC architecture","text":"<ul> <li>High-level ODBC API through which application programs access ODBC functionality</li> <li>Driver manager that is in charge of managing all database connections</li> <li>ODBC driver that communicates directly to DBMS</li> </ul>"},{"location":"CIS-50/Chapter_15.html#ole-db","title":"OLE-DB","text":"<ul> <li>Object Linking and Embedding for Database (OLE-DB)<ul> <li>Database middleware that adds object-oriented functionality for access to relational and nonrelational data</li> <li>Series of COM objects provides low-level database connectivity for applications</li> <li>Types of objects based on functionality<ul> <li>Consumers: applications or processes</li> <li>Providers: data or service</li> </ul> </li> <li>Does not provide support for scripting languages</li> </ul> </li> <li>ActiveX Data Objects (ADO) provide:<ul> <li>High-level application-oriented interface to interact with OLE-DB, DAO, and RDO</li> <li>Unified interface to access data from any programming language that uses the underlying OLE-DB objects</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_15.html#adonet","title":"ADO.NET","text":"<ul> <li>Data access component of Microsoft\u2019s .NET application development framework</li> <li>Microsoft\u2019s .NET framework<ul> <li>Component-based platform for developing distributed, heterogeneous, interoperable applications </li> <li>Manipulates any type of data using any combination of network, operating system, and programming language</li> <li>Extends and enhances functionality critical for the development of distributed applications</li> </ul> </li> <li>DataSet: disconnected memory-resident representation of the database<ul> <li>Contains tables, columns, rows, relationships and constraints</li> <li>Internally stored in XML format</li> <li>Data in DataSet is made persistent as XML documents</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_15.html#java-database-connectivity-jdbc","title":"Java Database Connectivity (JDBC)","text":"<ul> <li>Application programming interface that allows a Java program to interact with a wide range of data sources</li> <li>Advantages of JDBC<ul> <li>Company can leverage existing technology and personnel training</li> <li>Direct access to database server or access via database middleware</li> <li>Programmers can use their SQL skills to manipulate the data in the company\u2019s databases</li> <li>Provides a way to connect to databases through an ODBC driver</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_15.html#database-internet-connectivity","title":"Database Internet Connectivity","text":"<ul> <li>Allows new innovative services<ul> <li>Permit rapid response by bringing new services and products to market quickly</li> <li>Increase customer satisfaction through creation of innovative data services</li> <li>Allow anywhere, anytime data access using mobile smart devices via the Internet</li> <li>Yield fast and effective information dissemination through universal access</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_15.html#web-to-database-middleware","title":"Web-to-Database Middleware","text":"<ul> <li>Web server is the main hub through which Internet services are accessed<ul> <li>Server-side extension: program that interacts directly with the web server<ul> <li>Provides services to the web server in a way that is totally transparent to the client browser</li> <li>Known as web-to-database middleware</li> </ul> </li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_15.html#web-server-interfaces","title":"Web Server Interfaces","text":"<ul> <li>Currently, there are two well-defined web server interfaces<ul> <li>Common Gateway Interface (CGI): uses script files that perform specific functions based on the client\u2019s parameters that are passed to the web server</li> <li>Application programming interface (API): implemented as shared code or as dynamic-link libraries; treated as part of the web server program that is dynamically invoked when needed</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_15.html#the-web-browser","title":"The Web Browser","text":"<ul> <li>Software that lets users navigate the web from their client computer<ul> <li>Interprets HTML code received from web server </li> <li>Presents different page components in standard way</li> </ul> </li> <li>Web is a stateless system<ul> <li>Web server does not know the status of any clients</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_15.html#client-side-extensions","title":"Client-Side Extensions","text":"<ul> <li>Add functionality to Web browser<ul> <li>Plug-in: external application automatically invoked by the browser when needed</li> <li>Java and JavaScript: embedded in web page<ul> <li>Downloaded with the Web page and activated by an event</li> </ul> </li> <li>ActiveX and VBScript: embedded in web page<ul> <li>Downloaded with page and activated by event</li> <li>Oriented to Windows applications</li> </ul> </li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_15.html#web-application-servers","title":"Web Application Servers","text":"<ul> <li>Middleware application that expands the functionality of web servers by linking them to a wide range of services<ul> <li>Connects to and query database from web page</li> <li>Presents database data in a webpage using various formats</li> <li>Creates dynamic web search pages</li> <li>Creates webpages to insert, update, and delete data</li> <li>Enforces referential integrity</li> <li>Uses simple and nested queries and program logic to represent business rules</li> </ul> </li> <li>Web application server features <ul> <li>Integrated development environment</li> <li>Security and user authentication</li> <li>Computational languages</li> <li>Automation generation of HTML pages</li> <li>Performance and fault -tolerant features</li> <li>Database access with transaction management capabilities</li> <li>Access to multiple services</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_15.html#web-database-development","title":"Web Database Development","text":"<ul> <li>Process of interfacing databases with the web browser<ul> <li>How to create webpages that access data in a database</li> </ul> </li> <li>Code examples <ul> <li>Java Netty</li> <li>PHP</li> <li>ASP.NET</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_15.html#extensible-markup-language-xml","title":"Extensible Markup Language (XML)","text":"<ul> <li>Meta-language used to represent and manipulate data elements<ul> <li>Facilitates the exchange of structured documents over the Internet </li> <li>Allows definition of new tags</li> <li>Case sensitive</li> <li>Must be well-formed and properly nested</li> <li>Indicates comments with &lt;- and -&gt;</li> <li>XML and xml prefixes reserved for XML only</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_15.html#document-type-definitions-dtd-and-xml-schemas-xsd","title":"Document Type Definitions (DTD) and XML Schemas (XSD)","text":""},{"location":"CIS-50/Chapter_15.html#dtds","title":"DTDs","text":"<ul> <li>File with .dtd extension that describe XML elements<ul> <li>Provides composition of database\u2019s logical model</li> <li>Defines the syntax rules or valid tags for each type of XML document</li> </ul> </li> <li>Companies engaging in e-commerce transaction must develop and share DTDs<ul> <li>DTD referenced from inside XML document</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_15.html#xml-schemas-xsds","title":"XML schemas (XSDs)","text":"<ul> <li>Advanced data definition language</li> <li>Describes the structure of XML data documents</li> <li>More closely maps to database terminology and features</li> <li>XML schema definition (XSD) file uses syntax similar to XML document</li> </ul>"},{"location":"CIS-50/Chapter_15.html#extensible-stylesheet-language-xsl-for-presentation","title":"Extensible Stylesheet Language (XSL) for Presentation","text":"<ul> <li>XML separates data structure from presentation and processing</li> <li>Extensible Style Language (XSL) displays XML data<ul> <li>Defines the rules by which XML data are formatted and displayed</li> <li>Parts:<ul> <li>Extensible Style Language Transformations (XSLT)</li> <li>XSL style sheets</li> </ul> </li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_15.html#applications-of-xml","title":"Applications of XML","text":"<ul> <li>Several applications lend themselves particularly well to XML<ul> <li>B2B exchanges</li> <li>Legacy systems integration</li> <li>Web page development</li> <li>Database support</li> <li>Database meta-dictionaries</li> <li>XML databases</li> <li>XML services</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_15.html#cloud-computing-services","title":"Cloud Computing Services","text":"<ul> <li>Computing model that enables access to a shared pool of configurable computer resources <ul> <li>Can be rapidly provisioned and released with minimal management effort or service provider interaction</li> <li>Potential to become a game changer; eliminates financial and technological barriers</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_15.html#cloud-implementation-types","title":"Cloud Implementation Types","text":"<ul> <li>Public cloud<ul> <li>Built by a third-party organization to sell cloud services to the general public</li> </ul> </li> <li>Private cloud<ul> <li>Built by an organization for the sole purpose of servicing its own needs</li> </ul> </li> <li>Community cloud<ul> <li>Built by and for a specific group of organizations that share a common trade</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_15.html#characteristics-of-cloud-services","title":"Characteristics of Cloud Services","text":"<ul> <li>Cloud computing services share a set of guiding principles<ul> <li>Ubiquitous access via Internet technologies</li> <li>Shared infrastructure</li> <li>Lower costs and variable pricing</li> <li>Flexible and scalable services</li> <li>Dynamic provisioning</li> <li>Service orientation</li> <li>Managed operations</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_15.html#sql-data-services","title":"SQL Data Services","text":"<ul> <li>Cloud computing-based data management service<ul> <li>Provides relational data management to companies</li> <li>Hosted data management and standard protocols</li> <li>Standard protocols</li> <li>Common programming interface</li> </ul> </li> <li>Advantages<ul> <li>Reliable and scalable at a lower cost than in-house systems</li> <li>High level of failure tolerance</li> <li>Dynamic and automatic load balancing</li> <li>Automated data backup and disaster recovery are included</li> <li>Dynamic creation and allocation of processes and storage</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_2.html","title":"Data Models","text":""},{"location":"CIS-50/Chapter_2.html#data-models","title":"Data Models","text":""},{"location":"CIS-50/Chapter_2.html#importance-of-data-modeling","title":"Importance of Data Modeling","text":"<ul> <li>Helps clarify how all the pieces of a business fit together, but can drill down into details. (High Level and Detailed views).</li> <li>A good Data Model (Blueprint) means different end-user views of the data won\u2019t matter.</li> </ul>"},{"location":"CIS-50/Chapter_2.html#data-modeling-foundation","title":"Data Modeling Foundation","text":"<ul> <li>Data Modeling: The process of creating a specific data model for a problem domain.<ul> <li>Starts with simple problem and understanding</li> <li>Increases detail as understanding increases</li> <li>When complete Data Model is a blueprint for:<ul> <li>Instructions to build a database</li> <li>Meets all end-user requirements</li> <li>Will clearly be defined in text and diagrams</li> <li>Should meet at least these 3 criteria<ul> <li>Description of the data structures</li> <li>Enforcable data integrity rules</li> <li>Method for manipulating and transforming data.</li> </ul> </li> </ul> </li> </ul> </li> <li>Data Model: Represents data structures and their characteristics relations, constraints, transformations, and other constructs with the purpose of supporting a specific problem domain.</li> <li></li> </ul>"},{"location":"CIS-50/Chapter_2.html#building-blocks","title":"Building Blocks:","text":"<ul> <li>Entities: Nouns</li> <li>Attributes: Characteristic of Entity</li> <li>Relationships: How Entities are associated (usually linking verbs)<ul> <li>1:M, 1..*: One to many</li> <li>M:N or ..: Many to many</li> <li>1:1 or 1..1: One to one</li> </ul> </li> <li>Constraints: Data restrictions<ul> <li>Ensure data integrity</li> <li>Expressed as rules:</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_2.html#business-rules--database-design","title":"Business Rules &amp; Database Design","text":"<ul> <li>Business Rules are policies, procedures, and principles of organizations.</li> <li>They are also the first step in identifying and creating the aforementioned building blocks</li> <li>Rules for Business Rules:<ul> <li>Should be easy to understand</li> <li>Should be widely disseminated</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_2.html#business-rule-discovery","title":"Business Rule Discovery","text":"<ul> <li>Direct Interviews with End-Users (managers, policy makers)<ul> <li>Verify end-user perceptions, however</li> <li>Verify end-user perceptions, however</li> </ul> </li> <li>Documentation</li> </ul> Note <p>Document identified business rules to:     * Standardize the company\u2019s view of data     * Facilitate communication between users and designers     * Abets understanding scope of data     * Clarifies business process and perceptions     * Allows developing and re-visting correct relationships and constraints.</p>"},{"location":"CIS-50/Chapter_2.html#translating-business-rules-into-a-data-model","title":"Translating Business Rules into a Data Model","text":"<ul> <li>Nouns often translate into an Entities.</li> <li>Verbs often translate into relationships between entities.</li> <li>From business rule, determine cardinality by assuming bi-directional relationships and asking:<ul> <li>How many instances of entity B are related to entity A</li> <li>How many instances of entity A are related to entity B</li> </ul> </li> <li>Attributes can also be nouns or adverbs, but generally are characteristics of the entities.</li> <li>Naming conventions should be followed:<ul> <li>CUS_CREDIT_LIMIT: e.g. field/attribute name: All upper case, proceeded by Entity Abbrev, underscores for spaces.</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_2.html#evolution-of-major-models","title":"Evolution of Major Models","text":"graph TB      subgraph \"1960-1969 - Least Semantics\"     comments1[\"- Difficult to represent M:N relationships (hierarchical only)\\n- Structural level dependency\\n- No ad hoc queries (record-at-a-time access)\\n- Access path predefined (navigational access)\"]     hierarchical[Hierarchical]     network[Network]     end      subgraph 1970     comments2[\"- Conceptual simplicity (structural independence)\\n- Provides ad hoc queries (SQL)\\n- Set-oriented access\"]     relational[Relational]     end      subgraph 1976     comments3[\"- Easy to understand (more semantics)\\n - Limited to conceptual modeling\\n(no implememntation component)\"]     entity_relationship[Entity Relationship]     end      subgraph \"1978-1990 - Most Semantics\"     comments4[\"- More semantics in data model\\n- Support for complex objects\\n- Inheritance (class hierarchy)\\n- Behavior\\n- Unstructured data (XML Begins)\\n- LATE 1990s XML data exchanges\"]     semantic[Semantic]     object_oriented[Object Oriented]     extended_relational[\"Extended Relational\\n(O/R DBMS)\"]     end      subgraph 2005-Present     comments5[\"- Addresses Big Data problem\\n- Less semantics in data model\\n- Based on schema-less, key-value data model\\nBest suited for large, sparse data stores\"]     xml_json[\"Unstructured\\n(Document Data,\\nXML/JSON)\"]     bigdata[Big Data / NoSQL]     end      hierarchical --&gt; network     network --&gt; relational     relational --&gt; entity_relationship     entity_relationship --&gt; semantic      semantic --&gt; object_oriented     semantic --&gt; extended_relational     extended_relational --&gt;|DBs Still Play a Part| bigdata      object_oriented --&gt; xml_json     xml_json --&gt;|Some aspects shared| bigdata      style hierarchical fill:#ccffcc,stroke:#4caf50,stroke-width:2px;     style network fill:#ccffcc,stroke:#4caf50,stroke-width:2px;     style relational fill:#ccffcc,stroke:#4caf50,stroke-width:2px;     style entity_relationship fill:#ccffcc,stroke:#4caf50,stroke-width:2px;      style semantic fill:#ccffcc,stroke:#4caf50,stroke-width:2px;     style object_oriented  fill:#ccffcc,stroke:#4caf50,stroke-width:2px;     style extended_relational  fill:#ccffcc,stroke:#4caf50,stroke-width:2px;     style xml_json  fill:#ccffcc,stroke:#4caf50,stroke-width:2px;     style bigdata  fill:#ccffcc,stroke:#4caf50,stroke-width:2px;  <ul> <li>Hierarchical model:<ul> <li>Upside-down tree</li> <li>Parent can have many children, but children only have a single parent.</li> <li>Composed of segments, which are like file-system records</li> </ul> </li> <li>Network model:<ul> <li>DB is a collection of records with 1:M relationships, but children can have many parents.</li> <li>Defined:<ul> <li>Schema (Org of DB as seen by DBA, tables, indexes, views, and queries),</li> <li>SubSchema (Org of DB as seen by Applications),</li> <li>DML (Defines how to manipulate DB i.e. SQL),</li> <li>DDL (Allows DBA to define Schema Structure)</li> </ul> </li> <li>Limited Ad-Hoc queryability</li> <li>Heavy demand on application developers</li> <li>Structural changes lead to application massive changes (dats dependence)</li> </ul> </li> <li>Relational model (Solves general Data Problems):<ul> <li>Based on mathematical relation concept (But think of it as a TABLE of ROWS and COLUMNS)</li> <li>COLUMNS are attributes, and ROWS are called tuples</li> <li>TABLES: complete data and structural independence because it is a logical structure.<ul> <li>How a table is stored is of no concern to a user or designer.</li> </ul> </li> <li>RDBMS sophisticated mathematical data manipulation constructs, but they are hidden from the end-user!!!</li> <li>Queries are intuitive and logical (SQL, specifies what must be done without expressing HOW).</li> <li>Tables are releated via a common attribute</li> <li>Easy to diagrame with Relational Diagrams</li> <li>3 Simple Parts<ul> <li>User Interface: DBBeaver, Sql Studio, etc. Helps generate SQL</li> <li>Collection of Tables: Pesents data in an easy to unserstand fashion.</li> <li>SQL Engine: Translate SQL user requests into complex mathematical data manipulations.</li> </ul> </li> <li>Due to robust mathematical foundation RDBMs can easily be extended with new capabilities like XML and Objects.</li> </ul> </li> <li>Entity relationship model:<ul> <li>Graphical way of representing the relational model with ERDs</li> <li>Entities: Rectangles<ul> <li>Name: Noun in center of rectangle.</li> </ul> </li> <li>Attributes: Circles branched from entities in ERD<ul> <li>Characteristics of Entity</li> </ul> </li> <li>Relationships: Diamond, Crows Foot, or UML/Class notation. </li> </ul> </li> <li>OO Model (Solves specific needs):<ul> <li>Popular in CAD, GIS markets, which require complex objects.</li> <li>Data and relationships contained in single structure known as an object.</li> <li>Contains all operations that can be performed on an object.</li> <li>Components:<ul> <li>Object: Single instance of a real world entity</li> <li>Attributes: Properties of an object</li> <li>Class: Collection of similar objects with shared structure.</li> <li>Methods: Behaviors you can run on objects.</li> <li>Class Hierarchy: upside-down tree with single parent relationship</li> <li>Inheritance: Can inherit attributes and methods of parent.</li> <li>Depicted with UML</li> </ul> </li> </ul> </li> <li>Object/Relational and XML<ul> <li>ERDM adds OO features into simpler RDM structure.<ul> <li>Encapsulated data and methods</li> <li>Extensible Data Types based on Classes</li> </ul> </li> <li>XML Databases emerged to manage unstructured data like e-mail, web-pages, diagrams, etc.</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_2.html#data-model-basic-terminology-comparison","title":"Data Model Basic Terminology Comparison","text":"Real World Example File Processing Hierarchical Model Network Model Relational Model ER Model OO Model A group of vendors Vendor file cabinet File Segment type Record type Table Entity set Class A single vendor Global supplies Record Segment occurrence Current record Row (tuple) Entity occurrence Object The contact name Johnny Ventura Field Segment field Record field Table attribute Entity attribute Object attribute The vendor identifier G12987 Index Sequence field Record key Key Entity identifier Object identifier"},{"location":"CIS-50/Chapter_2.html#emerging-data-models","title":"Emerging Data Models","text":"<ul> <li>Exponential data growth</li> <li>Getting actionable BI data from Petabytes of collected data has become paramount.<ul> <li>Browsing patterns, purchasing histories, customer preference, customer behaviors, social connections.</li> <li>Mobile data, GPS, RFID, sensors, IoT, sound, pictures, etc.</li> </ul> </li> <li>Big Data: Find better ways to manage large data, get valuable business insights, but reduce costs.<ul> <li>3Vs:<ul> <li>Volume: Petabytes of data</li> <li>Velocity: Exponential growth, and need to mine it quickly (Response time is expected to be nearly instant).</li> <li>Variety: Many different data formats not suitable to traditional RDBMS.</li> </ul> </li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_2.html#bigdata-technologies","title":"BigData Technologies","text":"<ul> <li>hadoop: java based, distributed, with thousands of nodes.<ul> <li>Componenets are HDFS and MapReduce</li> <li>HDFS: Write once, read-many model<ul> <li>Name Node: Stores all FS metadata</li> <li>Data Node: Stores fixed data-blocks that gets replicated</li> <li>Client Node: User interface to HDFS</li> </ul> </li> <li>MapReduce: API that works with structured and unstructured data<ul> <li>Uses many nodes to perform 2 functions Map and Reduce</li> <li>Map divides a job, Reduce reduces it into a filtered result set.</li> </ul> </li> </ul> </li> <li>NoSQL: Large distributed DB System that stores structured and unstructured data.<ul> <li>They are not based on RDBMS Model</li> <li>They are highly distributed</li> <li>They are highly scalable, fault tolerant, and available</li> <li>Support data with large number of attributes but sparse entity types</li> <li>Built for performance and not data consistency</li> <li>Examples:<ul> <li>Key/Value stores: Memcached, Redis</li> <li>Document DBs: Mongo, ElasticSearch</li> <li>Graph DBs: Neo4J</li> </ul> </li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_2.html#classification-of-data-models","title":"Classification of Data Models","text":"graph TB     subgraph \" \"         direction TB         subgraph \" \"             direction TB             subgraph \" \"                 enduser[End User View]                 designer[Designer's View]                 dbms[DBMS View]             end             subgraph \" \"                 direction TB                 external1[External Model]                 external2[External Model]                 conceptual[Conceptual Model]                 internal[Internal Model]                 physical[Physical Model]                 conceptual --&gt;|Logical independence| internal                 internal --&gt;|Physical independence| physical                 external1 --&gt; conceptual                 external2 --&gt; conceptual             end             enduser --&gt; external1             enduser --&gt; external2             designer --&gt; conceptual             dbms --&gt; internal         end         subgraph \"Degreee of Abstration\"           subgraph \" \"             high[High]             medhi[\"High/Medium\"]             medium[Medium]             low[Low]           end           subgraph \" \"             er[ER]             oo[Object Oriented]             rel[Relational]             hinet[Network\\nHierarchical]           end           subgraph \"Characteristics\"             char1[\"Hardware-independent\\nSoftware-independent\"]             char2[\"Hardware-independent\\nSoftware-dependent\"]             char3[\"Hardware-dependent\\nSoftware-dependent\"]           end           er --&gt; high           oo --&gt; medhi           rel --&gt; medium           hinet --&gt; low           high --&gt; char1           medium --&gt; char2           low --&gt; char3         end     end      style conceptual fill:#0055ff,stroke:#4caf50,stroke-width:2px;     style external1 fill:#cc004a,stroke:#4caf50,stroke-width:2px;     style external2 fill:#cc004a,stroke:#4caf50,stroke-width:2px;     style internal fill:#ccffcc,stroke:#4caf50,stroke-width:2px;     style physical fill:#aaffaa,stroke:#4caf50,stroke-width:2px;  <ul> <li>Classified by ANSI/SPARC defined Levels of Abstraction (External, Conceptual, Internal, Physical)<ul> <li>External: Subset of the Data Model necessary for the application developer or report writers.</li> <li>Conceptual: The global (Bird\u2019s Eye) view of the data model. A Macro picture of the organization\u2019s data.</li> <li>Internal: Map of conceptual model to a specific DBMS<ul> <li>Entities of Conceptual model are mapped to Tables</li> <li>Attributes to columns, data-types, constraints, etc.</li> </ul> </li> <li>Physical: The actual hardware (SSDs, SAN, etc.) the data is stored on.</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_3.html","title":"The Relational Database Model","text":""},{"location":"CIS-50/Chapter_3.html#the-relational-database-model","title":"The Relational Database Model","text":"<ul> <li>3 Well defined components<ul> <li>A logical data structure represented by relations</li> <li>A set of integrity rules to enforce that the data is consistent and remains consistent over time</li> <li>A set of operations that defines how data is manipulated</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_3.html#rdm-logical-structure","title":"RDM Logical Structure","text":"<ul> <li>DBMS sits between application and Database and abstracts data and metadata.</li> <li>RDM allows designer to ignore physical data layer  by focusing on logical layer.</li> <li>Table/Relation concept leads to structural and data independence.</li> </ul>"},{"location":"CIS-50/Chapter_3.html#basic-components--table-structure","title":"Basic Components &amp; Table Structure","text":"Term RDM Term Interpretation Table Relation sometimes mistakenly called a file Row Tuple sometimes mistakenly called a record Columns Attributes sometimes mistakenly called a field Keys Unique Group of Attributes Determiniation: Knowing A -&gt; Knowing B <ul> <li>Keys are Full Functional Dependencies, Knowing the Key attribute(s) -&gt; determins the values of other attributes.</li> <li>Full indicates ALL Key Attributes are necessary to determine determinants.<ul> <li>e.g. Determinant (Key) determins -&gt; Determinant (Other attributes)</li> <li>STU_NUM -&gt; (STU_LNAME, STU_FNAME, STU_GPA)</li> </ul> </li> <li>Composite Keys: keys with more than one key attribute</li> <li>Super Key: Uniquly determins (one and onkly one Row) all other attributes in table (Full Functional Dependency)</li> <li>Candidate Key: Superkey without unnecessary attributes.</li> <li>Primary Key: A candidate key chosen by the designer<ul> <li>Ensures Entity Integrity (Rows unique) by ensuring:<ul> <li>PK is unique</li> <li>PK can\u2019t be NULL</li> </ul> </li> </ul> </li> <li>NULL: Absence of value<ul> <li>Many NULLS indicates bad design</li> <li>Some can\u2019t be avoided (e.g. middle name)</li> <li>Can cause issues with COUNT, SUM, etc.</li> <li>Can cause issues with JOINs</li> </ul> </li> <li>Foreign Key: PK of one table placed in another to create a relationship.<ul> <li>Ensures Referential Integrity (Every FK must be NULL or have a valid PK in related table).</li> </ul> </li> <li>Secondary Key: Key use to narrow/speed up query results<ul> <li>Not guranteed to be unique</li> </ul> </li> </ul> <ul> <li>Some designers use flags instead of NULLS to alert user/application of certain conditions.</li> </ul>"},{"location":"CIS-50/Chapter_3.html#relational-operators--manipulation","title":"Relational Operators &amp; Manipulation","text":"<ul> <li>Relational Algebra: Theoretical ways of manipulating relations with relational operators.<ul> <li>Later we\u2019ll learn to use SQL to accomplish relational algebra operations.</li> <li>Minimally Relational: SELECT, PROJECT, JOIN</li> </ul> </li> <li>When speaking in terms of Relational Algebra:<ul> <li>RelVar (R) == Table: Structure that holds the data, which has 2 parts<ul> <li>Heading: Names of attributes</li> <li>Body: Holds the relation</li> </ul> </li> <li>Relation (r) == The actual data  </li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_3.html#set-operators","title":"Set Operators","text":"Note <p>Because Set Operators have closure property (i.e. Set Operators on relations ALWAYS produce new relations), you can combine them like so!</p> <p>\u03c0<sub>cus_fname,cus_lname</sub>(\u03c3<sub>cus_code=10010</sub>(customer))</p> <ul> <li>SELECT (or RESTRICT): Single table as input (unary), and retrives ALL or horizontal subsection of relation (i.e. rows). <ul> <li>\u03c3<sub>cus_code=10010</sub>(customer)</li> </ul> </li> <li>PROJECT: Single table as input (unary), and retrieves ALL vertical subsection of relation (i.e. columns) <ul> <li>\u03c0<sub>cus_fname,cus_lname</sub>(customer)</li> </ul> </li> <li>UNION: Combines rows of TWO relations (minus duplicates) with same attributes and domains (i.e. 2 tables with same number of columns and column types in the same order). <ul> <li>\u03c0<sub>supplier_name</sub>(supplier) \u22c3 \u03c0<sub>vendor_name</sub>(vendor)</li> </ul> </li> <li>INTERSECT: Yields only rows in common between TWO relations with same attributes and domains <ul> <li>\u03c0<sub>supplier_name</sub>(supplier) \u22c2 \u03c0<sub>vendor_name</sub>(vendor)</li> </ul> </li> <li>DIFFERENCE: Yields only rows found in relation 1 that aren\u2019t in relation 2 <ul> <li>\u03c0<sub>supplier_name</sub>(supplier) \u2013 \u03c0<sub>vendor_name</sub>(vendor)</li> </ul> </li> <li>PRODUCT: All possible combinations for rows from TWO tabnles. <ul> <li>customer \u00d7 agent</li> </ul> </li> <li>JOIN: <ul> <li>Natural Join: <ul> <li>customer \u22c8 agent</li> <li>\u03c0<sub>cus_code,cus_lname,cus_fname,cus_initial,cus_renew_date,agent_code,agent_areacode,agent_phone,agent_lname,agent_ytd_sls</sub>(\u03c3<sub>customer.agent_code=agent.agent_code</sub>(customer \u00d7 agent))</li> </ul> </li> <li>Left Outer Join: <ul> <li>Yields all of the rows in the relation 1, including those that do not have matching values in relation 2</li> <li>{(a1,\u2026,an)} be the singleton relation on the attributes that are unique to the relation agent</li> <li>customer \u22c8 agent \u22c3 ((customer \u2013 \u03c0<sub>c1,c2,c3,\u2026,cn</sub>(customer \u22c8 agent)) \u00d7 {(a1,\u2026,an)})</li> </ul> </li> <li>Right Outer Join: <ul> <li>Yields all of the rows in the relation 2, including those that do not have matching values in relation 1</li> </ul> </li> <li>Outer joins are the application of JOIN, DIFFERENCE, UNION, and PRODUCT</li> </ul> </li> <li>DIVIDE: Relation 1 is divided by Relation 2 on a common attribute to yield all data in Relation 1 that matches all data in Relation 2.<ul> <li>To be included in the result, unshared columns/attributes must have all the common attributes from table 2 associated in its rows. </li> <li>r \u00f7 s</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_3.html#data-dictionary--system-catalog","title":"Data Dictionary &amp; System Catalog","text":"<ul> <li>Both are  metadata (data about data)</li> </ul>"},{"location":"CIS-50/Chapter_3.html#data-dictionary---designer-view","title":"Data Dictionary - Designer View","text":"<ul> <li>Description of all tables in DB, and at a minimum contains:<ul> <li>Attributes</li> <li>Relationship types</li> <li>Entities</li> <li>Referential integrity checks and enforcement</li> <li>Index types and components</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_3.html#system-catalog---system-view","title":"System Catalog - System View","text":"<ul> <li>Is a detailed, system data dictionary.</li> <li>Data about all objects in the DB, like:<ul> <li>Table names</li> <li>Table\u2019s creator and creation date</li> <li>Number of columns in each table</li> <li>Data type corresponding to each column</li> <li>Index filenames</li> <li>Index creators</li> <li>Authorized users</li> <li>Access privileges</li> </ul> </li> <li>System created Database, that can be queried using SQL</li> </ul>"},{"location":"CIS-50/Chapter_3.html#identifying-entities--relationships","title":"Identifying Entities &amp; Relationships","text":"<ul> <li>1:M Is normal<ul> <li>Easily implemented by putting the primary key of the 1 side in the table of the many side as a foreign key.</li> <li></li> </ul> </li> <li>1:1 Is rare<ul> <li>Typically done by putting the primary key of one of the 1 sides in the other table. If the tables already have a 1:M relationship, the 1:1 relationship should be enforced by moving the primary key of the M side into the table with the 1 side.</li> <li>You can also link on other candidate keys as long as they are non-null and unique as defined.</li> <li></li> </ul> </li> <li>M:N Turns into multiple 1:M\u2019s by introducing a linking table (i.e. composite, bridge, associative entity)<ul> <li>Create a linking table with the primary key of the M side and the primary key of the N side becoming the primary key of the linking table. Introduce any other attributes to the linking table you think should be associated with the relationship.</li> <li></li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_3.html#handling-data-redundancy-in-rdm","title":"Handling Data Redundancy in RDM","text":"Note <p>The real test of redundancy is not how many copies of a given attribute are stored, but whether the elimination of an attribute will eliminate information. Therefore, if you delete an attribute and the original information can still be generated through relational algebra, the inclusion of that attribute would be redundant. Given that view of redundancy, proper foreign keys are clearly not redundant in spite of their multiple occurrences in a table. However, even when you use this less restrictive view of redundancy, keep in mind that controlled redundancies are often designed as part of the system to ensure transaction speed and/or information requirements.</p> <ul> <li>One such purposeful redundancy is product line price on an Invoice Line Item VS the product\u2019s current price in a product table.</li> <li>Another is the automatic generation of an invoice Line Number, which is redundant but allows for ordering line-items the same way everytime the invoice data is re-constructed.</li> </ul>"},{"location":"CIS-50/Chapter_3.html#purpose-of-indexing","title":"Purpose of Indexing","text":"<ul> <li>Index: An ordered arrangement of keys and pointers. Each key points to the location of the data identified by the key. </li> <li>Used to locate a needed item quickly via pointers.</li> <li>Can also be used to QUICKLY retrieve data ordered by a specific attribute or attributes (think Customers ordered by name, or Products ordered by Manufacturer).</li> <li>Primary Key is a special index called a Unique Index that can only have a single pointer.</li> <li>Indexes with multiple attributes, i.e. (PROD_CODE, MANUFACTUER_CODE), are called composite indexes.</li> </ul>"},{"location":"CIS-50/Chapter_3.html#am-i-an-rdms","title":"Am I an RDMS?","text":"Rule Rule Name Description 1 Information All information in a relational database must be logically represented as column values in rows within tables. 2 Guaranteed access Every value in a table is guaranteed to be accessible through a combination of table name, primary key value, and column name. 3 Systematic treatment of nulls Nulls must be represented and treated in a systematic way, independent of data type. 4 Dynamic online catalog based on the relational model The metadata must be stored and managed as ordinary data\u2014that is, in tables within the database; such data must be available to authorized users using the standard database relational language. 5 Comprehensive data sublanguage The relational database may support many languages; however, it must support one well-defined, declarative language as well as data definition, view definition, data manipulation (interactive and by program), integrity constraints, authorization, and transaction management (begin, commit, and rollback). 6 View updating Any view that is theoretically updatable must be updatable through the system. 7 High-level insert, update, and delete The database must support set-level inserts, updates, and deletes. 8 Physical data independence Application programs and ad hoc facilities are logically unaffected when physical access methods or storage structures are changed. 9 logical data independence Application programs and ad hoc facilities are logically unaffected when changes are made to the table structures that preserve the original table values (changing order of columns or inserting columns). 10 Integrity independence All relational integrity constraints must be definable in the relational language and stored in the system catalog, not at the application level. 11 Distribution independence The end users and application programs are unaware of and unaffected by the data location (distributed vs. local databases). 12 Nonsubversion If the system supports low-level access to the data, users must not be allowed to bypass the integrity rules of the database. 13 Rule zero All preceding rules are based on the notion that to be considered relational, a database must use its relational facilities exclusively for management."},{"location":"CIS-50/Chapter_4.html","title":"Entity Relationship Modeling","text":""},{"location":"CIS-50/Chapter_4.html#entity-relationship-modeling","title":"Entity Relationship Modeling","text":"Note <p>ERM is a Conceptual Model and is therefore  independent of Database type and can be used to model an organization\u2019s data requirments. ER Models are used in logical design, but for the purposes of this class, the conceptural model will be directly related to ER Components.</p>"},{"location":"CIS-50/Chapter_4.html#identify-er-components","title":"Identify ER Components","text":"<ul> <li>ERM forms basis of ERD (Conceptual End-User View)</li> <li>ERD comprises of: entities, attributes, and relationships and can take 3 forms:<ul> <li>Chen notation: Favors conceptual modeling.<ul> <li>Chen Notation</li> </ul> </li> <li>Crow\u2019s Foot notation: Favors implementation modeling.</li> <li>UML notation: Can be used for both conceptual or implementation modeling.</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_4.html#erm-parts","title":"ERM Parts","text":""},{"location":"CIS-50/Chapter_4.html#entities-entity-referes-to-entity-set-and-not-individual-occurances-ie-in-erm-think-table-not-row","title":"Entities: Entity referes to Entity set and not individual occurances (i.e. in ERM think table not row)","text":"<ul> <li>In all 3 notations it is a rectangle usually with an UPPERCASE noun NAME</li> </ul>"},{"location":"CIS-50/Chapter_4.html#attributes-characteristics-of-entities","title":"Attributes: Characteristics of Entities","text":"<ul> <li>Chen\u2019s notation: Ovals with UPPERCASE attribute name, connected via a line to entity rectangle </li> <li>UML and Crow\u2019s Foot: In a separate box below the entity rectangle.</li> <li>Required Attributes: Values are required</li> <li>Name/Label are usually BOLD</li> <li>Optional Attributes: can be left empty.</li> <li>Name/Label are normal</li> <li>Domain Attributes: restricted range of values (GPA, gender, address, etc.)</li> <li>Identifier Attributes: These are synonymous with Primary keys<ul> <li>Underlined in most notations.</li> <li>Composite Identifier: More than 1 attribute makes up the Primary Key<ul> <li>Usually just multiple underlined attributes.</li> </ul> </li> </ul> </li> <li>Composite Attributes: An attribute that can be sub-divided (e.g. Address)</li> <li>Chen notation is attribute bubbles stemmed from main attribute bubble.</li> <li>UML and Crow\u2019s Foot usually decompose these into individual simple attributes, but how that is done is left to the designer.</li> <li>Single Valued Attribute: Attributes with just a single value (Part No., SSN, etc.)<ul> <li>Could still be a Composite Attribute</li> </ul> </li> <li>Multivalued Attribute: Attributes that can have multiple values (Car: Top, Body, Trim Color, etc.)<ul> <li></li> <li>Implementing in ERD:<ul> <li>Method 1: Ceate new attributes for each value type (i.e. CAR_TOPCOLOR, CAR_BODYCOLOR, CAR_TRIMCOLOR), but this is only OK if:<ul> <li></li> <li>Every instance will have the same number of values for the multivalued attribute</li> <li>No instance will ever have more values</li> </ul> </li> <li>Method 2: Create a new Entity with a 1:M relationship back to the Entity the Multivalued attribute was attached to.<ul> <li></li> </ul> </li> </ul> </li> </ul> </li> <li>Derived Attributes: Attributes derived from other attributes (e.g. Age from DoB).<ul> <li>Chen Notation: Dashed line</li> <li>UML/Crow\u2019s Foot Notation: None</li> <li>Storing these in the DB depend on Application constraints and computational complexity.</li> <li>Most modern RDBMs\u2019 include features to support calculated attributes.</li> <li></li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_4.html#define-refine-and-incorporate-relationships-between-entities","title":"Define, Refine, and Incorporate Relationships Between Entities","text":"<ul> <li>Active or Passiver VERB association between 2 or more entities (AKA participants).</li> </ul>"},{"location":"CIS-50/Chapter_4.html#connectivity--cardinality","title":"Connectivity &amp; Cardinality","text":"<ul> <li>Relationships are always bi-directional connectivity, so when deciding on relationship classification ask yourself how the entities are connected going in both directions (e.g. Person -&gt; Dept and Dept -&gt; Person).</li> <li>Relationship connectivity can have minimum and maximum limits dubbed cardinality</li> <li>Cardinality is usually indicated in parenthesis like: (min, max), and are established by business rules. <ul> <li>Cardinality is enforced either at the application level or by databadse triggers</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_4.html#existence-and-independence","title":"Existence and Independence","text":"<ul> <li>An entity that can\u2019t exist without a dependent entity is existence-dependent entity (e.g. Dependent and Employee)</li> <li>An entity that can exist on its own, even though relationships exist are existence independent entities (e.g. Parts and Vendor, since a part might not have a Vendor).</li> </ul>"},{"location":"CIS-50/Chapter_4.html#relationship-strength","title":"Relationship Strength","text":"<ul> <li>Weak/Strong relationships are new to ERM and therefore not part of the conceptual Chen notation.</li> <li>A Weak or Non-Identifying relationship is one where the primary key of the related entity does NOT contain the primary key from the other related entity.<ul> <li>The typical 1:M relationship where the primary key from the 1 side becomes a foreign key on the M side is a weak relationship.</li> <li>A Dashed connecting line in a Crow\u2019s Foot diagram indicates a weak relationship.</li> <li></li> </ul> </li> <li>A Strong or Identifying relationship is one where the primary key of the related entity IS in the primary key of the other related entity.<ul> <li>A Solid connecting line in a Crow\u2019s Foot diagram indicates a strong relationship.</li> <li></li> </ul> </li> <li>The DB Designer must consider transactions, efficiency, and information requirements to decide the type of strength relationship to use.</li> </ul>"},{"location":"CIS-50/Chapter_4.html#entity-strength","title":"Entity Strength","text":"<ul> <li>Strong/Regular Entity simple need to satisfy existence independence</li> <li>A Weak Entity must be existence-dependent and have a Strong relationship<ul> <li></li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_4.html#relationship-participation","title":"Relationship Participation","text":"<ul> <li>Optional Participation: A row on the :M optional side of the relationship doesn\u2019t have to exist.<ul> <li>Designated with an O indicating optional participation in a Crow\u2019s Foot diagram.</li> <li>Cardinality minimum has to be 0</li> </ul> </li> <li>Mandatory Participation: A row on the :M side MUST exist.<ul> <li>Cardinality minimum has to be at least 1</li> </ul> </li> </ul> Note <p>The relationship strength depends on how the PK of the related entity is formulated, while the relationship participation depends on how the business rule is written. </p> <p>Below is a great connectivity example showing how Class is optional to Professors (i.e. professors may do research only), while every Class has to have 1 and only 1 Professor. </p>"},{"location":"CIS-50/Chapter_4.html#relationship-degree","title":"Relationship Degree","text":""},{"location":"CIS-50/Chapter_4.html#recursive-relationships","title":"Recursive Relationships","text":"<ul> <li>Method 1: Unary, add an attribute column that matches PK of table (e.g. Employee has a Manager). This is a 1:1 relationship where each entry will only have a single manager.</li> <li>Method 2: Binary, add a table with a 1:M relactionship where the :M side gets the PK from the 1: side. This allows for 1:M recursive relationships (e.g. PARTS composed of PARTS)</li> </ul>"},{"location":"CIS-50/Chapter_4.html#developing-an-er-diagram","title":"Developing an ER Diagram","text":""},{"location":"CIS-50/Chapter_4.html#iterative-process","title":"Iterative Process","text":"<ul> <li>Create a detailed narrative of the organization\u2019s description of operations.</li> <li>Identify the business rules based on the description of operations.</li> <li>Identify the main entities and relationships from the business rules.</li> <li>Develop the initial ERD.</li> <li>Identify the attributes and primary keys that adequately describe the entities.</li> <li>Revise and review the ERD. </li> </ul>"},{"location":"CIS-50/Chapter_4.html#db-design-tradeoffs-reconciling-conflicting-goals","title":"DB Design Tradeoffs, Reconciling Conflicting Goals","text":""},{"location":"CIS-50/Chapter_4.html#the-3-things-always-to-consider","title":"The 3 things always to consider","text":"<ul> <li>Design standards: Normalization, reduce nulls</li> <li>Processing speed: performance, security, shared access, and data integrity</li> <li>Information requirements</li> </ul>"},{"location":"CIS-50/Chapter_5.html","title":"Advanced Data Modeling","text":""},{"location":"CIS-50/Chapter_5.html#advanced-data-modeling","title":"Advanced Data Modeling","text":"Note <ul> <li>Learning Objectives<ul> <li>Describe the main extended entity relationship (EER) model constructs and how they are represented in ERDs and EERDs</li> <li>Use entity clusters to represent multiple entities and relationships in an entity relationship diagram (ERD)</li> <li>Describe the characteristics of good primary keys and how to select them</li> <li>Apply flexible solutions for special data-modeling cases</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_5.html#extended-entity-relationship-model-eerm","title":"Extended Entity Relationship Model (EERM)","text":"<ul> <li>Result of adding more semantic constructs to the original entity relationship (ER) model</li> <li>EER diagrams (EERDs) use the EER model</li> </ul>"},{"location":"CIS-50/Chapter_5.html#entity-supertypes-and-subtypes","title":"Entity Supertypes and Subtypes","text":"<ul> <li>Entity supertype<ul> <li>Generic entity type related to one or more entity subtypes</li> <li>Contains common characteristics</li> </ul> </li> <li>Entity subtype<ul> <li>Contains unique characteristics of each entity subtype</li> <li>Criteria to determine usage</li> </ul> </li> <li>There must be different, identifiable kinds of the entity in the user\u2019s environment<ul> <li>The different kinds of instances should each have one or more attributes that are unique to that kind of instance</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_5.html#specialization-hierarchy","title":"Specialization Hierarchy","text":"<ul> <li>Entity supertypes and subtypes are organized in a specialization hierarchy<ul> <li>Depicts arrangement of higher-level entity supertypes and lower-level entity subtypes</li> <li>Relationships are described in terms of \u201cis-a\u201d relationships</li> <li>Subtype exists within the context of a supertype</li> <li>Every subtype has one supertype to which it is directly related</li> <li>Supertype can have many subtypes</li> </ul> </li> <li>A specialization hierarchy provides the means to:<ul> <li>Support attribute inheritance</li> <li>Define a special supertype attribute known as the subtype discriminator</li> <li>Define disjoint or overlapping constraints and complete or partial constraints</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_5.html#inheritance","title":"Inheritance","text":"<ul> <li>Enables an entity subtype to inherit attributes and relationships of the supertype<ul> <li>All entity subtypes inherit their primary key attribute from their supertype</li> <li>At the implementation level, supertype and its subtype(s) maintain a 1:1 relationship</li> <li>Entity subtypes inherit all relationships in which supertype entity participates</li> <li>Lower-level subtypes inherit all attributes and relationships from its upper-level supertypes</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_5.html#subtype-discriminator","title":"Subtype Discriminator","text":"<ul> <li>Attribute in the supertype entity that determines to which entity subtype the supertype occurrence is related<ul> <li>Default comparison condition is the equality comparison</li> <li>In some situations the subtype discriminator is not necessarily based on an equality comparison</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_5.html#disjoint-and-overlapping-constraints","title":"Disjoint and Overlapping Constraints","text":"<ul> <li>Disjoint subtypes: contain a unique subset of the supertype entity set<ul> <li>Known as nonoverlapping subtypes</li> <li>Implementation is based on the value of the subtype discriminator attribute in the supertype</li> </ul> </li> <li>Overlapping subtypes: contain nonunique subsets of the supertype entity set<ul> <li>Implementation requires the use of one discriminator attribute for each subtype</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_5.html#completeness-constraint","title":"Completeness Constraint","text":"<ul> <li>Specifies whether each supertype occurrence must also be a member of at least one subtype<ul> <li>Partial completeness: not every supertype occurrence is a member of a subtype</li> <li>Total completeness: every supertype occurrence must be a member of at least one subtypes </li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_5.html#specialization-and-generalization-aka-top-down-and-bottom-up-development","title":"Specialization and Generalization (AKA Top-Down and Bottom-Up Development)","text":"<ul> <li>Specialization<ul> <li>Top-down process</li> <li>Identifies lower-level, more specific entity subtypes from a higher-level entity supertype</li> <li>Based on grouping unique characteristics and relationships of the subtypes</li> </ul> </li> <li>Generalization<ul> <li>Bottom-up process</li> <li>Identifies a higher-level, more generic entity supertype from lower-level entity subtypes</li> <li>Based on grouping common characteristics and relationships of the subtypes</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_5.html#entity-clustering","title":"Entity Clustering","text":"<ul> <li>Virtual entity type used to represent multiple entities and relationships in ERD<ul> <li>Formed by combining multiple interrelated entities into a single, abstract entity object</li> <li>General rule: avoid the display of attributes to eliminate complications that result when the inheritance rules change</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_5.html#selecting-primary-keys","title":"Selecting Primary Keys","text":"<ul> <li>Primary keys: single attribute or a combination of attributes<ul> <li>Uniquely identifies each entity instance</li> <li>Guarantees entity integrity</li> <li>Works with foreign keys to implement relationships</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_5.html#natural-keys-and-primary-keys","title":"Natural Keys and Primary Keys","text":"<ul> <li>Natural key or natural identifier: real-world identifier used to uniquely identify real-world objects<ul> <li>Familiar to end users and forms part of their day-to-day business vocabulary</li> <li>Used as the primary key of the entity being modeled </li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_5.html#primary-key-guidelines","title":"Primary Key Guidelines","text":"<ul> <li>Desirable primary key characteristics<ul> <li>Non intelligent </li> <li>No change over time </li> <li>Preferably single-attribute</li> <li>Preferably numeric</li> <li>Security-compliant</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_5.html#when-to-use-composite-primary-keys","title":"When to Use Composite Primary Keys","text":"<ul> <li>Identifiers of composite entities (i.e. things like Invoice/Invoice Line)<ul> <li>Each primary key combination is allowed once in M:N relationship</li> </ul> </li> <li>Identifiers of weak entities (i.e. Dependent because it doesn\u2019t exist on its own)<ul> <li>Strong identifying relationship with the parent entity</li> <li>Represents a real-world object that is existence-dependent on another real-world object</li> <li>Represented in the data model as two separate entities in a strong identifying relationship</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_5.html#when-to-use-surrogate-primary-keys","title":"When to Use Surrogate Primary Keys","text":"<ul> <li>Primary key used to simplify the identification of entity instances <ul> <li>Useful when there is no natural key</li> <li>Helpful if selected candidate key has embedded semantic contents or is too long </li> </ul> </li> <li>Require ensuring that the candidate key of entity in question performs properly<ul> <li>Use \u201cunique index\u201d and \u201cnot null\u201d constraints</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_5.html#implementing-11-relationships","title":"Implementing 1:1 Relationships","text":"<ul> <li>Foreign keys work with primary keys to properly implement relationships in relational model<ul> <li>Place primary key of the parent entity on the dependent entity as foreign key</li> </ul> </li> <li>Options for selecting and placing the foreign key<ul> <li>Place a foreign key in both entities</li> <li>Place a foreign key in one of the entities </li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_5.html#maintaining-history-of-time-variant-data","title":"Maintaining History of Time-Variant Data","text":"<ul> <li>Time-variant data: data whose values change over time and for which a history of the data changes must be retained<ul> <li>Requires creating a new entity in a 1:M relationship with the original entity </li> <li>New entity contains the new value, date of the change, and any other pertinent attribute</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_5.html#fan-traps","title":"Fan Traps","text":"<ul> <li>Design trap: occurs when a relationship is improperly or incompletely identified<ul> <li>Represented in a way not consistent with the real world</li> </ul> </li> <li>Fan trap: occurs when one entity is in two 1:M relationships to other entities<ul> <li>Produces an association among other entities not expressed in the model</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_5.html#redundant-relationships","title":"Redundant Relationships","text":"<ul> <li>Occur when there are multiple relationship paths between related entities<ul> <li>Must remain consistent across the model</li> <li>Help simplify the design</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_6.html","title":"Lecture","text":""},{"location":"CIS-50/Chapter_6.html#normalization","title":"Normalization","text":"Normalization <ul> <li>Good table structures</li> <li>Controls data redundancies</li> <li>Avoids modification anomalies</li> </ul>"},{"location":"CIS-50/Chapter_6.html#what-is-database-normalization","title":"What is Database Normalization","text":""},{"location":"CIS-50/Chapter_6.html#definition","title":"Definition","text":"<ul> <li>Normalization: Finding and fixing table structure errors, which eliminates redundancy and reduces data anomalies.</li> <li>With normalization key attributes are called prime attributes and nonkey attributes are called non-prime attributes</li> </ul>"},{"location":"CIS-50/Chapter_6.html#normalization-goals","title":"Normalization Goals","text":"<ul> <li>Each Table/Relation represents a single subject.</li> <li>Each attribute (row/column intersection) contains only a single value (not a group of values).</li> <li>Controlled and minimum data redundancy, a value is not unnecessairily duplicated in other tables.</li> <li>All non-prime / nonkey attributes are dependent on the primary key (ensures data is unique to PK).</li> <li>There is no Table/Relation where a Insert, Update, or Delete can cause a data anomaly (ensures data integrity)</li> </ul>"},{"location":"CIS-50/Chapter_6.html#basic-process","title":"Basic Process","text":"<ul> <li>Assign table attributes based on determination and functional dependency discussed in Chapter 3 to build ERD.<ul> <li>Identifying business rules</li> <li>Identifying and defining business and data constraints</li> <li>Defining functional dependencies</li> <li>Identifying entities and relationships</li> <li>Eliminating multivalued attributes</li> </ul> </li> <li>Normalization is then applied to analyze ERD and determine if structure can be improved.</li> <li>The process is applied in steps from 1NF to 3NF, which is usually good enough.<ul> <li>1NF Steps</li> <li>2NF Steps</li> <li>3NF Steps</li> <li>Additional Steps</li> </ul> </li> <li>There are legitimate reasons to violate 3NF and higher forms, however. So 3NF is not always optimal.<ul> <li>3NF engenders the need for more tables, therefore more joins and more Compute/Memory resources.<ul> <li>Performance / Anomaly-Redundancy trade off is often a concern.</li> <li>Designers denormalize and compromise anomalies for performance.</li> </ul> </li> </ul> </li> <li>Most of the time designers are asked to use normalization process to anaylze and rectify existing files, spreadsheets and data structures.</li> </ul>"},{"location":"CIS-50/Chapter_6.html#normal-forms-low-to-high-transforms","title":"Normal Forms, Low to High Transforms","text":"<ul> <li>Partial Dependency: (A, B)  (C, D), B  C, and (A, B) is the PK then B  C is a partial dependency since its only partially dependent on the PK.</li> <li>Transitive Dependency: X  Y, Y  Z, and X is the PK then X  Z is a transitive dependency because X has a path directly to Z.<ul> <li>Transitive dependencies occur only when a functional dependence exists among nonprime attributes (i.e. Y -&gt; Z because Y is non-prime).</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_6.html#unnormalizedraw-data","title":"Unnormalized/Raw data","text":"<ul> <li>Will often contain redundant data, multivalued data, and other data anomalies like data integrity and data inconsistency</li> </ul>"},{"location":"CIS-50/Chapter_6.html#1nf","title":"1NF","text":"<ul> <li>All of the key attributes are defined.</li> <li>There are no repeating groups in the table. In other words, each row/column intersec- tion contains one and only one value, not a set of values.</li> <li>All attributes are dependent on the primary key.</li> </ul>"},{"location":"CIS-50/Chapter_6.html#1nf-steps","title":"1NF Steps:","text":"<ol> <li>Split grouped attributes into there own rows (i.e. for a row with grouped column of EmpIDs 1,2,3,\u2026 the row would be duplicated for each ID in the column EmpIDs.</li> <li>A Primary Key should be identified (i.e. for raw data it must be a set of attributes that combined identifies each row uniquely).</li> <li>Identify ALL dependencies using a dependency diagram like below:</li> </ol> Dependency <ol> <li>PK is Bold, Underline, and Colored</li> <li>Top arrows are dependencies based off PK</li> <li>Bottom arrows indicate Partial  and Transitive dependencies</li> </ol>"},{"location":"CIS-50/Chapter_6.html#2nf","title":"2NF","text":"<ul> <li>If 1NF has non-Composite PK, Table/Relation is already in 2NF</li> <li>It is in 1NF.</li> <li>It includes no partial dependencies; no attribute is dependent on only a portion of PK.</li> <li>Transitive dependencies may still exist.</li> </ul>"},{"location":"CIS-50/Chapter_6.html#2nf-steps","title":"2NF Steps:","text":"<ol> <li>Eliminate Partial Dependencies<ul> <li>Create new Tables/Relations from each parital PK (partial PK becomes PK of new table)</li> <li>Leave partial PK/determinant attribute in original table as FK.</li> </ul> </li> <li>Use 1NF dependency diagram to reassign dependent attributes of Partial PK<ul> <li>Dependent attributes are moved to corresponding new table.</li> </ul> </li> </ol>"},{"location":"CIS-50/Chapter_6.html#3nf","title":"3NF","text":"<ul> <li>It is in 2NF</li> <li>It includes no transitive dependencies.</li> </ul>"},{"location":"CIS-50/Chapter_6.html#3nf-steps","title":"3NF Steps:","text":"<ol> <li>Make new Tables/Relations to eliminate transitive dependencies.<ul> <li>Create new Tables/Relations from each Transitive determinant (determinant becomes PK of new table)</li> <li>Leave determinant attribute in original table as FK.</li> </ul> </li> <li>Use 2NF dependency diagram to reassign dependent attributes of Transitive determinant.<ul> <li>Dependent attributes are moved to corresponding new table.</li> </ul> </li> </ol> Multiple <p>The steps above are slightly complicated when a table has multiple candidate keys because the designer will need to pick one to become the PK. Identifying the candidate keys is still essential, however because composite candidate keys will still indicate partial dependencies, and likewise candidate keys are a sign that transitive dependencies may NOT exist since a transitive dependency requires the determinant attribute to be non-prime (i.e. not a part of any key and determined by a key).</p>"},{"location":"CIS-50/Chapter_6.html#additional-steps","title":"Additional Steps","text":"<ul> <li>Evaluate PK Assignments: Make sure the primary keys for each table make sense (e.g. use IDs/Codes instead of data entry items like Names for PKs</li> <li>Evaluate Naming Conventions: Make sure all attributes follow the DB naming conventions like Table prefix, all caps, and column names that clearly identify the purpose of the attribute.</li> <li>Refine Attribute Atomicity: Decompose attributes like Name into FIRST_NAME and LAST_NAME to abet query flexibility.</li> <li>Identify New Attributes: Add attributes that may be missing but necessary for fulfilling business rules.</li> <li>Identify New Relationships: If business rules ask for Table A to be related to Table B (i.e. Manager to Project, etc.), make sure such relationships exist.</li> <li>Refine Primary Keys as Required for Data Granularity: E.G. Make sure attributes like HOURS are defined within a timeframe and determine if multiple HOURS row entries should be allowed. If so, a surrogate key or posibly even another Table/Relation may be needed.</li> <li>Maintain Historical Accuracy: Make sure attributes like LINE_PRICE and ITEM_PRICE exist in appropriate tables if historical accuracy is necessary. In the example, LINE_PRICE would never change, but ITEM_PRICE might.</li> <li>Evaluate Using Derived Attributes: Make sure to add columns for derived attributes based on compute and performance needs.</li> <li>Clean up Composite Keys: Composite keys can become cumbersome by making foreign keys difficult or searches by PK more difficult, thus clean them up with surrogate keys, but make sure to:<ul> <li>Replace composite key with a surrogate and add any unique indexes to ensure data integrity.</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_6.html#boyce-codd-normal-form-bcnf","title":"Boyce-Codd Normal Form (BCNF)","text":"<ul> <li>A table is in Boyce-Codd normal form (BCNF) when every determinant in the table is a candidate key.</li> <li> <p>A 3NF Table/Relation only violates BCNF if it has multiple candidate keys.</p> </li> <li> <p>Example below is in 3NF because what looks like a transitive dependency is actually a dependency between candidate keys. Thus, it violates BCNF, but not 3NF. </p> </li> </ul>"},{"location":"CIS-50/Chapter_6.html#4nf","title":"4NF","text":"<ul> <li>A table is in fourth normal form (4NF) when it is in 3NF and has no multivalued dependencies.<ul> <li>4NF may be necessary if you have a table with 2 or more multivalue dependencies/attributes, independent from eachother, but dependent on what would be a single key. E.g. An EMPLOYEE with multiple ORG_CODE and multiple ASSIGNMENTS, but ASSIGNMENTS are or can be separate from ORG_CODE.</li> </ul> </li> <li>You can avoid 4NF by building your tables with 2 rules:<ul> <li>All attributes must be dependent on the primary key, but they must be independent of each other. *No row may contain two or more multivalued facts about an entity.</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_6.html#denormalization","title":"Denormalization","text":""},{"location":"CIS-50/Chapter_6.html#problems-with-denormalization","title":"Problems with Denormalization","text":"<ul> <li>Data Anomalies like:<ul> <li>Update Anomaly: e.g. Updating CLASS HOURS but multiple rows have a reference to the HOURS attribute, so many updated rows are necessary.</li> <li>Delete Anomaly: e.g. delete last STUDENT in table associated with a CLASS also deletes historical knowledge of class.</li> <li>Insert Anomaly: e.g. Insert of STUDENT in a table requiring CLASS assignment requires a DUMMY class or a NULL</li> </ul> </li> <li>Data updates are less efficient because programs that read and update tables must deal with larger tables.</li> <li>Indexing is more cumbersome. It is simply not practical to build all of the indexes required for the many attributes that might be located in a single unnormalized table.</li> <li>Unnormalized tables yield no simple strategies for creating virtual tables known as views. You will learn how to create and use views in Chapter 8, Advanced SQL.</li> </ul>"},{"location":"CIS-50/Chapter_6.html#minimum-erd-data-modeling-checklist","title":"Minimum ERD Data-Modeling Checklist","text":"<ul> <li>Help yourself, follow the process.</li> </ul>"},{"location":"CIS-50/Chapter_7.html","title":"Structured Query Language","text":""},{"location":"CIS-50/Chapter_7.html#structured-query-language-sql","title":"Structured Query Language (SQL)","text":""},{"location":"CIS-50/Chapter_7.html#criteria-for-an-ideal-db-language-which-sql-is","title":"Criteria for an ideal DB Language, which SQL is!","text":"<ul> <li>Create database and table structures, perform basic data management chores (CRUD)</li> <li>Perform complex queries designed to transform raw data into useful information.</li> <li>Require minimal user effort</li> <li>Easy to learn<ul> <li>Fewer than 100 words in command set</li> <li>Declarative, NOT Procedural (i.e. you just declare what you want in SQL and the RDBMS figures out how to get/do your command).</li> </ul> </li> <li>Portable<ul> <li>ANSI/ISO SQL standard exist, so only minor dialect differences between competing DB Software manufacturers.</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_7.html#categories-of-sql","title":"Categories of SQL","text":"<ul> <li>Data Manipulation Language (DML): Manipulates data<ul> <li>INSERT, SELECT, UPDATE, DELETE</li> </ul> </li> </ul> <ul> <li>Data Definition Language (DDL): Creates or alters schema and structure<ul> <li>CREATE, DROP, ALTER, TRUNCATE, RENAME</li> </ul> </li> </ul> <ul> <li>Transaction Control Language (TCL): Manages multiple DML commands from Bus. Rules in transactions.<ul> <li>A transaction is a logical unit of work of set of DML commands.</li> <li>COMMIT, ROLLBACK, SAVEPOINT</li> </ul> </li> <li>Data Control Language (DCL): Access Control, security and permissions.<ul> <li>GRANT, REVOKE</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_7.html#queries-and-operations","title":"Queries and Operations","text":"Important <p>Most SQL data manipulation commands operate over an entire table/relation, which is why SQL commands are said to be set-oriented commands. This is important because it allows users to treat SQL commands like building blocks. Once you know the building blocks, you can put them together to declare more complex sets you want.</p>"},{"location":"CIS-50/Chapter_7.html#intro-to-data-types","title":"Intro to Data Types","text":"<ul> <li>Data Type is basically the KIND of data that an attribute represents.</li> <li>Different RDBMs have similar and different data types, but all DB types fall under 3 categories:</li> </ul>"},{"location":"CIS-50/Chapter_7.html#3-fundamental-types-of-data","title":"3 Fundamental Types of Data","text":"<ul> <li>Character data: Any printable characters such as alphabetic values, digits, punctuation, and special characters.</li> <li>Numeric data: digits, such that the data has a specific numeric value.</li> <li>Date data: DATES and Times ;-)</li> </ul>"},{"location":"CIS-50/Chapter_7.html#retrieval-select-query","title":"Retrieval (SELECT Query)","text":""},{"location":"CIS-50/Chapter_7.html#basic-terms","title":"Basic Terms","text":"<ul> <li>SELECT: specifies the attributes to be returned by the query</li> <li>FROM: specifies the table(s) from which the data will be retrieved</li> <li>WHERE: filters the rows of data based on provided criteria</li> <li>GROUP BY: groups the rows of data into collections based on sharing the same values in one or more attributes</li> <li>HAVING: filters the groups formed in the GROUP BY clause based on provided criteria</li> <li>ORDER BY: sorts the final query result rows in ascending or descending order based on the values of one or more attributes.</li> </ul>"},{"location":"CIS-50/Chapter_7.html#basic-structure","title":"Basic Structure","text":"<pre><code>SELECT [wildcard | column-list] FROM [table-list];\n</code></pre> <ul> <li>Column-list: Relational projection of attributes to return.</li> <li>Table-list: Relations to be joined in query. </li> <li>Wildcard: \u201c*\u201d characters used to designate ALL columns in the relations.</li> </ul>"},{"location":"CIS-50/Chapter_7.html#examples","title":"Examples","text":"<pre><code># Get all rows and columns from product table.\nSELECT * FROM Product;\n</code></pre> <pre><code># Get all rows but only columns P_CODE, P_DESCRIPT, P_PRICE, and P_QOH  from product table.\nSELECT P_CODE, P_DESCRIPT, P_PRICE, P_QOH FROM Product;\n</code></pre> <pre><code># Get all rows but only columns P_CODE, P_DESCRIPT, P_PRICE, and P_QOH  from product table.\n# Alias/Rename the resulting columns in the relation to: Id, Description, Price, and Qty.\nSELECT P_CODE AS Id, P_DESCRIPT AS Description, P_PRICE AS Price, P_QOH AS Qty FROM Product;\n</code></pre> <pre><code># Get all rows but only columns P_DESCRIPT, P_QOH, P_PRICE, and derived/calculated column INV_VAL  from product table.\nSELECT P_DESCRIPT, P_QOH, P_PRICE, P_QOH * P_PRICE AS INV_VAL FROM PRODUCT;\n</code></pre> <pre><code># Get a list of products and the warranty cutoff date for products\n# Swap out Date function as needed based on RDBMS Access: DATE(), SQL Server: GETDATE(), MySQL: CURDATE(), Oracle: SYSDATE \nSELECT P_CODE, P_INDATE, SYSDATE \u2013 90 AS CUTOFF FROM PRODUCT;\n</code></pre> <pre><code># Select all the UNIQUE vendors that have products (i.e. DISTINCT removes repeats).\nSELECT DISTINCT V_CODE FROM PRODUCT;\n</code></pre>"},{"location":"CIS-50/Chapter_7.html#other-notes","title":"Other Notes","text":"<ul> <li>When using Arithmetic Operators in derived/calculated columns PEMDAS applies.</li> <li>Dates are typically stored as a number in RDBMs as the number of days since a specific date in history.<ul> <li>Thus Date arithmetic is + or - the number of days.</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_7.html#joining","title":"Joining","text":""},{"location":"CIS-50/Chapter_7.html#basic-terms_1","title":"Basic Terms","text":"<ul> <li>FROM: specifies the table(s) from which the data will be retrieved. Tables joined by PK/FK pairs or a auto selected common attribute..</li> <li>NATURAL JOIN: returns all rows with matching values in the matching columns and eliminates duplicate columns.<ul> <li>Joins on attributes with identical names and data-types</li> <li>Joins only common values in chosen attribute(s)</li> <li>Eliminates duplicate common attribute</li> <li>If no common attributes, returns relational product of 2 tables (i.e. each row from table1 duplicated with each row of table2).</li> <li>Usage is discouraged becuase table changes can affect common attribute joins</li> </ul> </li> <li>JOIN USING: returns only the rows with matching values in the column indicated in the USING clause.<ul> <li>The column must exist in both tables.</li> <li>Eliminates duplicate common attribute</li> <li>Only in MySQL and Oracle</li> <li>Oracle doesn\u2019t allow usage of table qualifiers can\u2019t be used with the common attribute.</li> </ul> </li> <li>JOIN ON: joins tables with no common attribute based on equality condition.<ul> <li>Attributes equality condition must have the same data-type.</li> <li>Preferred Join method because its the most widely supported.</li> <li>Does NOT eliminate duplicate common attribute(s)</li> <li>table qualifier must be used to referr to duplicate common attributes.</li> </ul> </li> <li>OUTER JOINS:<ul> <li>LEFT: returns not only the rows matching the join condition, but also the rows in the left table with unmatched values in the right table.</li> <li>RIGHT: returns not only the rows matching the join condition, but also the rows in the right table with unmatched values in the left table.</li> <li>FULL: returns not only the rows matching the join condition, but also the rows with unmatched values in the table on eithr side.<ul> <li>Only supported by Oracle and SqlServer</li> </ul> </li> </ul> </li> <li>CROSS JOIN: Cartesian/Relational Product, joins all rows from table1 to all rows in table2<ul> <li>Not supported in Access</li> </ul> </li> <li>TABLE ALIAS: A way of renaming a table in a query for 3 common purposes:<ul> <li>Shortening names</li> <li>Improving query human readability.</li> <li>Recursive Joins (table joined to itself)</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_7.html#basic-structure_1","title":"Basic Structure","text":"<ul> <li>NATURAL JOIN: SELECT [column-list] FROM [table1] NATURAL JOIN [table2]</li> <li>JOIN USING: SELECT [column-list] FROM [table1] JOIN [table2] USING ([common-column])</li> <li>JOIN ON: SELECT [column-list] FROM [table1] JOIN [table2] ON [join-condition]</li> <li>LEFT OUTER JOIN: SELECT [column-list] FROM [table1] LEFT OUTER JOIN [table2] ON [join-condition]</li> <li>RIGHT OUTER JOIN: SELECT [column-list] FROM [table1] RIGHT OUTER JOIN [table2] ON [join-condition]</li> <li>FULL OUTER JOIN: SELECT [column-list] FROM [table1] FULL OUTER JOIN [table2] ON [join-condition]</li> <li>CROSS JOIN: SELECT [column-list] FROM [table1] CROSS JOIN [table2]</li> </ul>"},{"location":"CIS-50/Chapter_7.html#examples_1","title":"Examples","text":"<pre><code># Natural join to get all customers and their invoices joined on some auto selected common attribute.\nSELECT CUS_CODE, CUS_LNAME, INV_NUMBER, INV_DATE FROM CUSTOMER NATURAL JOIN INVOICE;\n</code></pre> <pre><code># Join Using to get product to vendor relation USING V_CODE.\nSELECT P_CODE, P_DESCRIPT, V_CODE, V_NAME, V_AREACODE, V_PHONE FROM PRODUCT JOIN VENDOR USING (V_CODE);\n</code></pre> <pre><code># Joins Invoice and Line tables utilizing ON equality clause. \nSELECT INVOICE.INV_NUMBER, PRODUCT.P_CODE, P_DESCRIPT, LINE_UNITS, LINE_PRICE FROM INVOICE JOIN LINE ON INVOICE.INV_NUMBER = LINE.INV_NUMBER JOIN PRODUCT ON LINE.P_CODE = PRODUCT.P_CODE;\n</code></pre> <pre><code># Demonstrating using table qualifiers to project duplicate common attributes.\nSELECT P_CODE, VENDOR.V_CODE, V_NAME FROM PRODUCT JOIN VENDOR ON PRODUCT.V_CODE = VENDOR.V_CODE;\n</code></pre> <pre><code># Result includes all product rows without matching vendors as well as all vendor rows without matching products\nSELECT P_CODE, VENDOR.V_CODE, V_NAME FROM VENDOR FULL JOIN PRODUCT ON VENDOR. V_CODE = PRODUCT.V_CODE;\n</code></pre> <pre><code># Combines all invoices with all invoice lines.\nSELECT * FROM INVOICE CROSS JOIN LINE;\n</code></pre> <pre><code># Example of a table alias to handle a recursive joining an employee to their manager\nSELECT E.EMP_NUM, E.EMP_LNAME, E.EMP_MGR, M.EMP_LNAME FROM EMP E JOIN EMP M ON E.EMP_MGR = M.EMP_NUM;\n</code></pre>"},{"location":"CIS-50/Chapter_7.html#sort-searchrestriction-criteria","title":"Sort, Search/Restriction Criteria","text":""},{"location":"CIS-50/Chapter_7.html#basic-terms_2","title":"Basic Terms","text":"<ul> <li>ORDER BY: Sorts result rows by list of columns in order from first to last in list.<ul> <li>NULLS in order by column list results either come first or last depending on the RDBMS</li> <li>Oracle allows ordering NULLS with ORDER BY column DESC NULLS LAST; or NULLS FIRST</li> </ul> </li> <li>WHERE: Adds conditional restrictions to SELECT or search criteria allowing limits to rows in query results.<ul> <li><ul> <li>Comparison Operators can be used on character data to compare alphebetically left-to-right.</li> <li>Numbers or Dates stored incorrectly as character data can produce anomalies when comparison operators are used.</li> </ul> </li> <li>Logical Operators (AND, OR, and NOT): Allow to test multiple conditions in WHERE condition list<ul> <li>AND: Used in WHERE or HAVING clause, and all conditions must be true.</li> <li>OR: Used in WHERE or HAVING clause, and any of the conditions must be true.</li> <li>NOT: negates result of other conditions, turns TRUE to FALSE and vice versa</li> <li>Logical operators can be combined, but must be organized with parenthesis.</li> </ul> </li> </ul> </li> <li>Old Syle Joins: Joins that have a comma separated list of tables in the FROM clause and the join conditions in the WHERE clause.<ul> <li>No longer recommended for 2 major reasons<ul> <li>Splits joins between FROM and WHERE clauses making them less human readable.</li> <li>Susceptable to undetected errors because RDBMS can\u2019t determine if JOIN clauses actually exist syntactically.</li> </ul> </li> </ul> </li> </ul> Note <p>Most RDBMS search criteria are case sensitive, so its a good idea to wrap column with UPPER() functions before performing comparisons in the following Special Operators.</p> <ul> <li>Special Operators:<ul> <li>BETWEEN: Used to check if value is in a range (Always list LOW test value first to avoid Empty results).</li> <li>IN: Used to check if value is in a list.<ul> <li>Used heavily in subqueries as a subquery can return the list of things to compare to.</li> </ul> </li> <li>LIKE: Used to match a character pattern<ul> <li>Like can use multiple wild-cards in its matches.</li> <li>\u2019%\u2019 is a wild-card strings to match anything before, between, or after its appearance.</li> <li>\u2018_\u2019 is a wild-card to match just a single character wherever it appears.</li> <li>Access uses \u2018*\u2019 and \u2018?\u2019 instead of \u2018%\u2019 and \u2018_\u2019</li> </ul> </li> <li>IS NULL: Used to detect NULL values specifically.<ul> <li>This operator is needed because using the = operator to compare to NULL is undefined, meaning it will always be false, thus yeilding empty results..</li> </ul> </li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_7.html#basic-structure_2","title":"Basic Structure","text":"<ul> <li>ORDER By: SELECT [column-list] FROM [table-list] ORDER BY [column-list ASC | DESC];</li> <li>WHERE: SELECT [columnlist] FROM [tablelist] WHERE [conditionlist] ORDER BY [columnlist ASC | DESC];</li> <li>BETWEEN: SELECT [columnlist] FROM [tablelist] WHERE [column] (NOT) BETWEEN [min value] AND [max value];</li> <li>IN: SELECT [columnlist] FROM [tablelist] WHERE [column] (NOT) IN ( [comma-sep-value-list] );</li> <li>LIKE: SELECT [columnlist] FROM [tablelist] WHERE UPPER( [column] ) (NOT) LIKE [\u2018pattern to match\u2019];</li> <li>IS NULL: SELECT [columnlist] FROM [tablelist] WHERE [column] IS (NOT) NULL;</li> </ul>"},{"location":"CIS-50/Chapter_7.html#examples_2","title":"Examples","text":"<pre><code># Get list of products sorted by Price from High to Low.\nSELECT P_CODE, P_DESCRIPT, P_QOH, P_PRICE\n  FROM PRODUCT ORDER BY P_PRICE DESC;\n</code></pre> <pre><code># Cascading order sequence lname, fname, then middle initial\nSELECT EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_AREACODE, EMP_PHONE\n  FROM EMPLOYEE\nORDER BY EMP_LNAME, EMP_FNAME, EMP_INITIAL;\n</code></pre> <pre><code># Order by with derived column/attribute\nSELECT P_CODE, P_DESCRIPT, V_CODE, P_PRICE * P_QOH AS TOTAL\n  FROM PRODUCT\nORDER BY V_CODE, TOTAL DESC;\n</code></pre> <pre><code># Select product info for all vendors except 21344\nSELECT P_DESCRIPT, P_QOH, P_PRICE, V_CODE FROM PRODUCT WHERE V_CODE &lt;&gt; 21344;\n</code></pre> <pre><code># Date Query MSSQL\nSELECT P_DESCRIPT, P_QOH, P_MIN, P_PRICE, P_INDATE FROM PRODUCT WHERE P_INDATE &gt;= '20-Jan-2018';\n</code></pre> <pre><code># Date Query MySQL\nSELECT P_DESCRIPT, P_QOH, P_MIN, P_PRICE, P_INDATE FROM PRODUCT WHERE P_INDATE &gt;= '2018-01-21';\n</code></pre> <pre><code># Date Query Access\nSELECT P_DESCRIPT, P_QOH, P_MIN, P_PRICE, P_INDATE FROM PRODUCT WHERE P_INDATE &gt;= #20-Jan-2018#;\n</code></pre> <pre><code># Get all the products from Vendor 25595 and 24288 that are over $100\nSELECT P_DESCRIPT, P_PRICE, V_CODE\n  FROM PRODUCT WHERE (V_CODE = 25595 OR V_CODE = 24288) AND P_PRICE &gt; 100;\n# Or with IN operator\nSELECT * FROM PRODUCT WHERE V_CODE IN ('25595', '24288') AND P_PRICE &gt; 100;\n</code></pre> <pre><code># Get vendors with a contact where the last name contains OS as the 2nd and 3rd characters.\nSELECT V_NAME, V_CONTACT, V_AREACODE, V_PHONE FROM VENDOR WHERE UPPER(V_CONTACT) LIKE '_OS%';\n</code></pre> <pre><code># Get all products that don't have a vendor (i.e. NULL vendor).\nSELECT P_CODE, P_DESCRIPT, V_CODE FROM PRODUCT WHERE V_CODE IS NULL;\n</code></pre>"},{"location":"CIS-50/Chapter_7.html#aggregation","title":"Aggregation","text":"<ul> <li>Most aggregate functions take a single attribue as a parameter.</li> <li>Aggregate functions generally take entire collection of rows from an attribute and reduce it to a single rowed result.</li> </ul>"},{"location":"CIS-50/Chapter_7.html#basic-terms_3","title":"Basic Terms","text":"<ul> <li>COUNT typically doesn\u2019t count NULLs, so you\u2019ll want COUNT(*) if you want a row count.</li> <li>COUNT can be combined with DISTINCT to only count unique values e.g. <code>SELECT COUNT(DISTINCT V_CODE) AS CNT FROM PRODUCT;</code></li> <li>MAX and MIN: Returns the maximum or minimum value of an attribute column.<ul> <li>MAX and MIN are also great for getting oldest or newest dates</li> </ul> </li> <li>SUM The sum of the values of a specified column<ul> <li>Aggreget functions like SUM and AVG can also take derived values as their parameter, like (P_PRICE * P_QTY), which is the price of all QTY on hand.</li> </ul> </li> <li>AVG The average of the values of a specified column</li> <li>GROUP BY: Groups rows into smaller collections by a column list<ul> <li>When used, Aggregate functions will operate on the grouped collections (i.e. creates frequency distributions). </li> <li>Treats all NULLs as if they are the same when grouping.</li> <li>Adding additional attributes to the Group By clause can cause the groups to change.</li> </ul> </li> <li>HAVING: Allows for restricting data based on an aggregate value (i.e. a group by attribute value).<ul> <li>Operates simlar to WHERE clause in standard SELECT, but WHERE applies to attributes of individual rows and HAVING applies to output of GROUP BY.</li> <li>WHERE clauses execute before GROUP BY clause, therefore they can not affect aggregating or have aggregate functions</li> <li>HAVING executes after GROUP BY</li> <li>HAVING can not restrict some rows and leave others it affects all rows.</li> <li>HAVING clauses often contain Aggregate Functions because they affect all rows and execute after GROUP BY.</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_7.html#basic-structure_3","title":"Basic Structure","text":"<ul> <li>GROUP BY: SELECT [columnlist] FROM [tablelist] WHERE [conditionlist] GROUP BY [columnlist] HAVING [group conditionlist] ORDER BY [columnlist ASC | DESC]</li> </ul>"},{"location":"CIS-50/Chapter_7.html#examples_3","title":"Examples","text":"<pre><code># Get a list of all unique vendors you sell products from\nSELECT COUNT(DISTINCT V_CODE) AS \"COUNT DISTINCT\" FROM PRODUCT;\n</code></pre> <pre><code># Get the highest and lowest prices in the product table\nSELECT MAX(P_PRICE) AS MAXPRICE, MIN(P_PRICE) AS MINPRICE FROM PRODUCT;\n</code></pre> <pre><code># Get Total still owed by customers\nSELECT SUM(CUS_BALANCE) AS TOTBALANCE FROM CUSTOMER;\n</code></pre> <pre><code># Get the average price of products in the product table\nSELECT AVG(P_PRICE) AS AVGPRICE FROM PRODUCT;\n</code></pre> <pre><code># Get average price of products by vendor\nSELECT V_CODE, AVG(P_PRICE) AS AVGPRICE FROM PRODUCT GROUP BY V_CODE;\n</code></pre> <pre><code># Get a count of products and averagre prices for each vendor\nSELECT V_CODE, V_NAME, COUNT(P_CODE) AS NUMPROD, AVG(P_PRICE) AS AVGPRICE\n  FROM PRODUCT JOIN VENDOR ON PRODUCT.V_CODE = VENDOR.V_CODE\nGROUP BY V_CODE, V_NAME ORDER BY V_NAME;\n</code></pre> <pre><code># Get the number of products in inventory by vendor that have a price average less than $10\nSELECT V_CODE, V_NAME, COUNT(P_CODE) AS NUMPRODS\n  FROM PRODUCT\nGROUP BY V_CODE\n  HAVING AVG(P_PRICE) &lt; 10\nORDER BY V_CODE;\n</code></pre> <pre><code># Joins the product and vendor tables using V_CODE as the common attribute\n# Restricts to only the rows with a discount greater than 0\n# Groups the remaining rows into collections based on V_CODE and V_NAME\n# Aggregates the total cost of products in each group\n# Restricts to only the groups with totals that exceed $500\n# Lists the results in descending order by the total cost\nSELECT V_CODE, V_NAME, SUM(P_QOH * P_PRICE) AS TOTCOST\nFROM PRODUCT JOIN VENDOR ON PRODUCT.V_CODE = VENDOR.V_CODE\nWHERE P_DISCOUNT &gt; 0\nGROUP BY V_CODE, V_NAME\nHAVING (SUM(P_QOH * P_PRICE) &gt; 500)\nORDER BY SUM(P_QOH * P_PRICE) DESC;\n</code></pre>"},{"location":"CIS-50/Chapter_7.html#subqueries-and-preprocessing","title":"Subqueries and Preprocessing","text":"<ul> <li>Subqueries are used to process data from other processed data.</li> <li>Subqueries can be used in DML operations INSERT, UPDATE, and DELETE.</li> <li>Subqueries are always on right side of comparison or assignment expression.</li> <li>Subqueries can return a single value (1 col, 1row) or list of values (1 col, n rows) or **virtual table(m col, n rows)<ul> <li>single value is the most common subquery and is most often used in conditional expressions (i.e. &gt;, &lt;, =, &gt;=, &lt;=) in the WHERE clause.<ul> <li>The value returned must match the data-type of the comparison attribute on the LHS of the comparison.</li> </ul> </li> <li>list of values often used with IN, ALL, or ANY operators in a WHERE clause.</li> <li>virtual tables often used in DML opearations or nested SELECTs.</li> </ul> </li> <li>Subqueries can be utilized in WHERE or HAVING classes.</li> <li>You can use expressions (i.e. (A * B) &gt;= (subquery) ) instead of attribute columns in subqueries, and anywhere column attributes are expected.</li> </ul>"},{"location":"CIS-50/Chapter_7.html#basic-characteristics","title":"Basic Characteristics","text":"<ul> <li>A subquery is a query (SELECT statement) inside another query.</li> <li>A subquery is normally expressed inside parentheses.</li> <li>The first query in the SQL statement is known as the outer query.</li> <li>The query inside the SQL statement is known as the inner query.</li> <li>The inner query is executed first.</li> <li>The output of an inner query is used as the input for the outer query.</li> <li>The entire SQL statement is sometimes referred to as a nested query.</li> </ul>"},{"location":"CIS-50/Chapter_7.html#basic-terms_4","title":"Basic Terms","text":"<ul> <li>Subqueries with WHERE and HAVING (i.e. list of valuels)<ul> <li>IN: list equality comparison</li> <li>ALL: compares a single value with a list via comparison operator other than \u201c=\u201d (i.e. WHERE (A * B) &gt; ALL (subquery that returns a list)).</li> <li>ANY: compares a single value with a list via comparison operator and selects ANY row that satisfies conditon (i.e. WHERE (A * B) &gt; ANY (subquery that returns a list)).</li> </ul> </li> <li>Subqueries with FROM (i.e. virtual tables)<ul> <li>SELECT FROM t1 JOIN (SELECT \u2026) AS t2</li> </ul> </li> <li>Correlated Subqueries<ul> <li>Subqueries that use data from Outer query and execute for each row.</li> </ul> </li> <li>EXISTS checks if a subquery returns rows<ul> <li>Can be use with correlated or uncorrelated subqueries</li> <li>USUALLY used with correlated subqueries</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_7.html#basic-structure_4","title":"Basic Structure","text":""},{"location":"CIS-50/Chapter_7.html#examples_4","title":"Examples","text":"<pre><code># 1 way to get all vendors that haven't provided products\nSELECT V_CODE, V_NAME FROM PRODUCT RIGHT JOIN VENDOR ON PRODUCT.V_CODE = VENDOR.V_CODE WHERE P_CODE IS NULL;\n# Subquery method to get all vendors that haven't provided products\n# Sub query answers, get all vendors that do provide products.\nSELECT V_CODE, V_NAME FROM VENDOR WHERE V_CODE NOT IN (SELECT V_CODE FROM PRODUCT WHERE V_CODE IS NOT NULL);\n</code></pre> <pre><code># Get a list of products with price greater than the average product price.\n# Sub query answers, what is average price for all products\nSELECT P_CODE, P_PRICE FROM PRODUCT WHERE P_PRICE &gt;= (SELECT AVG(P_PRICE) FROM PRODUCT);\n</code></pre> <pre><code># Find the product with the greatest inventory value.\nSELECT * FROM PRODUCT WHERE P_QOH * P_PRICE = (SELECT MAX(P_QOH * P_PRICE) FROM PRODUCT);\n</code></pre> <pre><code># Find customers who ordered a claw hammer (i.e. subquery used w/ joins)\nSELECT DISTINCT CUS_CODE, CUS_LNAME, CUS_FNAME\n  FROM CUSTOMER JOIN INVOICE USING (CUS_CODE)\n                JOIN LINE USING (INV_NUMBER)\n                JOIN PRODUCT USING (P_CODE)\n  WHERE\n    P_CODE = (SELECT P_CODE FROM PRODUCT WHERE P_ DESCRIPT = 'Claw hammer');\n</code></pre> <pre><code># Find all customers who ordered hammers, saws, or saw blades (i.e. need to use IN for subquery)\nSELECT\nDISTINCT CUSTOMER.CUS_CODE, CUS_LNAME, CUS_FNAME\nFROM\nCUSTOMER JOIN INVOICE ON CUSTOMER.CUS_CODE = INVOICE.CUS_CODE\n         JOIN LINE ON INVOICE.INV_NUMBER = LINE.INV_NUMBER\n         JOIN PRODUCT ON LINE.P_CODE = PRODUCT.P_CODE\nWHERE P_CODE IN (\n  SELECT P_CODE FROM PRODUCT WHERE P_DESCRIPT LIKE '%hammer%' OR P_DESCRIPT LIKE '%saw%');\n</code></pre> <pre><code># List all products with a total quantity sold greater than the average quantity sold\nSELECT P_CODE, SUM(LINE_UNITS) AS TOTALUNITS FROM LINE\nGROUP BY P_CODE HAVING SUM(LINE_UNITS) &gt; (SELECT AVG(LINE_UNITS) FROM LINE);\n</code></pre> <pre><code># Select all customers who purchased 2 different products (i.e. subquery in FROM, virtual tables).\nSELECT DISTINCT CUSTOMER.CUS_CODE, CUSTOMER.CUS_LNAME\nFROM CUSTOMER JOIN\n        (SELECT INVOICE.CUS_CODE FROM INVOICE JOIN LINE ON\n         INVOICE.INV_NUMBER = LINE.INV_NUMBER\n         WHERE P_CODE = '13-Q2/P2') CP1\n     ON CUSTOMER.CUST_CODE = CP1.CUS_CODE\n     JOIN\n        (SELECT INVOICE.CUS_CODE FROM INVOICE JOIN LINE ON\n        INVOICE.INV_NUMBER = LINE.INV_NUMBER\n        WHERE P_CODE = '23109-HB') CP2\n     ON CP1.CUS_CODE = CP2.CUS_CODE;\n</code></pre> <pre><code># Get the difference in the price of a product and its averate (i.e. inline subquery, single value, can't use alias in derived columns).\nSELECT P_CODE, P_PRICE, (SELECT AVG(P_PRICE) FROM PRODUCT) AS AVGPRICE,\n       P_PRICE \u2013 (SELECT AVG(P_PRICE) FROM PRODUCT) AS DIFF\nFROM PRODUCT;\n</code></pre> <pre><code># Get all product sales in which the units sold value is greater than the average units sold value for that product (as opposed to the average for all products):\n# 1. Compute the average units sold for a product.\n# 2. Compare the average computed in Step 1 to the units sold in each sale row, and then select only the rows in which the number of units sold is greater.\nSELECT INV_NUMBER, P_CODE, LINE_UNITS,\n      (SELECT AVG(LINE_UNITS)\n       FROM LINE LX\n       WHERE LX.P_CODE = LS.P_CODE) AS AVG\nFROM LINE LS\nWHERE LS.LINE_UNITS &gt; (SELECT AVG(LINE_UNITS)\n                       FROM LINE LA\n                       WHERE LA.P_CODE = LS.P_CODE);\n</code></pre> <pre><code># Get the vendor code and vendor name for products with a quantity on hand that is less than double the minimum quantity (i.e. EXISTS on correlated query example).\n# 1. The inner correlated subquery runs using the first vendor.\n# 2. If any products match the condition (the quantity on hand is less than double the minimum quantity), the vendor code and name are listed in the output.\n# 3. The correlated subquery runs using the second vendor, and the process repeats itself until all vendors are used.\nSELECT V_CODE, V_NAME\nFROM VENDOR\nWHERE EXISTS (\n    SELECT * FROM PRODUCT WHERE P_QOH &lt; P_MIN * 2 AND VENDOR.V_CODE = PRODUCT.V_CODE);\n</code></pre>"},{"location":"CIS-50/Chapter_7.html#data-manipulation-functions","title":"Data Manipulation Functions","text":"<ul> <li>Functions can decompose data elements (i.e. parts of date data).</li> <li>Functions can convert data element type (i.e. parsing integers).</li> <li>Functions VARY greatly between DBMS vendors.</li> <li>Functions always use a numerical, date, or string value.</li> <li>A function may appear anywhere in a SQL statement where a value or an attribute can be used.</li> <li>There are many types of SQL functions, such as arithmetic, trigonometric, string, date, and time functions.</li> </ul>"},{"location":"CIS-50/Chapter_7.html#common-function-types","title":"Common Function Types","text":"<ul> <li>Date and Time Functions:<ul> <li>SQL Server: GETDATE, YEAR, MONTH, DAY, DATEDIFF</li> <li>ORACLE: TO_DATE, SYSDATE, ADD_MONTHS, LAST_DAY</li> <li>MySQL: Date_Format, YEAR, MONTH, DAY, DATE_ADD</li> </ul> </li> <li>Conversion Functions<ul> <li>SQL Server: CONVERT, CAST, CASE</li> <li>ORACLE: CAST, CASE, TO_CHAR, TO_DATE, TO_NUMBER, DECODE</li> <li>MySQL CONVERT, CAST, CASE</li> </ul> </li> <li>Numeric Functions<ul> <li>ALL DBMS: ABS, ROUND, CEIL, FLOOR</li> </ul> </li> <li>String Functions<ul> <li>SQL Server: Concatenation is +, UPPER, LOWER, SUBSTRING, LEN</li> <li>ORACLE: Concatenation is ||, UPPER, LOWER, SUBSTR, LENGTH</li> <li>MySQL : CONCAT, UPPER, LOWER, SUBSTR, LENGTH</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_7.html#relational-set-operators","title":"Relational Set Operators","text":""},{"location":"CIS-50/Chapter_7.html#basic-terms_5","title":"Basic Terms","text":"<ul> <li>UNION: Same as relational set union.</li> <li>INTERSECT: Same as relational set intersect.</li> <li>EXCEPT/MINUS: Similar to relational set difference.</li> </ul>"},{"location":"CIS-50/Chapter_7.html#basic-structure_5","title":"Basic Structure","text":"<ul> <li>UNION: query UNION query</li> <li>INTERSECT: query INTERSECT query<ul> <li>If DBMS has NO INTERSECT: SELECT some_att FROM some_tab WHERE some_att IN (SELECT DISTINCT some_att FROM some_other_tab);</li> </ul> </li> <li>EXCEPT/MINUS: query MINUS query, query EXCEPT query<ul> <li>If DBMS has NO MINUS/EXCEPT: SELECT some_att FROM some_tab WHERE some_att NOT IN (SELECT DISTINCT some_att FROM some_other_tab);</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_7.html#examples_5","title":"Examples","text":"<pre><code># Combine 2 separate customer tables as one, but eliminate duplicates (UNION ALL if you want duplicates).\n# Column data-types and count must match.\n# WARNING: Some DBMSs don't eliminate duplicates.\nSELECT CUS_LNAME, CUS_FNAME, CUS_INITIAL, CUS_AREACODE, CUS_PHONE\nFROM CUSTOMER\nUNION\nSELECT CUS_LNAME, CUS_FNAME, CUS_INITIAL, CUS_AREACODE,\nCUS_PHONE FROM CUSTOMER_2;\n</code></pre> <pre><code># Find all the common customer rows between the separate customer tables.\n# Column data-types and count must match.\nSELECT CUS_LNAME, CUS_FNAME, CUS_INITIAL, CUS_AREACODE, CUS_PHONE\nFROM CUSTOMER\nINTERSECT\nSELECT CUS_LNAME, CUS_FNAME, CUS_INITIAL, CUS_AREACODE,\nCUS_PHONE FROM CUSTOMER_2;\n</code></pre> <pre><code># Find all the customers in Customer table not in Customer_2\n# MINUS is Oracle specific, SQL Server uses EXCEPT\nSELECT CUS_LNAME, CUS_FNAME, CUS_INITIAL, CUS_AREACODE, CUS_PHONE\nFROM CUSTOMER\nMINUS\nSELECT CUS_LNAME, CUS_FNAME, CUS_INITIAL, CUS_AREACODE,\nCUS_PHONE FROM CUSTOMER_2;\n</code></pre>"},{"location":"CIS-50/Chapter_7.html#key-query-principles","title":"Key Query Principles","text":"<ul> <li>Know Your Data: Data in the real-world is often not well formed (i.e. missing PKs, FKs, Unormalized), so to be productive, you have know know it inside out.</li> <li>Know the Problem: Make sure the person asking the question knows what they are asking for because there are different ways to interpret data.</li> <li>Build One Clause at a Time: If you know your data and understand the problem, map out your query in this order: FROM, WHERE, GROUP BY, HAVING, SELECT, ORDER BY<ul> <li>This will help break the problem down into manageable single clauses.</li> </ul> </li> </ul>"},{"location":"CIS-50/Chapter_9.html","title":"Database Design","text":""},{"location":"CIS-50/Chapter_9.html#database-design","title":"Database Design","text":""},{"location":"CIS-50/Chapter_9.html#objectives-as-outlined-by-the-textbook","title":"Objectives as Outlined by the Textbook","text":"<ul> <li>Describe the role of database design as the foundation of a successful information system</li> <li>Describe the five phases in the Systems Development Life Cycle (SDLC)</li> <li>Design databases using the six phases in the Database Life Cycle (DBLC) framework</li> <li>Conduct evaluation and revision within the SDLC and DBLC frameworks</li> <li>Distinguish between top-down and bottom-up approaches in database design</li> <li>Distinguish between centralized and decentralized conceptual database design</li> </ul>"},{"location":"CIS-50/Chapter_9.html#the-information-system-is","title":"The Information System (IS)","text":"<ul> <li>An IS provides for data collection, storage, and retrieval</li> <li>Components of an IS are:<ul> <li>People</li> <li>Procedures/Processes</li> <li>Applications/Software</li> <li>Databases/NoSQL Systems</li> <li>Hardware</li> </ul> </li> <li>Systems Analysis: Establishes IS need and to what extent.</li> <li>Systems Development: The process of creating and IS after Systems Analysis.<ul> <li>Performance Factors/Considerations during systems Development:<ul> <li>Database design and implementation</li> <li>Application design and implementation</li> <li>Administrative procedures and processes</li> </ul> </li> </ul> </li> <li>Database Development: The process of database design and its implementation (i.e. subset of Systems Development).</li> </ul>"},{"location":"CIS-50/Chapter_9.html#systems-development-life-cycle-sdlc","title":"Systems Development Life Cycle (SDLC)","text":"Note <p>The purpose of the SDLC is to trace the history of an IS (Information System) and provide a model within which database design and application development are mapped out and evaluated. It is a Cyclical/Iterative process.</p> <p></p>"},{"location":"CIS-50/Chapter_9.html#description-of-phases","title":"Description of Phases","text":"<ul> <li>Planning: yields a general overview of the company and its objectives</li> <li>Analysis: problems defined during planning phase are examined in greater detail</li> <li>Detailed systems design: designer completes the design of the system\u2019s processes</li> <li>Implementation: hardware, DBMS software, and application programs are installed, and the database design is implemented</li> <li>Maintenance: corrective, adaptive, and perfective </li> </ul>"},{"location":"CIS-50/Chapter_9.html#database-development-life-cycle-dblc","title":"Database Development Life Cycle (DBLC)","text":"Note <p>The purpose of the DBLC is to trace the history of a Database System and provide a model within which database development is mapped out and evaluated. It is a Cyclical/Iterative process just like the SDLC.</p> <p></p>"},{"location":"CIS-50/Chapter_9.html#description-of-phases_1","title":"Description of Phases","text":"<ul> <li>Database initial study: define problems, constraints, objectives, scope, and boundaries</li> <li>Database design: making sure that the final product meets user and system requirements</li> <li>Implementation and loading: DBMS is installed, database is created, and data is loaded or converted </li> <li>Testing and evaluation: database is tested, fine-tuned, and evaluated <ul> <li>Full backup/dump: all database objects are backed up in their entirety</li> <li>Differential backup: only modified/updated objects since last full backup are backed up</li> <li>Transaction log backup: only the transaction log operations that are not reflected in a previous backup are backed up</li> </ul> </li> <li>Operation: problems are identified and solutions implemented </li> <li>Maintenance and evolution: preventative, corrective, adaptive, etc. </li> </ul>"},{"location":"CIS-50/Chapter_9.html#database-design-process","title":"Database Design Process","text":""},{"location":"CIS-50/Chapter_9.html#database-failures-to-plan-for","title":"Database Failures to Plan for","text":"<ul> <li>Software: Operating System, DBMS software, applications, viruses, or malware.</li> <li>Hardware: Memory errors, Disk failures, bad sectors, and disk space issues.</li> <li>Programming Exemptions: Application or User transactions rollbacks. Malicious or insecure code that\u2019s been exploited.</li> <li>Transactions: Deadlocks and deadlock detection leading to failure.</li> <li>External Factors: Fire, earthquake, floods, or other natural disaster.</li> </ul> Note <p>The DBLC and SDLC are often parallel activities as depicted below: </p>"},{"location":"CIS-50/Chapter_9.html#conceptual-design","title":"Conceptual Design","text":"Note <p>The purpose of Conceptual Design is to design a DB without concern for System or DBMS software or other physical needs. It consists of creating a Conceptual Data Model, which is the main entities, attributes, relationships, and constraints of a database. * The conceptual model is hardware and software agnostic. * The Minimum Data Rule is followed: \u201cAll that is needed is there, and all that is there is needed.\u201d</p>"},{"location":"CIS-50/Chapter_9.html#steps-in-conceptual-data-model","title":"Steps in Conceptual Data Model","text":"<ol> <li>Data analysis and requirements engineering<ul> <li>Focused on: garnering information needs, end user data views, data sources and existing systems.</li> <li>Directly catalogs current systems and assesses capabilities.</li> <li>Collects desired outputs and needs.</li> <li>Often interacts with systems group.</li> </ul> </li> <li>ER Modeling and normalization<ul> <li>Data dictionary is formed with (entities, attributes, relations, views, constraints, triggers, stored-procedures, etc.)</li> <li>Normalization process takes place.</li> <li>ER Modeling Conceptual Steps: flowchart TD     A[Identify,\\nanalyze,\\nrefine\\nthe business rules] --&gt; B     B[Identify entities,\\nusing the results of Step 1] --&gt; C     C[Define the relationships among the entities,\\nusing the results of\\nSteps 1 and 2] --&gt; D     D[Define the attributes,\\nprimary keys,\\nand foreign keys\\nfor each of the entities] --&gt; E     E[Normalize the entities] --&gt; F     F[Complete the initial ER diagram] --&gt; G     G[Validate the ER model against\\nthe end users' information\\nand processing requirements] --&gt; H     H[Modify the ER model,\\nusing the results of Step 7] </li> <li>Process in Reality: </li> </ul> </li> <li>Model validation and verification<ul> <li>Validate all reports and end user views are satisfied</li> <li>Verify existing processes are still satisfied by model</li> <li>Testing for things like\u2026<ul> <li>Module: Component handling specific business function</li> <li>Module Coupling: Low Coupling preferred because increases module independence.</li> <li>Cohesivity: Strength of entity relationships in the model </li> </ul> </li> </ul> </li> <li>Database design, distributed or otherwise<ul> <li>Considerations about location of DBMS</li> <li>Database fragment: a sub-system of DB stored in different locations</li> <li>Planning around integrity, security, and performance.</li> </ul> </li> </ol>"},{"location":"CIS-50/Chapter_9.html#dbms-software-selection","title":"DBMS Software Selection","text":""},{"location":"CIS-50/Chapter_9.html#purchasing-considerations","title":"Purchasing Considerations","text":"<ul> <li>Cost</li> <li>Tools and Features</li> <li>Support for Model and processes</li> <li>Portability and other system/software dependencies</li> <li>Hardware requirement</li> </ul>"},{"location":"CIS-50/Chapter_9.html#logical-design","title":"Logical Design","text":"Note <p>The purpose of the Logical Design is to design an enterprise scale database designed for a Conceptual Data Model, but still independent of physical/hardware details. All objects from Conceptual Model\u2019s Data Dictionary are mapped to a selected DBMS or system. The logical model is validated using normalization, integrity constraints, and user views/requirments.</p>"},{"location":"CIS-50/Chapter_9.html#design-steps","title":"Design Steps","text":"<ol> <li>Map Conceptual Model to Logical Components</li> <li>Validate Logical Model via Normalization</li> <li>Validate Logical Model via Integrity Constraints</li> <li>Validate Logical Model via User Requirements</li> </ol>"},{"location":"CIS-50/Chapter_9.html#maping-conceptual-model-to-logical-components-ie-rlational-model-for-us","title":"Maping Conceptual Model to Logical Components (i.e. Rlational Model for us)","text":"<ol> <li>Map Strong Entities (Not dependent on any other entity)</li> <li>Map Super/Sub-type relationships (Common attributes in supertype, unique attributes in subtypes).</li> <li>Map Weak Entities (Not uniquely identified by attributes alone, FK is part of PK)</li> <li>Map Binary Relationships 1:1, 1:M</li> <li>Map higher-degree Relationships M:N</li> </ol>"},{"location":"CIS-50/Chapter_9.html#physical-design","title":"Physical Design","text":"Note <p>The purpose of the Physical Design is to define the storage organization, data integrity and security measures, and the system performance of the database. This includes hardware, geogphic location, backup/restore strategies and more.</p>"},{"location":"CIS-50/Chapter_9.html#database-design-strategies","title":"Database Design Strategies","text":""},{"location":"CIS-50/Chapter_9.html#top-down","title":"Top Down","text":"Note <p>Works best when problem domain (i.e. business/application/process) is relatively small and centralized design(small group of people in the organization control and carry out design) can be used.</p> <ul> <li>Identify Data Sets (i.e. Entities and Entity Types)</li> <li>Define Data Elements per Set (i.e. Attributes for each Entity)</li> </ul> <p></p>"},{"location":"CIS-50/Chapter_9.html#bottom-up","title":"Bottom Up","text":"Note <p>Works best when problem domain (i.e. business/application/process) are large and decentralized with disparate conceptual models in different locations.Decentralized design(subsets of conceptual models exist, and are aggregated into a complete design) is preferred. Bottom up and Decentralized Design arises with complex systems and a relatively large number of objects and procedures.</p> <ul> <li>First identifies the element items (i.e. Attributes)</li> <li>Groups items into data-sets (i.e. Entities)</li> </ul> <p></p>"},{"location":"CIS-50/anomalies.html","title":"Modification Anomalies","text":""},{"location":"CIS-50/anomalies.html#modification-anomalies-and-normalization","title":"Modification Anomalies and Normalization","text":""},{"location":"CIS-50/anomalies.html#insert-anomaly","title":"Insert Anomaly","text":""},{"location":"CIS-50/anomalies.html#unnormalized-table-before-insert","title":"Unnormalized Table (Before Insert)","text":"Student_ID Student_Name Course Instructor 101 Alice DBMS Dr. Smith 102 Bob OOP Dr. Johnson"},{"location":"CIS-50/anomalies.html#issue-insert-anomaly","title":"Issue: Insert Anomaly","text":"<p>Suppose a new course, \u201cNetworking\u201d, is introduced but no students have enrolled yet. Due to the table structure, we cannot add the course without associating it with at least one student.</p>"},{"location":"CIS-50/anomalies.html#normalization-solution","title":"Normalization Solution","text":"<p>We split the data into separate tables:</p> <p>Students Table:</p> Student_ID Student_Name 101 Alice 102 Bob <p>Courses Table:</p> Course_ID Course_Name 1 DBMS 2 OOP 3 Networking <p>Enrollments Table:</p> Student_ID Course_ID 101 1 102 2 <p>Now, we can insert new courses without requiring student enrollment.</p>"},{"location":"CIS-50/anomalies.html#delete-anomaly","title":"Delete Anomaly","text":""},{"location":"CIS-50/anomalies.html#unnormalized-table-before-deletion","title":"Unnormalized Table (Before Deletion)","text":"Student_ID Student_Name Course Instructor 101 Alice DBMS Dr. Smith 102 Bob OOP Dr. Johnson 103 Charlie DBMS Dr. Smith"},{"location":"CIS-50/anomalies.html#issue-delete-anomaly","title":"Issue: Delete Anomaly","text":"<p>If Alice and Charlie drop DBMS, we lose all records of Dr. Smith teaching the course, even though DBMS and Dr. Smith should still exist.</p>"},{"location":"CIS-50/anomalies.html#normalization-solution_1","title":"Normalization Solution","text":"<p>We introduce separate tables:</p> <p>Instructors Table:</p> Instructor_ID Instructor_Name 1 Dr. Smith 2 Dr. Johnson <p>Courses Table:</p> Course_ID Course_Name Instructor_ID 1 DBMS 1 2 OOP 2 <p>Deleting students from the enrollment table no longer removes information about courses or instructors.</p>"},{"location":"CIS-50/anomalies.html#update-anomaly","title":"Update Anomaly","text":""},{"location":"CIS-50/anomalies.html#unnormalized-table-before-update","title":"Unnormalized Table (Before Update)","text":"Student_ID Student_Name Course Instructor 101 Alice DBMS Dr. Smith 102 Bob OOP Dr. Johnson 103 Charlie DBMS Dr. Smith"},{"location":"CIS-50/anomalies.html#issue-update-anomaly","title":"Issue: Update Anomaly","text":"<p>If Dr. Smith changes their name to Dr. Adams, we must update multiple rows. If we miss one, we create inconsistent data.</p>"},{"location":"CIS-50/anomalies.html#normalization-solution_2","title":"Normalization Solution","text":"<p>We store instructors separately:</p> <p>Instructors Table:</p> Instructor_ID Instructor_Name 1 Dr. Adams 2 Dr. Johnson <p>Courses Table:</p> Course_ID Course_Name Instructor_ID 1 DBMS 1 2 OOP 2 <p>Updating Dr. Smith\u2019s name in one place reflects the change across all references.</p>"},{"location":"CIS-50/cheatsheets.html","title":"SQL Cheat-sheets","text":""},{"location":"CIS-50/cheatsheets.html#cheeatsheet-1","title":"Cheeatsheet 1","text":""},{"location":"CIS-50/cheatsheets.html#cheeatsheet-2","title":"Cheeatsheet 2","text":""},{"location":"CIS-50/data_consistency.html","title":"Data Consistency","text":""},{"location":"CIS-50/data_consistency.html#data-consistency-understanding-its-importance","title":"Data Consistency: Understanding Its Importance","text":"<p>Data, the lifeblood of modern organizations, flows through various systems, sources, and processes. However, ensuring that this data remains accurate, coherent, and aligned with predefined standards is a multifaceted challenge. This is where data consistency comes into play.</p>"},{"location":"CIS-50/data_consistency.html#data-consistency","title":"Data Consistency","text":"<p>Data consistency refers to the quality of data being uniform, accurate, and coherent across various databases, systems, and applications within an organization.</p> <p>In this article, you will learn the core concepts of data consistency, and provide examples that showcase its impact across industries.</p> <p>Let us dive in!</p>"},{"location":"CIS-50/data_consistency.html#data-consistency-what-is-it-and-why-is-it-important","title":"Data Consistency: What is it, and Why is it Important?","text":"<p>Data consistency refers to the quality of data being uniform, accurate, and coherent across various databases, systems, and applications within an organization. It ensures that data remains the same and aligns with the established rules and standards throughout its lifecycle, regardless of the platform or location it\u2019s accessed from.</p>"},{"location":"CIS-50/data_consistency.html#importance-of-data-consistency","title":"Importance of Data Consistency","text":"<p>Data consistency is crucial for several reasons that extend beyond simple accuracy. It\u2019s a cornerstone of effective data management and informed decision-making. Here\u2019s a deeper look at its significance:</p> <ol> <li> <p>Reliable Decision-Making</p> <ul> <li>Inaccurate or inconsistent data can lead to misguided decisions.</li> <li>If different departments or systems present conflicting information, it becomes challenging to determine the correct course of action.</li> <li>Data-driven decisions rely on the assumption that the data is accurate and consistent.</li> <li>Inconsistent data can lead to poor strategic choices, erode trust in analytics, and hinder business growth.</li> </ul> </li> <li> <p>Operational Efficiency</p> <ul> <li>Consistent data streamlines business processes.</li> <li>Employees can work more efficiently when they\u2019re confident in the accuracy and reliability of the information they\u2019re using.</li> <li>Inconsistent data can lead to wasted time as employees try to reconcile differences or correct errors.</li> <li>This inefficiency can delay projects and impede productivity.</li> </ul> </li> <li> <p>Customer Trust and Satisfaction</p> <ul> <li>When customer data isn\u2019t consistent, it can lead to misunderstandings and inaccurate interactions.</li> <li>Customers expect businesses to have accurate and up-to-date information about their preferences and history.</li> <li>Sending contradictory messages or not recognizing customer interactions can damage the relationship, erode trust, and result in lost opportunities for upselling or personalized experiences.</li> </ul> </li> <li> <p>Legal and Regulatory Compliance</p> <ul> <li>Some industries are subject to strict data regulations that require accurate and consistent data storage and reporting.</li> <li>Failure to comply can result in legal consequences and financial penalties.</li> <li>Inconsistent data can lead to non-compliance with data protection laws, resulting in lawsuits, fines, and damage to a company\u2019s reputation.</li> </ul> </li> <li> <p>Data Integration and Analysis</p> <ul> <li>Organizations use data from various sources for analysis.</li> <li>Inconsistent data makes integration and analysis complex, leading to incomplete insights and inaccurate conclusions.</li> <li>Inaccurate insights can misguide critical business strategies, leading to missed opportunities or misguided investments.</li> </ul> </li> <li> <p>Efficient Collaboration</p> <ul> <li>Collaboration across departments relies on shared data.</li> <li>Inconsistent data can lead to misunderstandings, miscommunication, and delays when teams rely on different versions of the truth.</li> <li>Without data consistency, collaboration breaks down, impeding innovation and alignment between different parts of the organization.</li> </ul> </li> </ol> <p>In essence, data consistency ensures that the data used across an organization is dependable, accurate, and aligned with the objectives and standards of the business.</p> <p>Companies that prioritize data consistency not only mitigate risks but also create a solid foundation for growth and innovation in the data-driven era.</p>"},{"location":"CIS-50/data_consistency.html#causes-of-data-consistency-issues","title":"Causes of Data Consistency Issues","text":"<p>Let us delve into the causes of data consistency issues:</p> <ol> <li> <p>Manual Data Entry</p> <ul> <li>When data is entered manually, there\u2019s a higher chance of human errors, such as typos, missing values, or incorrect formatting.</li> <li>These mistakes can be propagated across systems, leading to inconsistent data.</li> </ul> </li> <li> <p>Data Duplication</p> <ul> <li>Creating duplicate records can lead to discrepancies when different copies of the same data have varied information.</li> <li>Duplicate data can confuse users, cause misreporting, and complicate data integration efforts.</li> </ul> </li> <li> <p>Lack of Data Standards</p> <ul> <li>If there are no established data standards, different individuals or departments may interpret and record data differently.</li> <li>Variations in naming conventions, units, and formats can result in inconsistent data.</li> </ul> </li> <li> <p>Integration Challenges</p> <ul> <li>Merging data from various sources or systems can lead to inconsistencies if data structures, formats, or conventions differ.</li> <li>Integrated data can show mismatches or errors due to differences in how systems handle data.</li> </ul> </li> <li> <p>Legacy Systems</p> <ul> <li>Legacy systems might not communicate seamlessly with modern systems, causing discrepancies when data is transferred between them.</li> <li>Older systems might not be compatible with modern data practices, leading to data transformation errors or loss of data fidelity.</li> </ul> </li> <li> <p>Data Migration</p> <ul> <li>During data migration from one system to another, data mapping and transformation errors can occur.</li> <li>Inaccuracies might arise due to improper transformation or incomplete data mapping.</li> </ul> </li> <li> <p>Lack of Data Governance</p> <ul> <li>The absence of data governance practices means there\u2019s no oversight on data quality and consistency.</li> <li>Without data governance, inconsistencies can persist undetected.</li> </ul> </li> <li> <p>Incomplete Updates</p> <ul> <li>When data updates are incomplete or not synchronized across systems, inconsistencies arise.</li> <li>Incomplete updates can lead to incorrect calculations, erroneous reporting, and hindered decision-making processes.</li> </ul> </li> <li> <p>Organizational Changes</p> <ul> <li>Changes in roles, responsibilities, or organizational structures can lead to inconsistent data-handling practices.</li> <li>Shifts in data management can disrupt data workflows, causing discrepancies and confusion in data interpretation.</li> </ul> </li> <li> <p>Lack of Training and Awareness</p> <ul> <li>Employees might not be fully trained on data entry and management practices, leading to errors and inconsistencies.</li> <li>Inadequate training can result in poor data quality, negatively impacting data accuracy and decision-making.</li> </ul> </li> </ol> <p>Let us understand each of the data consistency issues in detail:</p>"},{"location":"CIS-50/data_consistency.html#1-manual-data-entry","title":"1. Manual Data Entry","text":"<p>When data is entered manually, there\u2019s a higher chance of human errors, such as typos, missing values, or incorrect formatting. These mistakes can be propagated across systems, leading to inconsistent data. Inaccurate or inconsistent data entered manually can propagate across systems, leading to incorrect reporting and decision-making. It can be time-consuming and challenging to identify and rectify errors after the fact.</p>"},{"location":"CIS-50/data_consistency.html#2-data-duplication","title":"2. Data Duplication","text":"<p>Creating duplicate records can lead to discrepancies when different copies of the same data have varied information. Duplicate data can confuse users, cause misreporting, and complicate data integration efforts. When data is duplicated across different systems or databases, it can lead to variations in the duplicated records. Updates made to one copy might not be reflected in others. It\u2019s challenging to determine which record is accurate. Decision-makers might rely on inaccurate data, leading to misguided strategies.</p>"},{"location":"CIS-50/data_consistency.html#3-lack-of-data-standards","title":"3. Lack of Data Standards","text":"<p>If there are no established data standards, different individuals or departments may interpret and record data differently. Variations in naming conventions, units, and formats can result in inconsistent data. Without consistent definitions and formats, data can vary, leading to confusion, errors in analysis, and challenges in reporting. Reports generated from inconsistent data may yield contradictory insights.</p>"},{"location":"CIS-50/data_consistency.html#4-integration-challenges","title":"4. Integration Challenges","text":"<p>Merging data from various sources or systems can lead to inconsistencies if data structures, formats, or conventions differ. Integrated data can show mismatches or errors due to differences in how systems handle data, leading to incorrect insights and decisions. Data integration issues can lead to discrepancies in merged datasets, affecting analysis and decision-making. Misaligned data can hinder attempts to create a single version of truth.</p>"},{"location":"CIS-50/data_consistency.html#5-legacy-systems","title":"5. Legacy Systems","text":"<p>Legacy systems might not communicate seamlessly with modern systems, causing discrepancies when data is transferred between them. Older systems might not be compatible with modern data practices, leading to data transformation errors or loss of data fidelity. Data transferred between legacy and modern systems may undergo transformations. This leads to inconsistencies that affect decision-making and analytics.</p>"},{"location":"CIS-50/data_consistency.html#6-data-migration","title":"6. Data Migration","text":"<p>During data migration from one system to another, data mapping and transformation errors can occur. Inaccuracies might arise due to improper transformation or incomplete data mapping. Inaccuracies in data migration can lead to incorrect data being loaded into new systems, affecting the reliability of operations and analytics.</p>"},{"location":"CIS-50/data_consistency.html#7-lack-of-data-governance","title":"7. Lack of Data Governance","text":"<p>The absence of data governance practices means there\u2019s no oversight on data quality and consistency. Without data governance, there\u2019s no systematic validation, cleansing, or monitoring of data. Without data governance practices in place, there\u2019s no systematic oversight on data quality, validation, and consistency. This is allowing inconsistencies to persist undetected. Lack of governance can also hinder the identification and rectification of data issues.</p>"},{"location":"CIS-50/data_consistency.html#8-incomplete-updates","title":"8. Incomplete Updates","text":"<p>When data updates are incomplete or not synchronized across systems, inconsistencies arise. Incomplete updates can lead to incorrect calculations, erroneous reporting, and hindered decision-making processes. This can undermine the accuracy of business operations and strategic decisions.</p>"},{"location":"CIS-50/data_consistency.html#9-organizational-changes","title":"9. Organizational Changes","text":"<p>Changes in roles, responsibilities, or organizational structures can lead to inconsistent data-handling practices. Shifts in data management can disrupt data workflows, causing discrepancies and confusion in data interpretation. Inconsistent data practices due to organizational changes can result in inaccuracies and misunderstandings that affect data quality and decision-making.</p>"},{"location":"CIS-50/data_consistency.html#10-lack-of-training-and-awareness","title":"10. Lack of Training and Awareness","text":"<p>Employees might not be fully trained on data entry and management practices, leading to errors and inconsistencies. Inadequate training can result in poor data quality, negatively impacting data accuracy and decision-making. Proper training ensures employees understand data handling best practices and contribute to data consistency.</p> <p>Addressing these causes requires a comprehensive approach that involves implementing data standards, automated validation processes, data governance frameworks, and thorough training programs. It\u2019s essential to recognize the root causes to effectively prevent and mitigate data consistency issues, ensuring accurate and trustworthy data for business operations and decision-making.</p>"},{"location":"CIS-50/data_consistency.html#how-to-do-a-data-consistency-check","title":"How to Do a Data Consistency Check?","text":"<p>Performing data consistency checks involves a systematic process to identify and rectify inconsistencies within datasets.</p>"},{"location":"CIS-50/data_consistency.html#steps-involved-in-data-consistency-checks","title":"Steps Involved in Data Consistency Checks:","text":"<ol> <li> <p>Define Data Consistency Rules</p> <ul> <li>Clearly outline the criteria for consistent data.</li> <li>Specify data formats, naming conventions, units of measurement, and any other standards relevant to your dataset.</li> </ul> </li> <li> <p>Identify Data Sources</p> <ul> <li>Identify the sources of data that need consistency checks.</li> <li>These sources could include databases, spreadsheets, APIs, and external data feeds.</li> </ul> </li> <li> <p>Data Profiling</p> <ul> <li>Profile the data to understand its structure, distribution, and characteristics.</li> <li>Data profiling tools can help identify anomalies, missing values, and potential inconsistencies.</li> </ul> </li> <li> <p>Data Cleansing and Transformation</p> <ul> <li>Cleanse the data by removing duplicates, correcting errors, and filling in missing values.</li> <li>Transform data as needed to adhere to defined consistency rules.</li> </ul> </li> <li> <p>Cross-Validation</p> <ul> <li>Compare data across different sources or systems to identify disparities.</li> <li>Cross-validation helps detect inconsistencies arising from data integration or data migration processes.</li> </ul> </li> <li> <p>Data Validation Checks</p> <ul> <li>Perform validation checks on data fields to ensure they meet defined standards.</li> <li>Validate dates, numeric ranges, and categorical values to catch inconsistencies.</li> </ul> </li> <li> <p>Historical Data Analysis</p> <ul> <li>Analyze historical data to identify patterns of inconsistency.</li> <li>This analysis can help uncover recurring issues and implement preventive measures.</li> </ul> </li> <li> <p>Automated Checks</p> <ul> <li>Implement automated consistency checks using scripts or data quality tools.</li> <li>These checks can be scheduled to run at regular intervals or triggered by data updates.</li> </ul> </li> <li> <p>Referential Integrity Checks</p> <ul> <li>If your data relies on relationships, perform referential integrity checks to ensure that linked data is consistent and accurate.</li> </ul> </li> <li> <p>Data Governance Framework</p> <ul> <li>Establish a data governance framework that includes roles and responsibilities for data management.</li> <li>Assign data stewards responsible for overseeing data quality and consistency.</li> </ul> </li> </ol> <p>By following these steps, organizations can systematically identify, address, and prevent data inconsistencies, ensuring that data remains accurate, reliable, and trustworthy for making informed business decisions.</p>"},{"location":"CIS-50/data_consistency.html#8-types-of-data-consistency","title":"8 Types of Data Consistency","text":"<p>There are various types of data consistency that refer to different aspects of maintaining uniformity, accuracy, and coherence within datasets.</p>"},{"location":"CIS-50/data_consistency.html#key-types-of-data-consistency","title":"Key Types of Data Consistency:","text":"<ol> <li> <p>Structural Consistency</p> <ul> <li>Refers to the adherence of data to predefined data models, schemas, or formats.</li> <li>Essential for data integration, interoperability, and seamless communication between different systems.</li> </ul> </li> <li> <p>Value Consistency</p> <ul> <li>Ensures that data values are accurate and coherent across various instances of the same data item.</li> <li>Prevents discrepancies in data entries for the same entity.</li> </ul> </li> <li> <p>Temporal Consistency</p> <ul> <li>Focuses on maintaining the chronological accuracy of data.</li> <li>Crucial for accurate historical analysis, trend identification, and compliance with legal and regulatory requirements.</li> </ul> </li> <li> <p>Cross-System Consistency</p> <ul> <li>Ensures data remains consistent across different systems or databases that interact with each other.</li> <li>Prevents data anomalies and conflicts in distributed environments.</li> </ul> </li> <li> <p>Logical Consistency</p> <ul> <li>Involves maintaining logical relationships and constraints within the data.</li> <li>Ensures that data values align with predefined rules and business logic.</li> </ul> </li> <li> <p>Hierarchical Consistency</p> <ul> <li>Focuses on maintaining relationships and hierarchy among data elements.</li> <li>Crucial for reporting, organizational analysis, and maintaining data integrity.</li> </ul> </li> <li> <p>Referential Consistency</p> <ul> <li>Involves ensuring that references between related data items are accurate and valid.</li> <li>Prevents data corruption and invalid references.</li> </ul> </li> <li> <p>External Consistency</p> <ul> <li>Refers to the alignment of data with external standards, regulations, and benchmarks.</li> <li>Vital for regulatory compliance, ensuring data handling practices align with legal and industry standards.</li> </ul> </li> </ol> <p>Each type of data consistency addresses specific aspects of maintaining accurate and reliable data. Organizations need to assess their data needs and implement strategies that ensure the appropriate types of consistency are maintained to support effective decision-making and operations.</p>"},{"location":"CIS-50/data_consistency.html#data-consistency-example-understanding-real-life-scenario","title":"Data Consistency Example: Understanding Real-Life Scenario","text":"<p>Database consistency, in the context of databases and data management, refers to maintaining the correctness and integrity of data within a database.</p>"},{"location":"CIS-50/data_consistency.html#data-consistency-example-understanding-real-life-scenario_1","title":"Data Consistency Example: Understanding Real-Life Scenario","text":"<p>Database consistency, in the context of databases and data management, refers to maintaining the correctness and integrity of data within a database.</p>"},{"location":"CIS-50/data_consistency.html#example-online-retail-inventory-database","title":"Example: Online Retail Inventory Database","text":"<p>Imagine an online retail company that manages its product inventory in a database. The database stores information about products, their quantities, and prices. Ensuring database consistency is crucial to prevent errors and inaccuracies in inventory management.</p>"},{"location":"CIS-50/data_consistency.html#scenario-inconsistent-product-quantity","title":"Scenario: Inconsistent Product Quantity","text":"<p>Suppose the retail company sells a product named \u201cWidget A.\u201d The database records the current quantity of Widget A as 100 units. However, due to a technical glitch or a data entry error, a new order for 50 units of Widget A is recorded twice, resulting in the quantity being updated to 200 units.</p>"},{"location":"CIS-50/data_consistency.html#impact-of-inconsistency","title":"Impact of Inconsistency","text":"<ul> <li>Incorrect Inventory Levels: The database now shows an incorrect quantity of Widget A, which may lead to issues like overselling. Customers might place orders for items that are no longer in stock.</li> <li>Order Fulfillment Problems: If the system relies on accurate inventory levels to manage order fulfillment, it may try to fulfill orders that cannot be fulfilled due to the incorrect inventory count.</li> </ul> <p>In this example, database consistency ensures that the recorded quantity of products accurately reflects the actual inventory. By implementing checks, validations, and consistent practices, the retail company can prevent errors, minimize disruptions, and provide a better customer experience.</p>"},{"location":"CIS-50/data_consistency.html#what-is-data-consistency-in-analytics","title":"What is Data Consistency in Analytics?","text":"<p>In the context of analytics, data consistency refers to the reliability and uniformity of data used for analysis. It ensures that the data remains stable and accurate across different time periods, sources, and variables, allowing for accurate and meaningful insights to be derived.</p>"},{"location":"CIS-50/data_consistency.html#detailed-explanation-of-data-consistency-in-analytics","title":"Detailed Explanation of Data Consistency in Analytics","text":"<ol> <li> <p>Temporal Consistency:</p> <ul> <li>Ensures that data remains accurate and coherent across different time periods.</li> <li>Crucial for maintaining consistent timeframes for comparisons and trend analysis.</li> </ul> </li> <li> <p>Cross-Source Consistency:</p> <ul> <li>Involves maintaining data consistency when aggregating or combining data from different sources or databases.</li> <li>Crucial for reliable insights when analyzing data from multiple platforms.</li> </ul> </li> <li> <p>Logical Consistency:</p> <ul> <li>Focuses on maintaining the logical relationships and constraints within data.</li> <li>Important for ensuring data follows a logical structure aligned with the business context.</li> </ul> </li> <li> <p>Referential Consistency:</p> <ul> <li>About maintaining accurate references between related data elements.</li> <li>Ensures accuracy and validity when analyzing data with relationships.</li> </ul> </li> <li> <p>Value Consistency:</p> <ul> <li>Ensures that data values are accurate and coherent, especially during calculations and aggregations.</li> <li>Impactful for accurate analytical results when calculating averages or totals.</li> </ul> </li> <li> <p>Historical Consistency:</p> <ul> <li>Involves maintaining the integrity of historical data over time.</li> <li>Crucial for meaningful comparisons and insights during trend analysis.</li> </ul> </li> <li> <p>Granularity Consistency:</p> <ul> <li>Ensures that data is collected and stored at a consistent level of detail.</li> <li>Important for avoiding discrepancies and inaccuracies in results during data analysis.</li> </ul> </li> </ol> <p>Ensuring data consistency in analytics is essential for producing reliable insights and making informed decisions. Inaccurate or inconsistent data can lead to misleading conclusions, incorrect predictions, and flawed strategies.</p>"},{"location":"CIS-50/joins_ns.html","title":"Joins","text":""},{"location":"CIS-50/joins_ns.html#graphical-representation-of-joins","title":"Graphical Representation of Joins","text":"Note <p>I find these diagrams a much more approachable way of picturing and imagining the joins referenced in CIS-50 Chapter 3. Hopefully you agree!</p>"},{"location":"CIS-50/joins_ns.html#inner-join","title":"Inner Join","text":""},{"location":"CIS-50/joins_ns.html#left-join","title":"Left Join","text":""},{"location":"CIS-50/joins_ns.html#right-join","title":"Right Join","text":""},{"location":"CIS-50/joins_ns.html#full-outer-join","title":"Full Outer Join","text":""},{"location":"CIS-50/joins_ns.html#left-anti-join","title":"Left Anti-Join","text":""},{"location":"CIS-50/joins_ns.html#right-anti-join","title":"Right Anti-Join","text":""},{"location":"CIS-50/joins_ns.html#cross-join","title":"Cross Join","text":""},{"location":"CIS-50/lab002answers.html","title":"Lab002answers","text":""},{"location":"CIS-50/lab002answers.html#lab-2-part-1","title":"Lab 2 Part 1","text":"Relations <p>All relationships are 1:M</p> Business Rules <ul> <li>One course can generate many classes. Each class is generated by one course.</li> <li>One class can be referenced in enrollment many times. Each individual enrollment references one class.</li> <li>One student can be shown in enrollment many times. Each individual enrollment entry shows one student.</li> </ul>"},{"location":"CIS-50/lab002answers.html#crows-foot","title":"Crows Foot","text":"erDiagram     COURSE ||--|{ CLASS: generates     CLASS ||--|{ ENROLL: is_referenced_in     STUDENT ||--|{ ENROLL: is_shown_in"},{"location":"CIS-50/lab002answers.html#chen","title":"Chen","text":"graph TD     Course --&gt; |1|C{generates}     C --&gt;|M| Class     Class --&gt; |1|D{is referenced by}     D --&gt;|M| Enroll     Student --&gt; |1|E{is shown in}     E --&gt;|M| Enroll"},{"location":"CIS-50/lab002answers.html#uml","title":"UML","text":"classDiagram     Course \"1..1\" -- \"0..*\" Class     Class \"1..1\" -- \"0..*\" Enroll     Student \"1..1\" -- \"0..*\" Enroll     class Student{         -STU_NUM         -STU_LNAME         -STU_FNAME         -STU_INIT         -STU_DOB         -STU_HRS         -STU_CLASS         -STU_GPA         -STU_TRANSFER         -DEPT_CODE         -STU_PHONE         -PROF_NUM     }     class Enroll{         -CLASS_CODE         -STU_NUM         -ENROLL_GRADE     }     class Class{         -CLASS_CODE         -CRS_CODE         -CLASS_SECTION         -CLASS_TIME         -CLASS_ROOM         -PROF_NUM     }     class Course{         -CRS_CODE         -DEPT_CODE         -CRS_DESCRIPTION         -CRS_CREDIT     }"},{"location":"CIS-50/lab002answers.html#lab-2-part-2","title":"Lab 2 Part 2","text":"erDiagram     CUSTOMER ||--o| ACCOUNT: responsible     ACCOUNT ||--|{ CHARGE: posted     CHARGE }|--o| ITEM: include     ACCOUNT ||--|{ PAYMENTS: makes"},{"location":"CIS-50/week_06.html","title":"SQL Intro Lesson","text":""},{"location":"CIS-50/week_06.html#creating-tables-and-adding-data-very-basic-intro","title":"Creating tables and adding data (VERY BASIC INTRO)","text":"<ul> <li>Summary: Explains how to create new tables (e.g., <code>authors</code>) and insert data into them.</li> <li>SQL Examples:   <pre><code>CREATE TABLE authors (\nauthor_id INT PRIMARY KEY,\nfirst_name VARCHAR(50),\nlast_name VARCHAR(50)\n);\n\nINSERT INTO authors (author_id, first_name, last_name)\nVALUES (1, 'George', 'Orwell');\n</code></pre></li> </ul>"},{"location":"CIS-50/week_06.html#sql-statement-rules-and-conventions","title":"SQL statement rules and conventions","text":"<ul> <li>Summary: General rules for writing SQL<ul> <li>Ensuring column and table names match exactly as defined in the database schema</li> <li>Use lower case for table names and UPPER CASE for SQL keywords.</li> <li>Every statement ends in a ;</li> </ul> </li> </ul>"},{"location":"CIS-50/week_06.html#retrieving-data-using-select","title":"Retrieving data using SELECT","text":""},{"location":"CIS-50/week_06.html#retrieving-specific-columns","title":"Retrieving specific columns","text":"<ul> <li>Summary: This section covers how to retrieve specific columns from tables like <code>books</code> and <code>authors</code>.</li> <li>SQL Example:   <pre><code>SELECT title, publication_year FROM books;\n</code></pre></li> </ul>"},{"location":"CIS-50/week_06.html#filtering-rows-the-where-clause","title":"Filtering rows: the WHERE clause","text":"<ul> <li>Summary: Describes how to filter rows from <code>books</code> based on conditions.</li> <li>SQL Example 1:   <pre><code>SELECT title FROM books WHERE publication_year &gt; 2000;\n</code></pre></li> <li>SQL Example 2:   <pre><code>SELECT first_name, last_name FROM authors WHERE first_name = 'David';\n</code></pre></li> <li>SQL Example 3:   <pre><code>SELECT title, publication_year FROM books WHERE publication_year BETWEEN 1950 AND 2000;\n</code></pre></li> </ul>"},{"location":"CIS-50/week_06.html#ordering-data-the-order-by-clause","title":"Ordering data: the ORDER BY clause","text":"<ul> <li>Summary: Explains how to order query results from <code>authors</code>.</li> <li>SQL Example 1:   <pre><code>SELECT last_name, first_name FROM authors ORDER BY last_name ASC;\n</code></pre></li> <li>SQL Example 2:   <pre><code>SELECT title, `condition` FROM bookstore_inventory ORDER BY title ASC, `condition` DESC;\n</code></pre></li> </ul>"},{"location":"CIS-50/week_06.html#retrieving-unique-rows-the-distinct-keyword","title":"Retrieving unique rows: the DISTINCT keyword","text":"<ul> <li>Summary: Shows how to retrieve unique publication years from <code>books</code>.</li> <li>SQL Example:   <pre><code>SELECT DISTINCT publication_year FROM books;\n</code></pre></li> </ul>"},{"location":"CIS-50/week_06.html#column-expressions","title":"Column expressions","text":"<ul> <li>Summary: Using expressions to calculate or manipulate columns in queries (e.g., in <code>books</code>).</li> <li>SQL Example:   <pre><code>SELECT title, (price * 1.1) AS price_with_tax FROM bookstore_inventory;\n</code></pre></li> </ul>"},{"location":"CIS-50/week_06.html#literals","title":"Literals","text":"<ul> <li>Summary: Introduces how to use literal values in queries.</li> <li>SQL Example:   <pre><code>SELECT 'All Books' AS description;\n</code></pre></li> </ul>"},{"location":"CIS-50/week_06.html#operators-and-functions","title":"Operators and functions","text":""},{"location":"CIS-50/week_06.html#comparison-operators","title":"Comparison operators","text":"<ul> <li>Summary: Describes how to compare values (e.g., in <code>awards</code>).</li> <li>SQL Example:   <pre><code>SELECT * FROM books_awards WHERE year = 2020;\n</code></pre></li> </ul> Operator Description Example = Equal to <code>SELECT * FROM books WHERE price = 20;</code> &lt;&gt; Not equal to (can also use <code>!=</code>) <code>SELECT * FROM books WHERE price &lt;&gt; 20;</code> != Not equal to (alternative to <code>&lt;&gt;</code>) <code>SELECT * FROM books WHERE price != 20;</code> &gt; Greater than <code>SELECT * FROM books WHERE price &gt; 20;</code> &lt; Less than <code>SELECT * FROM books WHERE price &lt; 20;</code> &gt;= Greater than or equal to <code>SELECT * FROM books WHERE price &gt;= 20;</code> &lt;= Less than or equal to <code>SELECT * FROM books WHERE price &lt;= 20;</code> BETWEEN Between a range of values (inclusive) <code>SELECT * FROM books WHERE price BETWEEN 10 AND 20;</code> NOT BETWEEN Not between a range of values <code>SELECT * FROM books WHERE price NOT BETWEEN 10 AND 20;</code> IN Matches any value in a list <code>SELECT * FROM books WHERE genre IN ('Fiction', 'Fantasy');</code> NOT IN Does not match any value in a list <code>SELECT * FROM books WHERE genre NOT IN ('Fiction', 'Fantasy');</code> IS NULL Checks if the value is NULL <code>SELECT * FROM books WHERE price IS NULL;</code> IS NOT NULL Checks if the value is not NULL <code>SELECT * FROM books WHERE price IS NOT NULL;</code> LIKE Matches a pattern using wildcards (<code>%</code> or <code>_</code>) <code>SELECT * FROM books WHERE title LIKE 'Harry%';</code> NOT LIKE Does not match a pattern <code>SELECT * FROM books WHERE title NOT LIKE 'Harry%';</code>"},{"location":"CIS-50/week_06.html#mathematics","title":"Mathematics","text":"<ul> <li>Summary: Covers mathematical operations in queries.</li> <li>SQL Example:   <pre><code>SELECT price, price * 0.9 AS discounted_price FROM bookstore_inventory;\n</code></pre></li> <li>Common Mathematics Operators</li> </ul> Operator Description Example + Addition <code>SELECT price + 10 FROM books;</code> - Subtraction <code>SELECT price - 5 FROM books;</code> * Multiplication <code>SELECT price * 1.1 FROM books;</code> / Division <code>SELECT price / 2 FROM books;</code> % Modulus (remainder of division) <code>SELECT price % 3 FROM books;</code> - Unary minus (negates the value) <code>SELECT -price FROM books;</code> <ul> <li>Common Mathematics Functions (MySQL)</li> </ul> Function Description Example <code>ABS()</code> Returns the absolute (positive) value of a number <code>SELECT ABS(-5);</code> <code>CEIL()</code> Returns the smallest integer greater than or equal to the number <code>SELECT CEIL(4.1);</code> <code>FLOOR()</code> Returns the largest integer less than or equal to the number <code>SELECT FLOOR(4.9);</code> <code>ROUND()</code> Rounds the number to a specified number of decimal places <code>SELECT ROUND(4.567, 2);</code> <code>MOD()</code> Returns the remainder of division (modulus) <code>SELECT MOD(10, 3);</code> <code>POW()</code> Returns the result of raising a number to a power <code>SELECT POW(2, 3);</code> <code>SQRT()</code> Returns the square root of a number <code>SELECT SQRT(16);</code> <code>SIGN()</code> Returns -1, 0, or 1 depending on the sign of the number <code>SELECT SIGN(-5);</code> <code>GREATEST()</code> Returns the largest value from a list of arguments <code>SELECT GREATEST(1, 5, 3);</code> <code>LEAST()</code> Returns the smallest value from a list of arguments <code>SELECT LEAST(1, 5, 3);</code> <ul> <li>Common Statistics Functions</li> </ul> Function Description Example <code>AVG()</code> Returns the average value of a numeric column <code>SELECT AVG(price) FROM books;</code> <code>COUNT()</code> Returns the number of rows (or non-<code>NULL</code> values) <code>SELECT COUNT(*) FROM books;</code> <code>MAX()</code> Returns the maximum value in a column <code>SELECT MAX(price) FROM books;</code> <code>MIN()</code> Returns the minimum value in a column <code>SELECT MIN(price) FROM books;</code> <code>SUM()</code> Returns the sum of all values in a numeric column <code>SELECT SUM(price) FROM books;</code> <code>VARIANCE()</code> Returns the variance of a numeric column <code>SELECT VARIANCE(price) FROM books;</code> <code>STDDEV()</code> Returns the standard deviation of a numeric column <code>SELECT STDDEV(price) FROM books;</code> <code>GROUP_CONCAT()</code> Concatenates values from multiple rows into a single string <code>SELECT GROUP_CONCAT(title) FROM books;</code> <code>BIT_COUNT()</code> Returns the number of bits set to 1 in the binary representation of a number <code>SELECT BIT_COUNT(5);</code> <code>PERCENT_RANK()</code> Returns the rank of a value within a result set as a percentage <code>SELECT PERCENT_RANK() OVER (ORDER BY price) FROM books;</code>"},{"location":"CIS-50/week_06.html#character-string-operators-and-functions","title":"Character string operators and functions","text":"<ul> <li>Summary: Explains string operations, such as concatenating author names.</li> <li>SQL Example:   <pre><code>SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM authors;\n</code></pre></li> <li>Other DBs use other operators for string concatentation, like || or + so modify this example based on your desired RDBMS.</li> </ul>"},{"location":"CIS-50/week_06.html#boolean-operators","title":"Boolean operators","text":"<ul> <li>Summary: Describes how to use boolean logic to filter results from <code>books</code>.</li> <li>SQL Example:   <pre><code>SELECT title FROM bookstore_inventory WHERE `condition` &gt; 'like new' AND price &lt; 4.5;\n</code></pre></li> </ul> Operator Description Example <code>AND</code> Returns true if both conditions are true <code>SELECT * FROM books WHERE price &gt; 10 AND genre = 'Fiction';</code> <code>OR</code> Returns true if at least one condition is true <code>SELECT * FROM books WHERE price &gt; 20 OR genre = 'Fiction';</code> <code>NOT</code> Reverses the result of the condition <code>SELECT * FROM books WHERE NOT genre = 'Fiction';</code> <code>XOR</code> Returns true if one condition is true and the other is false <code>SELECT * FROM books WHERE price &gt; 15 XOR genre = 'Fantasy';</code> <code>IS TRUE</code> Checks if the expression evaluates to true <code>SELECT * FROM books WHERE (price &gt; 20) IS TRUE;</code> <code>IS FALSE</code> Checks if the expression evaluates to false <code>SELECT * FROM books WHERE (price &gt; 20) IS FALSE;</code> <code>IS NULL</code> Returns true if the value is <code>NULL</code> <code>SELECT * FROM books WHERE price IS NULL;</code> <code>IS NOT NULL</code> Returns true if the value is not <code>NULL</code> <code>SELECT * FROM books WHERE price IS NOT NULL;</code>"},{"location":"CIS-50/week_06.html#comment-on-ternary-logic","title":"Comment on Ternary Logic","text":"<p>In SQL, NULL represents an unknown or missing value, making boolean logic ternary rather than binary, with three possible outcomes: TRUE, FALSE, and UNKNOWN. This means standard comparison operators do not behave as expected with NULL, since any operation involving NULL results in UNKNOWN. Operators like the IS NULL operator are necessary to explicitly check for NULL values, as they accurately identify missing data where typical comparisons will fail.</p> <ul> <li>Example of Ternary Logic:<ul> <li>TRUE AND NULL \u2192 UNKNOWN</li> <li>FALSE OR NULL \u2192 UNKNOWN</li> <li>NOT NULL \u2192 UNKNOWN</li> </ul> </li> </ul>"},{"location":"CIS-50/week_06.html#ordering-and-nulls","title":"Ordering and NULLs","text":"<ul> <li>Summary: Explains how <code>NULL</code> values affect ordering.</li> <li>SQL Example:   <pre><code>SELECT title FROM bookstore_inventory ORDER BY price IS NULL ASC, price ASC; -- Same as NULLS LAST in other DBs\n</code></pre></li> </ul>"},{"location":"CIS-50/week_06.html#date-and-time-operators-and-functions","title":"Date and time operators and functions","text":"<ul> <li>Summary: Discusses using date functions with the <code>books</code> table.</li> <li>SQL Example:   <pre><code>SELECT title FROM books WHERE publication_year BETWEEN 1990 AND 2020;\n</code></pre></li> </ul>"},{"location":"CIS-50/week_06.html#conditional-expressions","title":"Conditional expressions","text":"<ul> <li>Summary: Introduces conditional expressions using the <code>CASE</code> statement in <code>books</code>.</li> <li>SQL Example:   <pre><code>SELECT title,\nCASE\nWHEN price &gt; 20 THEN 'Expensive'\nELSE 'Affordable'\nEND AS price_category\nFROM bookstore_inventory;\n</code></pre></li> </ul>"},{"location":"CIS-50/week_06.html#simple-joins","title":"Simple joins","text":"<ul> <li>Summary: Covers joining the <code>books</code> and <code>authors</code> tables.</li> <li>SQL Example:   <pre><code>SELECT books.title, authors.first_name, authors.last_name FROM books JOIN authors ON books.author_id = authors.author_id;\n</code></pre></li> </ul>"},{"location":"CIS-50/week_06.html#names-of-things","title":"Names of things","text":""},{"location":"CIS-50/week_06.html#name-collisions-and-ambiguity","title":"Name collisions and ambiguity","text":"<ul> <li>With many tables, we can have many identically named columns. How do we handle this?<ul> <li>Through using Qualified names like table1.columnA and table2.columnA</li> </ul> </li> <li>But won\u2019t that make our queries long and difficult to parse/read?<ul> <li>YES! Luckily there is Aliasing</li> </ul> </li> <li>Cool, but are there limits to what I can Alias something too?<ul> <li>YES! Please don\u2019t alias to reserved SQL keywords, if you have to you can use ` to do this though.</li> <li>YES! Please don\u2019t put spaces in your names for columns or tables, if you have to you can use \u201c to do this though.</li> <li>It\u2019s suggested to alias to short lower-case only names, though this is a convention, it will make your life easier.</li> </ul> </li> </ul>"},{"location":"CIS-50/week_06.html#aliasing","title":"Aliasing","text":"<ul> <li>Summary: Covers renaming tables and columns in joins for clarity.</li> <li>SQL Example 1:   <pre><code>SELECT b.title, a.first_name, a.last_name FROM books AS b JOIN authors AS a ON b.author_id = a.author_id;\n</code></pre></li> <li>SQL Example 2:   <pre><code>SELECT b.title, CONCAT(a.first_name, ' ', a.last_name) AS `name`\nFROM books AS b JOIN authors AS a ON b.author_id = a.author_id;\n</code></pre></li> </ul>"},{"location":"CIS-50/week_06.html#identity-columns---primary-keys-and-foreign-keys","title":"Identity columns - Primary Keys, and Foreign Keys!","text":"<ul> <li>Summary: Introduces identity columns, like <code>author_id</code> in <code>authors</code>.</li> <li>SQL Example:   <pre><code>CREATE TABLE authors (\nauthor_id INT AUTO_INCREMENT,\nfirst_name VARCHAR(50),\nlast_name VARCHAR(50),\nPRIMARY KEY (author_id)\n);\n</code></pre></li> </ul>"},{"location":"CIS-50/week_06.html#table-relationships---remember-cardinality","title":"Table relationships - REMEMBER Cardinality!","text":""},{"location":"CIS-50/week_06.html#one-to-one","title":"One-to-one","text":"<ul> <li>Summary: Covers one-to-one relationships between tables, such as <code>author_details</code> and <code>authors</code>.   <pre><code>CREATE TABLE authors (\nauthor_id INT AUTO_INCREMENT,\nfirst_name VARCHAR(50),\nlast_name VARCHAR(50),\nPRIMARY KEY (author_id)\n);\n\nCREATE TABLE biographies (\nbiography_id INT AUTO_INCREMENT,\nauthor_id INT,\nbio TEXT,\nPRIMARY KEY (biography_id),\nUNIQUE (author_id),\nFOREIGN KEY (author_id) REFERENCES authors(author_id)\n);\n</code></pre></li> <li>In this relationship, each author can have only one biography, and each biography is linked to exactly one author through the author_id. The UNIQUE constraint on author_id in the biographies table enforces the 1:1 relationship.</li> </ul>"},{"location":"CIS-50/week_06.html#one-to-many","title":"One-to-many","text":"<ul> <li>Summary: Describes one-to-many relationships, such as between <code>authors</code> and <code>books</code>.   <pre><code>CREATE TABLE authors (\nauthor_id INT AUTO_INCREMENT,\nfirst_name VARCHAR(50),\nlast_name VARCHAR(50),\nPRIMARY KEY (author_id)\n);\n\nCREATE TABLE books (\nbook_id INT AUTO_INCREMENT,\ntitle VARCHAR(100),\ngenre VARCHAR(50),\nprice DECIMAL(10, 2),\nauthor_id INT,\nPRIMARY KEY (book_id),\nFOREIGN KEY (author_id) REFERENCES authors(author_id)\n);\n</code></pre></li> <li>In this relationship, one author can be linked to many books, while each book is associated with exactly one author via author_id. This allows an author to have multiple entries in the books table.</li> </ul>"},{"location":"CIS-50/week_06.html#many-to-many","title":"Many-to-many","text":"<ul> <li>Summary: Explains many-to-many relationships, for example between <code>books</code> and <code>awards</code>.   <pre><code>CREATE TABLE books (\nbook_id INT AUTO_INCREMENT,\ntitle VARCHAR(100),\nPRIMARY KEY (book_id)\n);\n\nCREATE TABLE genres (\ngenre_id INT AUTO_INCREMENT,\ngenre_name VARCHAR(50),\nPRIMARY KEY (genre_id)\n);\n\nCREATE TABLE book_genres (\nbook_id INT,\ngenre_id INT,\nPRIMARY KEY (book_id, genre_id),\nFOREIGN KEY (book_id) REFERENCES books(book_id),\nFOREIGN KEY (genre_id) REFERENCES genres(genre_id)\n);\n</code></pre></li> <li>The book_genres table is a reference/linking table that facilitates the M relationship. Each book can be linked to multiple genres, and each genre can contain multiple books. The combination of book_id and genre_id as a composite primary key and ensures that the same book-genre pair cannot be repeated.</li> </ul>"},{"location":"CIS-50/week_06.html#inner-and-outer-joins","title":"Inner and Outer Joins","text":"<ul> <li>Summary: Introduces the difference between inner and outer joins using <code>books</code> and <code>awards</code>.</li> <li>SQL Example:</li> <li>An INNER JOIN is used here because we want only those books that have a corresponding author (i.e., we exclude books without authors).   <pre><code>SELECT b.title, a.first_name, a.last_name\nFROM books b\nINNER JOIN authors a ON b.author_id = a.author_id;\n</code></pre></li> <li>An INNER JOIN is appropriate because we only want to show books that have genres, excluding any books without a genre assignment.   <pre><code>SELECT b.title, a.first_name, a.last_name\nFROM books b\nINNER JOIN authors a ON b.author_id = a.author_id;\n</code></pre></li> <li>A LEFT OUTER JOIN is used to ensure that all authors are included, regardless of whether they have written any books.    <pre><code>SELECT a.first_name, a.last_name, b.title\nFROM authors a\nLEFT OUTER JOIN books b ON a.author_id = b.author_id;\n</code></pre></li> <li>A LEFT OUTER JOIN is used to include all genres, even those that do not have any books linked to them.   <pre><code>SELECT g.genre_name, b.title\nFROM genres g\nLEFT OUTER JOIN book_genres bg ON g.genre_id = bg.genre_id\nLEFT OUTER JOIN books b ON bg.book_id = b.book_id;\n</code></pre></li> </ul>"},{"location":"CIS-50/week_06.html#implicit-join-syntax","title":"Implicit Join Syntax","text":"<ul> <li>Summary: Explains older implicit join syntax.</li> <li>SQL Example:   <pre><code>SELECT books.title, authors.first_name FROM books, authors WHERE books.author_id = authors.author_id;\n</code></pre></li> <li>VS <pre><code>SELECT books.title, authors.first_name\nFROM books\nINNER JOIN authors ON books.author_id = authors.author_id;\n</code></pre></li> </ul>"},{"location":"CIS-50/week_06.html#adding-data-using-insert","title":"Adding data using INSERT","text":""},{"location":"CIS-50/week_06.html#specifying-columns","title":"Specifying columns","text":"<ul> <li>Summary: Describes inserting specific values into the <code>books</code> table.</li> <li>SQL Example:   <pre><code>INSERT INTO books (title, publication_year, price) VALUES ('1984', 1949, 19.99);\n</code></pre></li> </ul>"},{"location":"CIS-50/week_06.html#inserting-multiple-rows","title":"Inserting multiple rows","text":"<ul> <li>Summary: Explains how to insert multiple rows into <code>books</code>.</li> <li>SQL Example:   <pre><code>INSERT INTO books (title, publication_year, price) VALUES ('Animal Farm', 1945, 9.99), ('Homage to Catalonia', 1938, 14.99);\n</code></pre></li> </ul>"},{"location":"CIS-50/week_06.html#inserting-query-results","title":"Inserting query results","text":"<ul> <li>Summary: Demonstrates inserting query results into the <code>awards</code> table.</li> <li>SQL Example:   <pre><code>INSERT INTO awards (book_id, award_name, year)\nSELECT book_id, 'Best Fiction', 2020 FROM books WHERE publication_year &gt; 2015;\n</code></pre></li> </ul>"},{"location":"CIS-50/week_06.html#removing-data-with-delete","title":"Removing data with DELETE","text":"<ul> <li>Summary: Explains how to remove rows from <code>books</code>.</li> <li>SQL Example:   <pre><code>DELETE FROM books WHERE publication_year &lt; 1900;\n</code></pre></li> </ul>"},{"location":"CIS-50/week_06.html#modifying-data-with-update","title":"Modifying data with UPDATE","text":"<ul> <li>Summary: Covers updating rows in <code>books</code>.</li> <li>SQL Example:   <pre><code>UPDATE books SET price = price * 1.05 WHERE publication_year &gt; 2000;\n</code></pre></li> </ul>"},{"location":"CIS-50/week_09.html","title":"Column Store VS Row Store","text":""},{"location":"CIS-50/week_09.html#other-ways-to-store-data","title":"Other Ways to Store Data","text":""},{"location":"CIS-50/week_09.html#column-store-vs-record-store","title":"Column Store VS Record Store","text":""},{"location":"CIS-50/week_09.html#relational-dbms","title":"Relational DBMS","text":"<ul> <li>Record-oriented storage</li> <li>Write-optimized systems</li> <li>Row store relational databases are write-optimized by storing attributes of a record contiguously in storage. This allows for a single disk write to push all of the fields of a single record out to disk.  This approach is efficient for write-heavy environments such as OLTP (Online Transaction Processing) systems, but is not ideal for datawarehouse systems..</li> </ul>"},{"location":"CIS-50/week_09.html#data-warehouses--analytical-databases","title":"Data warehouses / Analytical Databases","text":"<ul> <li>Column store architecture</li> <li>Read-optimized systems</li> <li>Column stores make databases read-optimized in two ways:<ul> <li>Avoiding irrelevant data access: By storing data by column, C-Store allows users to only read the columns they need for a query, as opposed to reading entire rows in a row-store database. This can significantly improve read performance, especially for queries that only involve a subset of attributes.</li> <li>Data compression: Column stores can compress data more effectively than row stores because they store each column separately. This is because each column likely contains similar data types, which can be compressed more efficiently than the mixed data types within a row.</li> </ul> </li> </ul>"},{"location":"CIS-50/week_09.html#c-store-overview","title":"C-Store Overview","text":"<p>C-Store is a column-oriented DBMS that is designed to be read-optimized. It achieves this by storing data by column rather than by row, and by using careful coding and packing of objects into storage. C-Store also uses bitmap indexes to complement B-tree structures. These design choices allow C-Store to outperform commercial row-oriented products on warehouse-style queries.</p>"},{"location":"CIS-50/week_09.html#column-store-architecture-benefits","title":"Column store architecture benefits","text":"<ul> <li>Data stored in a traditional row store style</li> </ul> Transaction ID Date Product Quantity Price Customer ID 1 2024-03-15 Laptop 2 $800 101 2 2024-03-15 Smartphone 1 $500 102 3 2024-03-15 Tablet 3 $300 103 <ul> <li>In a C-Store database, data is stored column by column. Each column represents a single attribute, and all values for that attribute across all records are stored together.</li> </ul> Transaction ID 1 2 3 Date 2024-03-15 2024-03-15 2024-03-15 Product Laptop Smartphone Tablet Quantity 2 1 3 Price $800 $500 $300 Customer ID 101 102 103"},{"location":"CIS-50/week_09.html#performance-advantages-in-warehouses","title":"Performance advantages in warehouses","text":"<ul> <li>A column store architecture benefits by reducing the number of disk accesses required per query.</li> <li>This is because only the columns required for processing a given query are read, and irrelevant attributes are avoided.</li> <li>In warehouse environments, where typical queries involve aggregates performed over large numbers of data items, a column store architecture has a significant performance advantage.</li> </ul>"},{"location":"CIS-50/week_09.html#design-decisions","title":"Design Decisions","text":"<ul> <li>Read Optimize Data</li> <li>Store data by columns rather than by row.</li> <li>C-Store chooses to compress the data whenever possible.</li> </ul>"},{"location":"CIS-50/week_09.html#data-coding-and-compression","title":"Data coding and compression","text":"<ul> <li>This is done by using coding schemes that can represent data in fewer bits than the original format.</li> <li>Instead of storing a state like \u201cCA\u201d as a two-character abbreviation, C-Store can code it into a 6-bit value.</li> </ul>"},{"location":"CIS-50/week_09.html#storage-using-read-optimized-structures","title":"Storage using read-optimized structures","text":"<ul> <li>With a Column Structure, All the values for a single attribute are stored together, rather than each row of data being stored contiguously.</li> <li>This allows C-Store to only read the columns that are required for a query, reducing the amount of data that needs to be accessed from disk.</li> <li>Physically store a collection of columns, where each column is sorted on some attribute.</li> <li>These sorted collections of columns are called projections.</li> <li>C-Store can store multiple projections of the same data, with each projection sorted on a different attribute.<ul> <li>This allows C-Store to choose the most efficient projection to use when answering a query.</li> </ul> </li> </ul>"},{"location":"CIS-50/week_09.html#demonstration-of-physical-storage","title":"Demonstration of Physical Storage","text":"<ul> <li>As noted, C-Store\u2019s storage are Collections of columns sorted on attributes</li> <li>Projection storage is then used to gain differnt views of this data.</li> </ul>"},{"location":"CIS-50/week_09.html#visualizing-c-store-physical-storage","title":"Visualizing C-Store Physical Storage","text":"<p>Let\u2019s visualize the physical storage of a C-Store database using a simple example with multiple projections. In this example, we\u2019ll consider a database storing sales data with columns for Transaction ID, Date, Product, Quantity, Price, and Customer ID.</p> <ul> <li>Traditional Row Store view of this data.</li> </ul> Transaction ID Date Product Quantity Price Customer ID 1 2024-03-15 Laptop 2 $800 101 2 2024-03-15 Smartphone 1 $500 102 3 2024-03-15 Tablet 3 $300 103 <ul> <li>In a C-Store database, the data would be physically stored in columns rather than rows. Here\u2019s how it might look:</li> </ul> Transaction ID: 1 2 3 Date: 2024-03-15 2024-03-15 2024-03-15 Product: Laptop Smartphone Tablet Quantity: 2 1 3 Price: $800 $500 $300 Customer ID: 101 102 103 <ul> <li> <p>Each column contains all the values for a specific attribute across all transactions.</p> </li> <li> <p>Now let\u2019s see what we mean by storing Multiple Projections:</p> </li> <li>Consider two different projections or views of this data:</li> </ul> <p>Projection 1: Product Sales - Columns: Product, Quantity, Price</p> Product: Laptop Smartphone Tablet Quantity: 2 1 3 Price: $800 $500 $300 <p>Projection 2: Customer Transactions - Columns: Customer ID, Transaction ID, Date, Product</p> Customer ID: 101 102 103 Transaction ID: 1 2 3 Date: 2024-03-15 2024-03-15 2024-03-15 Product: Laptop Smartphone Tablet"},{"location":"CIS-50/week_09.html#querying-multiple-projections","title":"Querying Multiple Projections:","text":"<p>Queries can be performed on each projection separately, allowing for efficient analysis based on different perspectives of the data.</p> <ul> <li>For example, to calculate the total sales revenue for each product in Projection 1, you could run a SQL query like:</li> </ul> <pre><code>SELECT Product, SUM(Quantity * Price) AS TotalRevenue\nFROM ProductSales\nGROUP BY Product;\n</code></pre> <ul> <li>And to retrieve all transactions made by a specific customer in Projection 2, you could run a query like:</li> </ul> <pre><code>SELECT *\nFROM CustomerTransactions\nWHERE CustomerID = 101;\n</code></pre> <p>These queries can be executed independently on their respective projections, leveraging the columnar storage layout for efficient data retrieval and processing.</p>"},{"location":"CIS-50/week_09.html#hardware-architecture","title":"Hardware Architecture","text":"<ul> <li>C-Store is designed for a grid computing environment.</li> </ul>"},{"location":"CIS-50/week_09.html#grid-computers","title":"Grid computers","text":"<ul> <li>Grid computing involves a network of interconnected computers (nodes) to work together as a single system.</li> <li>Each node has its own processing power, memory, and storage.</li> <li>Grid computing allows C-Store to be K-safe, meaning it can tolerate K failures.</li> <li>This is achieved by storing redundant data on different nodes.</li> </ul>"},{"location":"CIS-50/week_09.html#horizontal-data-partitioning","title":"Horizontal data partitioning","text":"<ul> <li>Horizontal Partitioning is a technique that splits a table into smaller subsets based on a chosen criterion, typically by ranges of values or hash functions.</li> <li>Each subset, called a shard (or partition), is then stored on a separate machine.</li> <li>The Grid computer architecture allows C-Store to horizontally partition data across the disks of the various nodes.  This is beneficial because it allows for very large amounts of data to be stored and retrieved in parallel.</li> </ul> Info <p>horizontal partitioning benefits C-Store in a grid computing environment:</p> <p>Scalability: By distributing data across multiple machines, C-Store can handle much larger datasets than if it were limited to a single server. As the data volume grows, additional nodes can be added to the grid to accommodate the increase.</p> <p>Parallel Processing: Queries can be executed in parallel across different nodes, potentially speeding up query processing times significantly. Since each node holds a portion of the data, queries can be divided and executed simultaneously on multiple machines, retrieving relevant data faster.</p> <p>Fault Tolerance: If a single node fails, the data on that node remains accessible because other nodes still hold their respective partitions. This redundancy helps ensure data availability and system reliability.</p>"},{"location":"CIS-50/week_09.html#transactions-and-updates","title":"Transactions and Updates","text":""},{"location":"CIS-50/week_09.html#challenges-of-updates-in-read-mostly-environments","title":"Challenges of updates in read-mostly environments","text":"<p>C-Store faces the challenge of balancing the need to update data frequently with the desire to optimize data structures for reading. Traditionally, these two goals are at odds with each other. C-Store addresses this challenge by using a hybrid architecture with a Writeable Store (WS) for updates and a Read-optimized Store (RS) for queries. Updates are funneled through the WS, which is designed for fast inserts and updates. Then, the data is periodically bulk-loaded into the RS. This bulk-loading process is performed by the tuple mover component. However, this approach can introduce latency into updates, since the data may not be immediately reflected in the RS.</p>"},{"location":"CIS-50/week_09.html#c-stor-in-the-wild","title":"C-Stor in the Wild","text":"<p>Unfortunately I don\u2019t have ther resources at CR to let you play with an implementation of C-Stor, but I think its important for you all to know what it is, when you should use it (i.e. parallelism and warehousing data queries), and what products support C-Store like architecture.</p> <p>C-Stor was presented in this article in 2005, and it didn\u2019t take long for commercial vendors to see the huge benefit of this type of architecture. Here is a short list of commercial databases that integrated some version of C-Stor like features into their products, or entirely NEW products:</p> <ol> <li> <p>Amazon Redshift: Redshift is a fully managed data warehouse service provided by Amazon Web Services (AWS). It utilizes a columnar storage format and massively parallel processing (MPP) architecture to deliver high-performance query processing and scalability for analytics workloads in the cloud.</p> </li> <li> <p>Google BigQuery: BigQuery is a serverless, highly scalable data warehouse service offered by Google Cloud Platform (GCP). It uses a columnar storage format and a distributed processing engine to deliver fast and cost-effective analytics capabilities for large datasets.</p> </li> <li> <p>Oracle Database In-Memory Option: Oracle Database provides an in-memory option that enables columnar storage and processing for analytical workloads. With this option, tables or portions of tables can be populated into memory in a columnar format, improving query performance for analytics and reporting.</p> </li> <li> <p>Microsoft SQL Server Columnstore Indexes: SQL Server offers columnstore indexes, which store and manage data in a columnar format for improved query performance, especially for data warehouse and analytics scenarios. Columnstore indexes can be applied to both clustered and non-clustered tables in SQL Server.</p> </li> <li> <p>IBM Db2 BLU Acceleration: Db2 BLU Acceleration is a feature of IBM Db2 that provides columnar storage and in-memory processing capabilities. It leverages techniques such as columnar compression, data skipping, and SIMD (Single Instruction, Multiple Data) processing to accelerate query performance for analytical workloads.</p> </li> <li> <p>SAP HANA: SAP HANA is an in-memory data platform that natively supports columnar storage and processing. It is designed for real-time analytics and transaction processing, offering high-speed data processing capabilities for large datasets.</p> </li> <li> <p>Vertica by Micro Focus: Vertica is a columnar database designed for analytics and data warehousing applications. It uses a columnar storage format and a distributed architecture to provide high-performance query processing and scalability for large-scale analytics.</p> </li> </ol>"},{"location":"CIS-50/week_11.html","title":"OLTP Through the Looking Glass Notes","text":""},{"location":"CIS-50/week_11.html#oltp--through-the-looking-glass-notes","title":"OLTP \u2013 Through the Looking Glass Notes","text":""},{"location":"CIS-50/week_11.html#oltp-online-transaction-processing-vs-olap-online-analytical-processing","title":"OLTP (Online Transaction Processing) vs OLAP (Online Analytical Processing)","text":"<ul> <li>OLTP systems are optimized for transactional performance instead of data analysis.<ul> <li>OLTP - High frequency of small load queries.</li> </ul> </li> <li>OLAP systems provide analysis of data for business decisions.<ul> <li>OLAP - Low frequency of big load queries.</li> </ul> </li> </ul>"},{"location":"CIS-50/week_11.html#oltp-eventual-consistency-is-favored-over-strong-consistency","title":"OLTP (Eventual Consistency is favored over strong consistency)","text":"<ul> <li>Note the Some activity may not appear yet</li> </ul> <p>Tryit yourself</p>"},{"location":"CIS-50/week_11.html#newsql-for-oltp","title":"NewSQL for OLTP","text":""},{"location":"CIS-50/week_11.html#oltp--what-has-changed","title":"OLTP \u2013 What has changed?","text":"<ul> <li>Modern hardware has become cheaper and better (cheaper RAM, faster processors),<ul> <li>OLTP transactions take microseconds.</li> </ul> </li> <li>Many OLTP databases can fit in main memory.</li> <li>Institution can create clusters of many machines with aggregate memory reaching 100\u2019s of Gigabytes.</li> <li>Rising trend: Internet application require \u201cdatabase-like\u201d applications without full suite of standard database features<ul> <li>logging, locking, latching, multi-threading, buffer management and more are not fully necessary.</li> </ul> </li> <li>But the database architecture has not changed much (until 2008).</li> </ul>"},{"location":"CIS-50/week_11.html#alternative-dbms-architectures","title":"Alternative DBMS Architectures","text":"<ul> <li>Logless database: Recovery not required or recovery from other sites in cluster</li> <li>Single threaded database: Multi-threading was required to overcome latency because slow disk I/O</li> <li>Transaction-less database: In distributed internet application, eventual consistency is often favored over transactional consistency<ul> <li>Work by Stonebraker - \u201cThe End of an Architectural Era (It\u2019s Time for a Complete Rewrite), 2007\u201d</li> <li>Light weight transactions - all reads are required to be done before any writes are acceptable</li> </ul> </li> </ul>"},{"location":"CIS-50/week_11.html#paper-structure","title":"PAPER STRUCTURE","text":""},{"location":"CIS-50/week_11.html#objective","title":"OBJECTIVE","text":"<p>To optimize the OLTP databases systems for main memory storage as well as other database variants so as to reach new benchmarks.</p>"},{"location":"CIS-50/week_11.html#methodology","title":"METHODOLOGY","text":"<ol> <li>Use an open source database (SHORE) and benchmark it (TPC-C).</li> <li>Identify major overheads or database features that we can remove.</li> <li>Remove overheads one-by-one and benchmark the modified system at each point.</li> </ol>"},{"location":"CIS-50/week_11.html#contribution","title":"CONTRIBUTION","text":"<p>The paper identifies overheads and analyzes the isolated database performance after removal of each overhead.</p>"},{"location":"CIS-50/week_11.html#whats-shore","title":"WHAT\u2019S SHORE?","text":"<ul> <li>SHORE (Scalable Heterogeneous Object REpository): project was developed at University of Wisconsin \u2013 Madison in early 1990.</li> <li>Layered architecture: users can choose level of support for their applications from several components</li> <li>Has all modern DBMS features</li> </ul>"},{"location":"CIS-50/week_11.html#whats-tpc-c","title":"WHAT\u2019S TPC-C?","text":"<ul> <li>It is an OLTP benchmark - mix of 5 concurrent transactions of different types and complexity.</li> <li>Designed to represent any industry that manage, sell or distribute a product or service.</li> <li>Designed to scale with suppliers and warehouses.</li> <li>90% of the transactions are of type:<ol> <li>New order transaction (entering orders)</li> <li>Payment transaction (recording payments)</li> </ol> </li> </ul>"},{"location":"CIS-50/week_11.html#four-major-overheads-were-found--removed","title":"FOUR MAJOR OVERHEADS WERE FOUND &amp; REMOVED","text":"<ol> <li>Logging<ul> <li>Assembling log records and tracking down all changes in database structures slows performance</li> <li>Logging is useful for recovery which is not always required or can be achieved in other ways (other DB sites)</li> </ul> </li> <li>Locking<ul> <li>All accesses to database structures are governed by Lock Manager.</li> </ul> </li> <li>Latching<ul> <li>In multi-threaded database, data structures have to be latched before they can be accessed.</li> <li>But we are use single-threaded system which is in memory.</li> </ul> </li> <li>BufferManagement<ul> <li>Main memory database system do not need to access pages through a buffer pool.</li> </ul> </li> </ol>"},{"location":"CIS-50/week_11.html#performace-study---experiment-setup","title":"PERFORMACE STUDY - EXPERIMENT SETUP","text":"<ul> <li>Entire database was pre-loaded to memory.</li> <li>It was ensured that main-memory resident experiments didn\u2019t generate disk traffic.</li> <li>Results were measured in:<ol> <li>Throughput - What is it? (Number of transactions executed per second)</li> <li>CPU Instruction Count \u2013 Why?<ul> <li>Instruction counts are:<ul> <li>Representative of the total run-time code path length</li> <li>Deterministic (no randomness)</li> </ul> </li> </ul> </li> </ol> </li> <li>11 switches in SHORE to remove functionality (or perform optimizations), which provides results for six arrangements</li> </ul>"},{"location":"CIS-50/week_11.html#shore-decompostion","title":"SHORE DECOMPOSTION","text":"<p>Due to the tight integrations of all managers in Shore, it was not possible to cleanly separate all the components, hence they were removed in an order i.e. (logging, locking or latching, latching or locking, buffer manager)</p> <p> </p>"},{"location":"CIS-50/week_11.html#components-in-shore-and-their-removal","title":"Components in SHORE and Their Removal","text":"<ol> <li>Logging<ul> <li>Features:<ul> <li>Implements a write-ahead logging</li> <li>Logs are identified by sequence numbers Log Sequence Numbers (LSN)</li> <li>Needs a close interaction with log manager, buffer manager and transaction manager</li> </ul> </li> <li>Removal:<ul> <li>Group commits were allowed and log buffer size was increased</li> <li>Commented out the functions that were used to write and prepare the log records</li> <li>Addition of if-statements to avoid processing LSNs</li> </ul> </li> </ul> </li> <li>Locking (locking and latching can be removed in any order)<ul> <li>Features:<ul> <li>Provides two-phase locking with transactions having ACID properties</li> <li>Each transaction tracks and lists the locks it holds</li> <li>Locks are gained when transaction enters the prepared state and released at the end of transaction</li> </ul> </li> <li>Removal:<ul> <li>Modified the Lock Managers method to return immediately (as if checks for locks were satisfied)</li> <li>Modified the methods related to pinning (finding) records, by using B-tree index access</li> </ul> </li> </ul> </li> <li>Latching<ul> <li>Removal:<ul> <li>Modified all mutex requests to return immediately (as if mutual exclusion request was satisfied)</li> <li>Addition of if-statements to avoid the requests for latches</li> <li>Replaced B-tree methods with methods that did not use latching</li> </ul> </li> </ul> </li> <li>Buffer Management - Involved most of the modifications<ul> <li>Features:<ul> <li>Uses a fix method to read/write pages</li> <li>Used latching to ensure consistency for fix method</li> <li>Reading a record is performed by issuing a pin / unpin method call.</li> <li>Updates occur by copying the record from the buffer pool to the user\u2019s address space, changes are made there and then given to the storage manager</li> </ul> </li> <li>Removal:<ul> <li>Shore\u2019s page allocation mechanism was dropped to use standard malloc library for creation of new records</li> <li>Not able to completely remove page interface to buffer frames</li> <li>But mapping between pages and buffer frames was accelerated to reduce overhead</li> </ul> </li> </ul> </li> </ol>"},{"location":"CIS-50/week_11.html#performace-study--experiment-setup","title":"PERFORMACE STUDY \u2013 EXPERIMENT SETUP","text":"<ul> <li>Calls to SHORES\u2019s methods for New Order and Payment transactions<ul> <li>New Order transaction has 10 times instructions of Payment</li> <li>For simplicity, we discuss Payment transaction </li> </ul> </li> <li>RESULT - Modifications took us from 640 -&gt; 12700 transactions/second. (20 fold increase)</li> <li>Optimal - Memory-resident, hand-built B-tree package a.k.a minimal overhead kernel</li> </ul>"},{"location":"CIS-50/week_11.html#experiment-results","title":"Experiment Results","text":"<ul> <li>After all optimizations and deletions, SHORE is left with core residue (all CPU cycles, no I/O).</li> <li>Achieved a throughput of 80 microseconds/transaction or 12700 transactions/second</li> <li>Out of box SHORE - 588 microseconds/transaction or 640 transactions/second</li> <li>12700 \u00f7 640 = 19.843 ~ 20 times improvement in overall throughput</li> </ul>"},{"location":"CIS-50/week_11.html#future-implication","title":"FUTURE IMPLICATION","text":"<ol> <li>Concurrency Control<ul> <li>Transactions-at-a-time processing allows concurrency control to be turned off.</li> <li>Old research proved \u2018dynamic locking\u2019 was better than \u2018concurrency control\u2019 but for disk-based load. Future Work:<ul> <li>Optimistic concurrency control might be better for main-memory load.</li> </ul> </li> </ul> </li> <li>Multi-core Support<ul> <li>Multiple transaction concurrently on separate cores, requires latching</li> <li>Future OLTP engines should deal with multiple cores. Future Work:<ul> <li>Use virtualization to make each core acts as a single-threaded machine.</li> <li>Intra-query parallelism</li> </ul> </li> </ul> </li> <li>Replication Management<ul> <li>Active-passive scheme<ul> <li>Every object has an \u201cactive\u201d primary copy, to which all updates are first directed.</li> <li>Log of changes is then spooled over the network to one or more \u201cpassive\u201d backup sites.</li> <li>Unless two-phase commit is used, remote copies are not transactionally consistent with primary.</li> </ul> </li> <li>Future work : Active-active scheme<ul> <li>All replicas are \u201cactive\u201d and the transaction is performed synchronously on all replicas.</li> <li>Advantage - nearly instantaneous failover recovery.</li> <li>Two-phase commit will introduces latency, therefore techniques to avoid it are needed (i.e. performing transactions in timestamp order).</li> </ul> </li> </ul> </li> <li>Weak Consistency<ul> <li>Web-oriented OLTP insist on replicas, usually over a WAN, to achieve high availability and disaster recovery.</li> <li>Problem - Nobody is willing to pay for \u2018normal\u2019 transactional consistency over a WAN.</li> <li>Solution - Eventual Consistency</li> <li>To ensure eventual consistency we require transaction consistency under a general workload.</li> <li>Interesting problem - Removing transactional support (locking and logging) from a main memory system could yield a very high performance database.</li> </ul> </li> </ol>"},{"location":"CIS-50/week_11.html#conclusion","title":"CONCLUSION","text":"<ul> <li>Buffer management and locking operations are the most significant contributions to system overhead.</li> <li>Unless one strips out all four components, the performance of a main memory-optimised database is not better than a conventional database where most of the data fits in RAM.</li> <li>A fully stripped down system gives us many folds performance.<ul> <li>Single threaded</li> <li>Implements recovery via copying state from other nodes in the network</li> <li>Fits in memory</li> <li>Uses reduced functionality transactions</li> </ul> </li> </ul>"},{"location":"CIS-50/week_11.html#examples-of-in-memory-database","title":"EXAMPLES OF IN-MEMORY DATABASE","text":"<ul> <li>MemSQL</li> <li>VoltDB</li> <li>HEKATON - SqlServer</li> <li>Google Cloud Spanner</li> </ul>"},{"location":"CIS-50/week_11.html#authors","title":"Authors:","text":"<p>Stavros Harizopoulous, Daniel Abadi, Samuel Madden and Michael Stonebraker</p>"},{"location":"ai-committee/AI_Policy.html","title":"AI Policy","text":""},{"location":"ai-committee/AI_Policy.html#policy-on-the-ethical-use-of-artificial-intelligence-tools-in-coursework","title":"Policy on the Ethical Use of Artificial Intelligence Tools in Coursework","text":""},{"location":"ai-committee/AI_Policy.html#overview","title":"Overview","text":"<p>This policy establishes guidelines for the ethical use of Artificial Intelligence (AI) tools in completing assignments. As AI tools become more accessible and influential in learning environments, it is essential to recognize both their educational potential and ethical implications. This policy outlines acceptable and prohibited uses of AI for academic work, encourages responsible AI literacy, and empowers students to use AI as a supplemental learning tool in a way that supports academic integrity, respect for intellectual property, and individual learning objectives.</p>"},{"location":"ai-committee/AI_Policy.html#purpose","title":"Purpose","text":"<p>The purpose of this policy is to ensure that AI tools are used in ways that support students\u2019 educational growth and maintain the integrity of their work. The intent is not to discourage the use of AI but to provide students with guidelines on ethical usage that aligns with the goals of higher education and fosters the development of critical skills. It is the responsibility of both students and instructors to be aware of these guidelines, to use AI tools in ways that enhance learning, and to recognize and avoid uses that could undermine academic and professional development.</p>"},{"location":"ai-committee/AI_Policy.html#ethical-use-of-ai-tools","title":"Ethical Use of AI Tools","text":"<p>The following are examples of acceptable and prohibited uses of AI tools in coursework:</p>"},{"location":"ai-committee/AI_Policy.html#acceptable-use","title":"Acceptable Use","text":"<ol> <li> <p>Research Assistance: Students may use AI tools to assist in finding reputable sources, generating initial ideas, or identifying concepts relevant to their work.</p> </li> <li> <p>Writing Support: AI tools may be used to help with grammar checking, language translation, and stylistic improvements on written assignments, provided these tools do not generate the actual content or ideas presented as original work.</p> </li> <li> <p>Learning Aid: Students are encouraged to use AI as a resource for learning concepts or deepening understanding. For example, using AI to explain complex ideas or to simulate practice scenarios can be beneficial when done in conjunction with personal study efforts.</p> </li> <li> <p>Citing AI Use: If an AI tool has been used to develop any aspect of an assignment, students should provide a clear disclosure (e.g., \u201cThis paper used AI assistance from [Tool] for grammar checking and idea generation\u201d) and cite the AI tool if it contributed content or shaped ideas directly. This ensures transparency and helps instructors gauge the AI\u2019s role in the student\u2019s work.</p> </li> </ol>"},{"location":"ai-committee/AI_Policy.html#prohibited-use","title":"Prohibited Use","text":"<ol> <li> <p>Content Creation: Submitting AI-generated text, analysis, code, or solutions as if they were the student\u2019s own work without acknowledgment or modification is not acceptable. This includes using AI to answer assignment questions, write essays, or complete programming tasks directly.</p> </li> <li> <p>Falsifying Sources: Generating sources or citations through AI without verifying their authenticity is unethical and can be considered academic dishonesty. AI-generated content should be fact-checked before inclusion in assignments.</p> </li> <li> <p>Copyright Infringement: AI tools that use copyrighted material to generate work may violate copyright laws. Students should refrain from using AI tools in ways that infringe on copyright, such as generating content that closely resembles copyrighted material.</p> </li> <li> <p>Plagiarism: Presenting AI-generated work as original without disclosure or citation constitutes plagiarism. Students should ensure that they attribute AI-generated content properly, as guided by their instructor or institution.</p> </li> </ol>"},{"location":"ai-committee/AI_Policy.html#promoting-responsible-and-ethical-ai-use","title":"Promoting Responsible and Ethical AI Use","text":"<p>Encouraging AI Literacy Understanding how to use AI tools responsibly is a valuable skill that extends beyond academic work. This course encourages students to explore the benefits and limitations of AI, including its potential for error and the importance of critical thinking when reviewing AI-generated content. By fostering AI literacy, students can make informed choices and recognize AI as a tool that complements, rather than replaces, personal effort and expertise.</p> <p>Balancing Educational Outcomes with AI Use While AI can aid understanding, over-reliance may hinder students from developing critical thinking and problem-solving skills. Students are encouraged to use AI in moderation and as a supplement rather than a substitute for individual learning and reflection. Misusing AI can result in missed educational opportunities and may compromise academic integrity.</p>"},{"location":"ai-committee/AI_Policy.html#instructors-role-and-academic-freedom","title":"Instructor\u2019s Role and Academic Freedom","text":"<p>This policy allows instructors the flexibility to tailor AI-related guidelines to their specific courses and assignments. Instructors may provide additional guidance or set specific requirements for disclosing and citing AI usage as appropriate to their field and pedagogical goals. Instructors are encouraged to engage students in discussions about the ethical implications of AI and to provide guidance on its educational uses and limitations.</p>"},{"location":"ai-committee/AI_Policy.html#consequences-of-misuse","title":"Consequences of Misuse","text":"<p>Failure to adhere to the ethical guidelines for AI use may result in academic penalties consistent with institutional policies on academic integrity. Students are encouraged to consult with their instructor if they have questions regarding the ethical use of AI in coursework.</p>"},{"location":"ai-committee/AI_Policy.html#conclusion","title":"Conclusion","text":"<p>This policy aims to empower students to responsibly integrate AI into their learning while recognizing and avoiding ethical risks. By promoting transparency, critical engagement, and respect for intellectual property, this policy supports the academic growth of students and the integrity of educational outcomes.</p>"},{"location":"ai-committee/AI_Research.html","title":"AI Committee","text":""},{"location":"ai-committee/AI_Research.html#suggestions-for-ai-proofing-coursework","title":"Suggestions for AI Proofing Coursework","text":""},{"location":"ai-committee/AI_Research.html#the-education-and-morality-approach","title":"The Education and Morality Approach","text":"<ul> <li>Explain why learning is important, and why it should matter to them.</li> <li>Educate Students About Academic Integrity</li> <li>Clearly Define Acceptable Use Of Technology</li> </ul>"},{"location":"ai-committee/AI_Research.html#use-technology","title":"Use Technology","text":"<ul> <li>AI Detectors (not really viable and poor results)</li> <li>AI Proctors like TalView (Better results but privacy concerns)</li> <li>School VPN, Proxy, or Main-Frame connectivity (Good results, but not equitable)</li> <li>School Monitoring Software (ethical and privacy concerns)</li> <li>Monitor network activity</li> <li>Keyboard strokes</li> <li>Motion, Sound, etc.</li> <li>Enable Lockdown Browsers</li> <li>Remote Proctors</li> <li>Tools to disable network and cut-n-paste features while taking the exam</li> </ul>"},{"location":"ai-committee/AI_Research.html#use-higher-order-thinking--questions-to-challenge-ai","title":"Use Higher-Order Thinking  Questions to Challenge AI","text":"<ul> <li>Open ended questions:<ul> <li>No multiple choice</li> <li>Ask students to explain concepts, defend arguments, or solve problems in their own words.</li> </ul> </li> <li>Use Scenarios:<ul> <li>Present students with real-world situations related to the topic and ask them to develop solutions or recommendations.</li> </ul> </li> <li>Make questions Personal:<ul> <li>Ask students to relate the course material to their own experiences and backgrounds.</li> </ul> </li> <li>Peer Assessments with Feedback</li> </ul>"},{"location":"ai-committee/AI_Research.html#use-media-to-challenge-ai","title":"Use Media to Challenge AI","text":"<ul> <li>Visuals and multimedia:<ul> <li>Questions with images, graphs, charts, and audio/video clips in assessments make it difficult for AI tools to process.</li> <li>Require students to respond with their own audio/visual to explain a topic in their own voice.<ul> <li>AI can be trained to detect if students are reading prompts via eye movement and intonation.</li> </ul> </li> <li>Oral examinations via Zoom or in person</li> </ul> </li> <li>Hands-on Assessments/Assignments:<ul> <li>Ask students to demonstrate a skill.<ul> <li>Demonstrate a science experiment, performance, role play, etc.</li> <li>When remote, it can be recorded and uploaded.</li> </ul> </li> <li>Take on REAL-WORLD community sponsored projects.<ul> <li>Examples: traffic congestion or waste management fixes/updates.</li> <li>Have them focus on user experience and human constraints</li> </ul> </li> </ul> </li> <li>Use Student Portfolios</li> </ul>"},{"location":"ai-committee/AI_Research.html#use-randomization","title":"Use Randomization","text":"<ul> <li>Autogenerate tests per student (Each studnet gets a unique test)<ul> <li>Random questions from test bank</li> <li>Randomize question order</li> <li>Randomize choices</li> </ul> </li> <li>Adaptive Testing<ul> <li>Adjusts the difficulty of questions based on a student\u2019s previous responses.</li> </ul> </li> </ul>"},{"location":"ai-committee/AI_Research.html#use-time","title":"Use Time","text":"<ul> <li>Proctor even online exams at a specific time</li> <li>Students must share full desktop during exam.</li> <li>Constrain the time for each question and the exam.</li> <li> <p>VPN, Proxy, or Remote Mainframe is required for online exams.</p> <ul> <li>Forces student to be on campus network</li> <li>VPN can enforce routing and preclude known AI bots (Though 2 computers or other networking tricks can bypass this)<ul> <li>Would also require detecting routing tabls and bridges routing traffic outside the VPN</li> </ul> </li> </ul> </li> <li> <p>Reference current events since AI needs to be retrained.</p> </li> </ul>"},{"location":"ai-committee/AI_Research.html#use-student-history","title":"Use Student History","text":"<ul> <li>If a baseline for student work can be constructed, that baseline can be used to compare current work.</li> <li>Historical papers can indicate things like<ul> <li>Writing style</li> <li>Grammatical and vocabulary statistics.<ul> <li>Avg mistakes, Avg word length, Avg Sentence length, etc.</li> </ul> </li> </ul> </li> <li>AI can even be used to construct and anaylize this baseline if enough historical work exists to do so.</li> </ul>"},{"location":"ai-committee/AI_Research.html#gaming-ai","title":"Gaming AI","text":"<ul> <li> <p>Write questions in simile and metaphor</p> </li> <li> <p>Purposefully make mistakes.</p> <ul> <li>Mis-spell facts that are the main point of the question (e.g. spell cities backwards in a geography test)</li> <li>Repeat words in meaningful places.</li> <li>Make multi questions (current AI tends to respond to 1 but not all points of a multi-question).<ul> <li>Separating the questions into distinc sentences makes this method less effective.</li> </ul> </li> </ul> </li> <li> <p>Introduce statistical oddities:</p> </li> </ul> <p>Scenario: You\u2019re creating a statistics quiz. Don\u2019t just ask for the average rainfall in a city. Instead, present a dataset with a bimodal distribution (two peaks) and ask students to explain the possible reasons behind this unusual pattern.</p> <ul> <li>Use multimodal reasoning:</li> </ul> <p>Assignment Example: Students analyze a historical event. They are given a text passage, a political cartoon depicting the event, and a short speech from a key figure. The assignment requires them to compare and contrast the perspectives presented in each modality (text, image, audio) to gain a well-rounded understanding.</p> <ul> <li>Use Current Events:</li> </ul> <p>Example: Students research a recent news story and then debate its potential long-term impact. This requires them to stay updated, think critically about new information, and go beyond the initial news report that AI likely hasn\u2019t ingested. Ingesting the news report is possible if its in a easily extractable format though.</p> <ul> <li>Open-Ended Questions:</li> </ul> <p>Example: \u201cWhat does it mean to be human in the age of artificial intelligence?\u201d This question is philosophical and requires students to delve into complex concepts that go beyond memorizing facts.</p>"},{"location":"ai-committee/AI_Research.html#references","title":"References","text":"<ul> <li>Gonzaga Recommendations</li> <li>TeacherMade.com</li> <li>Reddit</li> <li>And of course\u2026 ChatGPT</li> <li>TalView</li> <li>Rosalyn.AI</li> <li>joshpeete.com</li> </ul>"},{"location":"ai-committee/AI_and_Learning.html","title":"AI and Learning","text":""},{"location":"ai-committee/AI_and_Learning.html#theme-ai-and-learning","title":"Theme: AI and Learning","text":""},{"location":"ai-committee/AI_and_Learning.html#transformational-learning-most-of-this-from-twin-sparrows","title":"Transformational Learning (Most of this from Twin Sparrows)","text":"<ul> <li>AI Tutors<ul> <li>Bridge Educational Gaps based on inequalities like income, geography, etc.</li> <li>Can AI replace a human in terms of encouragement, emotional support, and mentorship?</li> </ul> </li> <li>Adaptive Learning<ul> <li>Adapted to emotional, intellectual, and cultural differences.</li> <li>Focused on rapidly chaning curriculum for a changing world.</li> <li>Changes Pace as needed</li> </ul> </li> <li>Personalized Curriculum and support<ul> <li>Focused on adapting to each students unique strenghts and weaknesses</li> <li>Makes educational topics accessible based on student\u2019s experience</li> <li>Can take student driven educational excursions that traditional classrooms and teachers can not.</li> </ul> </li> </ul>"},{"location":"ai-committee/AI_and_Learning.html#cautionary-theme","title":"Cautionary Theme","text":"<ul> <li>Does it bridge Inequality gaps and democratize education or just make inequalities worse?<ul> <li>Who gets access? When?</li> <li>Will wealth factor in to the quality of the AI?</li> <li>Energy and resource distibution gaps would have to be solved to make this trully equitable and possible.</li> </ul> </li> <li>Over reliance on AI<ul> <li>Instructors and students become lazy</li> <li>Parents become lazy and withdrawn</li> </ul> </li> <li>Need for Human connection and mentorship</li> <li>AI could cause students to avoid critical thinking</li> <li>Current forms of AI are not truly creative, so creativity loss is possible as basic knowledge narrows.</li> </ul>"},{"location":"ai-committee/AI_and_Learning.html#big-questions","title":"Big Questions","text":"<ol> <li> <p>If learning is personalized, is there a need for the in-person/classroom dynamic?</p> <ul> <li>PROS<ul> <li>Students not held back by fixed curriculum</li> <li>Self paced progress at individuals speed</li> <li>Could use individual\u2019s strenghts to bolster understanding</li> <li>Income and geography may be moot (Accessible and Scalable)</li> <li>Could enhance teachers and address teacher shortages</li> <li>Continuous assessments can be performed to adjust teaching and strategy<ul> <li>Increases retention and engagement</li> </ul> </li> <li>Could provide specialized support to students with disabilities</li> </ul> </li> <li>CONS<ul> <li>You may lose collaboration, communication, empathy, and teamwork</li> <li>Learning to navigate social dynamics like relationships and conflicts could be lost</li> <li>Inspiring mentorship would be lost, thus creating an educated population with no raison d\u2019etre</li> <li>Seems like We are a LOOOONG way away from emotionally supportive AI</li> <li>Can AI provide human like debate, discusssion and creative problem solving? This is yet to be determined.<ul> <li>Deeper thinking and creativity may arise out of collaborative learning</li> </ul> </li> <li>AI is prone to creator bias (Can this be fixed?)</li> </ul> </li> <li>A Hybrid Model Seems more Realistic to me<ul> <li>AI -&gt; psersonalized assessment, lesson plans, and skill building</li> <li>Teacher -&gt; mentor, creativity, critical thinking, and social skills</li> <li>Classroom -&gt; collaboration, connection, discussion</li> </ul> </li> </ul> </li> <li> <p>Are the skills we focus education on today pertienent to an AI driven world?</p> <ul> <li>Skills like repetition, test taking, and memorization seem less important since AI can do all of these things faster<ul> <li>So this would affect careers like coding, legal research, finance, and even mathmatics to a lesser degree</li> </ul> </li> <li> <p>Skills like socialization, creativity, critical thiking, adapting, and collaboration become more valuable then knowledge based skills</p> </li> <li> <p>Should we be developing new skills, if so, which ones?</p> <ul> <li>AI Literacy (limitations, bias, how to use it, and how it works)</li> <li>Critical Thinking (How to ask questions, how to seek answers, how to evaluate content (especiall AI content)</li> <li>Non Linear thinking (creative solutions to problems from diverse and different experiences - this may arise organically out of classroom collaboration)</li> <li>Emotional Intelligence skills (empathy, leadership, relationships)</li> <li>Cultural awareness, negotiation, and persuasion skills</li> </ul> </li> <li> <p>How long will even these new skills be pertienent?</p> <ul> <li>Even without AI, no skill is relevant forever, so teaching adaptability is key</li> <li>NEEDS: Education to support -&gt; Constant re-skilling, curiosity and adaptability, AI as a tool not a crutch</li> </ul> </li> </ul> </li> <li> <p>If AI adpats and caters to each student\u2019s whimsical needs, does critical thinking still take place?</p> <ul> <li> <p>If so how?</p> <ul> <li>Possibly: I can imagine, but I haven\u2019t actually seen such an AI yet.</li> <li>Assessments would have to be full mind and body, possibly requiring Human-AI fusion -&gt; Cyborgs.</li> </ul> </li> <li> <p>If not, how can we balance a world of AI driven education and still promote critical thinking?</p> <ul> <li>AI that adapts too much:<ul> <li>Avoid giving difficult challenges.</li> <li>Students won\u2019t learn as effectively as the struggle is important to long term memory.</li> <li>Students may not learn critical thinking and always lean on the AI for ideas and answers.</li> </ul> </li> <li>So what\u2019s the balance?<ul> <li>Blend AI with Human-Led activities<ul> <li>Could this go too far?</li> </ul> </li> <li>Active Learning: Question and Analyze the AI responses</li> <li>Building something hands on (Even if that\u2019s putting together things from AI or training the AI itself).</li> <li>Ask for conflicting viewpoints and analyze those</li> <li>Simulate real-life challenges individuals or society faces.</li> <li>Focus on emotional intelligence, collaboration, and critical thinking skills supported by AI learning</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>What other risks can come with relying too much on AI?</p> <ul> <li>Do we take the AI Human Fusion too far and augment ourselves?<ul> <li>Will augmentation become necessary to stay relevant.</li> </ul> </li> <li>Deep understanding or laziness</li> <li>Decision making problems</li> <li>Misinformation spread via bias and even fraud</li> <li>Narrowing creativity when the source material/model is all the same for everyone.</li> <li>Anomie</li> <li>Jobs</li> <li>Privacy</li> <li>Accountability</li> </ul> </li> </ol>"},{"location":"android/getapk.html","title":"APK Extract","text":""},{"location":"android/getapk.html#retrieve-apk-from-non-rooted-android-device-through-adb","title":"Retrieve APK from Non-Rooted Android Device through ADB","text":"<ul> <li> <p>Determine the package name of the app, e.g. com.example.someapp. Skip this step if you already know the package name. <pre><code>adb shell pm list packages\n</code></pre></p> <ul> <li>Look through the list of package names and try to find a match between the app in question and the package name. This is usually easy, but note that the package name can be completely unrelated to the app name. If you can\u2019t recognize the app from the list of package names, try finding the app in Google Play using a browser. The URL for an app in Google Play contains the package name.</li> </ul> </li> <li> <p>Get the full path name of the APK file for the desired package. <pre><code>adb shell pm path com.example.someapp\n</code></pre></p> <ul> <li>The output will look something like this: package:/data/app/com.example.someapp-2.apk</li> </ul> </li> <li> <p>Pull the APK file from the Android device to the development box. <pre><code>adb pull /data/app/com.example.someapp-2.apk\n</code></pre></p> </li> </ul>"},{"location":"battles/language_battle.html","title":"Java VS Python","text":""},{"location":"battles/language_battle.html#comparison-between-java-and-python","title":"Comparison between Java and Python","text":""},{"location":"battles/language_battle.html#differences","title":"Differences:","text":"<ol> <li>Typing System:</li> <li>Java is a statically-typed language, which means variables must be declared with a specific data type, and the type cannot change during runtime.</li> <li> <p>Python is a dynamically-typed language, where variables can hold values of any data type, and the type can change during runtime.</p> </li> <li> <p>Compilation vs. Interpretation:</p> </li> <li>Java is a JIT (Just-in-Time) compiled language, where the source code is first compiled into bytecode, which is then executed by the Java Virtual Machine (JVM).     ** Some versions of the JVM now do AoT (Ahead-of-Time) compiling, such as the Graal <code>jaotc</code> compiler.</li> <li> <p>Python is an interpreted language, where the source code is executed line by line by the Python interpreter.     ** Some Python interpreters do compile JIT (hence they are VMs),  such as Jython and IronPython, that compile Python code into Java bytecode and .NET bytecode, respectively. These compiled versions of Python can achieve better performance than the interpreted CPython.</p> </li> <li> <p>Performance:</p> </li> <li>Java is generally faster than Python, especially for computationally intensive tasks, due to its static typing and compiled nature.</li> <li> <p>Python is slower than Java, but it is often easier to write and read, making it a popular choice for rapid prototyping and data analysis.     ** However, Python\u2019s performance can be greatly improved by using optimized libraries written in lower-level languages like C or C++.         ** Libraries like NumPy, SciPy, and TensorFlow leverage highly optimized, compiled code under the hood, allowing Python to achieve high performance for numerical and scientific computing tasks.         ** By using these libraries, Python can often outperform Java for certain types of workloads, especially those that are heavily dependent on linear algebra, numerical operations, or machine learning.</p> </li> <li> <p>Syntax:</p> </li> <li>Java has a more verbose and strict syntax, with a focus on object-oriented programming.</li> <li>Python has a more concise and readable syntax, with a focus on simplicity and ease of use.</li> </ol>"},{"location":"battles/language_battle.html#similarities","title":"Similarities","text":"<ol> <li>Cross-Platform Compatibility:</li> <li> <p>Both Java and Python are designed to be cross-platform, meaning they can run on a variety of operating systems, including Windows, macOS, and Linux.</p> </li> <li> <p>Object-Oriented Programming (OOP):</p> </li> <li> <p>Both Java and Python support object-oriented programming, allowing for the creation of classes, objects, and inheritance.</p> </li> <li> <p>Functional Programming (FP):</p> </li> <li> <p>Both Java and Python support functional programming, allowing for pure functions (functions are first class citizens), immutable data, and a declarative programming style.     ** Java\u2019s functional programming features were largely tacked on, and typically still exist partially in as OOP code behind the scenes.     ** Python was developed with functional programming in mind from its inception, so declarative programming is more natural.</p> </li> <li> <p>Large Standard Library:</p> </li> <li> <p>Both Java and Python come with extensive standard libraries, providing a vast range of functionality out of the box.</p> </li> <li> <p>Popularity and Community:</p> </li> <li> <p>Both Java and Python are widely used and have large, active communities of developers, contributing to their extensive ecosystems and available resources.</p> </li> <li> <p>Scalability:</p> </li> <li>Both languages can be used to build scalable applications, from small scripts to large-scale enterprise systems.</li> </ol>"},{"location":"battles/language_battle.html#final-words","title":"Final Words","text":"<p>Generally, Java is faster than Python, especially for computationally intensive tasks. This is due to Java\u2019s compiled nature and static typing, which allows for more efficient code execution and optimization by the JVM.</p> <p>However, the performance difference between Java and Python can vary depending on the specific task and the way the code is written. In some cases, Python\u2019s conciseness and rapid development capabilities can offset the performance difference, especially for tasks that are not computationally intensive or where the programmer\u2019s time is more valuable than raw execution speed.</p> <p>In summary, Java and Python are both powerful programming languages with their own strengths and weaknesses. Java is generally faster and more suitable for performance-critical applications, while Python is more accessible, versatile, and often preferred for rapid prototyping and data analysis tasks.</p> <ul> <li>See Paradigm Battle for a discussion of FP versus OOP.</li> </ul>"},{"location":"battles/paradigm_battle.html","title":"OOP VS FP","text":""},{"location":"battles/paradigm_battle.html#comparison-between-functional-programming-fp-and-object-oriented-programming-oop","title":"Comparison Between Functional Programming (FP) and Object-Oriented Programming (OOP)","text":""},{"location":"battles/paradigm_battle.html#functional-programming-fp","title":"Functional Programming (FP)","text":"<ol> <li>Focus: FP emphasizes the use of pure functions, immutable data, and a declarative style of programming.</li> <li>State Management: FP encourages the use of stateless, pure functions that transform input data into output data without modifying the original data.</li> <li>Composition: FP promotes the composition of small, reusable functions to build complex programs.</li> <li>Abstraction: FP focuses on abstraction through higher-order functions and function composition.</li> <li>Paradigm: FP is a paradigm that treats computation as the evaluation of mathematical functions.</li> </ol>"},{"location":"battles/paradigm_battle.html#object-oriented-programming-oop","title":"Object-Oriented Programming (OOP)","text":"<ol> <li>Focus: OOP focuses on the creation of objects, which are instances of classes, and the interactions between these objects.</li> <li>State Management: OOP allows for the management of state through the use of instance variables and methods within objects.</li> <li>Encapsulation: OOP promotes the encapsulation of data and behavior within objects, hiding implementation details from the outside world.</li> <li>Inheritance: OOP supports the concept of inheritance, where new classes can be derived from existing classes, inheriting their properties and behaviors.</li> <li>Paradigm: OOP is a paradigm that treats computation as the manipulation of objects.</li> </ol>"},{"location":"battles/paradigm_battle.html#similarities","title":"Similarities","text":"<ol> <li>Abstraction: Both FP and OOP promote the use of abstraction to manage complexity and provide reusable components.</li> <li>Modularity: Both paradigms encourage the decomposition of programs into smaller, modular units, whether they are functions or objects.</li> <li>Code Reuse: Both FP and OOP aim to facilitate code reuse, either through function composition or inheritance.</li> </ol>"},{"location":"battles/paradigm_battle.html#differences","title":"Differences","text":"<ol> <li>State Management: FP favors immutable state and stateless functions, while OOP allows for the management of mutable state within objects.</li> <li>Composition vs. Inheritance: FP promotes function composition, while OOP emphasizes the use of inheritance to extend and reuse code.</li> <li>Paradigm: FP is based on the mathematical concept of functions, while OOP is based on the concept of objects and their interactions.</li> <li>Testability: FP\u2019s emphasis on pure functions and immutable data can make it easier to write testable and predictable code, compared to the potential side effects of mutable state in OOP.</li> <li>Concurrency: FP\u2019s focus on immutable data and stateless functions can make it easier to reason about and manage concurrent execution, compared to the potential challenges of shared mutable state in OOP.</li> </ol>"},{"location":"battles/paradigm_battle.html#final-words","title":"Final Words","text":"<p>In practice, many modern programming languages, such as Java, C#, and Python, support a mix of both FP and OOP concepts, allowing developers to choose the appropriate paradigm for their specific problem domain and requirements.</p>"},{"location":"cross_platform/cordova.html","title":"Cordova","text":""},{"location":"cross_platform/cordova.html#html-css-and-javascript-as-a-frontend","title":"HTML, CSS, and Javascript as a Frontend","text":""},{"location":"cross_platform/cordova.html#options","title":"Options","text":"<ol> <li>React with Cordova or React Native</li> <li>Vue.js with Cordova</li> <li>Ionic with Angular and Cordova</li> <li>Onsen UI, Sencha, Telerik, GapDebug, VoltBuilder, Monaca, Framework7, Quasar, and more with cordova</li> <li>Xamarin</li> </ol> <p>Nearly all of these platforms still rely on Cordova as the basis of cross-platform frontend development, thus, we will concentrate on just using raw cordova for this tutorial.</p>"},{"location":"cross_platform/cordova.html#cordova","title":"Cordova","text":""},{"location":"cross_platform/cordova.html#installation","title":"Installation","text":"<ol> <li>Install Node.js . Provides node and npm (node package manager) CLIs*     <pre><code># Version should be &gt;=16.13.0 for cordova version 12 (currently the latest).\nnode --version\nnpm --version\n</code></pre></li> <li>Install git client<ul> <li>Provides git CLI and ability to pull node packages from git repos</li> </ul> </li> <li>Install cordova module with npm<ul> <li>This is necessary cordova libraries for building cross-platform apps. <pre><code># Mac/Linux\n$ sudo npm install -g cordova\n# nvm (Node Version Manager) is also an option to avoid sudo\n# Windows\nC:\\&gt; npm install -g cordova\n</code></pre></li> </ul> </li> </ol>"},{"location":"cross_platform/cordova.html#reference","title":"Reference","text":"<ul> <li>Cordova Installation</li> </ul>"},{"location":"cross_platform/cordova.html#creating-an-app","title":"Creating an App","text":"<ol> <li> <p>Create the app template directories and files</p> <ul> <li>Options:<ul> <li>PATH: Where to create the project</li> <li>ID: Reverse-domain-style package name - used in  <li>NAME: Human readable name <pre><code>cordova create lightshow edu.redwoods.lightshow LightShow\n</code></pre></li> <li> <p>Enter created template directory and add deployment platforms</p> <ul> <li>Platforms include: browser, android, ios, windows, and more. <pre><code>cd lightshow\ncordova platform add ios\ncordova platform add android\n</code></pre></li> </ul> </li> <li> <p>Confirm and Install missing platform dependencies for building (Android, iOS, etc.) <pre><code>cordova requirements\n</code></pre></p> <ul> <li>Android:<ul> <li>Java JDK &gt;= 11</li> <li>Android SDK: Can be installed via Android Studio or standalone via these links:<ul> <li>SDK Manager</li> <li>Command Line Tools</li> </ul> </li> <li>Gradle: Best option is to install gradle and use it to install the gradle wrapper<ul> <li>Gradle 7.6.3 for Cordova 12 <pre><code>sudo -s\nmv ~/Downloads/gradle-7.6.3-all.zip /opt\ncd /opt\nunzip gradle-7.6.3-all.zip\ncd ~/Development/lightshow/platforms/android\n/opt/gradle-7.6.3/bin/gradle wrapper\n./gradlew wrapper --gradle-version=7.6.3 --distribution-type=all\n</code></pre></li> </ul> </li> </ul> </li> <li>iOS (Must have Apple Device or use Github Actions)<ul> <li>macOS/Darwin installed</li> <li>Xcode installed and license accepted</li> <li>ios-deploy installed</li> <li>CocoaPods installed (This is a ruby gem, so you may need to upgrade ruby components) <pre><code>sudo gem pristine ffi --version 1.15.5\nsudo gem install drb -v 2.0.5\nsudo gem install activesupport -v 6.1.7.6\nsudo gem install cocoapods\n</code></pre></li> </ul> </li> </ul> </li> <li> <p>Configure Necessary Environment Variables</p> <ul> <li>JAVA_HOME: <pre><code>export JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk-19.0.2.jdk/Contents/Home'\n</code></pre></li> <li>Android SDK</li> <li>If Android Studio utilizied, set these and ANDROID_SDK_ROOT <pre><code>export ANDROID_STUDIO='/Applications/Android Studio.app/Contents'\nexport ANDROID_HOME=\"${HOME}/Library/Android/sdk\"\nexport ANDROID_SDK_ROOT=\"${ANDROID_HOME}\"\n</code></pre></li> <li>If just using sdk and command line tools <pre><code>export ANDROID_SDK_ROOT=\"${HOME}/Library/Android/sdk\"\n</code></pre></li> <li>Let your environment know where to find Gradle <pre><code>GRADLE_BIN=\"${HOME}/.gradle/wrapper/dists/gradle-7.6.3-all/aiqsy11zfh4dz5uu7slds59uo/gradle-7.6.3/bin\"\nexport CORDOVA_ANDROID_GRADLE_DISTRIBUTION_URL=\"file://${HOME}/.gradle/wrapper/dists/gradle-7.6.3-all/aiqsy11zfh4dz5uu7slds59uo/gradle-7.6.3-all.zip\"\n</code></pre></li> </ul> </li> <li> <p>Build and Run the default Application</p> <ul> <li>Modify your html, css, and javascript in the www directory to modify your app.</li> <li>The index.html and index.js files hold the default application.</li> <li>Before you build platform specific applications, you can test in your local browser. <pre><code>cordova run browser\n</code></pre></li> <li>Finally run on your device <pre><code>cd ~/Development/lightshow\ncordova build android\ncordova build ios\ncordova run android\ncordova run ios\n</code></pre></li> <li>If you plug in an Android device, you can use the command-line tools, specifically adb to list the installed devices before using the cordova run command. deploy to local device<pre><code>adb devices\ncordova run android\n</code></pre></li> </ul> </li>"},{"location":"git/gitflow.html","title":"Workflows","text":""},{"location":"git/gitflow.html#git-workflows","title":"Git Workflows","text":""},{"location":"git/gitflow.html#forking-workflow","title":"Forking Workflow","text":""},{"location":"git/gitflow.html#adding-an-upstream-repo","title":"Adding an Upstream Repo","text":"<ul> <li> <p>To add the upstream repo (the repo you originally forked from) to your remote repos do the following:</p> <ul> <li> <p>Open terminal and navigate to your local git repository</p> <pre><code>cd ~/Development/&lt;CLONED REPO DIR&gt;\n</code></pre> </li> <li> <p>Run the remote add command</p> <pre><code>git remote add upstream &lt;GitHub HTTP URL TO ORIGINAL REPO&gt;\n</code></pre> </li> <li> <p>Verify that the upstream was added.</p> <pre><code>git remote -v\n</code></pre> </li> </ul> </li> </ul>"},{"location":"git/gitflow.html#updating-my-fork-cli-version","title":"Updating My Fork (CLI) Version","text":"<ul> <li> <p>Open terminal and navigate to your local git repository</p> <pre><code>cd ~/Development/&lt;PROJECT DIR&gt;\n</code></pre> </li> <li> <p>Checkout the feature branch that holds the changes you desire to merge</p> <pre><code>git checkout &lt;BRANCH NAME&gt;\n</code></pre> </li> <li> <p>Confirm your local repo knows about the upstream repo (the repo you originally forked from). If you see only remote repos from your GitHub, you must add the upstream.</p> <pre><code>git remote -v\n</code></pre> </li> <li> <p>Fetch changes made to the upstream while you were working on your feature. If there were changes, you will see them displayed.</p> <pre><code>git fetch upstream\n</code></pre> </li> <li> <p>Merge the remote upstream changes into your local branch (remember you already checked out your local feature branch).</p> <pre><code>git merge upstream/master\n</code></pre> </li> <li> <p>Now upload those changes to YOUR remote origin (i.e. your GitHub fork).</p> <pre><code>git push origin\n</code></pre> </li> </ul> Warning <p>If you\u2019re working with feature branches (which we are!) you may need to push your changes from YOUR local feature branch to YOUR remote origin feture branch like so.</p> <pre><code>    git push origin &lt;LOCAL BRANCH NAME&gt;:&lt;ORIGIN BRANCH NAME&gt;\n</code></pre> <ul> <li>Now our forked (origin) remote repository on GitHub is up to date with the original (upstream) repository we forked from!</li> <li>Finally, from GitHub, go to the branch you just pushed in YOUR GitHub account, and issue a Pull Request to the Semester Branch on the upstream!</li> </ul>"},{"location":"git/gitflow.html#clone-local","title":"Clone Local","text":"<ul> <li>Once you have forked the upstream repository to your GitHub account, you will need to clone it to your local computer.<pre><code>git clone &lt;GIT SSH or HTTP URL FOR REPO&gt;\n</code></pre> </li> </ul>"},{"location":"git/gitflow.html#gitflow-workflow","title":"GitFlow Workflow","text":"Note <p>This workflow is very typical within a large development organization such as Amazon and Google, though there are other workflows! I am not focusing on it because we will be using the forking workflow.</p> <p></p>"},{"location":"git/gitflow.html#short-gitflow-explanation","title":"Short GitFlow Explanation","text":"<ul> <li>Master: Stable branch, that deploys direct to production.</li> <li>Develop: Unstable branch, and all feature branches will be pushed here.</li> <li>Feature: Check out from Develop branch, and push changes back to it.</li> <li>Hotfix: Check out from Master, push changes to Master AND Develop.</li> <li>Release: Semi-stable, ready to test and release, following a few bug-fixes. Checkout from Develop and push to both Master and Develop.</li> </ul>"},{"location":"hardware/cables.html","title":"Cables","text":""},{"location":"hardware/cables.html#cables","title":"Cables","text":""},{"location":"hardware/cables.html#cat-6","title":"Cat-6","text":"Info <ul> <li>10/100BaseT, Gigabit, Ethernet, 10Gig Ethernet at shorter distances.</li> <li>250Mhz Frequencey</li> <li>Shielded/Unshielded</li> <li>Plastic core reduces crosstalk </li> </ul>"},{"location":"hardware/cables.html#wiring-cat-6-straight-through-cable","title":"Wiring Cat-6 Straight Through Cable","text":"<ul> <li>Cat-6 Wiring Handout</li> </ul>"},{"location":"hardware/cables.html#wire-order","title":"Wire Order","text":""},{"location":"hardware/cables.html#wire-purpose","title":"Wire Purpose","text":""},{"location":"java/annotations.html","title":"Annotations","text":""},{"location":"java/annotations.html#pythons-decorators-vs-javas-annotations-same-thing","title":"Python\u2019s decorators vs Java\u2019s annotations, same thing?","text":"<p>If you know Java and happened to work with Python, or the other way, you could see some @ symbols with names above the function in both languages. If you thought they\u2019re similar, congratulations, you\u2019ll be surprised by their behavior in the most unsuitable moment \ud83d\ude0f</p>"},{"location":"java/annotations.html#what-the-hell-are-those--signs-above-function-anyway","title":"What the hell are those @ signs above function anyway?","text":"<p>In Java, they called annotations. Annotation is, in simple words, metadata. You can pass data into the annotation, and, with some work, read this metadata. Here\u2019s a small example of annotation usage from Spring framework(Class was omitted for simplicity):</p> <pre><code>@RequestMapping(\nvalue = \"/hello\", method = GET)\n@ResponseBody\npublic String getHelloMessage() {\nreturn \"hello\";\n}\n</code></pre> <p>You can see that \u2018@RequestMapping\u2019 used to specify that we want to execute this function when the client calls the GET method <code>/hello</code> endpoint.</p> <p>In Python, oppositely, they called decorators. Here\u2019s an example from Flask application, as in Java\u2019s example, our decorator will make so our function will serve <code>/hello</code> endpoint with GET method:</p> <pre><code>app = Flask(__name__)\n\n@app.route('/hello', methods=['GET'])\ndef say_hello():\n    return 'hello'\n</code></pre> <p>A decorator is a design pattern that allows a user to add new functionality to an existing object without modifying its structure.</p> <p>Ah okay, problem solved. So Java\u2019s annotation just adds metadata, and Python\u2019s decorators modify usage of the function.</p> <p>Thank you for reading this\u2026 wait for a second! So if Java\u2019s annotation just adds metadata, how our method became endpoint server as in Python? In other words, how they both do the same thing?? Well, let\u2019s start by implementing our own decorator in Python.</p>"},{"location":"java/annotations.html#decorators-in-python-how-they-work","title":"Decorators in Python, how they work?","text":"<pre><code>def as_html(func):\n    def wrapper():\n        result = func()\n        return f'&lt;html&gt;{result}&lt;/html&gt;'\n\n    return wrapper\n\n@as_html\ndef say_hello():\n    return 'Hello'\n\nprint(say_hello())\n</code></pre> <p>Key takeaways from code above:</p> <ul> <li>Decorator is just a function that returns another function</li> <li>If applied with @ sign above the function, it\u2019ll change it\u2019s behavior as specified in <code>wrapper()</code> function</li> <li>They can change input or output of a wrapped function, or even don\u2019t call it at all.</li> </ul> <p>What is going on in the code above? Firstly we create simple function <code>as_html(func)</code>. In this function we create another function called <code>wrapper()</code>, because in Python function is just another object that you can use. Inside <code>wrapper()</code> we will call this func object from <code>as_html(func)</code>, which, as you can think, another function. And so basically we return our <code>wrapper()</code> function. Take a cup of coffee and try to structure what\u2019s going on in your head.</p> <p>So now, we annotate this function with @ above the <code>say_hello()</code>, and, as a result, you can see that when we call <code>say_hello()</code>, we get different result than \u2018Hello\u2019. We get \u2018Hello\u2019 because our <code>as_html(func)</code> wrapped our <code>say_hello()</code> function. So func is the <code>say_hello()</code> function itself. Maybe if I put it like <code>as_html(say_hello)</code> makes it clearer to you. Technically, you can re-write the previous example like this, and it still works the same way:</p> <pre><code>def as_html(func):\n    def wrapper():\n        result = func()\n        return f'&lt;html&gt;{result}&lt;/html&gt;'\n\n    return wrapper\n\n\ndef say_hello():\n    return 'Hello'\n\nprint(as_html(say_hello)())\n</code></pre>"},{"location":"java/annotations.html#cached-decorator-for-functions","title":"Cached decorator for functions","text":"<pre><code>import time\ncached_items = {}\n\ndef cached(func):\n    def wrapper(*args, **kwargs):\n        global cached_item\n        if func.__name__ not in cached_items:\n            cached_items[func.__name__] = func(*args, **kwargs)\n        return cached_items[func.__name__]\n    return wrapper\n\n@cached\ndef intensive_task():\n    time.sleep(1.0)\n    return 10\n\nstart_time = time.time()\nintensive_task()\nprint(\"--- %.8f seconds first execution ---\" % (time.time() - start_time))\nstart_time = time.time()\nintensive_task()\nprint(\"--- %.8f seconds second execution ---\" % (time.time() - start_time))\n</code></pre> <p>This is (kinda) more practical example, imagine that you have some function that should execute only once, and all other times return previous result. You can, of course, implement it within the function itself, but what if you\u2019ll have 10 of them? 100? That\u2019s a decorator\u2019s work.</p> <p>So, in <code>wrapper(*args, **kwargs)</code> we check if we already contain this function name in the global cached_items dictionary. If not, we execute the function, if yes, we only return the value of dictionary for a key with the function name. After it, we wrap intensive_task() with our @cached decorator and execute function two times with benchmarking. Here\u2019s what I get on my pc:</p> <pre><code>python3 decorators_example.py \n--- 1.00484562 seconds first execution ---\n--- 0.00000787 seconds second execution ---\n</code></pre> <p>You can clearly see that second time execution time took under a 7E-06 second even though in our intensive_task() we execute sleep command. So the body of function was executed only once, as we can see by logic in <code>wrapper()</code></p> <p>Now you can call yourself a junior expert in decorators in Python. So what about Java?</p>"},{"location":"java/annotations.html#annotations-in-java-are-they-decorators","title":"Annotations in Java, are they decorators?","text":"<p>When I first encountered annotations in Java, they were really astonishing to me. So later when I encountered anything with @ sign in other languages I said: \u201coh, that\u2019s an annotation, I know that!\u201d. Only now I realized how different those two things are.</p> <p>In Java, instead of writing the logic for \u201cdecorator\u201d in annotation itself, this responsibility falls onto executor. So, technically speaking, annotations in Java doesn\u2019t contain any logic at all*, only some data that can be put as a variable. So how it happens that we can do the same logic in Java as in Python? Fairly easy, we just inverse our code a little bit.(be ready for large piece of code due to Java ;)</p> <p>There can be annotation pre-processor like Lombok, but main idea is still the same. Unless defined(even if in pre-processing), annotations won\u2019t do any changes to behavior. More discussion on it in responses of this post.</p> <pre><code>public class Main {\n\n@Retention(RetentionPolicy.RUNTIME)\n@interface Cached { } // Nothing inside our annotation\n\nstatic class SomeObject {\n@Cached\npublic String intensiveTask() throws InterruptedException {\nThread.sleep(1000);\nreturn \"expensive task result\";\n}\n}\n\nstatic class SomeObjectExecutor {\n\nMap&lt;String, String&gt; cache = new HashMap&lt;&gt;();\n\npublic String execute(SomeObject task) throws Exception {\nfinal Method intensiveTaskMethod = task.getClass().getDeclaredMethod(\"intensiveTask\");\nif (intensiveTaskMethod.isAnnotationPresent(Cached.class)) {\nString className = task.getClass().getName();\nif (!cache.containsKey(className)) {\ncache.put(className, task.intensiveTask());\n}\nreturn cache.get(className);\n}\nreturn task.intensiveTask();\n}\n}\n\npublic static void main(String[] args) throws Exception {\nfinal SomeObjectExecutor someObjectExecutor = new SomeObjectExecutor();\nlong time = System.currentTimeMillis();\nfinal SomeObject expensiveTaskObject = new SomeObject();\nsomeObjectExecutor.execute(expensiveTaskObject);\nSystem.out.println(\"First execution:\" + (System.currentTimeMillis() - time));\ntime = System.currentTimeMillis();\nsomeObjectExecutor.execute(expensiveTaskObject);\nSystem.out.println(\"Second execution:\" + (System.currentTimeMillis() - time));\n}\n}\n</code></pre> <p>So, what happened here? Here are a few points:</p> <ol> <li>The annotation doesn\u2019t do anything at all. As the name says, it only annotates.</li> <li>Instead of wrapping functions, we check if it contains some annotation and execute it differently.</li> <li>We should have some \u201cexecutor\u201d object which will hold all the logic that could be in python\u2019s decorator.</li> </ol> <p>So, first thing first, we created <code>@Cached</code> annotation, which is just empty, nothing special here except \u2018@Retention(RetentionPolicy.RUNTIME)\u2019. This thing says that we can access this annotation when the program is running. Next, we have our SomeObject, because in Java functions are not object, and we can\u2019t pass them into other functions. In this object, we have <code>intensiveTask()</code>, which will sleep when executed. The next thing that we made is SomeObjectExecutor, which takes our <code>SomeObject</code> and executes its function via Object Reflection.</p> <p>To combine it all, we use main() method, where we create <code>SomeObjectExecutor</code> and <code>SomeObject</code> and then pass <code>SomeObject</code> two times with benchmarking, here\u2019s my output:</p> <pre><code>First execution:1012\nSecond execution:0\n</code></pre> <p>As expected, the First time we execute an object it takes 1 second, next time \u2014 almost 0, because the object was cached.</p>"},{"location":"java/annotations.html#what-about-other-retention-policy","title":"What about other retention policy?","text":"<p>If you work with Java for a while, you can know such thing as aspect-oriented programming(AOP), AspectJ and similar tools. I even made an article about it a few years ago. So AspectJ kinda allows you to convert your annotations into decorators. But there\u2019s still a small gap between the AOP and decorators, and you need to apply more efforts in Java with AOP then in Python. I may cover this topic of how pre-compilers work in the next article.</p>"},{"location":"java/annotations.html#conclusion","title":"Conclusion","text":"<p>If you read through the article up to this point, you can see that both approaches have their benefits and disadvantages. Because in Python functions are first-class citizens, it\u2019s really easy to juggle with them and pass one function into another, etc. Java\u2019s approach, on the other hand, gives you more control over what\u2019s going on.</p>"},{"location":"java/associativity.html","title":"Operator Precedence &amp; Associativity","text":""},{"location":"java/associativity.html#associativity","title":"Associativity","text":"Level Operator Description Associativity 16 ()[]. parenthesesarray accessmember access left-to-right 15 ++-- unary post-incrementunary post-decrement left-to-right 14 +-!~++-- unary plusunary minusunary logical NOTunary bitwise NOTunary pre-incrementunary pre-decrement right-to-left 13 ()new castobject creation right-to-left 12 * / % multiplicative left-to-right 11 + -+ additivestring concatenation left-to-right 10 &lt;&lt; &gt;&gt;&gt;&gt;&gt; shift left-to-right 9 &lt; &lt;=&gt; &gt;=instanceof relational left-to-right 8 ==!= equality left-to-right 7 &amp; bitwise AND left-to-right 6 ^ bitwise XOR left-to-right 5 bitwise OR 4 &amp;&amp; logical AND left-to-right 3 2 ?: ternary right-to-left 1 =   +=   -=*=   /=   %=&amp;=   ^= =&lt;&lt;=  &gt;&gt;= &gt;&gt;&gt;= assignment 0 -&gt; lambda expression arrow"},{"location":"java/format_specifiers.html","title":"Format Specifiers","text":""},{"location":"java/format_specifiers.html#java-format-specifiers","title":"Java Format Specifiers","text":"Format Specifier Data Type Output %a floating point (except BigDecimal) Returns Hex output of floating point number. %b Any type \u201ctrue\u201d if non-null, \u201cfalse\u201d if null %c character Unicode character %d integer (incl. byte, short, int, long, bigint) Decimal Integer %e floating point decimal number in scientific notation %f floating point decimal number %g floating point decimal number, possibly in scientific notation depending on the precision and value. %h any type Hex String of value from hashCode() method. %n none Platform-specific line separator. %o integer (incl. byte, short, int, long, bigint) Octal number %s any type String value %t Date/Time (incl. long, Calendar, Date and TemporalAccessor) %t is the prefix for Date/Time conversions. More formatting flags are needed after this. See Date/Time conversion below. %x integer (incl. byte, short, int, long, bigint) Hex string."},{"location":"java/loop_usage.html","title":"Loop Usage","text":""},{"location":"java/loop_usage.html#java-loops-and-when-to-use-them","title":"Java Loops and When to Use Them","text":"Difference For Loop While Loop Do-While Loop Introduction For loops in Java iterate a given set of statements multiple times. The Java while loop executes a set of instructions until a boolean condigion is met. The do-while loop executes a set of statements at least once, even if the condition is not met. Afterthe first execution, it repeats the iteration until the boolean condition is met. Best time to use Use it when you know the exact number of times to execute the part of the program. Use it when you don\u2019t know how many times you want the iteration to repeat. Use it when you don\u2019t know how many times you want the iteration to repeat, but it should execute at least one time. Syntax for(; ;  ) { /Repeated statements/ } while() { /Repeated statements/ } do { /Repeated statements/ } while(  ); for("},{"location":"java/operators.html","title":"Operators","text":""},{"location":"java/operators.html#java-operators","title":"Java Operators","text":""},{"location":"java/operators.html#arithmetic-operators","title":"Arithmetic Operators","text":"Operator Name Description Example + Addition Adds together two values x + y - Subtraction Subtracts one value from another x - y * Multiplication Multiplies two values x * y / Division Divides one value by another x / y % Modulus Returns the division remainder x % y ++ Increment Increases the value of a variable by 1 ++x \u2013 Decrement Decreases the value of a variable by 1 \u2013x"},{"location":"java/operators.html#assignment-operators","title":"Assignment Operators","text":"Operator Example Same As = x = 5 x = 5 += x += 3 x = x + 3 -= x -= 3 x = x - 3 *= x *= 3 x = x * 3 /= x /= 3 x = x / 3 %= x %= 3 x = x % 3 &amp;= x &amp;= 3 x = x &amp; 3 = x ^= x ^= 3 x = x ^ 3 &gt;&gt;= x &gt;&gt;= 3 x = x &gt;&gt; 3 &lt;&lt;= x &lt;&lt;= 3 x = x &lt;&lt; 3"},{"location":"java/operators.html#comparison-operators","title":"Comparison Operators","text":"Operator Name Example == Equal to x == y != Not equal x != y &gt; Greater than x &gt; y &lt; Less than x &lt; y &gt;= Greater than or equal to x &gt;= y &lt;= Less than or equal to x &lt;= y"},{"location":"java/operators.html#logical-operators","title":"Logical Operators","text":"Operator Name Description Example &amp;&amp; Logical and Returns true if both statements are true x &lt; 5 &amp;&amp;  x &lt; 10 Logical or ! Logical not Reverse the result, returns false if the result is true !(x &lt; 5 &amp;&amp; x &lt; 10)"},{"location":"java/rounding_errors.html","title":"Rounding Errors","text":""},{"location":"java/rounding_errors.html#rounding-errors-in-java","title":"Rounding Errors in java","text":"Definition of the Rounding Problem <p>Condensing numerous infinite real numbers into a limited set of bits necessitates an estimated depiction. The majority of software retains outcomes from integer operations within a 32 or 64-bit range at most. Irrespective of the chosen bit quantity, the majority of computations involving real numbers will yield values that cannot be precisely manifested within the given bit count. Consequently, the outcome of a floating-point computation frequently requires rounding to align within its finite portrayal. This rounding discrepancy stands as an inherent attribute of floating-point computation.</p> <p>Hence, when performing computations with floating-point numbers, particularly those involving monetary calculations, it\u2019s essential to address rounding errors within a programming language.</p>"},{"location":"java/rounding_errors.html#example-1","title":"Example 1:","text":"<pre><code>public class Main {\npublic static void main(String[] args)\n{\ndouble a = 0.7;\ndouble b = 0.9;\ndouble x = a + 0.1;\ndouble y = b - 0.1;\n\nSystem.out.println(\"x = \" + x);\nSystem.out.println(\"y = \" + y );\nSystem.out.println(x == y);\n}\n}\n</code></pre> StdOut<pre><code>Output:\n\nx = 0.7999999999999999\ny = 0.8\nfalse\n</code></pre> <ul> <li>Above, the answer is not what we expected reason being the rounding off done by java compiler.</li> </ul>"},{"location":"java/rounding_errors.html#reason-behind-round-off-error","title":"Reason behind round off error","text":"<ul> <li>Java float and double data types abide by the IEEE floating point 754 specification. This means that numbers are represented in a form like:</li> </ul> <pre><code>SIGN FRACTION * 2 ^ EXP \n</code></pre> <ul> <li>\\(0.15625 = (0.00101)_{2}\\), which in floating-point format is represented as: \\(1.01 * 2^{-3}\\)</li> <li>Not all fractions can be represented exactly as a fraction of a power of two.<ul> <li>As a simple example, 0.1 = (0.000110011001100110011001100110011001100110011001100110011001\u2026 )2 and thus cannot be stored inside a floating-point variable.</li> </ul> </li> </ul>"},{"location":"java/rounding_errors.html#example-2","title":"Example 2:","text":"<pre><code>public class Main {\npublic static void main(String args[])\n{\ndouble a = 1.0;\ndouble b = 0.10;\ndouble x = 9 * b;\na = a - (x);\n\n// Value of a is expected as 0.1\nSystem.out.println(\"a = \" + a);\n}\n}\n</code></pre> StdOut<pre><code>Output:\n\na = 0.09999999999999998\n</code></pre>"},{"location":"java/rounding_errors.html#how-to-rectify-round-off-errors","title":"How to rectify round off errors?","text":"<ol> <li>Round the result: The utilization of the Round() function can mitigate the impact of inaccuracies stemming from floating-point arithmetic storage. Users have the capability to round numbers to the specific decimal places mandated by the calculation\u2019s needs. For instance, in currency-related tasks, it\u2019s common to round to 2 decimal places.</li> <li>Algorithms and Functions: Employ algorithms that ensure numerical stability or craft custom functions to manage such scenarios. It\u2019s possible to truncate or round uncertain digits (calculating the numeric precision of operations is also an option).</li> <li>BigDecimal Class: You may use the java.math.BigDecimal class, which is designed to give us accuracy especially in case of big fractional numbers.</li> </ol>"},{"location":"java/rounding_errors.html#example-3","title":"Example 3","text":"The following example shows how the error can be removed<pre><code>public class Main {\npublic static void main(String args[])\n{\ndouble a = 1.0;\ndouble b = 0.10;\ndouble x = 9 * b;\na = a - (x);\n\n/* We use Math.round() function to round the answer to\n         closest long, then we multiply and divide by 1.0 to\n         to set the decimal places to 1 place (this can be done\n         according to the requirements.*/\nSystem.out.println(\"a = \" + Math.round(a*1.0)/1.0);\n}\n}\n</code></pre> StdOut<pre><code>Output:\n\n0.1\n</code></pre> <ul> <li>Now we get the expected output, without the error.</li> </ul>"},{"location":"java/spring.html","title":"SpringBoot","text":""},{"location":"java/spring.html#what-is-spring-boot","title":"What is Spring Boot?","text":"<p>Spring Boot is part of the broader Spring Framework, which aims to streamline building Java applications by providing components for dependency injection, web MVC, data access, security, and much more. Below is a breakdown of SOME of the key components within the Spring Boot framework.</p>"},{"location":"java/spring.html#java-bean-terminology","title":"Java Bean Terminology","text":"<p>You will need to understand what a JavaBean is to properly understand the SpringBoot Framework, so let\u2019s define what a bean is:</p> <p>A JavaBean is a class that follows certain conventions for naming, properties, and methods, primarily to allow other frameworks and tools to interact with it consistently.</p> <p>The main characteristics of a JavaBean include: * Default (No-Argument) Constructor: This allows the JavaBean to be instantiated without parameters, which is helpful for frameworks that rely on reflection to create instances. * Getters and Setters: JavaBeans have private fields/properties with public getter and setter methods, allowing for encapsulation of data while making it accessible in a controlled way. * Serializable: JavaBeans typically implement <code>Serializable</code>, allowing instances to be serialized for storage, transmission, or other uses.</p>"},{"location":"java/spring.html#inversion-of-control-ioc-container-aka-dependency-injection-di","title":"Inversion of Control (IoC) Container AKA Dependency Injection (DI)","text":"<ul> <li>Purpose: The IoC container is the core of the Spring Framework. It manages the lifecycle of Spring beans (objects managed by Spring) and allows for dependency injection, which reduces tight coupling between classes.</li> <li>Design Patterns:<ul> <li>Dependency Injection Pattern: The container injects dependencies into objects, adhering to the DI pattern, where objects don\u2019t instantiate dependencies themselves.</li> <li>Factory Pattern: The IoC container uses factory methods to create and manage beans based on configuration.</li> <li>Singleton Pattern: By default, beans in Spring are singletons, meaning only one instance of each bean is created and shared across the application.</li> </ul> </li> </ul>"},{"location":"java/spring.html#spring-boot-auto-configuration","title":"Spring Boot Auto-Configuration","text":"<ul> <li>Purpose: Auto-configuration in Spring Boot automatically configures many application components based on the presence of specific classes or properties. This eliminates much of the boilerplate code needed for configuration.</li> <li>Design Patterns:<ul> <li>Template Method Pattern: Auto-configuration classes extend configuration templates to define application behavior, allowing Spring Boot to provide default setups.</li> <li>Decorator Pattern: Auto-configuration \u201cdecorates\u201d or adds configuration layers on top of the existing setup by detecting which dependencies are available in the classpath.</li> </ul> </li> </ul>"},{"location":"java/spring.html#spring-boot-starters","title":"Spring Boot Starters","text":"<ul> <li>Purpose: Starters are pre-defined dependencies for common tasks (like web development, JPA, security, etc.) that simplify project setup. They package frequently used libraries and dependencies to streamline development.</li> <li>Design Patterns:<ul> <li>Facade Pattern: Starters act as facades, bundling libraries for a specific purpose and providing a simplified interface to include required dependencies.</li> </ul> </li> </ul>"},{"location":"java/spring.html#spring-mvc-model-view-controller","title":"Spring MVC (Model-View-Controller)","text":"<ul> <li>Purpose: The MVC module helps build web applications by defining a clear separation between the Model (data), View (UI), and Controller (business logic) layers.</li> <li>Design Patterns:<ul> <li>Model-View-Controller Pattern: Implements the MVC architecture to separate concerns.</li> <li>Front Controller Pattern: <code>DispatcherServlet</code> acts as the front controller that receives all incoming HTTP requests and delegates them to the appropriate controllers.<ul> <li>Strategy Pattern: Controllers provide a strategy for handling requests, and the front controller allows the controllers to be dynamically selected and/or changed.</li> </ul> </li> <li>Observer Pattern: Used in the view layer where models notify views of updates, ensuring UI elements update dynamically.</li> <li>Composite Pattern: Also used in the view layer when presenting the view for nesting UI elememts and or components.</li> </ul> </li> </ul>"},{"location":"java/spring.html#spring-data","title":"Spring Data","text":"<ul> <li>Purpose: Provides a unified approach to data access and simplifies interactions with data sources like relational databases, NoSQL databases, and more. It includes support for repositories to handle common CRUD operations.</li> <li>Design Patterns:<ul> <li>Repository Pattern: Abstracts data access and encapsulates storage, retrieval, and search behavior.</li> <li>Proxy Pattern: Spring creates proxy instances of repository interfaces to provide runtime implementations, allowing it to execute database operations without manually implementing the interface.</li> <li>Specification Pattern: Used in Spring Data JPA for dynamic queries, allowing developers to create complex queries based on various criteria.</li> </ul> </li> </ul>"},{"location":"java/spring.html#an-extra-word-on-spring-data","title":"An Extra Word on Spring Data","text":"<p>In the context of Spring Boot, a <code>CrudRepository</code> interface (or any other Spring Data repository) is considered a service bean because:</p> <ol> <li> <p>Bean Definition in Spring: Spring automatically detects <code>@Repository</code> classes and manages their lifecycle by creating a \u201cbean\u201d (an object instance managed by Spring\u2019s container). Spring\u2019s IoC (Inversion of Control) container injects these beans wherever needed.</p> </li> <li> <p>Persistence Operations: Classes implementing <code>CrudRepository</code> provide basic CRUD operations (Create, Read, Update, Delete) out-of-the-box. Spring manages these interfaces as service beans, allowing them to be injected into other classes (like controllers or services) to interact with the database.</p> </li> <li> <p>Dependency Injection: Since <code>CrudRepository</code> extends <code>Repository</code>, Spring considers it a candidate for dependency injection. When injected, it acts as a service bean, enabling interaction with data storage while hiding implementation details.</p> </li> </ol> <p>So, in Spring Boot, interfaces extending <code>CrudRepository</code> become service beans because the Spring container recognizes them as repositories and manages their lifecycle and dependencies, treating them as core components within the service layer.</p>"},{"location":"java/spring.html#spring-security","title":"Spring Security","text":"<ul> <li>Purpose: Manages authentication and authorization within applications. It handles user login, permissions, and data access control.</li> <li>Design Patterns:<ul> <li>Filter Chain Pattern: Spring Security applies a series of filters to incoming requests, allowing each filter to perform a specific task, such as authentication or authorization.</li> <li>Proxy Pattern: Used for method security; Spring Security wraps secure methods with proxies that check permissions.</li> <li>Strategy Pattern: Provides a strategy for handling authentication (e.g. username/password, OAuth2) and allows the authentication strategy to be dynamically changed.</li> </ul> </li> </ul>"},{"location":"java/spring.html#spring-boot-actuator","title":"Spring Boot Actuator","text":"<ul> <li>Purpose: Provides production-ready features such as monitoring and metrics for Spring Boot applications, offering endpoints to gather application insights, manage the application, and more.</li> <li>Design Patterns:<ul> <li>Observer Pattern: Monitors various application states and components, notifying appropriate services or administrators if any anomaly is detected.</li> <li>Command Pattern: Actuator endpoints can be thought of as commands that execute certain actions (e.g. retrieving metrics or shutting down).</li> </ul> </li> </ul>"},{"location":"java/spring.html#spring-boot-cli","title":"Spring Boot CLI","text":"<ul> <li>Purpose: The Command Line Interface (CLI) allows developers to quickly develop Spring Boot applications using Groovy scripts. It\u2019s often used for prototyping and testing ideas quickly.</li> <li>Design Patterns:<ul> <li>Interpreter Pattern: The CLI interprets and runs Groovy scripts, allowing developers to write simpler syntax for Spring Boot applications.</li> <li>Facade Pattern: Simplifies the setup process by handling all the necessary Spring Boot dependencies and configurations in the background.</li> </ul> </li> </ul>"},{"location":"java/spring.html#spring-aop-aspect-oriented-programming","title":"Spring AOP (Aspect-Oriented Programming)","text":"<ul> <li>Purpose: Spring AOP allows cross-cutting concerns (like logging, transactions, or security) to be modularized and applied across the application transparently, usually via injection.</li> <li>Design Patterns:<ul> <li>Proxy Pattern: Spring AOP creates proxies to add behavior (like logging or security) to existing objects.</li> <li>Decorator Pattern: Enhances or decorates methods with additional behavior without modifying the underlying code.</li> <li>Chain of Responsibility Pattern: Multiple aspects can be applied in a sequence, each processing the input and passing it to the next aspect.</li> </ul> </li> </ul>"},{"location":"java/spring.html#spring-boot-devtools","title":"Spring Boot DevTools","text":"<ul> <li>Purpose: DevTools provides tools to enhance the developer experience, such as automatic restarts, live reloading, and configuration optimizations for development environments.</li> <li>Design Patterns:<ul> <li>Observer Pattern: Watches files for changes and reloads the application when modifications are detected.</li> <li>Facade Pattern: Simplifies configuration by providing a single entry point for various developer tools and settings.</li> </ul> </li> </ul>"},{"location":"java/spring.html#spring-cloud","title":"Spring Cloud","text":"<ul> <li>Purpose: Provides tools to build distributed systems and microservices, offering solutions for configuration, service discovery, load balancing, circuit breakers, and more.</li> <li>Design Patterns - This are really Architectural Patterns:<ul> <li>Service Registry and Discovery Pattern: For service discovery, components like Eureka or Consul enable microservices to locate each other dynamically.</li> <li>Circuit Breaker Pattern: Resilience tools like Spring Cloud Circuit Breaker or Resilience4j prevent system overload by \u201ctripping\u201d when a service is down.</li> <li>Load Balancer Pattern: Distributes incoming requests across multiple service instances for high availability.</li> </ul> </li> </ul>"},{"location":"projects/winter-break-2024.html","title":"Winter Break 2024","text":""},{"location":"projects/winter-break-2024.html#what-i-did-over-break","title":"What I Did Over Break","text":"<ol> <li>Built Jarvis<ul> <li>2x 12TB Seagate IronWolf Pro Enterprise NAS drives</li> <li>2x Crucial T705 1TB PCIeV5 M.2 SSDs</li> <li>2x XPG 1TB GAMMIX S70 Blade PCIeV4 M.2 SSDs</li> <li>4x 2x48GB Crucial Pro RAM Kit, total of 192GB RAM</li> <li>1x Nvidia PNY GeForce RTX 4070 Ti Super GPU</li> <li>1x AMD Ryzen 9 7950X3D 16 Core, 32 Thread CPU</li> <li>1x ASUS TUF Gaming X870-PLUS, WiFI 7, AMD AM5 x870 Motherboard</li> <li>1x Cooler Master 360 Atmos CPU water coller</li> <li>1x NZXT C1200 PSU: 1200 Watt</li> <li>4x Thermaltake CT140 PC Cooling Fans</li> <li>1x Corsair 5000D Airflow Tempered glass case </li> </ul> </li> <li>CephFS Distributed FS across 4 Pi4s with 1TB USB3 attached SSDs<ul> <li>CephFS Architecture</li> </ul> </li> <li>LineageOS + GApps + Widevine and Video Services on Pi4 clients<ul> <li>LineageOS on Pi5</li> </ul> </li> <li>Research, bought and flashed encrypted firmware on UltraHD Bluray drive<ul> <li>Had to extract Archgon Premium Aluminum UHD Bluray Drive (Really just an LG drive inside)</li> <li>Had to plug it directly into the PC via Slimline SATA to SATA Adapter since USB didn\u2019t support updating firmware. </li> </ul> </li> <li>Installed and utilized MakeMKV and Handbrake to properly rip UHD disc to mkvs<ul> <li>MakeMKV</li> <li>HandBrake Video Transcoder</li> </ul> </li> <li>Utilized ddrescue to save and restore a damaged bluray, mounting the restored image as a loopback device.</li> <li>JellyFin Media Server<ul> <li>Jellyfin</li> </ul> </li> <li>Home Assistant + Jarvis Agent<ul> <li>Home Assistant</li> </ul> </li> </ol>"},{"location":"python/special_methods.html","title":"Special methods","text":""},{"location":"python/special_methods.html#special-methods","title":"Special Methods","text":"<p>Special methods in Python, often referred to as magic methods or dunder methods, short for double underscore, are methods that have double underscores at the beginning and end of their names. These methods allow you to define the behavior of objects for built-in operations.</p>"},{"location":"python/special_methods.html#some-key-functions-of-special-methods-in-python","title":"SOME Key Functions of Special Methods in Python:","text":""},{"location":"python/special_methods.html#object-initialization-and-destruction","title":"Object Initialization and Destruction","text":"<ul> <li><code>__init__(self, ...)</code>: Initializes a new object.</li> <li><code>__new__(cls, ...)</code>: Creates a new instance of a class.</li> <li><code>__del__(self)</code>: Defines behavior for object destruction.</li> </ul>"},{"location":"python/special_methods.html#string-representation","title":"String Representation","text":"<ul> <li><code>__str__(self)</code>: Returns a string representation of the object for end users.</li> <li><code>__repr__(self)</code>: Returns a string representation of the object for developers.</li> <li><code>__format__(self, format_spec)</code>: Defines behavior for the <code>format()</code> function.</li> <li><code>__bytes__(self)</code>: Returns a bytes representation of the object.</li> </ul>"},{"location":"python/special_methods.html#comparison-operators","title":"Comparison Operators","text":"<ul> <li><code>__eq__(self, other)</code>: Defines behavior for the equality operator (<code>==</code>).</li> <li><code>__ne__(self, other)</code>: Defines behavior for the inequality operator (<code>!=</code>).</li> <li><code>__lt__(self, other)</code>: Defines behavior for the less-than operator (<code>&lt;</code>).</li> <li><code>__le__(self, other)</code>: Defines behavior for the less-than-or-equal-to operator (<code>&lt;=</code>).</li> <li><code>__gt__(self, other)</code>: Defines behavior for the greater-than operator (<code>&gt;</code>).</li> <li><code>__ge__(self, other)</code>: Defines behavior for the greater-than-or-equal-to operator (<code>&gt;=</code>).</li> </ul>"},{"location":"python/special_methods.html#arithmetic-operators","title":"Arithmetic Operators","text":"<ul> <li><code>__add__(self, other)</code>: Defines behavior for the addition operator (<code>+</code>).</li> <li><code>__sub__(self, other)</code>: Defines behavior for the subtraction operator (<code>-</code>).</li> <li><code>__mul__(self, other)</code>: Defines behavior for the multiplication operator (<code>*</code>).</li> <li><code>__truediv__(self, other)</code>: Defines behavior for the true division operator (<code>/</code>).</li> <li><code>__floordiv__(self, other)</code>: Defines behavior for the floor division operator (<code>//</code>).</li> <li><code>__mod__(self, other)</code>: Defines behavior for the modulus operator (<code>%</code>).</li> <li><code>__pow__(self, other)</code>: Defines behavior for the exponentiation operator (<code>**</code>).</li> </ul>"},{"location":"python/special_methods.html#unary-operators","title":"Unary Operators","text":"<ul> <li><code>__neg__(self)</code>: Defines behavior for the unary negation operator (<code>-</code>).</li> <li><code>__pos__(self)</code>: Defines behavior for the unary positive operator (<code>+</code>).</li> <li><code>__abs__(self)</code>: Defines behavior for the <code>abs()</code> function.</li> <li><code>__invert__(self)</code>: Defines behavior for the bitwise inversion operator (<code>~</code>).</li> </ul>"},{"location":"python/special_methods.html#bitwise-operators","title":"Bitwise Operators","text":"<ul> <li><code>__and__(self, other)</code>: Defines behavior for the bitwise AND operator (<code>&amp;</code>).</li> <li><code>__or__(self, other)</code>: Defines behavior for the bitwise OR operator (<code>|</code>).</li> <li><code>__xor__(self, other)</code>: Defines behavior for the bitwise XOR operator (<code>^</code>).</li> <li><code>__lshift__(self, other)</code>: Defines behavior for the bitwise left shift operator (<code>&lt;&lt;</code>).</li> <li><code>__rshift__(self, other)</code>: Defines behavior for the bitwise right shift operator (<code>&gt;&gt;</code>).</li> </ul>"},{"location":"python/special_methods.html#in-place-operators","title":"In-place Operators","text":"<ul> <li><code>__iadd__(self, other)</code>: Defines behavior for the in-place addition operator (<code>+=</code>).</li> <li><code>__isub__(self, other)</code>: Defines behavior for the in-place subtraction operator (<code>-=</code>).</li> <li><code>__imul__(self, other)</code>: Defines behavior for the in-place multiplication operator (<code>*=</code>).</li> <li><code>__itruediv__(self, other)</code>: Defines behavior for the in-place true division operator (<code>/=</code>).</li> <li><code>__ifloordiv__(self, other)</code>: Defines behavior for the in-place floor division operator (<code>//=</code>).</li> <li><code>__imod__(self, other)</code>: Defines behavior for the in-place modulus operator (<code>%=</code>).</li> <li><code>__ipow__(self, other)</code>: Defines behavior for the in-place exponentiation operator (<code>**=</code>).</li> <li><code>__iand__(self, other)</code>: Defines behavior for the in-place bitwise AND operator (<code>&amp;=</code>).</li> <li><code>__ior__(self, other)</code>: Defines behavior for the in-place bitwise OR operator (<code>|=</code>).</li> <li><code>__ixor__(self, other)</code>: Defines behavior for the in-place bitwise XOR operator (<code>^=</code>).</li> <li><code>__ilshift__(self, other)</code>: Defines behavior for the in-place bitwise left shift operator (<code>&lt;&lt;=</code>).</li> <li><code>__irshift__(self, other)</code>: Defines behavior for the in-place bitwise right shift operator (<code>&gt;&gt;=</code>).</li> </ul>"},{"location":"python/special_methods.html#container-methods","title":"Container Methods","text":"<ul> <li><code>__len__(self)</code>: Returns the length of the container.</li> <li><code>__getitem__(self, key)</code>: Defines behavior for element retrieval using the <code>[]</code> operator.</li> <li><code>__setitem__(self, key, value)</code>: Defines behavior for element assignment using the <code>[]</code> operator.</li> <li><code>__delitem__(self, key)</code>: Defines behavior for element deletion using the <code>[]</code> operator.</li> <li><code>__iter__(self)</code>: Returns an iterator for the container.</li> <li><code>__reversed__(self)</code>: Returns a reverse iterator for the container.</li> <li><code>__contains__(self, item)</code>: Defines behavior for the <code>in</code> operator.</li> </ul>"},{"location":"python/special_methods.html#context-management","title":"Context Management","text":"<ul> <li><code>__enter__(self)</code>: Defines behavior for entering a runtime context.</li> <li><code>__exit__(self, exc_type, exc_value, traceback)</code>: Defines behavior for exiting a runtime context.</li> </ul>"},{"location":"python/special_methods.html#attribute-access","title":"Attribute Access","text":"<ul> <li><code>__getattr__(self, name)</code>: Defines behavior for attribute retrieval when the attribute is not found.</li> <li><code>__setattr__(self, name, value)</code>: Defines behavior for attribute assignment.</li> <li><code>__delattr__(self, name)</code>: Defines behavior for attribute deletion.</li> <li><code>__getattribute__(self, name)</code>: Defines behavior for attribute retrieval.</li> <li><code>__dir__(self)</code>: Returns a list of attribute names.</li> </ul>"},{"location":"python/special_methods.html#descriptor-protocol","title":"Descriptor Protocol","text":"<ul> <li><code>__get__(self, instance, owner)</code>: Defines behavior for attribute retrieval.</li> <li><code>__set__(self, instance, value)</code>: Defines behavior for attribute assignment.</li> <li><code>__delete__(self, instance)</code>: Defines behavior for attribute deletion.</li> </ul>"},{"location":"python/special_methods.html#callable-objects","title":"Callable Objects","text":"<ul> <li><code>__call__(self, ...)</code>: Defines behavior for calling an object as a function.</li> </ul>"},{"location":"python/special_methods.html#type-conversion","title":"Type Conversion","text":"<ul> <li><code>__int__(self)</code>: Defines behavior for conversion to an integer.</li> <li><code>__float__(self)</code>: Defines behavior for conversion to a float.</li> <li><code>__complex__(self)</code>: Defines behavior for conversion to a complex number.</li> <li><code>__bool__(self)</code>: Defines behavior for conversion to a boolean.</li> </ul>"},{"location":"python/special_methods.html#pickling","title":"Pickling","text":"<ul> <li><code>__getstate__(self)</code>: Defines behavior for pickling an object.</li> <li><code>__setstate__(self, state)</code>: Defines behavior for unpickling an object.</li> </ul>"},{"location":"python/special_methods.html#copying","title":"Copying","text":"<ul> <li><code>__copy__(self)</code>: Defines behavior for shallow copying.</li> <li><code>__deepcopy__(self, memo)</code>: Defines behavior for deep copying.</li> </ul>"},{"location":"python/special_methods.html#class-methods","title":"Class Methods","text":"<ul> <li><code>__init_subclass__(cls, **kwargs)</code>: Initializes a subclass.</li> <li><code>__class_getitem__(cls, item)</code>: Defines behavior for class-level <code>[]</code> operator.</li> </ul>"},{"location":"python/special_methods.html#other-methods","title":"Other Methods","text":"<ul> <li><code>__instancecheck__(self, instance)</code>: Defines behavior for <code>isinstance()</code>.</li> <li><code>__subclasscheck__(self, sub)</code>: Defines behavior for <code>issubclass()</code>.</li> <li><code>__hash__(self)</code>: Defines behavior for <code>hash()</code>.</li> <li><code>__index__(self)</code>: Defines behavior for conversion to an integer for indexing.</li> </ul>"},{"location":"rasppi/boot-pi-4-from-ssd.html","title":"Boot from USB SSD","text":""},{"location":"rasppi/boot-pi-4-from-ssd.html#how-to-boot-a-raspberry-pi-4-from-an-ssd","title":"How to Boot a Raspberry Pi 4 From an SSD","text":""},{"location":"rasppi/boot-pi-4-from-ssd.html#parts","title":"Parts","text":"<ul> <li>GeeekPi for Raspberry Pi 4,X862 V2.0 M.2 NGFF SATA SSD Storage Expansion Board with USB 3.1 Connection Support Key-B 2280 SSD Only</li> <li>Timetec 1TB SSD 3D NAND SATA III 6Gb/s M.2 2280 NGFF 512TBW Read Speed Up to 550MB/s SLC Cache Performance Boost Internal Solid State Drive for PC Computer Laptop and Desktop (1TB)</li> </ul>"},{"location":"rasppi/boot-pi-4-from-ssd.html#hardware-assembly","title":"Hardware Assembly","text":""},{"location":"rasppi/boot-pi-4-from-ssd.html#installation","title":"Installation","text":"<ul> <li>Download latest Raspberry Pi OS with desktop image from the pi foundation\u2019s website.</li> <li>Uncompress the image on Linux/Mac you can use gzip or xz: <pre><code>gzip -d 2023-12-05-raspios-bookworm-arm64.img.xz\n</code></pre></li> <li>Use <code>dd</code> or a tool like Belena Etcher to flash your image to a microSD card.</li> <li>Boot your Pi 4 off of the microSD card and follow the normal Pi 4 setup steps to expand the file-system, set the language, etc.</li> <li>If your USB SSD drive does not show up on your booted Pi Desktop after a few seconds, you likely need to format it.<ul> <li>You can use tools like <code>fdisk -l</code>, <code>lsblk</code>, <code>cfdisk</code> and <code>parted/gparted</code> to verify the Pi sees your SSD drive, and to format it to FAT32 if it shows up as a block device, but doesn\u2019t mount.</li> </ul> </li> <li>From a Pi Desktop terminal, make sure your Pi OS and software are fully up to date <pre><code>sudo apt-get udpate\nsudo apt-get full-upgrade\n# Once done\nsudo reboot now\n</code></pre></li> <li>Now update your Pi 4\u2019s firmware <pre><code>sudo rpi-update\n# Once done\nsudo reboot now\n</code></pre></li> <li>After reboot, you should now be able to copy your microSD card to your USB SSD as depicted below:  </li> <li>After the SD Card Copier process completes, verify that you have the latest boot-loader so that we can update which drive to use via <code>raspi-config</code> next. <pre><code>sudo rpi-eeprom-update -d -a\n</code></pre><ul> <li>You can see the LATEST and CURRENT match below:</li> <li></li> </ul> </li> <li>Now set the bootloader as depicted in the video to boot from your USB SSD using: <pre><code>sudo raspi-config\n</code></pre></li> </ul>  Your browser does not support the video tag.  <p>* Peforma write test to see your new SSD speed! <pre><code>dd if=/dev/zero of=./speedFileTest bs=20M count=5\n</code></pre></p>"},{"location":"tomcat/install.html","title":"Install","text":""},{"location":"tomcat/install.html#installing-tomcat-on-macos","title":"Installing Tomcat on MacOS","text":""},{"location":"tomcat/install.html#prerequisite","title":"Prerequisite","text":"<ul> <li> <p>Tomcat 10 requires Java version 8 or later and since OS X 10.7 Java is not (pre-)installed anymore.</p> <pre><code>java --version\n</code></pre> </li> <li> <p>Once java is installed add the JAVA_HOME variable to your shell\u2019s startup profile</p> <pre><code>export JAVA_HOME=&lt;Path to Java Home Dir&gt;\n</code></pre> </li> </ul>"},{"location":"tomcat/install.html#install-tomcat","title":"Install Tomcat","text":"<ul> <li>Download latest .tar.gz Core binary from Tomcat Download Page</li> <li> <p>Unarchive ~/Downloads/apache-tomcat-10.0.23.tar.gz</p> <pre><code>cd ~/Downloads/\ntar -xzf ~/Downloads/apache-tomcat-10.0.23.tar.gz\n</code></pre> </li> <li> <p>Open the Terminal app to move the unarchived distribution to /usr/local like so:</p> <pre><code>sudo mkdir -p /usr/local\nsudo mv ~/Downloads/apache-tomcat-10.0.23 /usr/local\n</code></pre> </li> <li> <p>To make it easy to replace this release with future releases, we are going to create a symbolic link that we are going to use when referring to Tomcat (after removing the old link, you might have from installing a previous version):</p> <pre><code>sudo rm -f /Library/Tomcat\nsudo ln -s /usr/local/apache-tomcat-10.0.23 /Library/Tomcat\n</code></pre> </li> <li> <p>Change ownership of the /usr/local/apache-tomcat-10.0.23 folder hierarchy:</p> <pre><code>sudo chown -R &lt;your_username&gt; /usr/local/apache-tomcat-10.0.23\n</code></pre> </li> <li> <p>Make all scripts in Tomcat\u2019s ./bin folder executable:</p> <pre><code>sudo chmod +x /usr/local/apache-tomcat-10.0.23/bin/*.sh\n</code></pre> </li> </ul>"},{"location":"tomcat/install.html#running-tomcat","title":"Running Tomcat","text":"<ul> <li> <p>Starting Tomcat by executing the provided scripts, like so:</p> <pre><code>/Library/Tomcat/bin/startup.sh\n</code></pre> </li> <li> <p>Stopping Tomcat by executing the provided scripts, like so:</p> <pre><code>/Library/Tomcat/bin/shutdown.sh\n</code></pre> </li> </ul>"},{"location":"tux/imagemagick.html","title":"ImageMagick","text":""},{"location":"tux/imagemagick.html#how-to-batch-crop-images-with-imagemagick","title":"How to Batch Crop Images With Imagemagick","text":""},{"location":"tux/imagemagick.html#crop-a-single-image","title":"Crop a Single Image","text":"<ul> <li>We\u2019ll start by looking at how to crop a single image using Imagemagick.</li> <li>Open a command window in the folder containing the image(s) you want to crop.</li> <li>Then open one of the images in Gimp or Photoshop to determine the x_size, y_size, x_offset, and y_offset as depicted </li> <li>Finally use convert to test 1 image and confirm your crop settings<pre><code>convert -crop x_sizexy_size+x_offset+y_offset inputfile outputfile\n\nconvert -crop 1000x1000+38+278 Image.jpg CroppedImage.jpg\n</code></pre> </li> </ul>"},{"location":"tux/imagemagick.html#batch-crop","title":"Batch Crop","text":"Note <p>Now we could just loop over the images and crop, but we won\u2019t thanks to Imagemagick\u2019s batch processor mogrify. The command to crop a folder of images is very similar to cropping just 1.</p> <ul> <li>First make a new folder called cropped to output cropped images to.</li> <li> <p>Next run the command as follows:</p> <pre><code>mogrify -crop 1000x1000+38+278 -path ./cropped *.jpg\n</code></pre> </li> <li> <p>That\u2019s it, you\u2019ve batch cropped your images.</p> </li> </ul>"},{"location":"tux/network.html","title":"Network","text":""},{"location":"tux/network.html#helpful-network-commands","title":"Helpful Network Commands","text":""},{"location":"tux/network.html#add-a-virtual-interface","title":"Add a Virtual Interface","text":"<ul> <li>: Can be anything you like like ap0 if you wanted to create a Virtual Access Point. <li>: One of the following<ul> <li>__ap: Access Point mode.</li> <li>ibss: Independent Basic Service Set or Ad-Hoc (Group of devices talk to eachother).</li> <li>monitor: Passive monitoring mode where packets are handed to OS unfiltered</li> <li>mp: Mesh Point or a device in a mesh network.</li> <li>station <pre><code># iw dev wlan0 interface add &lt;name&gt; type &lt;type&gt;\niw dev wlan0 interface ap0 type __ap\n# You may also need to assign ap0 its own MAC Address, see \"Change Device MAC Address\"\n</code></pre></li> </ul>"},{"location":"tux/network.html#change-device-mac-address","title":"Change Device MAC Address","text":"<pre><code># ip link set dev &lt;dev-name&gt; address &lt;new-mac-address&gt;\nip link set dev ap0 address 00:12:34:56:78:9c\n</code></pre>"},{"location":"tux/network.html#extra-steps-for-ap-mode","title":"Extra Steps for AP Mode","text":"<ul> <li>Either set up and configure hostapd as AP daemon or use nmcli to set up an AP with NetworkManager and pick ap0 as the interface.</li> <li>For both configurations dnsmasq is used to assign the connecting clients on the ap0 interface IP addresses via DHCP.<ul> <li>With hostapd you likely will need to configure /etc/dnsmasq/dnsmasq.conf. NetworkManger does this part for you.</li> </ul> </li> <li>Use iptables to set up ip masquerading</li> <li>Enable IPv4 forwarding in kernel via /etc/sysctl</li> </ul>"},{"location":"tux/nmcli.html","title":"Network Manger","text":""},{"location":"tux/nmcli.html#network-manger-cli-nmcli","title":"Network Manger CLI (nmcli)","text":"<p>The NetworkManger CLI allows you to manage your network interfaces and configuration via a single command line tool. This is the command line interface (CLI) version for the NetworkManager, a widely used Linux network control manager. I\u2019ve included some very helpful commands to allow you to configure less common network features (like AP mode) via the CLI.</p> <p>Note: You can also install and use the <code>nmtui</code> tool to do much of this configuration without a GUI, which is the NetworkManger Text User Interface tool.</p>"},{"location":"tux/nmcli.html#edit-networkmanager-conenctions-directly-via-configuration-files","title":"Edit NetworkManager Conenctions Directly via Configuration Files","text":"<ul> <li>Files found under /etc/NetworkManager/system-connnections <pre><code>sudo vim /etc/NetworkManager/system-connections/&lt;your connection file&gt;\n</code></pre></li> </ul>"},{"location":"tux/nmcli.html#create-and-enable-linux-hotspot-via-nmcli-method-1","title":"Create and Enable Linux Hotspot via nmcli Method 1","text":"<pre><code>nmcli connection add type wifi ifname wlan0 con-name local-ap autoconnect yes ssid test-ap mode ap\nnmcli connection modify con-name 802-11-wireless.mode ap 802-11-wireless-security.key-mgmt wpa-psk ipv4.method shared 802-11-wireless-security.psk 'PASSWORD'\nnmcli connection up con-name\n</code></pre>"},{"location":"tux/nmcli.html#hotspot-method-2","title":"Hotspot Method 2","text":"<ul> <li>Note: tkip could be used instead of ccmp for reduced security.</li> <li>Note: WPA3 is also configurable on most modern distributions. <pre><code>nmcli connection add \\\n    con-name local-ap \\\n    ifname wlan0 \\\n    type wifi \\\n    autoconnect yes \\\n    ipv4.method shared \\\n    802-11-wireless-security.proto rsn \\\n    802-11-wireless-security.pairwise ccmp \\\n    802-11-wireless-security.group ccmp \\\n    802-11-wireless.band g \\\n    802-11-wireless.mode ap \\\n    802-11-wireless.ssid \"test-ap\" \\\n    802-11-wireless-security.key-mgmt wpa-psk \\\n    802-11-wireless-security.psk \"PASSWORD\" \\\n    802-11-wireless.hidden no\n</code></pre></li> </ul>"},{"location":"tux/nmcli.html#search-for-access-points","title":"Search for Access Points","text":"<pre><code>nmcli dev wifi list\n</code></pre>"},{"location":"tux/nmcli.html#showshare-nmcli-wifi-via-qr-code","title":"Show/Share nmcli WiFi via QR Code","text":"<pre><code>nmcli dev wifi show-password\n</code></pre>"},{"location":"tux/nmcli.html#list-active-connections","title":"List Active Connections","text":"<pre><code>nmcli con\n</code></pre>"},{"location":"tux/nmcli.html#show-details-of-a-connection","title":"Show Details of a Connection","text":"<pre><code>nmcli con show local-ap\n</code></pre>"},{"location":"tux/nmcli.html#set-an-ip-on-an-interface","title":"Set an IP on an Interface","text":"<pre><code>nmcli con modify local-ap ipv4.addresses \"192.168.21.10/24\"\n</code></pre>"},{"location":"tux/nmcli.html#stop-and-start-a-connection-by-name","title":"Stop and Start a Connection by Name","text":"<pre><code>nmcli conn down local-ap\nnmcli conn up !$\n</code></pre>"},{"location":"tux/nmcli.html#spoof-a-mac-address","title":"Spoof a MAC Address","text":"<pre><code>sudo nmcli con modify local-ap 802-3-ethernet.cloned-mac-address 00:12:34:56:78:9b\n</code></pre>"},{"location":"tux/os_command_map.html","title":"Command Cheat-sheet","text":""},{"location":"tux/os_command_map.html#windows-vs-linux-command-cheatsheet","title":"Windows VS Linux Command Cheatsheet","text":""},{"location":"tux/os_command_map.html#cmd-window-mapping","title":"Cmd Window Mapping","text":"Windows Linux Description dir ls -l Directory listing ren mv Rename a file copy cp Copying a file move mv Moving a file cls clear Clear Screen del rm Delete file fc diff Compare contents of files find grep Search for a string in a file command /? man command Display the manual/help details of the command chdir pwd Returns your current directory location time date Displays the time cd cd Change the current directory md mkdir To create a new directory/folder echo echo To print something on the screen edit vim(depends on editor) To write in to files. exit exit To leave the terminal/command window. format mke2fs or mformat To format a drive/partition. free mem To display free space. rmdir rm -rf/rmdir To delete a directory. taskkill kill To kill a task. tasklist ps x To list running tasks. set var=value export var=value To set environment variables. attrib chown/chmod To change file permissions. tracert traceroute To print the route packets trace to network host. at cron daemon to execute scheduled commands. type cat To print contents of a file. ping ping To send ICMP ECHO_REQUEST to network hosts. nslookup nslookup To query Internet name servers interactively. chdisk du -s For disk usage. tree ls -R To list directory recursively."},{"location":"tux/os_command_map.html#powershell-command-mapping","title":"Powershell Command Mapping","text":"Windows Powershell Linux Description Get-Content file3.txt -Tail \u201c3\u201d Get-Content file3.txt | Select-Object -last 3 cat file3.txt | tail -3 Extract last 3 lines of file"},{"location":"tux/pandoc.html","title":"Pandoc","text":""},{"location":"tux/pandoc.html#pandoc-awesomeness","title":"Pandoc Awesomeness","text":""},{"location":"tux/pandoc.html#convert-html-to-markdown","title":"Convert HTML to Markdown","text":"<pre><code>pandoc -f html -t markdown myfile.html &gt;myfile.md\n# OR\npandoc -f html -t 'markdown_strict+pipe_tables' myfile.html &gt;myfile.md\n</code></pre> Warning <p>The above commands will only convert simple tables to proper Markdown.  Multi-Line or Block tables will just be rendered as HTML, which is still valid in MkDocs!</p>"},{"location":"tux/pandoc.html#convert-docx-to-markdown","title":"Convert docx to Markdown","text":"<pre><code>pandoc -s example30.docx --wrap=none --reference-links -t markdown -o example35.md\n</code></pre>"},{"location":"tux/parallel.html","title":"Parallel","text":""},{"location":"tux/parallel.html#example-of-parallels-nmap","title":"Example of Parallels Nmap","text":"Info <p>Here I explore the use of several commands to speed up the nmap scanning process. Curl is used to pull down our scanning target, jq is used to parse and partially format the json from the downloaded ip list, awk is then used to generate multiple nmap commands, and finally parallel is used to execute them in parallel. So let\u2019s get started and break this down.</p>"},{"location":"tux/parallel.html#the-command","title":"The Command","text":"<pre><code>    curl https://ip-ranges.amazonaws.com/ip-ranges.json | jq -r '.prefixes[] | [.region, .ip_prefix, .ip_prefix]|@tsv' | awk -F'\\t' '{gsub(\"/\",\"-\",$2);print(\"nmap -sT -T5 -Pn -p- -oG logs/\"$1\"_\"$2\".gnmap \" $3)}' | parallel --jobs 32\n</code></pre>"},{"location":"tux/parallel.html#curl","title":"Curl","text":"<pre><code>    curl https://ip-ranges.amazonaws.com/ip-ranges.json\n</code></pre> <ul> <li>Curl makes a GET request to the Amazon URL holding a json object of Amazon AWS IPs</li> <li>The json output looks something like below:<pre><code>{\n  \"syncToken\": \"1660666986\",\n  \"createDate\": \"2022-08-16-16-23-06\",\n  \"prefixes\": [\n    {\n      \"ip_prefix\": \"3.5.140.0/22\",\n      \"region\": \"ap-northeast-2\",\n      \"service\": \"AMAZON\",\n      \"network_border_group\": \"ap-northeast-2\"\n    },\n    ...\n}\n</code></pre> </li> </ul>"},{"location":"tux/parallel.html#jq","title":"Jq","text":"<pre><code>    | jq -r '.prefixes[] | [.region, .ip_prefix, .ip_prefix]|@tsv'\n</code></pre> <ul> <li>jq\u2019s -r option tells the command to output in raw format (i.e. no extra quotes or formatting)</li> <li><code>.prefixes[]</code> grabs all the elements in the prefixes array as seen in the output.</li> <li><code>|</code> cycles over the elements in the array.</li> <li><code>[.region, .ip_prefix, .ip_prefix]</code> captures the region and ip_prefix commands into a new 3 element array</li> <li><code>|@tsv</code> cycles over the new array elements and outputs them as -r a raw tab separated line.</li> <li>The output will look something like below:<pre><code>ap-northeast-2  3.5.140.0/22    3.5.140.0/22\nap-southeast-4  13.34.37.64/27  13.34.37.64/27\nil-central-1    13.34.65.64/27  13.34.65.64/27\nus-east-1   13.34.66.0/27   13.34.66.0/27\nme-south-1  13.34.78.160/27 13.34.78.160/27\n</code></pre> </li> </ul>"},{"location":"tux/parallel.html#awk","title":"Awk","text":"<pre><code>    | awk -F'\\t' '{gsub(\"/\",\"-\",$2);print(\"nmap -sT -T5 -Pn -p- -oG logs/\"$1\"_\"$2\".gnmap \" $3)}'\n</code></pre> <ul> <li><code>awk -F'\\t'</code> splits the line by line input into 3 variables \\(1** will equal region **\\)2 will equal the first ip_prefix, and $3 will equal the second ip_prefix column</li> <li><code>gsub(\"/\",\"-\",$2);</code> this replaces any subnet slashes in the first ip_prefix column with a -</li> <li><code>print(\"nmap -sT -T5 -Pn -p- -oG logs/\"$1\"_\"$2\".gnmap \" $3)</code> this prints out the nmap command but substitutes \\(1** (i.e. the region) and **\\)2 (i.e. the gsub-ed ip_prefix) into the option building the log file. $3 remains the unmodified ip_prefix to scan, so the full output will look something like below: <pre><code>nmap -sT -T5 -Pn -p- -oG logs/ap-northeast-2_3.5.140.0-22.gnmap 3.5.140.0/22\nnmap -sT -T5 -Pn -p- -oG logs/ap-southeast-4_13.34.37.64-27.gnmap 13.34.37.64/27\nnmap -sT -T5 -Pn -p- -oG logs/il-central-1_13.34.65.64-27.gnmap 13.34.65.64/27\nnmap -sT -T5 -Pn -p- -oG logs/us-east-1_13.34.66.0-27.gnmap 13.34.66.0/27\nnmap -sT -T5 -Pn -p- -oG logs/me-south-1_13.34.78.160-27.gnmap 13.34.78.160/27\n</code></pre> </li> </ul>"},{"location":"tux/parallel.html#parallel","title":"Parallel","text":"<pre><code>    | parallel --jobs 32\n</code></pre> <ul> <li>This command takes the numerous lines of nmap jobs generated above and runs 32 of them in parallel.</li> <li>In this way you have increase the speed at which nmap scans to a point that will likely overheat your PC :-)</li> </ul> Warning <p>Make sure you set up a logs directory from the folder you run this so you don\u2019t get a file system error.</p> <pre><code>    mkdir logs\n</code></pre> <p>Also, make sure your system can killall in case things get out of hand:</p> <pre><code>    killall nmap\n</code></pre> <p></p>"},{"location":"tux/redis_cli_test.html","title":"CLI Testing","text":"<p>1. Check Replication Status</p> <ul> <li>On the Master:<ul> <li><code>redis-cli -h &lt;master_host&gt; -p &lt;master_port&gt; INFO REPLICATION</code> </li> <li>Look for <code>connected_slaves</code>. It should list all connected replicas with their IP addresses and ports.</li> </ul> </li> <li>On the Replica:<ul> <li><code>redis-cli -h &lt;replica_host&gt; -p &lt;replica_port&gt; INFO REPLICATION</code></li> <li>Verify <code>role:slave</code>, <code>master_host</code>, <code>master_port</code>, and that <code>slave_read_only</code> is set to <code>1</code>.</li> </ul> </li> </ul> <p>2. Monitor Replication Lag</p> <ul> <li>On the Master:<ul> <li><code>redis-cli -h &lt;master_host&gt; -p &lt;master_port&gt; INFO REPLICATION</code> </li> <li>Note the <code>master_repl_offset</code>.</li> </ul> </li> <li>On the Replica:<ul> <li><code>redis-cli -h &lt;replica_host&gt; -p &lt;replica_port&gt; INFO REPLICATION</code> </li> <li>Note the <code>slave_repl_offset</code>.</li> <li>Calculate the difference between <code>master_repl_offset</code> and <code>slave_repl_offset</code>. A small difference indicates low lag.</li> </ul> </li> </ul> <p>3. Test Data Consistency</p> <ul> <li>Set a Key on the Master:<ul> <li><code>redis-cli -h &lt;master_host&gt; -p &lt;master_port&gt; SET mykey \"value\"</code></li> </ul> </li> <li>Get the Key on the Replica:<ul> <li><code>redis-cli -h &lt;replica_host&gt; -p &lt;replica_port&gt; GET mykey</code></li> <li>Verify that the value retrieved from the replica matches the value set on the master.</li> </ul> </li> </ul> <p>4. Force a Resync (for testing)</p> <ul> <li>On the Replica:<ul> <li><code>redis-cli -h &lt;replica_host&gt; -p &lt;replica_port&gt; SLAVEOF NO ONE</code> </li> <li><code>redis-cli -h &lt;replica_host&gt; -p &lt;replica_port&gt; SLAVEOF &lt;master_host&gt; &lt;master_port&gt;</code> </li> </ul> </li> </ul> <p>Key Considerations:</p> <ul> <li>Frequency: Regularly run these checks to monitor replication health.</li> <li>Scripting: Create scripts to automate these checks and generate reports.</li> <li>Alerting: Set up alerts based on replication lag thresholds.</li> </ul>"},{"location":"tux/redis_ha.html","title":"High Availability","text":""},{"location":"tux/redis_ha.html#redis-sentinel-based-high-availability","title":"Redis Sentinel-Based High Availability","text":""},{"location":"tux/redis_ha.html#topology","title":"Topology","text":"<ol> <li>Prerequisite</li> <li>At least three Redis instances (master and two replicas).</li> <li> <p>Three Sentinel instances (can be colocated with Redis or separate).</p> </li> <li> <p>Install Redis</p> </li> <li>Install Redis on all nodes. Use your package manager (<code>apt</code>, <code>yum</code>, or <code>brew</code>) or compile from source.</li> <li> <p>Example (Ubuntu): <pre><code>sudo apt update\nsudo apt install redis-server\n</code></pre></p> </li> <li> <p>Configure Redis Nodes</p> </li> <li>Set up one master and two or more replicas.</li> <li>In the configuration file (<code>/etc/redis/redis.conf</code>), configure:<ul> <li><code>bind</code>: Specify the IP to bind (e.g., <code>bind 0.0.0.0</code> for all interfaces).</li> <li><code>protected-mode no</code> (if remote access is required).</li> <li>Enable persistence (<code>appendonly yes</code>).</li> </ul> </li> <li> <p>Configure replicas to point to the master:      <pre><code>replicaof &lt;master_ip&gt; &lt;master_port&gt;\n</code></pre></p> </li> <li> <p>Start Redis Instances</p> </li> <li> <p>Start Redis on all nodes and ensure the replicas sync with the master by performing some of the TESTING STEPS.</p> </li> <li> <p>Install and Configure Sentinel</p> </li> <li>On each Sentinel node, configure the <code>sentinel.conf</code> file:      <pre><code>sentinel monitor mymaster &lt;master_ip&gt; &lt;master_port&gt; 2\nsentinel auth-pass mymaster &lt;password&gt;  # If password-protected\nsentinel down-after-milliseconds mymaster 5000\nsentinel parallel-syncs mymaster 1\nsentinel failover-timeout mymaster 10000\n</code></pre></li> <li> <p>Replace <code>&lt;master_ip&gt;</code> and <code>&lt;master_port&gt;</code> with the master node\u2019s details.</p> </li> <li> <p>Start Sentinel Instances</p> </li> <li>Run Redis Sentinel using the command:      <pre><code>redis-server /path/to/sentinel.conf --sentinel\n</code></pre></li> <li> <p>Verify that the Sentinels monitor the master and replicas.</p> </li> <li> <p>Test Failover</p> </li> <li>Stop the master Redis instance.</li> <li>Ensure a Sentinel promotes one of the replicas to master.</li> <li>Test client applications for automatic failover (update connection logic to handle Sentinel or use HAProxy).</li> </ol>"},{"location":"tux/redis_ha_recovery.html","title":"HA Recovery","text":""},{"location":"tux/redis_ha_recovery.html#recover-a-failed-node","title":"Recover a Failed Node","text":""},{"location":"tux/redis_ha_recovery.html#1-fix-the-original-node","title":"1. Fix the Original Node","text":"<ul> <li>Ensure the original master is operational and properly configured.</li> <li>If the failed node is the master you will need to update your /etc/redis/redis.conf\u2019s replicaof setting, or do the following:<ul> <li>The original master cannot automatically reclaim its role as the master. You need to make it a replica of the current master (promoted replica).</li> <li>Use the <code>replicaof</code> command on the original master:      <pre><code>redis-cli -h &lt;original_master_ip&gt; -p &lt;original_master_port&gt; replicaof &lt;new_master_ip&gt; &lt;new_master_port&gt;\n</code></pre></li> <li>This command re-synchronizes the data on the original master with the current master.</li> </ul> </li> <li>Start the Redis instance on the original master node.</li> </ul>"},{"location":"tux/redis_ha_recovery.html#2-verify-synchronization","title":"2. Verify Synchronization","text":"<ul> <li>Check the synchronization status by running:      <pre><code>redis-cli -h &lt;original_master_ip&gt; -p &lt;original_master_port&gt; info replication\n</code></pre></li> <li>Look for <code>role:slave</code> and ensure the <code>master_sync_in_progress</code> is <code>0</code>.</li> </ul>"},{"location":"tux/redis_ha_recovery.html#3-let-sentinel-manage-failover-optional","title":"3. Let Sentinel Manage Failover (Optional)","text":"<ul> <li>Sentinel will now monitor the reconfigured original master as a replica.</li> <li>If the current master fails in the future, Sentinel can promote any healthy replica, including the original master, back to the master role.</li> </ul>"},{"location":"tux/redis_ha_recovery.html#optional-force-revert-to-original-master","title":"Optional: Force Revert to Original Master**","text":"<p>If you want to make the original master the primary master again (not recommended unless necessary), follow these steps:</p> <ul> <li>Step 1: Stop all writes to the current master to prevent split-brain or data loss.</li> <li>Step 2: Demote the current master to a replica using:      <pre><code>redis-cli -h &lt;current_master_ip&gt; -p &lt;current_master_port&gt; replicaof &lt;original_master_ip&gt; &lt;original_master_port&gt;\n</code></pre></li> <li>Step 3: Promote the original master back to its role by setting <code>replicaof no one</code>:      <pre><code>redis-cli -h &lt;original_master_ip&gt; -p &lt;original_master_port&gt; replicaof no one\n</code></pre></li> <li>Step 4: Update Sentinels to monitor the new configuration. Restart Sentinels if needed.</li> </ul>"},{"location":"tux/redis_ha_recovery.html#you-should-automate","title":"You Should Automate","text":"<ul> <li>Use tools like Redis Operator for Kubernetes or custom scripts to automate the process of restoring the original master.</li> </ul>"},{"location":"tux/ssh.html","title":"SSH","text":""},{"location":"tux/ssh.html#helpful-ssh-commands","title":"Helpful SSH Commands","text":""},{"location":"tux/ssh.html#convert-ssh-key-into-openssh-classic-key","title":"Convert SSH Key into OpenSSH Classic Key","text":"<ul> <li>May need to do this for various legacy programs or API libraries like Java\u2019s JSch.<pre><code>ssh-keygen -p -f &lt;privateKeyFile&gt; -m pem -P passphrase -N passphrase\n</code></pre> </li> </ul>"},{"location":"tux/tesseract.html","title":"Tesseract","text":""},{"location":"tux/tesseract.html#tesseract","title":"Tesseract","text":""},{"location":"tux/tesseract.html#extract-text-from-an-image","title":"Extract Text from an Image","text":"<ul> <li>Cd to the folder with the image/screenshots you wish to extract text from.</li> <li>Run tesseract on an image to test, here we extract the text of a Screenshot to a file called test.txt using a resolution of 150 dpi<pre><code>tesseract Screenshot_2022-08-16-21-27-12-14_1ce46c7c043b13bd654694576893861e.jpg test --dpi 150\n</code></pre> </li> </ul>"},{"location":"tux/tesseract.html#batch-extract-text","title":"Batch Extract Text","text":"<ul> <li>If Extracting Text from an Image was successful, you\u2019re ready to batch process it.</li> <li>First cd to the folder with the images/screenshots you wish to extract text from</li> <li> <p>Now run the following command</p> <pre><code>mkdir text\nfor f in `ls *.jpg`\ndo\n    BN=$(echo ${f%.*})\n    tesseract $f ./text/${BN} --dpi 150\ndone\n</code></pre> </li> <li> <p>The above command loops over all jpegs in the current folder, removes the .jpg extension and stores that to BN, then uses the tesseract command to process the image and output it as ${BN}.txt with a resolution of 150dpi.</p> </li> </ul>"},{"location":"tux/certificates/JAVA_KEYSTORE.html","title":"X.509 to Java Keystore Conversion","text":""},{"location":"tux/certificates/JAVA_KEYSTORE.html#import-self-signed-server-certificate-from-self-generated-ca-into-java-keystore","title":"Import Self-Signed Server Certificate from Self-Generated CA into Java Keystore","text":""},{"location":"tux/certificates/JAVA_KEYSTORE.html#step-1-convert-the-x509-certificate-and-key-to-a-pkcs12-file","title":"Step 1: Convert the x.509 certificate and key to a pkcs12 file","text":"<ul> <li>During conversion to pkcs12 file be sure to put an export password for both security and to avoid import issues.</li> <li>The <code>-chain</code> option is optional, but suggested to preserve the CA certificate chain (i.e. who signed it). <pre><code># openssl pkcs12 -export -in server.crt -inkey server.key -out server.p12 -name [some-alias] -CAfile ca.crt -caname root -chain -passin file:servpass.enc\nopenssl pkcs12 -export -in server.crt -inkey server.key -out server.p12 -name cis-18 -CAfile ca.cert.pem -caname root -chain -passin file:servpass.enc\n</code></pre></li> </ul>"},{"location":"tux/certificates/JAVA_KEYSTORE.html#step-2-import-pkcs12-file-into-java-keystore","title":"Step 2: Import pkcs12 file Into Java Keystore","text":"<pre><code>keytool -importkeystore -deststorepass [A_PASSWORD] -destkeypass [A_DIFF_PASSWORD] -destkeystore cis-18.keystore -srckeystore server.p12 -srcstoretype PKCS12 -srcstorepass [EXPORT_PASSWORD] -alias cis-18\n</code></pre>"},{"location":"tux/certificates/JAVA_KEYSTORE.html#step-3-use-this-keystore-for-your-spring-boot-tomcat","title":"Step 3: Use this Keystore for your Spring-Boot Tomcat","text":"resources/application.properties<pre><code>server.port=8080\n# The format used for the keystore. It could be set to JKS in case it is a JKS file\nserver.ssl.key-store-type=PKCS12\n# The path to the keystore containing the certificate\nserver.ssl.key-store=keystore/cis-18.keystore\n# The password used to generate the certificate\nserver.ssl.key-store-password=[EXPORT_PASSWORD]\n# The alias mapped to the certificate\nserver.ssl.key-alias=cis-18\n# Accept only HTTPS requests\nserver.ssl.enabled=true\nserver.ssl.protocol=TLS\n</code></pre>"},{"location":"tux/certificates/LAZY_DEV.html","title":"Simple Self-Signed JKS for Spring-Boot","text":""},{"location":"tux/certificates/LAZY_DEV.html#the-very-lazy-but-functional-way-to-trust-a-self-signed-certificate","title":"The VERY LAZY but Functional Way to Trust a Self-Signed Certificate","text":""},{"location":"tux/certificates/LAZY_DEV.html#step-1-generate-your-java-keystore","title":"Step 1: Generate your Java Keystore","text":"<p><pre><code>keytool -genkeypair -alias cis-18 -keyalg RSA -keysize 2048 -storetype PKCS12 -keystore cis-18.p12 -validity 3650\n</code></pre> * Remember your keystore password from the step shown below, you\u2019ll need it: <pre><code>Enter keystore password:\nRe-enter new password:\n</code></pre> * Example Answers <pre><code>Enter keystore password:\nRe-enter new password:\nWhat is your first and last name?\n  [Unknown]:  Trevor Hartman\nWhat is the name of your organizational unit?\n  [Unknown]:  Computer Information Systems\nWhat is the name of your organization?\n  [Unknown]:  College of the Redwoods\nWhat is the name of your City or Locality?\n  [Unknown]:  Eureka\nWhat is the name of your State or Province?\n  [Unknown]:  California\nWhat is the two-letter country code for this unit?\n  [Unknown]:  US\nIs CN=Trevor Hartman, OU=Computer Information Systems, O=College of the Redwoods, L=Eureka, ST=California, C=US correct?\n  [no]:  yes\n</code></pre></p>"},{"location":"tux/certificates/LAZY_DEV.html#step-2-import-keystore-into-android-device","title":"Step 2: Import Keystore Into Android Device","text":"<ul> <li>Copy cis-18.p12 certifcate to your Android Phone</li> <li>Settings &gt;&gt; Password &amp; Security &gt;&gt; System Security &gt;&gt; Credential Storage &gt;&gt; Install certificates from Storage &gt;&gt; VPN &amp; app user certificates</li> <li>Select the certificate you want to import from your file-system</li> <li>Type the certificate password to import it</li> <li>Type the alias and you\u2019re good to go (No more annoying SSL errors).</li> </ul> Development <p>You will also need this certificate for local development in your Springboot App if you wish to use SSL for <code>mvn spring-boot:run</code>. Example Spring-Boot applications.properties for SSL<pre><code>server.port=8080\n# The format used for the keystore. It could be set to JKS in case it is a JKS file\nserver.ssl.key-store-type=PKCS12\n# The path to the keystore containing the certificate\nserver.ssl.key-store=keystore/cis-18.p12\n# The password used to generate the certificate\nserver.ssl.key-store-password=[keystore password]\n# The alias mapped to the certificate\nserver.ssl.key-alias=cis-18\n# Accept only HTTPS requests\nserver.ssl.enabled=true\nserver.ssl.protocol=TLS\n</code></pre></p>"},{"location":"tux/certificates/certificate_authority.html","title":"Issue Certs, Be a Certificate Authority","text":""},{"location":"tux/certificates/certificate_authority.html#become-your-own-certificate-authority-ca","title":"Become Your Own Certificate Authority (CA)","text":"<p>A modern version of OpenSSL is required for this tutorial, so please make sure you install that first.</p>"},{"location":"tux/certificates/certificate_authority.html#step-1-create-an-encrypted-password-file-for-better-security","title":"Step 1: Create an Encrypted Password File for Better Security","text":"<ul> <li>Edit a file <code>yourpass</code> and place your desired password in clear-text inside it.</li> <li>Encrypt your password using openssl: <pre><code>openssl enc -aes256 -pbkdf2 -salt -in yourpass -out yourpass.enc\n</code></pre></li> <li>Delete your clear-text file <pre><code>rm yourpass\n</code></pre></li> </ul>"},{"location":"tux/certificates/certificate_authority.html#step-2-generate-private-key-for-certificate-authority-ca","title":"Step 2: Generate Private Key for Certificate Authority (CA)","text":"Warning <p>This should definitely be protected and kept private if you plan on deploying this in the wild somewhere.</p> <ul> <li>Generate your private key utilizing the encryption standard of choice<ul> <li>AES is generally considered more secure than 3DES <pre><code>openssl genrsa -aes256 -passout file:yourpass.enc -out ca.key 4096\n# Or the less secure des3\nopenssl genrsa -des3 -passout file:yourpass.enc -out ca.key 4096\n</code></pre></li> </ul> </li> <li>Verify your private key <pre><code>openssl rsa -noout -text -in ca.key -passin file:yourpass.enc\n</code></pre></li> </ul>"},{"location":"tux/certificates/certificate_authority.html#step-3-create-certificate-authority-ca-certificate","title":"Step 3: Create Certificate Authority (CA) Certificate","text":"<ul> <li>Run the following command and answer the questions. <pre><code>openssl req -new -x509 -days 3650 -key ca.key -out ca.cert.pem -passin file:yourpass.enc\n</code></pre></li> <li>This is NOT your App/Server/Webserver certificate, this is your Authority\u2019s Certificate, so answer as an authority. My Example Answers<pre><code>Country Name (2 letter code) [AU]:US\nState or Province Name (full name) [Some-State]:California\nLocality Name (eg, city) []:Eureka\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:College of the Redwoods\nOrganizational Unit Name (eg, section) []:Computer Information Systems\nCommon Name (e.g. server FQDN or YOUR name) []:Trevor Hartman\nEmail Address []:trevor-hartman@redwoods.edu\n</code></pre></li> <li>Verify your created CA certificate <pre><code>openssl x509 -noout -text -in ca.cert.pem\n</code></pre></li> </ul>"},{"location":"tux/certificates/certificate_authority.html#step-4-generate-an-appserver-key-and-certificate-signing-requests-csr","title":"Step 4: Generate an App/Server Key and Certificate Signing Requests (CSR)","text":"<ul> <li>Create your App/Server/Webserver private key<ul> <li>NOTE: Here I created a new servpass.enc encrypted pass-file (i.e. a different encryptiong password) because the server key is usually for a different person and you don\u2019t want it to be the same as your CA password. <pre><code>openssl genrsa -aes256 -passout file:servpass.enc -out server.key 4096\n# OR\nopenssl genrsa -des3 -passout file:servpass.enc -out server.key 4096\n</code></pre></li> </ul> </li> <li>Verify your App/Server key <pre><code>openssl rsa -noout -text -in server.key -passin file:servpass.enc\n</code></pre></li> <li>Create your certificate signing request (CSR)<ul> <li>You sign the CSR with your server.key to prove your ownership of the key and request.</li> <li>When answering the Common Name (CN) question, put your FQDN or IP that will match your DNS entries. <pre><code>openssl req -new -key server.key -out server.csr -passin file:servpass.enc\n</code></pre> Example Answers to CSR<pre><code>Country Name (2 letter code) [AU]:US\nState or Province Name (full name) [Some-State]:California\nLocality Name (eg, city) []:Eureka\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:College of the Redwoods\nOrganizational Unit Name (eg, section) []:Computer Information Systems\nCommon Name (e.g. server FQDN or YOUR name) []:192.168.20.10\nEmail Address []:trevor-hartman@redwoods.edu\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []:\nAn optional company name []:\n</code></pre></li> </ul> </li> <li>Verify your certificate signing request (CSR) <pre><code>openssl req -noout -text -in server.csr\n</code></pre></li> </ul>"},{"location":"tux/certificates/certificate_authority.html#step-5-use-your-ca-to-sign-your-csr","title":"Step 5: Use Your CA to Sign your CSR","text":"<ul> <li>Issue server.crt by signing server.csr with your root certificate ca.cert.pem and ca.key<ul> <li>-CAcreateserial sets a serial number for this certificate if we wish to keep track of issued certificates in a database. <pre><code>openssl x509 -req -days 3650 -in server.csr -CA ca.cert.pem -CAkey ca.key -CAcreateserial -out server.crt -passin file:yourpass.enc\n</code></pre></li> </ul> </li> <li>Verify your signed server certificate <pre><code>openssl x509 -noout -text -in server.crt\n</code></pre></li> </ul>"},{"location":"tux/certificates/certificate_authority.html#step-6-trust-your-ca","title":"Step 6: Trust your CA!!!","text":"<ul> <li>Since this is a self-genterated Certificate Authority and therefore technically a self-signed server.crt by that self-signed-CA, you will need to download and trust your CA certificate in any device you wish to use the server.crt with to avoid SSL Certificate Errors.</li> </ul>"},{"location":"vim/cheat-sheet.html","title":"Cheatsheet","text":""},{"location":"vim/cheat-sheet.html#vim-cheatsheet","title":"Vim Cheatsheet","text":""},{"location":"vim/cheat-sheet.html#comment","title":"Comment","text":"<p>Go the vim way. Start by only using hjkl to move the cursor.</p>"},{"location":"vim/cheat-sheet.html#help","title":"Help","text":"<pre><code>    www.vimdoc.sourceforge.net\n</code></pre>"},{"location":"vim/cheat-sheet.html#starting-up","title":"Starting Up","text":"<pre><code>    vim {filename}\n    vim {filename} +n       Open {filename} and position the cursor on line n.\n    vim *.txt\n</code></pre>"},{"location":"vim/cheat-sheet.html#modes","title":"Modes","text":"<ul> <li>Normal</li> <li>Insert</li> <li>Insert-Normal (Use command, then return to Insert mode.)</li> <li>Operator-Pending</li> </ul> Note <p>Below, the dash \u201c-\u201d between buttons signals holding the first button, then pressing the second.</p>"},{"location":"vim/cheat-sheet.html#getting-help","title":"Getting Help","text":"<pre><code>    vimtutor\n    :help\n</code></pre>"},{"location":"vim/cheat-sheet.html#fundamentals","title":"Fundamentals","text":"<pre><code>    .                               Repeat the last command. (Includes text insertion in insert mode.) \n    i                               Enter insert mode.\n    I                               Enter insert mode at the beginning of the line.\n    a                               Enter insert mode one character beyond the cursor.\n    A                               Enter insert mode at the end of the line.\n    Esc                             Exit insert mode.\n    s                               Delete the character under the cursor and enter insert mode.\n    J\n</code></pre>"},{"location":"vim/cheat-sheet.html#moving-through-text","title":"Moving through text","text":"<pre><code>    h, j, k, l                      Move right, down, up, or right (real lines).\n    gj, gk                          Move down or up display lines.\n    0, g0                           Move to the first character of the real (, display) line.\n    ^, g^                           Move to the first non-blank character of the real (, display) line.\n    $, g$                           Move to the end of the real (, display) line.\n    w, b                            Move to the front (, back) of the next (or current/previous) word.\n    e, ge                           Move to the back of the current/next word (, previous word).\n    W, B                            Move to the front (, back) of the next (or current/previous) WORD.\n    E, gE                           Move to the back of the current/next WORD (, previous WORD).\n    :jump                           Inspect the contents of the jump list (for &lt;ctrl-o&gt;, &lt;ctrl-i&gt;).\n    &lt;ctrl-o&gt;                        Move back through the breadcrumbs. Will jump through buffers.\n    &lt;ctrl-i&gt;                        Move forward through the breadcrumbs.\n    &lt;ctrl-b&gt;, &lt;ctrl-u&gt;              Page Up.\n    &lt;ctrl-f&gt;, &lt;ctrl-d&gt;              Page Down.\n    &lt;number&gt;|                       Move to column &lt;number&gt;.\n</code></pre>"},{"location":"vim/cheat-sheet.html#jumps-moving-through-text-and-files","title":"Jumps (Moving through text and files\u2026)","text":"Jumps: Command Effect [count]G Jump to line number. //patern/?pattern/n/N Jump to the next (previous) occurrence of pattern. % Jump from matched brace (),{},[] to another (front-back). (/) Jump to start of previous/next sentence. {/} Jump to start of previous/next paragraph. H/M/L Jump to top/middle/bottom of screen. gf Jump to file name under the cursor. Jump to the definition of keyword under the cursor. (What!?) \u2018{mark}/`{mark} Jump to a mark (more on this elsewhere\u2026)"},{"location":"vim/cheat-sheet.html#modify-jump-to-file","title":"Modify Jump to File","text":"<pre><code>    :set suffixesadd+=.rb           Etc. Add the specified extension and vim will try to use them with gf.\n</code></pre>"},{"location":"vim/cheat-sheet.html#changes-moving-through-them","title":"Changes (Moving through them\u2026)","text":"<pre><code>    :changes                        List the changes.\n    g; / g,                         Traverse the change list (back / forwards).\n    `.                              Jumps to the location of the last change (see more under Automatic Marks).\n    `^                              Jumps to the last insertion.\n    gi                              Move to last insertion point and enter insert mode.\n</code></pre>"},{"location":"vim/cheat-sheet.html#searching","title":"Searching","text":"<pre><code>    /{pattern}                      Search forward in the buffer for {pattern}.\n    ?{pattern}                      Search backwards in the buffer for pattern.\n    n                               Repeat the search going \"forward\" (in the expected direction)..\n    N                               Repeat the search with direction reversed.\n    /&lt;cr&gt;                           Jump forward to the next match of pattern (don't preserve direction or offset).\n    ?&lt;cr&gt;                           Jump backward to the next match of pattern (don't preserve direction or offset).\n    f&lt;char&gt;                         Search for the next instance of character &lt;char&gt;.\n    ;                               Repeat the last search \"f\" performed.\n    ,                               Reverse the last character search command.\n    F&lt;char&gt;                         Search backwards through the text for the next instance of &lt;char&gt;.\n    t&lt;char&gt;                         Search forward to the next character before the next occurrence of &lt;char&gt;.\n    T&lt;char&gt;                         Search backward to the character after the previous occurrence of &lt;char&gt;.\n    *                               Place the cursor on the word you want to search for (repeats of).\n    :set ignorecase                 Turn on case-insensitive search.\n    \\c                              Ignore case in *this* search (regardless of set setting). (Put anywhere in search term.)\n    \\C                              Use case in *this* search(regardless of set setting). (Put anywhere in search term.)\n    :set smartcase                  Ignore case in the search by default unless we include a capital letter in the search.\n    /#\\([0-9a-fA-F]\\{6}\\)           Search for six consecutive hexadecimal numbers preceeded by a # sign. (Optionally also escape the closing }).\n    /\\v                             Active the \"very magic search switch.\" (All characters assume special meaning except _, a-zA-Z0-9.\n    /\\v#([0-9a-fA-F]{6})            Search for six consecutive hexadecimal numbers preceeded by a # sign. \n    /\\v#(\\x{6}|\\x{3})               Search for six or three consecutive hexadecimal numbers (w/ hex character class) preceeded by a # sign. \n    /\\V                             Activate the \"very nonmagic\" search switch. (All characters except \\ lose special meaning - literal search.)\n    ?\\V                             Activate the \"very nonmagic\" search switch. (All characters except \\ and ? lose special meaning - literal search.)\n    /\\v&lt;word&gt;                       Use &lt;&gt; to mark the boundaries of a word (e.g., search for \"the\" and not \"these\", etc.).\n    :nohlsearch                     Unlike :set nohlsearch or :set hls!, this turns of highlighting until the next search is performed. (:noh)\n    &lt;ctrl-r&gt; &lt;ctrl-w&gt;               Autocomplete search field using remainder of highlighted selection (when :set incsearch is active).\n    /{pattern}/e                    Position the cursor at the end of the pattern when searching (default is the beginning).\n    //e                             Anchor the next search of a previous pattern to the end (no need to have /e'd initially). Can be used as a motion.\n    &lt;ctrl-r&gt; /                      Paste the contents of the last search register in place (insert mode, command line mode).\n    :let @/='Pragmatic Vim'         Set the last search register to 'Pragmatic Vim'.\n</code></pre>"},{"location":"vim/cheat-sheet.html#substitution","title":"Substitution","text":"<pre><code>    :s/{pat1}/{pat2}/               Substitute the first instance of {pat1} with {pat2} on the current line.\n    :s/{pat1}/{pat2}/g              Substitute all instances of {pat1} with {pat2} in the current line.\n    :[range]s/{pat1}/{pat2}/g       Substitute all instances of {pat1} with {pat2} over the specifiec range of lines.\n    :33,34s/aa/ab/gc                Replace aa with ab on lines 33 and 34.\n    g&amp;                              Repeat the last substitution over the entire file.\n    :%s/{pat1}/{pat2}/gc            Search and replace pat1 with pat2 and prompt each time over the whole file.\n    :%s/{pat1}/&lt;ctrl-{register}&gt;/   Search and replace pat1 with the contents of register {register}.\n    :%s/{pat1}/\\=@{register}/       Use the contents of register {register}, passing the contents by value. (e.g. @0 for the yank register, @\" for default)\n    :%s//{string}/gc                Search and replace using the last match.\n    :%s///gn                        Count the number of matches of the last search pattern used, don't do anything (n suppression).\n    :&amp;&amp;                             Replay the last substitution over the current line.\n    :%&amp;&amp;                            Repeat the last substitution over the entire file (longer g&amp;).\n    :'&lt;,'&gt;&amp;&amp;                        Replay the last substitution over the visually selected range (get '&lt;,'&gt; automatically with : from visual mode).\n</code></pre>"},{"location":"vim/cheat-sheet.html#special-characters-in-substitution-command-replacement-strings","title":"Special Characters in Substitution Command Replacement Strings","text":"<pre><code>    Symbol                          Represents\n    ------                          ----------\n    \\r                              Carriage return.\n    \\t                              Tab.\n    \\\\                              Backslash.\n    \\1                              Insert the first submatch.\n    \\2                              Insert the second submatch (and so on, up to \\9).\n    \\0                              Insert the entire matched pattern.\n    &amp;                               Insert the entire matched pattern.\n    ~                               Use {string} from previous substitute.\n    \\={Vim script}                  Evaluate {Vim script} expression, use the reult as the replacement {string}.\n</code></pre>"},{"location":"vim/cheat-sheet.html#editing-in-replace-mode","title":"Editing in Replace Mode","text":"<pre><code>    R                               Enter replace mode.\n    &lt;insert&gt;                        Also may use the insert key to enter replace mode (if present).\n    gR                              Virtual replace mode (treats tab stops as though they were a single space).\n    r{char}                         Replace a single character.\n    gr{char}                        Replace a single character in virtual mode.\n    Vr-                             Select a line and replace all the characters with \"-\"\n</code></pre>"},{"location":"vim/cheat-sheet.html#mark-text","title":"Mark Text","text":"<pre><code>    m{a-zA-Z}                       Lower case letters mark only the buffer, uppercase are global (across all buffers).\n    '{mark}                         Jump to the line where the mark was set.\n    `{mark}                         Jump to the exact point the mark was set.\n</code></pre>"},{"location":"vim/cheat-sheet.html#automatic-marks","title":"Automatic Marks","text":"<pre><code>    Keystrokes                      Buffer Positions\n    ----------                      ----------------\n    ''                              Position before the last jump within current file.\n    '.                              Location of last change (beginning of line).\n    '^                              Location of last insertion (beginning of line).\n    '[                              Start of last change or yank.\n    ']                              End of last change or yank.\n    '&lt;                              Start of last visual selection.\n    '&gt;                              End of last visual selection.\n</code></pre>"},{"location":"vim/cheat-sheet.html#repeatable-and-reversible-actions","title":"Repeatable and Reversible Actions","text":"<pre><code>    Intent                          Act                     Repeat      Reverse\n    ------                          ---                     ------      -------\n    Make a change.                  Edit                    .           u\n    Scan line for next.             f{char}/t{char}         ;           ,\n    Scan line for previous.         F{char}/T{char}         ;           ,\n    Scan document for next.         /{pattern}&lt;CR&gt;          n           N\n    Scan document for previous.     ?{pattern}&lt;CR&gt;          n           N\n    Perform substituion.            :s/target/replacement   &amp;           u\n    Execute a sequence of changes.  qx{changes}q            @x          u\n</code></pre>"},{"location":"vim/cheat-sheet.html#run-commands-in-the-shell","title":"Run Commands in the Shell","text":"<pre><code>    :!                          Access the shell.\n    :!ls                        Run ls in the shell. (Note, :ls shows the contents of the buffer list.)\n    %                           On vim's command line, this is short hand for the current filename. \n    :!ruby %                    Runs the current (ruby) file being edited.\n    :shell                      Start an interactive shell session inside vim. (Use \"exit\" to return to vim.)\n    :read !{cmd}                Put the output of cmd into the current buffer.\n    :write !{cmd}               Use the current buffer as input for cmd.\n    :write {file}               Write the current buffer into {file}.\n    :write! {file}              Write the current buffer into {file} and overwrite the contents. Watch the ! placement!\n    :[range]!{cmd}              Pass the lines in range to cmd and replace the range with the output of cmd.\n    :!mkdir -p %:h              Make all the directories needed to write a file into its current path.\n</code></pre>"},{"location":"vim/cheat-sheet.html#working-with-files","title":"Working with Files","text":"<pre><code>    :cd {path}                  Change vim's working directory.\n    :pwd                        Show vim's present working directory.\n    :edit {filename}            Open a file into the buffer for editing.\n    :edit!                      Re-read the current file into the buffer and discard exisitng changes. (:e!)\n    :edit %&lt;tab&gt;                % is a short-hand for the active buffer filepath.\n    :edit %:h&lt;tab&gt;              The :h modifier removes the filename while preserving the rest of the path.\n    :find {file}                Open a file by name without a fully qualified path. (&lt;tab&gt; completion is available.)\n    :set path+={dir}/**         Add a directory to the vim \"$PATH\". (** matches all subdirectories below {dir})\n    :set path?                  Inspect the value of the path.\n</code></pre>"},{"location":"vim/cheat-sheet.html#write-changes-from-a-buffer-to-a-file","title":"Write Changes from a Buffer to a File","text":"<pre><code>    :write                                ZZ will also write and close.\n    :update\n    :saveas\n    :w !sudo tee % &gt; /dev/null            Write the current buffer as the super-user. (% expands to the path of the current buffer.)\n</code></pre>"},{"location":"vim/cheat-sheet.html#manipulate-file-buffers","title":"Manipulate File Buffers","text":"<pre><code>    :ls                                   List the files.\n    :bnext                                Switch to the next buffer. (:bn) \n    :bprev                                Switch to the previous buffer. (:bp)\n    :bfirst                               Move to the first buffer. (:bf)\n    :blast                                Move to the last buffer. (:bl)\n    :buffer N                             Move to buffer N (:ls shows the buffer numbers). (:buf N)\n    :buffer {buffname}                    Move to the buffer with name {buffname} (shown by :ls, no need for \" characters).\n    &lt;ctrl-^&gt;                              Toggle between the current and alternate buffers.\n    :bufdo                                Run an Ex command on all the buffers.\n    :bdelete N1 N2                        Delete buffers numbered N1 and N2.\n    :N, M bdelete                         Delete buffers numbered N through M (this has no effect on the associated file).\n    :5,10bd                               e.g, Delete buffers numbered 5 through 10.\n    :args                                 List of files used to launch vim. (well, more than that actually...)\n    :args {arglist}                       Populate the arguments list. (e.g., vim, followed by :args {file1} {file2}). Accepts wildcards.\n    :args **/*.*                          * is a 0 or more character wildcard. So is **, but it can recurse downward into directories below.\n    :args **/*.js **/*.css                Just get all the JavaScript and CSS, etc.\n    :args `cat .chapters`                 Use shell expansion inside the backticks.\n    :next                                 Move through the argument list.\n    :prev                                 Move through the argument list.\n    :argdo                                Execute the same command on every buffer in the set.\n    :argdo %s//{pat1}/ge                  Substitute the last search match with {pat1} in all of \"argslist\" across the whole files, suppressing error messages.\n    :argdo update                         Save every file, but only if it has been changed.\n</code></pre>"},{"location":"vim/cheat-sheet.html#managing-hidden-files","title":"Managing Hidden Files","text":"<pre><code>    :ls                                                                                                                      \n      1 %a + \"a.txt\"                        line 17   # &lt;- \"+\" &lt;- Modified.\n      2      \"b.txt\"                        line 0\n    :bn!\n    :ls\n      1 #h + \"a.txt\"                        line 17   # &lt;- \"h\" &lt;- Hidden file.\n      2 %a   \"b.txt\"                        line 1\n</code></pre>"},{"location":"vim/cheat-sheet.html#working-with-the-filesystem","title":"Working with the Filesystem","text":"<pre><code>    vim .                                   Open a filesystem browser in the current directory.\n    k,j &lt;cr&gt;                                Navigate vim's representation of the filesystem, open the selected file.\n    :edit {path - directory name}           Open a filesystem browser in the specified directory. (always recall \":edit .\" or \":e.\")\n    :edit %:h                               Open a filesystem browser in the directory of the current file.\n    :Explore\n    netrw-%                                 Create new files. (% in netrw, etc.)\n    netrw-d                                 Create new directories.\n    netrw-rename                            Rename a file.\n    netrw-del                               Delete a file.\n</code></pre>"},{"location":"vim/cheat-sheet.html#split-windows","title":"Split Windows","text":"<pre><code>    &lt;ctrl-w&gt; s                              Split windows horizontally.\n    &lt;ctrl-w&gt; v                              Split windows vertically.\n    &lt;ctrl-w&gt; {s/v} :edit {filename}         Create a split and edit.\n    :split {filename}                       Combo - create a split and edit. (Horizontal.) (:sp {file})\n    :vsplit {filename}                      Combo - create a split and edit. (Vertical.) (:vsp {file})\n    &lt;ctrl-w&gt; w                              Cycle focus between open windows. Also, &lt;ctrl-w&gt; &lt;ctrl-w&gt; (ctrl-\"ww\").\n    &lt;ctrl-w&gt; h                              shift focus to the left.\n    &lt;ctrl-w&gt; j                              shift focus below.\n    &lt;ctrl-w&gt; k                              shift focus above.\n    &lt;ctrl-w&gt; l                              shift focus to the right.\n    :close                                  Close the active window. (:cl), Also &lt;ctrl-w&gt; c\n    :only                                   Keep only the active window. (:on), Also &lt;ctrl-w&gt; o\n    &lt;ctrl-w&gt; =                              Equalize width and height of all windows.\n    &lt;ctrl-w&gt; _                              Maximize height of active window.\n    &lt;ctrl-w&gt; |                              Maximize width of active window.\n    [N]&lt;ctrl-w&gt;                             Set active window height to N rows.\n    [N]&lt;ctrl-|&gt;                             Set active window width to N columns.\n    [ Look up more details on window-moving in the help and check Vim-casts.org ]\n</code></pre>"},{"location":"vim/cheat-sheet.html#tabs","title":"Tabs","text":"<pre><code>    :lcd {path}                             Set up the working directory locally for the current window.\n    :windo lcd {path}                       Set up the working directory locally all windows in a tab. \n    :tabedit {filename}                     Open a tab with file {filename}. (:tabe {filename})\n    &lt;ctrl-w&gt; T                              Move the current window into its own tab.\n    :tabclose                               Close the current tab and all of its windows. (:tabc)\n    :tabonly                                Keep only the current tab and all of its windows.\n    [N]gt                                   Go to tab N.\n    :tabnext {N}                            Switch to tab N. (:tabn {N})\n    gt                                      Next tab.\n    :tabnext                                Next tab. (:tabn)\n    gT                                      Previous tab.\n    :tabprevious                            Previous tab. (:tabp)\n</code></pre>"},{"location":"vim/cheat-sheet.html#switch-to-normal-mode-from-insert-mode","title":"Switch to Normal Mode from Insert Mode","text":"<pre><code>    &lt;esc&gt;\n    &lt;ctrl-[&gt;\n</code></pre>"},{"location":"vim/cheat-sheet.html#switch-to-insert-normal-mode-from-insert-mode","title":"Switch to Insert-Normal Mode from Insert Mode","text":"<pre><code>    &lt;ctrl-o&gt;\n</code></pre>"},{"location":"vim/cheat-sheet.html#switch-to-visual-mode","title":"Switch to Visual Mode","text":"<pre><code>    v                       Enable character-wise visual mode. (And return to normal mode - toggle.)\n    &lt;ctrl-g&gt;                Enter Select Mode from visual mode.\n    V                       Enter line-wise visual mode.\n    &lt;ctrl-v&gt;                Enter block-wise visual mode.\n    o                       Go to the other end of highlighted text.\n</code></pre>"},{"location":"vim/cheat-sheet.html#selection-in-visual-mode","title":"Selection in Visual Mode","text":"<pre><code>    gv                      Reselect the last visual selection.\n    vit                     Select inside a tag (e.g., (cursor here-&gt;)&lt;a&gt;select me&lt;/a&gt;) on a line.\n</code></pre>"},{"location":"vim/cheat-sheet.html#using-a-visual-operator","title":"Using a Visual Operator","text":"<pre><code>    vU                      Make the selection uppercase.\n    vu                      Make the selection lowercase.\n</code></pre>"},{"location":"vim/cheat-sheet.html#delimited-text-objects-begin-and-end-with-matching-symbols","title":"Delimited Text Objects (Begin and end with matching symbols.","text":"<pre><code>    v&lt;text object&gt;          Enter visual mode and use the following to make a selction of...\n    Remember, text objects can be {motion}s.\n    a) or ab                A pair of (parentheses).\n    i) or ib                Inside of (parentheses).\n    a} or aB                A pair of {braces}.\n    i} or iB                Inside of {braces}.\n    a]                      A pair of [brackets].\n    i]                      Inside of [brackets].\n    a&gt;                      A pair of &lt;angle brackets&gt;.\n    i&gt;                      Inside of &lt;angle brackets&gt;.\n    a'                      A pair of 'single quotes'.\n    i'                      Inside of 'single quotes'.\n    a\"                      A pair of \"double quotes\".\n    i\"                      Inside a pair of \"double quotes\".\n    at                      A pair of &lt;xml&gt;tags&lt;/xml&gt;.\n    it                      Inside a of &lt;xml&gt;tags&lt;/xml&gt;.\n</code></pre>"},{"location":"vim/cheat-sheet.html#bounded-text-objects-defined-by-boundaries","title":"Bounded Text Objects (Defined by boundaries.)","text":"<pre><code>    Remember, text objects can be {motion}s.\n    iw                      Current word.\n    aw                      Current word plus one space.\n    iW                      Current WORD.\n    aW                      Current WORD plus one space.\n    is                      Current sentence.\n    as                      Current sentence plus one space.\n    ip                      Current paragraph.\n    ap                      Current paragraph plus one blank line.\n</code></pre>"},{"location":"vim/cheat-sheet.html#command-line-mode","title":"Command Line Mode","text":"<pre><code>    :                       Enter the Ex Command mode.\n    /                       Enter the pattern search mode.\n    &lt;ctrl-r&gt; &lt;ctrl-w&gt;       Insert the word under the cursor.\n    *                       /\\&lt;&lt;ctrl-r&gt; &lt;ctrl-w&gt;\\&gt;&lt;cr&gt;\n    /&lt;ctrl-r&gt; &lt;ctrl-w&gt;       Search for the word under the cursor.\n</code></pre>"},{"location":"vim/cheat-sheet.html#command-line-window","title":"Command Line Window","text":"<pre><code>    q:                      Bring up the window with a history of the Ex commands.\n    k, j                    Scroll through the command line window.\n    &lt;cr&gt;                    Execute the contents of the current line.\n    q/                      Bring up the window with a history of searches.\n    &lt;ctrl-f&gt;                Switch from the command line mode to the command line window.\n</code></pre>"},{"location":"vim/cheat-sheet.html#operators","title":"Operators","text":"<pre><code>    &gt;                       Shift (the line?) right.\n    &lt;                       Shift (the line?) left.\n    gUit                    Select text inside a tag and shift it to uppercase (tip 23).\n</code></pre>"},{"location":"vim/cheat-sheet.html#indentation","title":"Indentation","text":"<pre><code>    &gt;                       Indent the line (or visually selected text).\n    2&gt;                      Indent the line twice (3&gt; for three times, etc.).\n    &gt;G                      Increase indentation from here to the end of the file.\n    =G                      Autoindet from here to the end of the file.\n    ==                      Indent current line.\n</code></pre>"},{"location":"vim/cheat-sheet.html#editing","title":"Editing","text":"<pre><code>    s                       Remove the character under the cursor and enter insert mode.\n    c{motion}               Remove text and enter insert mode. $, l, w\n    ciw                     Remove the current word and enter insert mode.\n    u                       Undo the last change.\n    U                       Undo all changes to the line.\n    &lt;ctrl-r&gt;                Re-do the last undo.\n    daw                     Delete a word (cursor may be located anywhere within the word).\n    dap                     Delete a paragraph.\n    d{motion}               Delete. (Power move, especially with / search.)\n    ~                       Toggle case of the character under the cursor or all visually selected text.\n    g~                      Swap case. (requires motion?)\n    gu                      Make lower case. (requires motion?) guaw = convert a word, guap = paragraph \n    gU                      Make upper case. (requires motion?) gUaw = CONVERT a word, gUap = paragraph, gUgU converts a line.\n</code></pre>"},{"location":"vim/cheat-sheet.html#deleting-c-instead-of-d-to-enter-insert-after-the-edit","title":"Deleting (c instead of d to enter insert after the edit).","text":"<pre><code>    dh / x                  Delete one character backwards.\n    dl / X                  Delete one character forwards.\n    db                      Delete one word backwards.\n    dw                      Delete one word forwards.\n    dB                      Delete one non-blank word backwards.\n    dW                      Delete one non-blank word forwards.\n    d$ / D                  Delete to the end of the line.\n    d0                      Delete to the beginning of the line.\n    0d$ / dd                Delete the line.\n</code></pre>"},{"location":"vim/cheat-sheet.html#editing-in-insert-mode","title":"Editing In Insert Mode","text":"<pre><code>    &lt;ctrl-h&gt;                Delete back one character.\n    &lt;ctrl-w&gt;                Delete back one word.\n    &lt;ctrl-u&gt;                Delete back to the start of the line.\n    &lt;ctrl-r&gt; N              Paste from register N. (Press and hold ctrl-r, then release, then press the number.)\n    &lt;ctrl-r&gt; &lt;ctrl-p&gt; N     Smarter paste from register N.\n    &lt;ctrl-v&gt; Code           Enter a unicode character (expect 3 digits).\n    &lt;ctrl-v&gt; u{Code}        Enter an arbitrary code (e.g., u00bf = \u00bf).\n    &lt;ctrl-v&gt; {nondigit}     Enter a nondigit literally (e.g., a literal tab instead of spaces in case exapandtab is active).\n    &lt;ctrl-k&gt; {char1}{char2} Enter a unicode character via digraph, e.g. &lt;ctrl-k&gt; ?I = \u00bf. View a list of digraphs with :digraphs\n</code></pre>"},{"location":"vim/cheat-sheet.html#using-the-expression-register","title":"Using the Expression Register","text":"<pre><code>    &lt;ctrl-r&gt; =              In insert mode.\n</code></pre>"},{"location":"vim/cheat-sheet.html#copying-cutting-and-pasting-yanking-deleting-and-putting","title":"Copying, Cutting, and Pasting (Yanking, Deleting, and Putting)","text":"<pre><code>    Regisers are [a..z] for overwriting and [A..Z] for appending.\n    The system clipboard is \"+ (X11 at least).\n    \"{register}             Prefix to specify the register for holding the yank/delete. Defaults to unnamed (\"). \n    :reg                    Examine the contents of the registers.\n    :reg \"0                 Examine the contents of the yank register. (Also shows the contents of \"\" (unnamed).)\n    y{motion}               Copy (? ... $, l, w) into the unnamed register. Also copy into the yank register (\"0)!\n    yiw                     Copy a word.\n    yi[                     Copy everything inside the [] braces (cursor should be inside the []).\n    yy                      Copy a line.\n    yyp                     Copy a line and put it (immediately below the current line).\n    yt,                     Copy to the next comma.\n    y$                      Copy to the end of the line.\n    p                       Paste (removed with x, copied with y, for example) after the cursor position.\n    P                       Paste (removed with x, copied with y, for example) before the cursor position.\n    puP / Pup               Paste the other way when you get it wrong...\n    \"\"p                     Paste from the unnamed register (\"\"p == p).\n    \"ap                     Paste from register a.\n    \"0p                     Paste from the yank register (may also be equivalent to the unnamed or another register).\n    xp                      Cut and paste a character - effectively transpose two characters.  \n    diw                     Cut a word.\n    dd                      Cut a line.\n    ddp                     Cut and paste a line (one below the current line) - effectively transpose two lines.\n    v{selection}p           Swap the highlighted portion in visual mode with the contents of (the unnamed) register, and vice versa.\n    \"{register}v{sel}p      Swap the highlighted portion in visual mode with the contents of the register, and vice versa.\n    &lt;ctrl-r&gt;{register}      Insert Mode: Paste from register {register}. (Recall &lt;ctrl-r\"&gt; to get the unnamed!) Useful with Ex commands too!\n</code></pre>"},{"location":"vim/cheat-sheet.html#default-registers","title":"Default Registers","text":"<pre><code>    \"=                      Expression Register\n    \"%                      Name of current file.\n    \"#                      Name of alternate file.\n    \".                      Last inserted text.\n    \":                      Last Ex command.\n    \"/                      Last search pattern (can be set explicitly with :let ).\n</code></pre>"},{"location":"vim/cheat-sheet.html#addition","title":"Addition","text":"<pre><code>    N &lt;ctrl-a&gt;                                      Add N to the next number on the line, e.g. 10 -&gt; 20\n    N &lt;ctrl-x&gt;                                      Subtract N from the next number on the line, e.g., 30 -&gt; 20\n</code></pre>"},{"location":"vim/cheat-sheet.html#compound-commands","title":"Compound Commands","text":"<pre><code>    A           $a\n    C           c$\n    s           cl\n    S           ^C\n    I           ^i\n    o           A&lt;CR&gt;                               # Leverage undo power by finishing lines with {stop} &lt;esc&gt; o\n    O           ko\n</code></pre>"},{"location":"vim/cheat-sheet.html#screen-redraw","title":"Screen Redraw","text":"<pre><code>    zz                                              Redraw the screen with the cursor position in the vertical center of the page.\n    z.                                              Redraw the screen with the cursor position in the vertical center of the page.\n    zt                                              Redraw the screen with the cursor position at the top of the page.\n    &lt;ctrl-l&gt;                                        Clear and redraw the screen.\n</code></pre>"},{"location":"vim/cheat-sheet.html#ex-commands","title":"Ex Commands","text":"<pre><code>    &lt;ctrl-d&gt;                                        Offer autocompletion suggestions. Tab to cycle through them.\n    :colorscheme &lt;ctrl-d&gt;                           Show all the colorscheme options (tab to cycle through).\n    :help ex-cmd-index                              See the ex-cmd-index for the full list of commands.\n    :{N}                                            Jump to line N.\n    :$                                              Go to the end of the file.\n    :print                                          Print the line. (Abbreviate with :p)\n    :2,5p                                           Print lines 2 to 5. (.,$p prints from the current line to EOF).\n    :%p                                             Print all the lines in the file.\n    :/{pattern1}/+1,/{pattern2}/-1p                 Print all lines between, but not including, those matching patterns 1 &amp; 2.\n    :[range]delete[x]                               Delete specified lines into register x. (e.g., :3d deletes line 3).\n    :[range]yank[x]                                 Yank specified lines into register x.\n    :[line]put[x]                                   Put the text from reigster x after the specified line.\n    :[range]copy{address}                           Copy the specified lines to below the line specified by {address}. \n    :6copy.                                         Copy line 6 to below the current line.\n    :6t.                                            Copy line 6 to below the current line. ( t == copy )\n    :t.                                             Duplicate the current line without using a register (yyp uses a register).\n    :[range]move{address}                           Move the specified lines to below the line specified by {address}. ( abbrev m )\n    :[range]join                                    Join the specified lines.\n    :[range]normal{commands}                        Execute normal mode {commands} on each specified line.\n    :[range]substitute/{pattern}/{string}/[flags]   Replace {pattern} with {string} on the specified lines. (:[range]s/{pattern}/{string}/[flags])\n    :%s/{pattern}/{string}/[flags]                  Do the substitution over the entire file, looking for pattern, etc.\n    :%s/{pattern}/{string}/[flags={g,c,n,&amp;}]        Flags: g=global (all in a line), c=confirm, n=no subs, report number, &amp;=reuse flags from last \"s\"\n    :[range]global/{pattern}/[cmd]                  Execute Ex [cmd] on all specified lines with a {pattern} match.\n    :qall!                                          Quit and discard all unsaved changes in all open buffers.\n    :wall                                           Write all modified buffers to disk. (:wa)\n    :write\n    :wnext                                          Write, followed by \"next.\"\n    :tabnew\n    :split\n    :prev/:next\n    :bprev/:bnext\n    @:                                              Repeat the last Ex command.\n    :normal &lt;cmd&gt;                                   For each selected line, execute the normal mode command &lt;cmd&gt;. (jVG :normal .)\n    :%normal A;                                     Select all modes and run normal \"A;\" (append a semicolon to every line).\n    :%normal i//                                    Comment out every line (.js or .cpp).                                  \n    :delete {register}                              Cut the current line into {register} \n    :yank {register}                                Copy the current line into {register} \n    :put {register}                                 Put the line from {register} \n    :edit!                                          Undo all changes (back to last save?).\n    :sort                                           Sort!\n</code></pre>"},{"location":"vim/cheat-sheet.html#global-commands","title":"Global Commands","text":"<pre><code>    :[range]global[!]/{pattern}/[cmd]               Execute an Ex command on each line that matches a pattern.\n    :[range]global[!]/{pattern}/[range][cmd]        Template is expandable...\n    :g/re/p                                         Print a regular expression globally. ^_^\n    :g/re/d                                         Delete all lines matching a regular expression globally. \n    :[range] vglobal /{pattern}/ [cmd]              Execute an Ex command on each line that doesn't match a pattern.\n    :v/re/d                                         Delete all lines NOT matching a regular expression globally. \n    :g/TODO/yank A                                  Copy all lines with TODO in them into register a (use upper case to append).\n    :g/{/ .+1,/}/-1 sort                            Sort all items between all braces {} in a bufer.\n</code></pre>"},{"location":"vim/cheat-sheet.html#macros","title":"Macros","text":"<pre><code>    q{register}                                     Start recording a macro to {register} (e.g. \"q\"). Lower-case to overwrite, upper case to append.\n    qq                                              Start recording into register q.\n    q                                               Stop recording.\n    qQ                                              Append additional commands to the macro in register \"q\".\n    q                                               Stop appending.\n    :reg {register}                                 Examine the macro in {register}. (Useful before appending.)\n    @{register}                                     Execute the macro in {register}.\n    @@                                              Execute the most recently *invoked* {register}.\n    N@{register}                                    Execute the macro in {register} N times.\n    :normal @{register}                             Apply the macro to every visually selected line of text (e.g. vG:normal @a)\n    :argdo normal @{register}                       Apply the macro to all open buffers. (Often lead with :edit! to undo file where we recorded the macro.)\n</code></pre>"},{"location":"vim/cheat-sheet.html#vim-script","title":"Vim Script","text":"<pre><code>    :let i=0                                        Assign 0 to i.\n    :echo i                                         Print i (not to the buffer).\n    :let i += 1                                     Increment i.\n    &lt;ctrl-r&gt; =i&lt;cr&gt;                                 Insert i into the buffer.\n    :let @a=substitute(@a, '\\~', 'vU', 'g')         Substitute text *inside* the register.\n</code></pre>"},{"location":"vim/cheat-sheet.html#tags","title":"Tags","text":"<pre><code>    &lt;ctrl-]&gt;                                        Jump to a definition.\n    &lt;ctrl-t&gt;                                        Jump back through the tag history.\n    g&lt;ctrl-]&gt;                                       See a list of definitions to jump to. (Then, number and &lt;CR&gt;.)\n    :tselect                                        Show the list of definitions to jump to again (need to &lt;ctrl-]&gt; first).\n    :tnext                                          Jump to the next match without showing a prompt.\n    :tprev, :tfirst, :tlast                         Jump to matches without a prompt.\n    :tag {keyword}                                  Acts like &lt;ctrl-]&gt;. {keyword} features tab completion.\n    :tjump {keyword}                                Acts like g&lt;ctrl-]&gt;.\n    :pop                                            Acts like &lt;ctrl-t&gt;.\n</code></pre>"},{"location":"vim/cheat-sheet.html#quickfix-list","title":"Quickfix List","text":"<pre><code>    :make                                           Run make in the shell where the buffer is.\n    :cnext                                          Jump to the next error from a make (next item in the Quickfix list).\n    :cprev, :cfirst, :clast                         Jump to an item in the Quickfix list.\n    :cnfile, :cpfile                                Jump to the first item in the next (previous) file.\n    :cc N                                           Jump to the nth item.\n    :copen, :cclose                                 Open/Close the Quickfix window.\n    :5cnext, :3cprev                                Jump with a count for the number of items.\n    :colder                                         Look at an older version of the Quickfix list (vim stores up to 10).\n    :cnewer                                         Look at a newer version of the Quickfix list.\n    :setlocal makeprg=gmake\\ acquire_data-lib    \n    :setlocal makeprg=cmt\\ make    \n    :setglobal errorformat?                         Check the error format put into the Quickfix list. - %f=filename, %l=line, %m=message\n    :setlocal efm={format}                          Set the format to handle errors vim doesn't know well.\n    :compiler cmt make                              Activte the compiler plugin (set makeprg and errorformat).\n    :args $VIMRUNTIME/compiler/*.vim                Look at the compiler plugins distributed with vim.\n</code></pre>"},{"location":"vim/cheat-sheet.html#location-list","title":"Location List","text":"<pre><code>    :lnext, :lprev, ...\n</code></pre>"},{"location":"vim/cheat-sheet.html#grepping-externally","title":"Grepping Externally","text":"<pre><code>    :grep {pattern} *                               Populate the Quickfix list with the search results (-n flag is automatically present).\n    :grepprg=\"grep -n $* /dev/null\"                 Set what :grep triggers in the external shell. (For example, call ack.)\n    :grepformat=\"%f:%l:%m,%f:%l%m,%f %l%m\"          Format the search results from the external grep triggered by :grep. (See errorformat for more.)\n    :vimgrep/{pattern}/[g][j] {file}                Use vim's built-in search engine (vim regex syntax). {File} cannot be blank. (* for any file in the directory.)\n    :vimgrep/{pattern}/**                           Search through all files in subdirectories recursvely. Navigate in quickfix (use :copen).\n    :vimgrep/{&lt;ctrl-r&gt;/}/**                         Paste the last search from the search register into the pattern for external searching.\n</code></pre>"},{"location":"vim/cheat-sheet.html#autocompletion","title":"Autocompletion","text":"<pre><code>    &lt;ctrl-p&gt; / &lt;ctrl-n&gt;                             From insert mode, to select the \"previous\" and \"next\" items.\n</code></pre>"},{"location":"vim/cheat-sheet.html#autocompletion-method-table","title":"Autocompletion Method Table","text":"<pre><code>    &lt;ctrl-n&gt;                                        Generic keywords (built from a partial word list using a document scan).\n    &lt;ctrl-x&gt;&lt;ctrl-n&gt;                                Current buffer keywords.\n    &lt;ctrl-x&gt;&lt;ctrl-i&gt;                                Included file keywords (e.g., #include (c,c++), import (ruby, python), etc.) (Tweak the 'include' setting.)\n    &lt;ctrl-x&gt;&lt;ctrl-]&gt;                                Included file keywords.\n    &lt;ctrl-x&gt;&lt;ctrl-]&gt;                                Tags file keywords.\n    &lt;ctrl-x&gt;&lt;ctrl-k&gt;                                Dictionary lookup - dictionary must be populated (best with :set spell).\n    &lt;ctrl-x&gt;&lt;ctrl-l&gt;                                Whole line completion (duplicate an existing line from elsewhere in the buffer - use a few chars to start).\n    &lt;ctrl-x&gt;&lt;ctrl-f&gt;                                Filename completion (uses :pwd, so :cd {path} to get a different set).\n    &lt;ctrl-x&gt;&lt;ctrl-o&gt;                                Omni completion (we need a plug-in for the language we're using, see compl-omni-filetypes).\n</code></pre>"},{"location":"vim/cheat-sheet.html#autocompletion-pop-up-menu","title":"Autocompletion Pop-up Menu","text":"<pre><code>    &lt;ctrl-n&gt;                                        Use the next match from the list.\n    &lt;ctrl-p&gt;                                        Use the previous match from the list.\n    &lt;down&gt;                                          Select the next match from the word list.\n    &lt;up&gt;                                            Select the previous match from the word list.\n    &lt;ctrl-y&gt;                                        Adopt the currently selected match.\n    &lt;ctrl-e&gt;                                        Revert to the originally typed text.\n    &lt;ctrl-h&gt; (and &lt;BS&gt;)                             Delete one character from the current match.\n    &lt;ctrl-l&gt;                                        Add one character from the current match.\n    {char}                                          Stop completion and insert {char}.\n</code></pre>"},{"location":"vim/cheat-sheet.html#autocompletion-source-material","title":"Autocompletion Source Material","text":"<pre><code>    :ls!                                            Look at the keywords in the buffer list. (???)\n    :set include?                                   Inspect included (e.g. header) files.\n    :set complete                                   Look at the list of \"locations\" included in the complete commands.\n    :set complete+=k                                Etc. See 'complete' documentation for the include lists and defaults.\n</code></pre>"},{"location":"vim/cheat-sheet.html#spelling","title":"Spelling","text":"<pre><code>    :set spell / :set nospell                       Show/hide spell checks.\n    [s / ]s                                         Skip back / forward through misspelled words.\n    z=                                              Show suggested spelling replacements.\n    zg                                              Add current word to spell file.\n    zw                                              Remove the current word from the spell file.\n    zug                                             Revert either zg or zw commands for the current word.\n    :set spelllang=en_us                            Also, en_au, en_ca, en_gb, en_nz (try =fr, will prompt for download, etc.)\n    &lt;ctrl-x&gt;s                                       Fix spelling from insert mode (:set spell must already be active).\n</code></pre>"},{"location":"vim/cheat-sheet.html#programming","title":"Programming","text":"<pre><code>    shift-k                                         Open man page for word under the cursor.\n</code></pre>"},{"location":"vim/cheat-sheet.html#recipes---find--replace-across-many-files","title":"Recipes - Find &amp; Replace Across Many Files","text":"<ol> <li>Fully populate the args list (all files).    <code>:args **/*.txt</code></li> <li>Enable navigation w/o saving.                <code>:set hidden</code></li> <li>Set the search pattern.                      <code>/Pragmatic\\ze Vim</code></li> <li>Replace with error suppression.              <code>:argdo %s//Practical/ge</code></li> </ol>"},{"location":"vim/cheat-sheet.html#recipes---clear-a-register","title":"Recipes - Clear a Register","text":"<ol> <li>Start and finish a macro with no steps.      <code>qaq</code></li> <li>Check the register (here - a).               <code>:reg a</code></li> </ol>"},{"location":"vim/cheat-sheet.html#recipes---sort-a-list","title":"Recipes - Sort a List","text":"<ol> <li>Select the block of items.                   <code>v{motion}</code></li> <li>Apply the sort (: brings up \u2018&lt;,\u2019&gt;)           <code>:sort</code></li> </ol>"},{"location":"vim/cheat-sheet.html#recipes---use-tags","title":"Recipes - Use Tags","text":"<ol> <li>Check to see tags options.                   <code>:set tags?</code></li> <li>Generate a tags file locally.                <code>:!ctags -R</code></li> <li>Ignore some noise\u2026 (etc.)                  <code>:!ctags -R --exclude=.git</code></li> <li>Shortcut to regenerate file.                 <code>:nnoremap &lt;f5&gt; :!ctags -R&lt;CR&gt;</code></li> <li>Set autocommand on save.                     <code>:autocmd BufWritePost * call system(\"ctags -R\")</code></li> </ol>"},{"location":"vim/cheat-sheet.html#recipes---use-ack-instead-of-grep-for-grep","title":"Recipes - Use ack instead of grep for :grep","text":"<ol> <li>Set a different :grepprg                     <code>:set grepprg=ack\\ --nogroup\\ --column\\ $*</code>     # May need ack-5.12 on my Mac\u2026</li> <li>Set the format.                              <code>:set grepformat=%f:%l:%c:%m</code>                   # %c to go to the column!</li> </ol>"},{"location":"vim/cheat-sheet.html#recipes---add-a-local-dictionary-for-project-jargon-spellings","title":"Recipes - Add a \u201clocal\u201d Dictionary for Project Jargon Spellings","text":"<ol> <li>Turn on spell checking.                      <code>:set spell</code></li> <li>Set a base language (if needed).             <code>:setlocal spelllang=en_us</code></li> <li>Set a local spellfile path.                  <code>:setlocal spellfile=~/.vim/spell/en.utf-8.add</code></li> <li>Set a local spellfile addition.              <code>:setlocal spellfile+=~/mydir/mysubdir/myfile.utf-8.add</code></li> <li>Add to the second spell file.                <code>:2zg</code></li> <li>Add to the original spell file.              <code>:1zg</code></li> </ol>"},{"location":"vim/cheat-sheet.html#recipes---change-vim-on-the-fly","title":"Recipes - Change Vim on the Fly","text":"<pre><code>    :set ignorecase / :set noignorecase / :set ignorecase! (toggle) / :set ignorecase? / :set ignorecase&amp; (restore default)\n    :set tabstop=2 (:set ts=2)\n    :set softtabstop=2 (:set sts=2)\n    :set shiftwidth=2 (:set sw=2)\n    :set expandtab (:set et)\n    :set ts=2 sts=2 sw=2 et\n    :bufdo setlocal ts=4\n    :windo setlocal number\n</code></pre>"},{"location":"vim/cheat-sheet.html#recipes---customize-with-vim-files","title":"Recipes - Customize with .vim Files","text":"<ol> <li>Name the file.                               <code>vim ~/mysettings.vim</code></li> <li>Source it.                                   <code>:source ~/mysettings.vim</code></li> <li>Syntax is the same as the .vimrc file.         set tabstop=2         set softtabstop=2         set shiftwidth=2         set expandtab</li> </ol>"},{"location":"vim/cheat-sheet.html#recipes---filetype-specific-customization","title":"Recipes - Filetype Specific Customization","text":"<ol> <li> <p>Edit customizations file (e.g., ~/.vimrc):</p> <pre><code>if has(\"autocmd\")\n  filetype on\n  autocmd FileType ruby setlocal ts=2 sts=2 sw=2 et\n  autocmd FileType javascript setlocal ts=4 sts=4 sw=4 noet\n  autocmd FileType javascript compiler nodelint\nendif\n</code></pre> </li> <li> <p>Cleaner if we use the ftplugin:</p> <pre><code>~/.vim/after/ftplugin/javascript.vim\nsetlocal ts=4 sts=4 sw=4 noet\ncompiler nodelint\n</code></pre> </li> </ol>"},{"location":"vim/cheat-sheet.html#reciples---change-encoding-eg-fix-excel-exports-to-csv","title":"Reciples - Change Encoding (e.g. fix Excel exports to csv)","text":"<p>See: http://stackoverflow.com/questions/64860/best-way-to-convert-text-files-between-character-sets</p> <pre><code>    $ file Consumer_Complaints_short.csv\n    Consumer_Complaints_short.csv: Non-ISO extended-ASCII English text\n    $ vim +\"set nobomb | set fenc=utf8 |x\" Consumer_Complaints_short.csv\n    $ file Consumer_Complaints_short.csv\n    Consumer_Complaints_short.csv: UTF-8 Unicode English text\n</code></pre>"},{"location":"vim/cheat-sheet.html#recipes---paste-tablecolumn-data-from-webclipboard","title":"Recipes - Paste Table/Column Data from Web/Clipboard","text":"<ol> <li>Copy table from web</li> <li> <p>Go to exec mode and set the clipboard register to block mode</p> <pre><code>    call setreg('+', @+, 'b')\n</code></pre> </li> <li> <p>Insert and paste.</p> </li> </ol>"},{"location":"vim/cheat-sheet.html#recipes---search-for-special-characters","title":"Recipes - search for special characters","text":"<p>For example, the \u201cnew feed\u201d charcter is \u201c^L\u201d, this can be searched for with:</p> <pre><code>        /&lt;ctrl-v&gt;&lt;ctrl-l&gt;\n</code></pre>"},{"location":"virtualbox/win11install.html","title":"Install","text":""},{"location":"virtualbox/win11install.html#how-to-install-microsoft-windows-11-on-virtualbox","title":"How to install Microsoft Windows 11 on VirtualBox!","text":"Info <p>The following step-by-step guide shows how to install Microsoft Windows 11 on top of VirtualBox 6.1; this guide has been tested and verified on both macOS as well as Linux hosts. This is to address the reported issue that Windows 11 could not be installed as a VirtualBox VM.</p>"},{"location":"virtualbox/win11install.html#configuring-virtualbox-for-windows-11","title":"Configuring Virtualbox for Windows 11","text":"Note <p>The first step is to properly configure the virtual machine that will guest the \u201cMicrosoft Windows 11\u201d Installation; the virtual machine has to be configured in the following way (minimum requirements), based on official \u201cWindows 11 Specs and System Requirements\u201d and your system needs to have proper updated x86 CPU:</p>"},{"location":"virtualbox/win11install.html#configuration-system---motherboard","title":"Configuration: System - Motherboard","text":"<p><pre><code>RAM: 4GB (minimum) - 8GB (minimum suggested)\nEFI (Special OSes only) enabled\n</code></pre> </p>"},{"location":"virtualbox/win11install.html#configuration-system---processor","title":"Configuration: System - Processor","text":"<p><pre><code>CPU: 2 (minimum)\n</code></pre> </p>"},{"location":"virtualbox/win11install.html#configuration-storage","title":"Configuration: Storage","text":"<p><pre><code>64 GB Virtual Disk (minimum size)\n</code></pre> </p>"},{"location":"virtualbox/win11install.html#configuration-display---screen","title":"Configuration: Display - Screen","text":"<p><pre><code>Video Memory: 256MB\nGraphics Controller: VBoxSVGA\nEnable 3D Acceleration enabled\n</code></pre> </p>"},{"location":"virtualbox/win11install.html#installation-process","title":"Installation Process","text":"Note <p>With those configuration options in-place and the Microsoft Windows 11 ISO properly added as virtual cd-rom we can then start the installation process:</p>"},{"location":"virtualbox/win11install.html#attach-installation-iso-boot-from-cd-and-launch-regedit","title":"Attach Installation ISO, boot from CD, and launch regedit","text":"<ul> <li>Click next to show-up the Install now button</li> <li>When you see the installation button, Launch a command prompt by pressing Shift+F10 on your keyboard at the same time.<ul> <li>On some models of MacOS you may need to add the Virtualbox application to Apple Menu - Preferences - Keyboard - Shortcuts (tab) - Function Keys (Left Menu Item) </li> </ul> </li> <li>At this command prompt, type regedit and press enter to launch the Windows Registry Editor.</li> </ul>"},{"location":"virtualbox/win11install.html#required-regedit-modifications-to-bypass-tpm-checks","title":"Required Regedit Modifications to Bypass TPM Checks","text":"<ul> <li>When the Registry Editor opens, navigate to HKEY_LOCAL_MACHINE\\SYSTEM\\Setup</li> <li>Right-click on the Setup key and select New =&gt; Key.</li> <li>When prompted to name the key, enter LabConfig and press enter.</li> <li>Now right-click on the LabConfig key and select New =&gt; DWORD  (32-bit) value and create a value named BypassTPMCheck, and set its data to 1.</li> <li>With the same steps as above create the BypassRAMCheck and BypassSecureBootCheck values and set their data to 1, so it looks like the following image.</li> </ul>"},{"location":"virtualbox/win11install.html#final-steps","title":"Final Steps","text":"<ul> <li>With those three values configured under the LabConfig key, close the Registry Editor</li> <li>Type exit in the Command Prompt followed by enter to close the window</li> <li>You can now click on the Install now button to proceed to get Microsoft Windows 11 installed as a virtual-machine on top of VirtualBox.</li> </ul>"},{"location":"webdev/react/jsx.html","title":"Jsx","text":""},{"location":"webdev/react/jsx.html#jsx","title":"JSX","text":""},{"location":"webdev/react/jsx.html#what-is-it","title":"What is it?","text":"<ul> <li>An optional XML-like Element definition markup</li> </ul>"},{"location":"webdev/react/jsx.html#what-is-babel","title":"What is Babel","text":"<ul> <li>It is a transpiler to transform JSX and unsupported Javascript features into older supported javascript.</li> <li>E.G. Converts ES2015 and JSX to ES5 (The standard most semi-modern browsers support)</li> <li>To use Babel to transpile/transform JSX and ES2015 into ES5, we need presets defining how to do this.</li> </ul>"},{"location":"webdev/react/jsx.html#installing-babel-and-defining-presets","title":"Installing Babel and Defining Presets","text":"<ul> <li> <p>Install React and Necessary Presets</p> <p>sudo npm install -g babel-cli    # Preset for ES2015 transform    sudo npm install -g babel-preset-es2015    # Preset for JSX transform    sudo npm install -g babel-preset-react</p> </li> <li> <p>Configure Babel to Use JSX and ES2015 Presets</p> <pre><code>vi .babelrc\n{\n    \"presets\": [\n        \"../../../../usr/local/lib/node_modules/babel-preset-es2015\",\n        \"../../../../usr/local/lib/node_modules/babel-preset-react\"\n    ]\n}\n</code></pre> </li> <li> <p>If we had installed node_modules locally instead of globally, we could have simply referenced them as follows:</p> <pre><code>vi .babelrc\n{\n  \"presets\": [\n    \"es20125\",\n    \"react\"\n  ]\n}\n</code></pre> </li> </ul>"},{"location":"webdev/react/jsx.html#dom-vs-react-components","title":"DOM VS React Components","text":"<ul> <li>JSX:  VS </li> <li>Transpiled: React.createElement(\u2018button\u2019) VS React.createElement(Button)</li> <li>HTML button VS component Button</li> </ul>"},{"location":"webdev/react/jsx.html#children","title":"Children","text":"<ul> <li> <p>Elements can be children of elements</p> <pre><code># JSX\n&lt;div&gt;\n  &lt;a href=\"http://...\"&gt;Click Here&lt;/a&gt;\n&lt;/div&gt;\n\n# Transpiles to\nReact.createElement(\n  \"div\",\n  null,\n  React.createElement(\n    \"a\",\n    { href: \"http://...\" },\n    \"Click Here\"\n  )\n);\n</code></pre> </li> <li> <p>Elements can contain Javascript or variables instead of nested elements.</p> </li> </ul>    This is a, {variable},   and this is a {function()}."},{"location":"webdev/react/jsx.html#jsx-has-differences-from-html","title":"JSX Has Differences from HTML","text":"<ul> <li>Because its transpiled, to javascript, we can\u2019t use reserved words in Javascript, like class<ul> <li>className instead of class</li> <li>htmlFor instead of for</li> <li>style takes dict of camelCase styles instead of CSS style attributes.</li> </ul> </li> <li> <p>Since its transpiled to javascript and js can\u2019t return 2 functions JSX like the following will fail</p> <pre><code>&lt;div /&gt;\n&lt;div /&gt;\n# Instead add a root.\n&lt;div&gt;\n  &lt;div /&gt;\n  &lt;div /&gt;\n&lt;/div&gt;\n</code></pre> </li> <li> <p>Transpiled JSX ignores spacing, so you must include {\u2019 \u2018} where you want spaces.</p> </li> </ul>"},{"location":"webdev/react/jsx.html#jsx-peculiarities","title":"JSX Peculiarities","text":"<ul> <li> <p>With JSX explicit attribute values should be set because an attribute without a value set is assumed to be true</p> <pre><code>&lt;button disabled /&gt;\n</code></pre> <ul> <li>In the above example disabled is assumed to be true</li> <li> <p>A good rule of thumb is to use the spread operator to pass properties to child ecomponents, don\u2019t pass the object</p> <p>const myObj = { id: \u2018101\u2019 } return </p> </li> <li> <p>This transpiles to (Which makes sense because otherwise it would be an object in an object)</p> <p>var myObj = { id: \u2018101\u2019 }; return React.createElement(\u2018div\u2019, myObj);</p> </li> </ul> </li> <li> <p>Because We\u2019ve recoupled (got rid of the separation of concerns) of our scripts JSX can now use javascript as values to attributes.</p> <pre><code>&lt;button disabled={errors.length} /&gt;\n</code></pre> </li> </ul>"},{"location":"webdev/react/react.html","title":"React","text":""},{"location":"webdev/react/react.html#react-notes","title":"React Notes","text":""},{"location":"webdev/react/react.html#core-principle","title":"Core Principle","text":"<ul> <li>Declaritive NOT Imperative<ul> <li>Code declares what it wants, not the steps on how to achieve what it wants.</li> </ul> </li> </ul>"},{"location":"webdev/react/react.html#stop-unnecessary-decoupling","title":"Stop Unnecessary Decoupling","text":"<ul> <li>React wants to combine javascript, styling, and component structure</li> <li>The paradigm of separation of concerns is really separation of technology js/css/dom</li> <li>A component should contain everything necessary to make is function.</li> </ul>"},{"location":"webdev/react/react.html#building-blocks-philosophy","title":"Building Blocks Philosophy","text":"<ul> <li>For simple apps start simple with just react.js core.<ul> <li>Default javascript createElement is satisfactory for simple element creation.</li> </ul> </li> <li>As complexity increases, add transpiler for JSX<ul> <li>transpiler converts JSX into Javascript the browser/native app can understand.</li> </ul> </li> <li>Only when you need navigation should you add a router</li> <li>Only when we need complex operations should you introduce a package manager for external dependencies<ul> <li>This will happen when you need to call API endpoints.</li> </ul> </li> <li>Modules, i.e. file organization, should only come once the project looks cluttered.</li> </ul>"},{"location":"webdev/react/react.html#elements","title":"Elements","text":"<ul> <li>createClass, Component, or stateless functions are all components.</li> <li>Elements are returned by components.</li> <li>Elements control the UI flow by recursively passing properties down nested elements and requesting results until it has a full DOM tree.<ul> <li>String Elements terminate as DOM Nodes</li> <li>Function Elements are call recursively to get nested DOM results.</li> </ul> </li> </ul>"},{"location":"webdev/react/react.html#javascript-fatigue","title":"Javascript Fatigue","text":"<ul> <li>Javascript libraries come and go at a pace that incorporating them is extremely difficult.</li> <li>Balance betting on new tech and staying safe.</li> <li>Use the Facebook generated create-react-app<pre><code>npm install -g create-react-app\ncreate-react-app hello-world\ncd hello-world\nnpm start\n</code></pre> </li> </ul>"},{"location":"webdev/react/react.html#basics-of-create-react-app","title":"Basics of Create React App","text":"<ul> <li> <p>Starts the development server.</p> <p>npm start</p> </li> <li> <p>Bundles the app into static files for production.</p> <p>npm run build</p> </li> <li> <p>Starts the test runner.</p> <p>npm test</p> </li> <li> <p>Removes this tool and copies build dependencies, configuration files and scripts into the app directory.</p> </li> </ul> Warning <p>If you do this, you can\u2019t go back!</p> <p>npm run eject</p>"},{"location":"windows/os_command_map.html","title":"Command Cheat-sheet","text":""},{"location":"windows/os_command_map.html#windows-vs-linux-command-cheatsheet","title":"Windows VS Linux Command Cheatsheet","text":""},{"location":"windows/os_command_map.html#cmd-window-mapping","title":"Cmd Window Mapping","text":"Windows Linux Description dir ls -l Directory listing ren mv Rename a file copy cp Copying a file move mv Moving a file cls clear Clear Screen del rm Delete file fc diff Compare contents of files find grep Search for a string in a file command /? man command Display the manual/help details of the command chdir pwd Returns your current directory location time date Displays the time cd cd Change the current directory md mkdir To create a new directory/folder echo echo To print something on the screen edit vim(depends on editor) To write in to files. exit exit To leave the terminal/command window. format mke2fs or mformat To format a drive/partition. free mem To display free space. rmdir rm -rf/rmdir To delete a directory. taskkill kill To kill a task. tasklist ps x To list running tasks. set var=value export var=value To set environment variables. attrib chown/chmod To change file permissions. tracert traceroute To print the route packets trace to network host. at cron daemon to execute scheduled commands. type cat To print contents of a file. ping ping To send ICMP ECHO_REQUEST to network hosts. nslookup nslookup To query Internet name servers interactively. chdisk du -s For disk usage. tree ls -R To list directory recursively."},{"location":"windows/os_command_map.html#powershell-command-mapping","title":"Powershell Command Mapping","text":"Windows Powershell Linux Description Get-Content file3.txt -Tail \u201c3\u201d Get-Content file3.txt | Select-Object -last 3 cat file3.txt | tail -3 Extract last 3 lines of file"},{"location":"windows/network/arp.html","title":"Arp","text":""},{"location":"windows/network/arp.html#arp","title":"ARP","text":""},{"location":"windows/network/arp.html#display-the-arp-cache-table-for-all-interfaces","title":"Display the Arp Cache Table for all Interfaces","text":"<pre><code>    arp /a\n</code></pre>"},{"location":"windows/network/arp.html#delete-an-arp-entry","title":"Delete an Arp Entry","text":"<pre><code>    arp /d &lt;InetAddr&gt;\n</code></pre>"},{"location":"windows/network/arp.html#delete-all-arp-cache","title":"Delete all Arp Cache","text":"<pre><code>    arp /d\n</code></pre>"},{"location":"windows/network/arp.html#manually-add-an-entry-to-arp-cache","title":"Manually Add an Entry to Arp Cache","text":"<pre><code>    arp /s &lt;InetAddr&gt; &lt;Mac-Addr&gt;\n</code></pre>"},{"location":"windows/network/arp.html#getmac","title":"GetMac","text":"<ul> <li>Noting this here because it\u2019s related to arp</li> <li>Gets the MAC Addresses of all NICs.<pre><code>getmac\n</code></pre> </li> </ul>"},{"location":"windows/network/ipconfig.html","title":"Ipconfig","text":""},{"location":"windows/network/ipconfig.html#ipconfig","title":"IPCONFIG","text":""},{"location":"windows/network/ipconfig.html#show-all-network-adapter-information","title":"Show all Network Adapter Information","text":"<ul> <li>DNS, DHCP, etc.<pre><code>ipconfig /all\n</code></pre> </li> </ul>"},{"location":"windows/network/ipconfig.html#release-dhcp-ip-address","title":"Release DHCP IP Address","text":"<ul> <li>The first command releases all</li> <li>The second command releases all that start with Wireless<pre><code>ipconfig /release\nipconfig /release Wireless*\n</code></pre> </li> </ul>"},{"location":"windows/network/ipconfig.html#renew-dhcp-ip","title":"Renew DHCP IP","text":"<ul> <li>The first command renews all</li> <li>The second command renews all that start with Wireless<pre><code>ipconfig /renew\nipconfig /renew Wireless*\n</code></pre> </li> </ul>"},{"location":"windows/network/ipconfig.html#display-dns-cache","title":"Display DNS Cache","text":"<pre><code>    ipconfig /displaydns\n</code></pre>"},{"location":"windows/network/ipconfig.html#flush-your-dns-cache","title":"Flush Your DNS Cache","text":"<pre><code>    ipconfig /flushdns\n</code></pre>"},{"location":"windows/network/ipconfig.html#initiate-dynamic-dns-registration","title":"Initiate Dynamic DNS Registration","text":"<ul> <li>This ipconfig command is great for troubleshooting DNS name registration issues without rebooting the computer.<pre><code>ipconfig /registerdns\n</code></pre> </li> </ul>"},{"location":"windows/network/nbtstat.html","title":"Nbtstat","text":""},{"location":"windows/network/nbtstat.html#nbtstat---mostly-phased-out","title":"NBTSTAT - Mostly phased out","text":"<p>Nbtstat is designed to help troubleshoot NetBIOS name resolution problems.</p>"},{"location":"windows/network/nbtstat.html#connect-to-netbios-computer","title":"Connect to NetBios Computer","text":"<pre><code>    nbtstat -a &lt;Computer Name&gt;\n    # OR by IP\n    nbtstat -a &lt;IP&gt;\n</code></pre> <ul> <li>The Result lists major services:<ul> <li>&lt;00&gt;: Workstation Service</li> <li>&lt;20&gt;: Server Service</li> <li>&lt;03&gt;: Messenger Service</li> </ul> </li> </ul>"},{"location":"windows/network/nbtstat.html#list-remote-netbios-computerssessions","title":"List Remote NetBIOS Computers/Sessions","text":"<pre><code>    nbtstat -S\n    # Or to list computer names instead of IP\n    nbtstat -s\n</code></pre>"},{"location":"windows/network/nbtstat.html#list-netbios-name-resolution-stats","title":"List NetBios Name Resolution Stats","text":"<pre><code>    nbtstat -r\n</code></pre>"},{"location":"windows/network/nbtstat.html#purge-netbios-name-cache","title":"Purge NetBios Name Cache","text":"<pre><code>    nbtstat -R\n</code></pre>"},{"location":"windows/network/nbtstat.html#release-and-refresh-netbios-names","title":"Release and Refresh NetBios Names","text":"<pre><code>    nbtstat -RR\n</code></pre>"},{"location":"windows/network/net.html","title":"Net","text":""},{"location":"windows/network/net.html#net-command","title":"NET Command","text":"Info <p>The net command has a massive number of options, only a few are covered here. Remember all Windows commands can get help with /? <code>net time /?</code> or <code>net /?</code></p>"},{"location":"windows/network/net.html#show-computers-on-immediate-network","title":"Show Computers on Immediate Network","text":"<ul> <li>Also shows if they operate as a workgroup or a domain</li> </ul> <pre><code>net view\n</code></pre>"},{"location":"windows/network/net.html#show-time-for-networked-computer","title":"Show Time for Networked Computer","text":"<ul> <li>UNC: Universal Naming Convention<ul> <li>UNC: Always starts with \\</li> </ul> </li> </ul> <pre><code>net time \\\\UNC\n</code></pre>"},{"location":"windows/network/net.html#show-user-accounts-for-networked-computer","title":"Show User Accounts for Networked Computer","text":"<pre><code>    net user\n    # Or for a remote computer\n    net user \\\\UNC\n</code></pre>"},{"location":"windows/network/net.html#list-running-services","title":"List Running Services","text":"<pre><code>    net start\n</code></pre>"},{"location":"windows/network/net.html#start-and-stop-service","title":"Start and Stop Service","text":"<pre><code>    net stop &lt;service name&gt;\n    net start &lt;service name&gt;\n</code></pre> <ul> <li> <p>Example: Themes Service</p> <pre><code>net stop themes\nnet start themes\n</code></pre> </li> <li> <p>Example: Print spooler</p> <pre><code>net stop \"print spooler\"\nnet start \"print spooler\"\n</code></pre> </li> </ul>"},{"location":"windows/network/net.html#force-account-passwords-to-expire-after-180-days","title":"Force Account Passwords to Expire After 180 Days","text":"<pre><code>    net accounts /MAXPWAGE:180\n</code></pre>"},{"location":"windows/network/net.html#share-a-folder-on-the-network","title":"Share a Folder on the Network","text":"<pre><code>    net share &lt;TheShareName&gt;=C:\\Share\\Path /GRANT:everyone,FULL\n</code></pre>"},{"location":"windows/network/netstat.html","title":"Netstat","text":""},{"location":"windows/network/netstat.html#netstat","title":"Netstat","text":""},{"location":"windows/network/netstat.html#show-all-connections","title":"Show all connections","text":"<pre><code>    netstat -a\n</code></pre>"},{"location":"windows/network/netstat.html#show-only-connection-by-state","title":"Show only Connection by State","text":"<pre><code>    netstat | findstr ESTABLISHED\n    netstat | findstr LISTENING\n    netstat | findstr CLOSE_WAIT\n    netstat | findstr TIME_WAIT\n</code></pre>"},{"location":"windows/network/netstat.html#show-process-id-used-by-port-number","title":"Show Process ID used by Port Number","text":"<pre><code>    netstat -o\n    netstat \u2013o | findstr &lt;PORT&gt;\n</code></pre>"},{"location":"windows/network/netstat.html#show-protocol-statistics-and-find-errors","title":"Show Protocol Statistics and Find Errors","text":"<pre><code>    netstat \u2013s\n    inetstat -s | findstr Errors\n</code></pre>"},{"location":"windows/network/netstat.html#show-routing-information","title":"Show Routing Information","text":"<pre><code>    netstat \u2013r\n</code></pre>"},{"location":"windows/network/netstat.html#show-interface-statistics","title":"Show Interface Statistics","text":"<pre><code>    netstat -e\n</code></pre>"},{"location":"windows/network/netstat.html#show-fully-qualified-domain-name-of-foreign-address-remote-host","title":"Show Fully Qualified Domain Name of foreign address (remote host)","text":"<pre><code>    netstat \u2013f\n    netstat \u2013f | findstr ESTABLISHED\n</code></pre>"},{"location":"windows/network/nslookup.html","title":"Nslookup","text":""},{"location":"windows/network/nslookup.html#nslookup","title":"NSLOOKUP","text":""},{"location":"windows/network/nslookup.html#domain-a-record-lookup","title":"Domain A Record Lookup","text":"<pre><code>    nslookup example.com\n</code></pre>"},{"location":"windows/network/nslookup.html#check-authoritative-name-servers-ns-for-a-domain","title":"Check Authoritative Name Servers (NS) for a Domain","text":"<pre><code>    nslookup -type=ns example.com\n</code></pre>"},{"location":"windows/network/nslookup.html#query-domain-start-of-authority-soa-zone-records","title":"Query Domain Start of Authority (SoA) Zone Records","text":"<pre><code>    nslookup -type=soa example.com\n</code></pre>"},{"location":"windows/network/nslookup.html#find-the-mail-exchange-mx-records","title":"Find the Mail Exchange (MX) Records","text":"<pre><code>    nslookup -query=mx example.com\n</code></pre>"},{"location":"windows/network/nslookup.html#list-all-available-dns-records-for-a-domain","title":"List all Available DNS Records for a Domain","text":"<pre><code>    nslookup -type=any example.com\n</code></pre>"},{"location":"windows/network/nslookup.html#check-the-dns-using-a-specific-dns-server","title":"Check the DNS Using a Specific DNS Server","text":"<pre><code>    nslookup example.com &lt;name server ip or fqdn&gt;\n</code></pre>"},{"location":"windows/network/nslookup.html#check-revers-dns-lookup","title":"Check Revers DNS Lookup","text":"<pre><code>    nslookup 10.20.30.40\n</code></pre>"},{"location":"windows/network/nslookup.html#check-for-domain-ptr-record","title":"Check for Domain PTR Record","text":"<ul> <li>Remember you have to reverse the IP and add in-addr.arpa</li> <li>This will verify the IP belongs to a specific domain<pre><code>nslookup -type=ptr 1.0.168.192.in-addr.arpa\n</code></pre> </li> </ul>"},{"location":"windows/network/nslookup.html#check-which-servers-respond-faster","title":"Check which Servers Respond Faster","text":"<pre><code>    nslookup -timeout=5 example.com\n</code></pre>"},{"location":"windows/network/nslookup.html#some-useful-output-for-debugging-dns","title":"Some Useful Output For Debugging DNS","text":"<pre><code>    nslookup -debug example.com\n</code></pre>"},{"location":"windows/network/ping.html","title":"Ping","text":""},{"location":"windows/network/ping.html#ping","title":"PING","text":""},{"location":"windows/network/ping.html#increase-or-decrease-ping-ttl","title":"Increase or Decrease ping TTL","text":"<ul> <li> <p>Example: Wait for 5 seconds before sending the next packet.</p> <pre><code>ping -i 5 IP\n</code></pre> </li> <li> <p>Example: Wait 0.1 seconds before sending the next packet.</p> <pre><code>ping -i 0.1 IP\n</code></pre> </li> </ul>"},{"location":"windows/network/ping.html#send-n-packets-and-stop","title":"Send n packets and stop","text":"<pre><code>    ping -n 10 &lt;IP|Domain&gt;\n</code></pre>"},{"location":"windows/network/ping.html#continuous-ping","title":"Continuous Ping","text":"<ul> <li>Start before you reboot a remote server or VM</li> <li>Make sure you have a backup console if remote!!!<pre><code>ping -t &lt;IP|Domain&gt;\n</code></pre> </li> </ul>"},{"location":"windows/network/ping.html#hostname-lookup-with-ping","title":"Hostname Lookup with Ping","text":"<pre><code>    ping -a &lt;IP&gt;\n</code></pre>"},{"location":"windows/network/ping.html#ping-localhost","title":"Ping Localhost","text":"<ul> <li>Tests own protocol stack<pre><code>ping 127.0.0.1\n</code></pre> </li> </ul>"},{"location":"windows/network/ping.html#ping-ipv6","title":"PING IPv6","text":"<pre><code>    ping -t -6 &lt;IP|Domain&gt;\n</code></pre>"},{"location":"windows/network/ping.html#change-the-packet-size","title":"Change the Packet Size","text":"<pre><code>    ping -l 1500 &lt;IP|Domain&gt;\n</code></pre>"},{"location":"windows/network/ping.html#ping-of-death-ping-flood-buffer-overflow-attempt","title":"Ping of Death (Ping Flood Buffer Overflow Attempt)","text":"<ul> <li>-l: Buffer size</li> <li>-w: wait timeout in ms</li> <li>-n: number of echo requests</li> <li>Script is to loop infinitely<pre><code>:loop\n\nping &lt;IP|Domain&gt; -l 65500 -w 1 -n 1\ngoto :loop\n</code></pre> </li> </ul>"},{"location":"windows/network/tracert.html","title":"Tracert","text":""},{"location":"windows/network/tracert.html#tracert","title":"TRACERT","text":"<ul> <li>Look for latency between network hops</li> <li>Look for routing loops</li> <li>Look for flapping routes</li> <li>Count hops to determine if large routing path is reason for latency</li> </ul>"},{"location":"windows/network/tracert.html#show-the-path-from-the-networked-computer-to-destination","title":"Show the Path from the Networked Computer to Destination","text":"<pre><code>    tracert &lt;IP|Domain&gt;\n</code></pre>"},{"location":"windows/network/tracert.html#get-path-to-destination-but-exclude-dns","title":"Get Path to Destination but Exclude DNS","text":"<ul> <li>The idea behind this tracert command is that it allows you to find out whether a router has malfunctioned. By comparing the tracert results with your network documentation, you should be able to alert the correct network person to the problem, or perhaps fix the problem yourself.<pre><code>tracert -d &lt;IP|Domain&gt;\n</code></pre> </li> </ul>"},{"location":"windows/network/tracert.html#get-path-to-destination-but-limit-hops","title":"Get Path to Destination but Limit Hops","text":"<ul> <li>hop: Number of routing devices a packet passes through from source to destination<pre><code>tracert -h 3 &lt;IP|Domain&gt;\n</code></pre> </li> </ul>"},{"location":"windows/network/tracert.html#pathping","title":"PATHPING","text":"<ul> <li>Pathping is similar to tracert but it will also compute the degree of packet loss.<pre><code>pathping &lt;IP|Domain&gt;\n</code></pre> </li> </ul>"}]}