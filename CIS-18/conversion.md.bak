# Python to Java Cheatsheet

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Python to Java Syntax Cheatsheet</title>
    <style>
        table {width: 90%; border-collapse: collapse;}
        th, td {padding: 10px; border: 1px solid #ddd; vertical-align: top;}
        pre {background-color: #f4f4f4; padding: 8px; margin: 0; overflow-x: auto;}
    </style>
</head>
<body>
    <h1>Python to Java Syntax Cheatsheet</h1>
    <table>
        <tr>
            <th>Python</th>
            <th>Java</th>
        </tr>
        <!-- Variable Declaration and Assignment -->
        <tr>
            <td>
                <pre><code class="python">x = 10
y = 5.5
z = "Hello"</code></pre>
            </td>
            <td>
                <pre><code class="java">int x = 10;
double y = 5.5;
String z = "Hello";</code></pre>
            </td>
        </tr>
        <!-- Function Definition -->
        <tr>
            <td>
                <pre><code class="python">def add(a, b):
    return a + b</code></pre>
            </td>
            <td>
                <pre><code class="java">public int add(int a, int b) {
    return a + b;
}</code></pre>
            </td>
        </tr>
        <!-- Function Calling -->
        <tr>
            <td>
                <pre><code class="python">print(add(3, 5))</code></pre>
            </td>
            <td>
                <pre><code class="java">System.out.println(add(3, 5));</code></pre>
            </td>
        </tr>
        <!-- Comments and Docstrings -->
        <tr>
            <td>
                <pre><code class="python"># Single-line comment
"""
Multi-line
docstring
"""</code></pre>
            </td>
            <td>
                <pre><code class="java">// Single-line comment
/*
Multi-line
comment
*/</code></pre>
            </td>
        </tr>
        <!-- Conditionals -->
        <tr>
            <td>
                <pre><code class="python">if x > 10:
    print("x is large")
elif x == 10:
    print("x is ten")
else:
    print("x is small")</code></pre>
            </td>
            <td>
                <pre><code class="java">if (x > 10) {
    System.out.println("x is large");
} else if (x == 10) {
    System.out.println("x is ten");
} else {
    System.out.println("x is small");
}</code></pre>
            </td>
        </tr>
        <!-- Recursion -->
        <tr>
            <td>
                <pre><code class="python">def factorial(n):
    if n == 1:
        return 1
    return n * factorial(n - 1)</code></pre>
            </td>
            <td>
                <pre><code class="java">public int factorial(int n) {
    if (n == 1) return 1;
    return n * factorial(n - 1);
}</code></pre>
            </td>
        </tr>
      <!-- Loops -->
      <tr>
          <td>
              <pre><code class="python"># For loop
      for i in range(5):
          print(i)
      
      # While loop
      n = 0
      while n < 5:
          print(n)
          n += 1</code></pre>
          </td>
          <td>
              <pre><code class="java">// For loop
      for (int i = 0; i < 5; i++) {
          System.out.println(i);
      }
      
      // While loop
      int n = 0;
      while (n < 5) {
          System.out.println(n);
          n++;
      }</code></pre>
          </td>
      </tr>
      
      <!-- Lists -->
      <tr>
          <td>
              <pre><code class="python"># List declaration
      my_list = [1, 2, 3, 4]
      
      # Adding to a list
      my_list.append(5)
      
      # Accessing elements
      first = my_list[0]
      last = my_list[-1]</code></pre>
          </td>
          <td>
              <pre><code class="java">// List declaration
      import java.util.ArrayList;
      import java.util.List;
      
      List<Integer> myList = new ArrayList<>();
      myList.add(1);
      myList.add(2);
      myList.add(3);
      myList.add(4);
      
      // Adding to a list
      myList.add(5);
      
      // Accessing elements
      int first = myList.get(0);
      int last = myList.get(myList.size() - 1);</code></pre>
          </td>
      </tr>
      
      <!-- Dictionaries -->
      <tr>
          <td>
              <pre><code class="python"># Dictionary declaration
      my_dict = {"a": 1, "b": 2, "c": 3}
      
      # Adding a key-value pair
      my_dict["d"] = 4
      
      # Accessing values
      value = my_dict["a"]
      
      # Iterating through keys and values
      for key, val in my_dict.items():
          print(f"{key}: {val}")</code></pre>
          </td>
          <td>
              <pre><code class="java">// Dictionary declaration
      import java.util.HashMap;
      import java.util.Map;
      
      Map<String, Integer> myDict = new HashMap<>();
      myDict.put("a", 1);
      myDict.put("b", 2);
      myDict.put("c", 3);
      
      // Adding a key-value pair
      myDict.put("d", 4);
      
      // Accessing values
      int value = myDict.get("a");
      
      // Iterating through keys and values
      for (Map.Entry<String, Integer> entry : myDict.entrySet()) {
          System.out.println(entry.getKey() + ": " + entry.getValue());
      }</code></pre>
          </td>
      </tr>
      
      <!-- Tuples -->
      <tr>
          <td>
              <pre><code class="python"># Tuple declaration
      my_tuple = (1, 2, 3)
      
      # Accessing elements
      first = my_tuple[0]
      last = my_tuple[-1]</code></pre>
          </td>
          <td>
              <pre><code class="java">// Tuple equivalent (use a class or array)
      class Tuple {
          int first, second, third;
      
          Tuple(int first, int second, int third) {
              this.first = first;
              this.second = second;
              this.third = third;
          }
      }
      
      // Creating and accessing a tuple
      Tuple myTuple = new Tuple(1, 2, 3);
      int first = myTuple.first;
      int last = myTuple.third;</code></pre>
          </td>
      </tr>
<!-- Static Methods -->
<tr>
    <td>
        <pre><code class="python"># Static method in Python
class MyClass:
    @staticmethod
    def static_method():
        return "This is a static method"

# Calling the static method
result = MyClass.static_method()</code></pre>
    </td>
    <td>
        <pre><code class="java">// Static method in Java
class MyClass {
    public static String staticMethod() {
        return "This is a static method";
    }
}

// Calling the static method
String result = MyClass.staticMethod();</code></pre>
    </td>
</tr>

<!-- Instance Methods -->
<tr>
    <td>
        <pre><code class="python"># Instance method in Python
class MyClass:
    def __init__(self, value):
        self.value = value

    def instance_method(self):
        return f"The value is {self.value}"

# Creating an instance and calling the instance method
obj = MyClass(42)
result = obj.instance_method()</code></pre>
    </td>
    <td>
        <pre><code class="java">// Instance method in Java
class MyClass {
    private int value;

    public MyClass(int value) {
        this.value = value;
    }

    public String instanceMethod() {
        return "The value is " + value;
    }
}

// Creating an instance and calling the instance method
MyClass obj = new MyClass(42);
String result = obj.instanceMethod();</code></pre>
    </td>
</tr>
<!-- Reading Input and Output on the Command Line -->
<tr>
    <td>
        <pre><code class="python"># Input and Output in Python
name = input("Enter your name: ")
print(f"Hello, {name}!")</code></pre>
    </td>
    <td>
        <pre><code class="java">// Input and Output in Java
import java.util.Scanner;

Scanner scanner = new Scanner(System.in);
System.out.print("Enter your name: ");
String name = scanner.nextLine();
System.out.println("Hello, " + name + "!");
scanner.close();</code></pre>
    </td>
</tr>

<!-- File Input and Output -->
<tr>
    <td>
        <pre><code class="python"># File Input and Output in Python
# Writing to a file
with open("example.txt", "w") as file:
    file.write("Hello, World!")

# Reading from a file
with open("example.txt", "r") as file:
    content = file.read()
    print(content)</code></pre>
    </td>
    <td>
        <pre><code class="java">// File Input and Output in Java
import java.io.*;

try (BufferedWriter writer = new BufferedWriter(new FileWriter("example.txt"))) {
    writer.write("Hello, World!");
}

try (BufferedReader reader = new BufferedReader(new FileReader("example.txt"))) {
    String content = reader.readLine();
    System.out.println(content);
}</code></pre>
    </td>
</tr>

<!-- Randomizing -->
<tr>
    <td>
        <pre><code class="python"># Randomizing in Python
import random

# Random integer
rand_int = random.randint(1, 10)

# Random float
rand_float = random.random()

print(f"Random int: {rand_int}, Random float: {rand_float}")</code></pre>
    </td>
    <td>
        <pre><code class="java">// Randomizing in Java
import java.util.Random;

Random random = new Random();

// Random integer
int randInt = random.nextInt(10) + 1;

// Random float
float randFloat = random.nextFloat();

System.out.println("Random int: " + randInt + ", Random float: " + randFloat);</code></pre>
    </td>
</tr>

<!-- Regular Expressions -->
<tr>
    <td>
        <pre><code class="python"># Regular Expressions in Python
import re

text = "Hello, 123 World!"
pattern = r"\d+"
matches = re.findall(pattern, text)
print(matches)</code></pre>
    </td>
    <td>
        <pre><code class="java">// Regular Expressions in Java
import java.util.regex.*;
import java.util.ArrayList;

String text = "Hello, 123 World!";
String pattern = "\\d+";
Pattern regex = Pattern.compile(pattern);
Matcher matcher = regex.matcher(text);

ArrayList<String> matches = new ArrayList<>();
while (matcher.find()) {
    matches.add(matcher.group());
}
System.out.println(matches);</code></pre>
    </td>
</tr>

<!-- String Formatting (f-String Equivalent) -->
<tr>
    <td>
        <pre><code class="python"># f-string formatting in Python
name = "Alice"
age = 30
formatted = f"My name is {name} and I am {age} years old."
print(formatted)</code></pre>
    </td>
    <td>
        <pre><code class="java">// String formatting in Java
String name = "Alice";
int age = 30;
String formatted = String.format("My name is %s and I am %d years old.", name, age);
System.out.println(formatted);</code></pre>
    </td>
</tr>


<!-- Python Special Methods -->
<tr>
    <td>
        <pre><code class="python"># Special methods in Python
class MyClass:
    def __init__(self, value):
        self.value = value

    def __str__(self):
        return f"MyClass with value {self.value}"

    def __eq__(self, other):
        if isinstance(other, MyClass):
            return self.value == other.value
        return False

# Creating instances
obj1 = MyClass(42)
obj2 = MyClass(42)

# Using special methods
print(obj1)                # Calls __str__
is_equal = obj1 == obj2    # Calls __eq__</code></pre>
    </td>
    <td>
        <pre><code class="java">// Equivalent in Java (toString and equals)
class MyClass {
    private int value;

    public MyClass(int value) {
        this.value = value;
    }

    @Override
    public String toString() {
        return "MyClass with value " + value;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        MyClass myClass = (MyClass) obj;
        return value == myClass.value;
    }
}

// Creating instances
MyClass obj1 = new MyClass(42);
MyClass obj2 = new MyClass(42);

// Using methods
System.out.println(obj1);             // Calls toString
boolean isEqual = obj1.equals(obj2);  // Calls equals</code></pre>
    </td>
</tr>
<!-- Object Composition -->
<tr>
    <td>
        <pre><code class="python"># Object Composition in Python
class Engine:
    def start(self):
        return "Engine started"

class Car:
    def __init__(self, engine):
        self.engine = engine

    def drive(self):
        return self.engine.start() + " and driving"

engine = Engine()
car = Car(engine)
print(car.drive())</code></pre>
    </td>
    <td>
        <pre><code class="java">// Object Composition in Java
class Engine {
    public String start() {
        return "Engine started";
    }
}

class Car {
    private Engine engine;

    public Car(Engine engine) {
        this.engine = engine;
    }

    public String drive() {
        return engine.start() + " and driving";
    }
}

Engine engine = new Engine();
Car car = new Car(engine);
System.out.println(car.drive());</code></pre>
    </td>
</tr>
        <!-- Interfaces -->
        <tr>
            <td>
                <pre><code class="python">from abc import ABC, abstractmethod

class Animal(ABC):
    @abstractmethod
    def speak(self):
        pass

class Dog(Animal):
    def speak(self):
        return "Woof"</code></pre>
            </td>
            <td>
                <pre><code class="java">interface Animal {
    String speak();
}

class Dog implements Animal {
    @Override
    public String speak() {
        return "Woof";
    }
}</code></pre>
            </td>
        </tr>
        <!-- Abstract Classes -->
        <tr>
            <td>
                <pre><code class="python">from abc import ABC, abstractmethod

class Shape(ABC):
    @abstractmethod
    def area(self):
        pass

class Rectangle(Shape):
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def area(self):
        return self.width * self.height</code></pre>
            </td>
            <td>
                <pre><code class="java">abstract class Shape {
    abstract double area();
}

class Rectangle extends Shape {
    private double width, height;

    Rectangle(double width, double height) {
        this.width = width;
        this.height = height;
    }

    @Override
    public double area() {
        return width * height;
    }
}</code></pre>
            </td>
        </tr>
        <!-- Polymorphism -->
        <tr>
            <td>
                <pre><code class="python">class Animal:
    def speak(self):
        return "Some sound"

class Dog(Animal):
    def speak(self):
        return "Woof"

animals = [Animal(), Dog()]
for animal in animals:
    print(animal.speak())</code></pre>
            </td>
            <td>
                <pre><code class="java">class Animal {
    String speak() {
        return "Some sound";
    }
}

class Dog extends Animal {
    @Override
    String speak() {
        return "Woof";
    }
}

Animal[] animals = { new Animal(), new Dog() };
for (Animal animal : animals) {
    System.out.println(animal.speak());
}</code></pre>
            </td>
        </tr>
        <!-- Features in Python -->
        <tr>
            <td colspan="2"><b>Features in Python not in Java</b></td>
        </tr>
        <tr>
            <td colspan="2">
                <ul>
                    <li>Dynamic typing</li>
                    <li>List comprehensions</li>
                    <li>Duck typing</li>
                    <li>Built-in(s): slicing, defaultdict, etc.</li>
                    <li>Decorators</li>
                </ul>
            </td>
        </tr>
        <!-- Features in Java -->
        <tr>
            <td colspan="2"><b>Features in Java not in Python</b></td>
        </tr>
        <tr>
            <td colspan="2">
                <ul>
                    <li>Static typing</li>
                    <li>Generics</li>
                    <li>Checked exceptions</li>
                    <li>Concurrency utilities (e.g., Executors)</li>
                    <li>Annotations</li>
                </ul>
            </td>
        </tr>
    </table>
</body>
</html>

